{"FIO":"Киселев А.И.","Collection":"452225424",{"_id": {"$oid": "67c034b5af563521c9d5a18a"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c03746af563521c9d5a19b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c03761af563521c9d5a1a2"}, "rules": "Лабораторная1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "math", "rPart": ["[+-/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c58ce6af563521c9d5b777"}, "rules": "Лабораторная2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "+"]}, {"lPart": "constInteger", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ ]", "*", "[\"]", ")", "|", "(", "[']", "[ ]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "math", "rPart": ["[+-/*<>]"]}, {"lPart": "assignment", "rPart": ["[<]", "[-]"]}, {"lPart": "bracket", "rPart": ["[{}()\\[\\]]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67fba22a8558742cb4336077"}, "rules": "Лабораторная3", "data": {"rList": [{"lPart": "programm", "rPart": ["Operator", "+"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")", "\"other\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "+"]}, {"lPart": "constInteger", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["(", "id", "\"<-\"", "Expr", "\";\"", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "minus", ")", "?", "(", "id", "|", "constInteger", "|", "constDouble", "|", "constStr", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "minus", "rPart": ["\"-\""]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "unaryPostfix", "rPart": ["\"++\"", "|", "\"--\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "6808af9c8558742cb4338813"}, "rules": "Лабораторная4", "data": {"rList": [{"lPart": "programm", "rPart": ["Function", "+"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "OperatorBlock", "(", "ifFix", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "+"]}, {"lPart": "constInteger", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["(", "id", "\"<-\"", "Expr", "\";\"", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "minus", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "minus", "rPart": ["\"-\""]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "unaryPostfix", "rPart": ["\"++\"", "|", "\"--\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "InitOperator", "?", "\";\"", "Expr", "?", "\";\"", "InitOperator", "?", "\")\"", "OperatorBlock"]}, {"lPart": "InitOperator", "rPart": ["id", "(", "\"<-\"", "Expr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "(", "Operator", "*", ")", ")", "+", "(", "\"nooption\"", "(", "Operator", "*", ")", ")", "?", "\"end\""]}, {"lPart": "const", "rPart": ["constInteger", "|", "constDouble", "|", "constStr"]}, {"lPart": "Function", "rPart": ["id", "\"<-\"", "type", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "OperatorBlock", "*", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "ifFix", "rPart": ["\"other\"", "OperatorBlock"]}, {"lPart": "ifFix", "rPart": ["~", "\"other\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Петроченко И.А.","Collection":"524423214",{"_id": {"$oid": "68176f648558742cb433b2b6"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "681774278558742cb433b30d"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "681774318558742cb433b311"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "681776098558742cb433b32b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constfloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "conststr", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "constsym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6817880c8558742cb433b3c1"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-1]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constfloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "conststr", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "constsym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Селявский К.Д.","Collection":"445312445",{"_id": {"$oid": "67ac916fce6dd03692d0787a"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67b89a9ece6dd03692d08e7a"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bea74eaf563521c9d596f6"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["\"put\"", "(", "id", "|", "const", "|", "strConst", "|", "charConst", ")", "\"to\"", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d02131af563521c9d5d86f"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["\"put\"", "(", "id", "|", "const", "|", "strConst", "|", "charConst", ")", "\"to\"", "id", "\";\""]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "strConst", "|", "charConst", "|", "constReal"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"long\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Expr", "rPart": ["unary", "*", "BExpr", "EExpr", "?"]}, {"lPart": "BExpr", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "SignOfOperation", "Expr", ")", "|", "(", "logic", "Expr", ")", "|", "(", "compare", "Expr", ")"]}, {"lPart": "Prog", "rPart": ["(", "CompareOperation", "|", "AssignOperation", "|", "CycleOperation", ")", "+"]}, {"lPart": "CompareOperation", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Prog", "\"}\"", "(", "\"not\"", "\"{\"", "Prog", "\"}\"", ")", "?", "\";\""]}, {"lPart": "AssignOperation", "rPart": ["T", "?", "\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "CycleOperation", "rPart": ["\"exec\"", "\"{\"", "Prog", "\"}\"", "\"with\"", "\"(\"", "T", "?", "id", "\"from\"", "Const", "\"to\"", "Const", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2783e4635a960233ad7ed"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "delimetr", "rPart": ["[;:,]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f503de8558742cb43338ae"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["(", "Assigment", "|", "Break", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", "|", "CycleBreak", ")"]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Assigment", "rPart": ["\"put\"", "Expression", "\"to\"", "Type", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Operator", "\"with\"", "id", "\"from\"", "Constant", "\"to\"", "Constant", "(", "\"step\"", "Constant", ")", "?"]}, {"lPart": "CycleBreak", "rPart": ["\"exit;\""]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "(", "id", "ParamList", "?", ")", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const2", "|", "const8", "|", "const10", "|", "strConst", "|", "charConst", "|", "constReal"]}, {"lPart": "SwitchCase", "rPart": ["\"when\"", "Constant", "\"then\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"otherwise\"", "Operator"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binaryLogic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "id", "|", "Constant", ")"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f5653f8558742cb43340f7"}, "rules": "Тестовая", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["(", "Assigment", "|", "Break", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", ")"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expression", "\";\""]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Assigment", "rPart": ["\"put\"", "Expression", "\"to\"", "Type", "{toPFR(\"=\");}", "{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Cycle", "rPart": ["{ctlStk.push(++Count);toPFR(\"Label \"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator", ")", "{toPFR(\"Label0 \"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1 \"+ctlStk.pop()+\":\");}", "\"with\"", "id", "\"from\"", "ConstantNumber", "\"to\"", "{toPFR(\"from \"+this.currentLexem[1]); toPFR(\"to \" + this.currentLexem[1]);}", "ConstantNumber", "(", "\"step\"", "{ toPFR( \"step\"+ this.currentLexem[1]);}", "ConstantNumber", ")", "?", "CycleBreak", "?"]}, {"lPart": "CycleBreak", "rPart": ["\"exit;\""]}, {"lPart": "Constant", "rPart": ["ConstantNumber", "|", "strConst", "|", "charConst"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "ConstantNumber", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constReal"]}, {"lPart": "SwitchCase", "rPart": ["\"when\"", "Constant", "\"then\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"otherwise\"", "Operator"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binaryLogic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Expression", "rPart": ["{toPFR(\"Unary\"+ctlStk.pop());}", "Unary", "BeginExpression", "{ctlStk.push(this.currentLexem[1]);}", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "ParamList", "?"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "unaryMath", ")", "Expression", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpression", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar ctlStk=[];\nvar whileCnt=0;\nvar cycleStack = [];\nvar CycleCount = 0;\nfunction reboot() {\n cycleStack = [];\n Count = 0;\n}\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}{"_id": {"$oid": "681a0d948558742cb433c1d0"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["(", "Assigment", "|", "Break", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", "|", "CycleBreak", ")"]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Assigment", "rPart": ["\"put\"", "Expression", "\"to\"", "Type", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Cycle", "rPart": ["{ctlStk.push(++Count);toPFR(\"Label \"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator", ")", "{toPFR(\"Label0 \"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1 \"+ctlStk.pop()+\":\");}", "\"with\"", "id", "\"from\"", "ConstantNumber", "\"to\"", "{toPFR(\"from \"+this.currentLexem[1]); toPFR(\"to \" + this.currentLexem[1]);}", "ConstantNumber", "(", "\"step\"", "{ toPFR( \"step\"+ this.currentLexem[1]);}", "ConstantNumber", ")", "?", "CycleBreak", "?"]}, {"lPart": "CycleBreak", "rPart": ["\"exit;\""]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "(", "id", "ParamList", "?", ")", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const2", "|", "const8", "|", "const10", "|", "strConst", "|", "charConst", "|", "constReal"]}, {"lPart": "SwitchCase", "rPart": ["\"when\"", "Constant", "\"then\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"otherwise\"", "Operator"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binaryLogic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "id", "|", "Constant", ")"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "ConstantNumber", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constReal"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681a10368558742cb433c204"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["(", "Assigment", "|", "Break", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", ")"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expression", "\";\""]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Assigment", "rPart": ["\"put\"", "Expression", "\"to\"", "Type", "{toPFR(\"=\");}", "{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Cycle", "rPart": ["{ctlStk.push(++Count);toPFR(\"Label \"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator", ")", "{toPFR(\"Label0 \"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1 \"+ctlStk.pop()+\":\");}", "\"with\"", "id", "\"from\"", "ConstantNumber", "\"to\"", "{toPFR(\"from \"+this.currentLexem[1]); toPFR(\"to \" + this.currentLexem[1]);}", "ConstantNumber", "(", "\"step\"", "{ toPFR( \"step\"+ this.currentLexem[1]);}", "ConstantNumber", ")", "?", "CycleBreak", "?"]}, {"lPart": "CycleBreak", "rPart": ["\"exit;\""]}, {"lPart": "Constant", "rPart": ["ConstantNumber", "|", "strConst", "|", "charConst"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "ConstantNumber", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constReal"]}, {"lPart": "SwitchCase", "rPart": ["\"when\"", "Constant", "\"then\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"otherwise\"", "Operator"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binaryLogic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Expression", "rPart": ["{toPFR(\"Unary\"+ctlStk.pop());}", "Unary", "BeginExpression", "{ctlStk.push(this.currentLexem[1]);}", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "ParamList", "?"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "unaryMath", ")", "Expression", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpression", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar ctlStk=[];\nvar whileCnt=0;\nvar cycleStack = [];\nvar CycleCount = 0;\nfunction reboot() {\n cycleStack = [];\n Count = 0;\n}\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}},
{"FIO":"Лавриненко Г.О.","Collection":"515251142",{"_id": {"$oid": "67c50c05af563521c9d5b598"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+1", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c532c1af563521c9d5b617"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]"]}, {"lPart": "const", "rPart": ["[A-Za-z]", "[0-9]", "[A-Za-z]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const1", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const3", "rPart": ["[0-9]", "+", "(", "[\\+]", "+", "[0-9]", "+", ")", "[e]", "[+-]", "[0-9]", "+"]}, {"lPart": "const4", "rPart": ["(", "[']", "[-%)]", "?", "[']", ")"]}, {"lPart": "const5", "rPart": ["(", "[\"]", "[$#^]", "*", "[\"]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c53512af563521c9d5b635"}, "rules": "Лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]"]}, {"lPart": "const", "rPart": ["[A-Za-z]", "[0-9]", "+", "[A-Za-z]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const1", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*"]}, {"lPart": "const3", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "|", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "const4", "rPart": ["(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "const5", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "const6", "rPart": ["(", "[&]", "[&]", ")"]}, {"lPart": "const7", "rPart": ["(", "[']", "[A-Za-z]", "*", "[']", ")"]}, {"lPart": "const7", "rPart": ["[,;]", "?"]}, {"lPart": "assignment", "rPart": ["put", "\\s+([A-Za-z0-9]+)\\s+to\\s+([A-Za-z]+)\\s*"]}, {"lPart": "cond", "rPart": ["\"when\"", "space", "val", "space", "block", "[space \"other\" space block]", ""]}, {"lPart": "val", "rPart": ["[A-Za-z0-9]", "+"]}, {"lPart": "block", "rPart": ["[A-Za-z0-9]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e628f8558742cb433a169"}, "rules": "Лаб2", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[e]", "[+-]", "?", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "math", "rPart": ["[+-*/%]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "def", "rPart": ["operators", "+"]}, {"lPart": "operators", "rPart": ["(", "assign", "|", "cond", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "constAll", ")", "comparison", "(", "id", "|", "constAll", ")"]}, {"lPart": "constAll", "rPart": ["const10", "|", "constStr", "|", "constChar", "|", "constExp"]}, {"lPart": "condElse", "rPart": ["\"other\"", "(", "block", "|", "operators", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"other\""]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "cond", "rPart": ["\"when\"", "logExpr", "(", "block", "|", "operators", ")", "condElse"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e921d8558742cb433a39e"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[e]", "[+-]", "?", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "math", "rPart": ["[+-*/%]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "def", "rPart": ["operators", "+"]}, {"lPart": "operators", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "\"retire\"", "\";\"", "|", "\"break\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "constAll", ")", "comparison", "(", "id", "|", "constAll", ")"]}, {"lPart": "constAll", "rPart": ["const10", "|", "constStr", "|", "constChar", "|", "constExp"]}, {"lPart": "condElse", "rPart": ["\"other\"", "(", "block", "|", "operators", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"other\""]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "cond", "rPart": ["\"when\"", "logExpr", "(", "block", "|", "operators", ")", "condElse"]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operators", ")", "\"until\"", "\"(\"", "logExpr", "\")\""]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "constAll", "|", "\"false\"", ")", "\")\"", "block", "?", ")", "+", "\"end\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e979c8558742cb433a3b2"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[e]", "[+-]", "?", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "math", "rPart": ["[+-*/%]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "def", "rPart": ["func", "+"]}, {"lPart": "operators", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "\"retire\"", "\";\"", "|", "\"break\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "constAll", ")", "comparison", "(", "id", "|", "constAll", ")"]}, {"lPart": "constAll", "rPart": ["const10", "|", "constStr", "|", "constChar", "|", "constExp"]}, {"lPart": "condElse", "rPart": ["\"other\"", "(", "block", "|", "operators", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"other\""]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "*", "\"}\""]}, {"lPart": "cond", "rPart": ["\"when\"", "logExpr", "(", "block", "|", "operators", ")", "condElse"]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operators", ")", "\"until\"", "\"(\"", "logExpr", "\")\""]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "constAll", "|", "\"false\"", ")", "\")\"", "block", "?", ")", "+", "\"end\""]}, {"lPart": "func", "rPart": ["type", "id", "\"(\"", "argList", "?", "\")\"", "block"]}, {"lPart": "type", "rPart": ["\"const10\"", "|", "\"constStr\"", "|", "\"constChar\"", "|", "\"constExp\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Тараторкин М.И.","Collection":"345424113",{"_id": {"$oid": "67ad84f8ce6dd03692d07918"}, "rules": "Laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67aeeb37ce6dd03692d07bf4"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67cef1d4af563521c9d5d4a5"}, "rules": "Laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "(", "id", "|", "int10", "|", "real", "|", "int2", "|", "int8", "|", "char", "|", "string", ")", "\"to\"", "id", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67deaff04635a960233ac420"}, "rules": "Laba3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int2", "|", "int8", "|", "real", "|", "int10", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f3f7368558742cb4333640"}, "rules": "Laba4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int2", "|", "int8", "|", "real", "|", "int10", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id"]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Conditional", "rPart": ["\"at\"", "Expression", "\"do\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"or\"", "\"do\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"or\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "\";\"", "Expression", "?", "\";\"", "Assignment", "?", "\")\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Operator"]}, {"lPart": "Break", "rPart": ["\"quit\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f607788558742cb43342b0"}, "rules": "Laba5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Assignment", "|", "Break", "|", "Return", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Declaration", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression", "?"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Conditional", "rPart": ["\"at\"", "Expression", "\"do\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"or\"", "\"do\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"or\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "\";\"", "Expression", "?", "\";\"", "Assignment", "?", "\")\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Operator", "*"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "(", "id", "ParamList", "?", ")", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int2", "|", "int8", "|", "real", "|", "int10", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6817900e8558742cb433b414"}, "rules": "Laba6", "data": {"rList": [{"lPart": "Program", "rPart": ["{resetAll();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Assignment", "|", "Break", "|", "Return", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Declaration", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"=\");}"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression", "?"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Conditional", "rPart": ["\"at\"", "Expression", "\"do\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"or\"", "\"do\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"or\""]}, {"lPart": "Cycle", "rPart": ["{cycleStack.push(++cycleCount);}", "\"cycle\"", "\"(\"", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack)+\":\");}", "\";\"", "(", "Expression", "{toPFR(\"CycleEnd_\"+peek(cycleStack));toPFR(\"JumpOnFalse\");toPFR(\"CycleBody_\"+peek(cycleStack));toPFR(\"Jump\");}", ")", "?", "\";\"", "{toPFR(\"CycleAssignment_\"+peek(cycleStack)+\":\");}", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack)); toPFR(\"Jump\");}", "\")\"", "{toPFR(\"CycleBody_\"+peek(cycleStack)+\":\");}", "Operator", "{toPFR(\"CycleAssignment_\"+peek(cycleStack));toPFR(\"Jump\");toPFR(\"CycleEnd_\"+cycleStack.pop()+\":\");}"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Operator", "*"]}, {"lPart": "Expression", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "Unary", "BeginExpression", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExpression"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "ParamList", "?"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "unaryMath", ")", "Expression", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpression", "rPart": []}, {"lPart": "Constant", "rPart": ["int2", "|", "int8", "|", "real", "|", "int10", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=!<>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере,\n// восходящий выполняет действия не так, как хотелось бы.\n//Пример заимствован из Sample6 и улучшен\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar unaryStack, opStack, cycleStack, cycleCount;\nfunction resetAll() {\n unaryStack = [];\n opStack = [];\n cycleStack = [];\n cycleCount = 0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n switch (s) {\n  case \"(\": \n   return 0;\n  case \"+\":\n  case \"-\":\n  case \"<\":\n  case \">\":\n  case \"==\":\n  case \"!=\":\n  case \"<=\":\n  case \">=\":\n  case \"||\":\n   return 1;\n  case \"*\": \n  case \"/\":\n  case \"&&\":\n   return 2;\n  }\n}"}}{"_id": {"$oid": "6818fc358558742cb433bc49"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{resetAll();}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "id", "|", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if (opStk.length > 0) toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk, ctlStk, whileCnt;\nfunction resetAll() {\nopStk = [];\nctlStk = [];\nwhileCnt = 0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}},
{"FIO":"Борисов В.В.","Collection":"541455331",{"_id": {"$oid": "67c0ace9af563521c9d5a553"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 8000, "assist": 1}}{"_id": {"$oid": "67c0b857af563521c9d5a587"}, "rules": "Л1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Zа-яА-Я]", "[0-9]", "{0,3}", "[a-zA-Zа-яА-Я]"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "sign", "rPart": ["[-+*/<>=]", "[=]", "?"]}, {"lPart": "sign", "rPart": ["[!]", "[=]"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[x]", "[A-F0-9]", "{2}", "[']"]}, {"lPart": "logicSign", "rPart": ["[|&~]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6b859e0b22203e7cbff64"}, "rules": "Л2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "operationBinary", "rPart": ["(", "[+*/><]", "[=]", "?", ")", "|", "(", "[!=]", "[==]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[*]", "[*]", ")"]}, {"lPart": "constbin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constoct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constnum", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constnum", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "conststring", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr\\\\]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "['ntr\\\\]", "[']"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e9e2884635a960233afd80"}, "rules": "Л3", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorSwitch", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"let\"", "id", "\"on\"", "Expr", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "(", "Operator", ")", "+", ")", "(", "\"or\"", "\"do\"", "(", "Operator", ")", "+", ")", "?"]}, {"lPart": "OperatorCycle", "rPart": ["(", "\"loop\"", "(", "Operator", "(", "\"retire\"", "end", ")", "*", ")", "+", "\"until\"", "Expr", ")"]}, {"lPart": "OperatorSwitch", "rPart": ["(", "\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "(", "Operator", ")", "*", "(", "\"fin\"", "end", ")", "?", ")", "+", "(", "\"nooption\"", "(", "Operator", ")", "*", ")", "?", "\"end\"", ")"]}, {"lPart": "OperatorFunc", "rPart": ["(", "\"let\"", "id", "\"on\"", "(", "\"(\"", "Type", "\")\"", ")", "?", "\"(\"", "(", "(", "(", "\"(\"", "Type", "\")\"", ")", "?", "id", ")", "(", "\",\"", "(", "\"(\"", "Type", "\")\"", ")", "?", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", ")", "+", "\"}\"", "end", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "sign", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Term", "rPart": ["id"]}, {"lPart": "Term", "rPart": ["const"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr\\\\]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[]", ")", "|", "(", "[\\\\]", "(", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", "|", "(", "['ntr\\\\]", ")", ")", ")", ")", "[']"]}, {"lPart": "sign", "rPart": ["(", "[+*/]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "not", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea25cf4635a960233afff9"}, "rules": "Л31", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["(", "\"let\"", "id", "\"on\"", "\"(\"", "(", "(", "id", ")", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorSwitch", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"let\"", "id", "\"on\"", "(", "\"(\"", "Type", "\")\"", ")", "?", "Expr", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")", "(", "\"or\"", "\"do\"", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")", "?"]}, {"lPart": "OperatorCycle", "rPart": ["(", "\"loop\"", "\"{\"", "(", "Operator", "(", "\"retire\"", "end", ")", "*", ")", "+", "\"}\"", "\"until\"", "Expr", ")"]}, {"lPart": "OperatorSwitch", "rPart": ["(", "\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "\"{\"", "(", "Operator", ")", "*", "(", "\"fin\"", "end", ")", "?", "\"}\"", ")", "+", "(", "\"nooption\"", "\"{\"", "(", "Operator", ")", "*", "\"}\"", ")", "?", "\"end\"", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "sign", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Term", "rPart": ["id"]}, {"lPart": "Term", "rPart": ["const"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr\\\\]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[]", ")", "|", "(", "[\\\\]", "(", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", "|", "(", "['ntr\\\\]", ")", ")", ")", ")", "[']"]}, {"lPart": "sign", "rPart": ["(", "[+*/]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "not", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fbab448558742cb4336143"}, "rules": "Л4", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["(", "\"let\"", "id", "\"on\"", "ArgList", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")"]}, {"lPart": "ArgList", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorSwitch", "|", "retire", "|", "return", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"let\"", "id", "\"on\"", "(", "\"cast\"", "\"<\"", "Type", "\">\"", ")", "?", "Expr", "\";\"", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "OB", "Else", ")"]}, {"lPart": "OperatorCycle", "rPart": ["(", "\"loop\"", "OB", "\"until\"", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "OperatorSwitch", "rPart": ["(", "\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "OB", "*", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "OB", "*", ")", "?", "\"end\"", ")"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "return", "rPart": ["\"return\"", "(", "Expr", ")", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["Unar", "BegExpr", "AddPart"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Unar", "rPart": ["(", "\"!\"", "|", "\"-\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr\\\\]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[]", ")", "|", "(", "[\\\\]", "(", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", "|", "(", "['ntr\\\\]", ")", ")", ")", ")", "[']"]}, {"lPart": "logic", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cf3298558742cb4339c76"}, "rules": "Л5", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["(", "\"let\"", "id", "\"on\"", "ArgList", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")"]}, {"lPart": "ArgList", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorSwitch", "|", "retire", "|", "return", "|", "fin", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"let\"", "id", "\"on\"", "cast", "Expr", "\";\"", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "OB", "Else", ")"]}, {"lPart": "OperatorCycle", "rPart": ["(", "\"loop\"", "OB", "\"until\"", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "OperatorSwitch", "rPart": ["(", "\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "OB", "*", ")", "+", "(", "\"nooption\"", "OB", "*", ")", "?", "\"end\"", ")"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "return", "rPart": ["\"return\"", "(", "Expr", ")", "?", "\";\""]}, {"lPart": "cast", "rPart": ["(", "\"cast\"", "\"(\"", "Type", "\")\"", ")", "?"]}, {"lPart": "Expr", "rPart": ["Unar", "BegExpr", "AddPart"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}, {"lPart": "Unar", "rPart": ["(", "\"!\"", "|", "\"-\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", "|", "\"%\"", ")", "BegExpr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr\\\\]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[]", ")", "|", "(", "[\\\\]", "(", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", "|", "(", "['ntr\\\\]", ")", ")", ")", ")", "[']"]}, {"lPart": "logic", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "fin", "rPart": ["\"fin\"", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Кулижников Т.В.","Collection":"554225352",{"_id": {"$oid": "67c4051baf563521c9d5adf7"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c4065baf563521c9d5ae06"}, "rules": "Пример1тест", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "{,1}", "[0-9]", "{,3}", "[a-zA-Z]", "{,1}"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "nextLine", "rPart": ["[\\n]", "+"]}, {"lPart": "sign", "rPart": ["[+*/-]", "+"]}, {"lPart": "Condition", "rPart": ["\"when\"", "Expr", "BegBlock", "EndBlock", "(", "\"other\"", "BegBlock", "EndBlock", ")", "?"]}, {"lPart": "Cycles", "rPart": ["\"cycle(\"", "Operator", "\";\"", "Expr", "\";\"", "Operator", "\")\"", "BegBlock", "(", "\"quit;\"", ")", "?", "EndBlock"]}, {"lPart": "Const", "rPart": ["[01]", "{1,}"]}, {"lPart": "Const", "rPart": ["[0123]", "{1,}"]}, {"lPart": "Const", "rPart": ["[a-z]"]}, {"lPart": "Const", "rPart": ["[!-\\\\]"]}, {"lPart": "Expr", "rPart": ["Term", "(", "CalcPart", ")", "?"]}, {"lPart": "CalcPart", "rPart": ["sign", "Term"]}, {"lPart": "Term", "rPart": ["id", "|", "Const"]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Choice", "rPart": ["\"choice\"", "Expr", "\"option\"", "Const", "\":\"", "Operator", "(", "\"fin;\"", ")", "?", "(", "\"option\"", ")", "?", "(", "\"nooption\"", "Operator", ")", "?", "\"end\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"double\""]}, {"lPart": "Func", "rPart": ["(", "Type", ")", "?", "\"(\"", "(", "Arg", ")", "?", "\")\"", "BegBlock", "EndBlock"]}, {"lPart": "Arg", "rPart": ["(", "Type", ")", "?", "id"]}, {"lPart": "BegBlock", "rPart": ["\"{\""]}, {"lPart": "EndBlock", "rPart": ["\"}\""]}, {"lPart": "Const", "rPart": ["[0-9]", "{1,}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f0d8baa600182c7517b4a6"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "Const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "Const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Const", "rPart": ["[']", "[]", "{1,1}", "[']"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "{1,}"]}, {"lPart": "expr", "rPart": ["id", "\":=\"", "Const"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f0d911a600182c7517b4a8"}, "rules": "Лаба3", "data": {"rList": [{"lPart": "Func", "rPart": ["(", "Type", ")", "?", "\"(\"", "(", "Arg", ")", "*", "\")\"", "Block"]}, {"lPart": "BegBlock", "rPart": ["\"{\""]}, {"lPart": "body", "rPart": ["(", "Expr", "\";\"", "|", "Condition", "|", "Cycles", "|", "Choice", "|", "\"quit;\"", "|", "\"fin;\"", "|", "\"return\"", ")", "+"]}, {"lPart": "EndBlock", "rPart": ["\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "Arg", "rPart": ["(", "Type", ")", "?", "id"]}, {"lPart": "Expr", "rPart": ["id", "\":=\"", "Term", "(", "calcExpr", "Term", ")", "*"]}, {"lPart": "Condition", "rPart": ["\"when\"", "id", "Block", "(", "\"other\"", "Block", ")", "?"]}, {"lPart": "Cycles", "rPart": ["\"cycle(\"", "Expr", "\";\"", "id", "equation", "Term", "\";\"", "Expr", "\")\"", "Block"]}, {"lPart": "Choice", "rPart": ["\"choice\"", "id", "(", "\"option\"", "Const", "\":\"", "Block", ")", "+", "(", "\"nooption\"", "Block", ")", "?", "\"end\""]}, {"lPart": "Term", "rPart": ["id", "|", "Const"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "equation", "rPart": ["[<>=]"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "Const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "Const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Const", "rPart": ["[']", "[]", "*", "[']"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "calcExpr", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "{1,}"]}, {"lPart": "Block", "rPart": ["BegBlock", "body", "EndBlock"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fcecee8558742cb4336a17"}, "rules": "Лаба4", "data": {"rList": [{"lPart": "Func", "rPart": ["(", "Type", ")", "?", "\"(\"", "(", "Arg", ")", "*", "\")\"", "Block"]}, {"lPart": "BegBlock", "rPart": ["\"{\""]}, {"lPart": "body", "rPart": ["(", "Expr", "\";\"", "|", "Condition", "|", "Cycles", "|", "Choice", "|", "\"quit;\"", "|", "\"fin;\"", "|", "\"return\"", ")", "+"]}, {"lPart": "EndBlock", "rPart": ["\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "Arg", "rPart": ["(", "Type", ")", "?", "id"]}, {"lPart": "Expr", "rPart": ["id", "\":=\"", "Term", "(", "calcExpr", "Term", ")", "*"]}, {"lPart": "Condition", "rPart": ["\"when\"", "id", "Block", "(", "\"other\"", "Block", ")", "?"]}, {"lPart": "Cycles", "rPart": ["\"cycle(\"", "Expr", "\";\"", "id", "equation", "Term", "\";\"", "Expr", "\")\"", "Block"]}, {"lPart": "Choice", "rPart": ["\"choice\"", "id", "(", "\"option\"", "Const", "\":\"", "Block", ")", "+", "(", "\"nooption\"", "Block", ")", "?", "\"end\""]}, {"lPart": "Term", "rPart": ["id", "|", "Const"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "equation", "rPart": ["[<>=]"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "Const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "Const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Const", "rPart": ["[']", "[]", "*", "[']"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "calcExpr", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "{1,}"]}, {"lPart": "Block", "rPart": ["BegBlock", "body", "EndBlock"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680f2fb88558742cb433a5ff"}, "rules": "Лаба5", "data": {"rList": [{"lPart": "Func", "rPart": ["id", "\":=\"", "(", "Type", ")", "?", "\"(\"", "Arg", "?", "\")\"", "Block", "\";\""]}, {"lPart": "BegBlock", "rPart": ["\"{\""]}, {"lPart": "body", "rPart": ["(", "Expr", "\";\"", "|", "Condition", "|", "Cycles", "|", "Choice", "|", "\"quit\"", "\";\"", "|", "\"fin\"", "\";\"", "|", "\"return\"", "Term", "\";\"", ")"]}, {"lPart": "EndBlock", "rPart": ["\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "Arg", "rPart": ["(", "Type", ")", "?", "id", "(", "\",\"", "(", "Type", ")", "?", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["id", "\":=\"", "Term", "(", "calcExpr", "Term", ")", "*"]}, {"lPart": "Condition", "rPart": ["\"when\"", "id", "Block", "(", "\"other\"", "Block", ")", "?"]}, {"lPart": "Cycles", "rPart": ["\"cycle(\"", "Expr", "\";\"", "id", "equation", "Term", "\";\"", "Expr", "\")\"", "Block"]}, {"lPart": "Choice", "rPart": ["\"choice\"", "id", "(", "\"option\"", "Const", "\":\"", "po", ")", "+", "(", "\"nooption\"", "po", ")", "?", "\"end\""]}, {"lPart": "Term", "rPart": ["id", "|", "Const"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "equation", "rPart": ["[<>=]"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "Const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "Const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Const", "rPart": ["[']", "[]", "*", "[']"]}, {"lPart": "Const", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "calcExpr", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "{1,}", "[\\n]"]}, {"lPart": "Block", "rPart": ["(", "BegBlock", "body", "+", "EndBlock", ")", "|", "(", "body", ")"]}, {"lPart": "po", "rPart": ["(", "body", ")", "*", "|", "(", "Block", ")", "*"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Зиновьев А.А.","Collection":"312535455",{"_id": {"$oid": "67ac9fa2ce6dd03692d078a4"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b8a333ce6dd03692d08ec1"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bdbe2caf563521c9d592b0"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "*", ")"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd0008af563521c9d5c9df"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "*", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operationMath", "rPart": ["[-+*/%]"]}, {"lPart": "operationComparison", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "operationLogical", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "assign", "rPart": ["id", "\"<–\"", "(", "id", "|", "const10", "|", "constReal", "|", "constExp", "|", "constChar", ")", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e22ac54635a960233ad619"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "*", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/%]"]}, {"lPart": "operationComparison", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "operationLogical", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "operationUnary"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "operationLogical", "|", "operationComparison"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expr", ")", "?"]}, {"lPart": "Assignment", "rPart": ["id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "Constant", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "constChar"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f177d2a600182c7517b7f6"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operators", ")", "OperatorElse1", "OperatorElse2"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "Operators", ")"]}, {"lPart": "Operator", "rPart": ["\"leаve\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expression", "(", "\"option\"", "Constants", "\":\"", "Operators", ")", "+", "(", "\"nooption\"", "\":\"", "(", "Operators", ")", ")", "?", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "OperatorElse1", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "Operators"]}, {"lPart": "OperatorElse1", "rPart": ["~", "\"?:\""]}, {"lPart": "OperatorElse2", "rPart": ["\":\"", "Operators"]}, {"lPart": "OperatorElse2", "rPart": ["~", "\":\""]}, {"lPart": "Constants", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "constChar"]}, {"lPart": "BeginExpression", "rPart": ["(", "unOperationMath", "|", "unOperationLogic", ")", "?", "(", "id", "|", "Constants", ")"]}, {"lPart": "BeginExpression", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "EndExpression", "rPart": ["(", "(", "binOperation", "|", "unOperationMath", ")", "Expression", ")", "?"]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "*", ")"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "binOperationMath", "rPart": ["[*/%]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68081de68558742cb4338581"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operator", ")", "(", "OperatorElse1", ")", "(", "OperatorElse2", ")"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["\"leаve\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expression", "(", "\"option\"", "Constants", "\":\"", "Operator", "*", ")", "+", "(", "\"nooption\"", "\":\"", "(", "Operator", "*", ")", ")", "?", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"call\"", "id", "FunctionCall", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "OperatorElse1", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "Operator"]}, {"lPart": "OperatorElse1", "rPart": ["~", "\"?:\""]}, {"lPart": "OperatorElse2", "rPart": ["\":\"", "Operator"]}, {"lPart": "OperatorElse2", "rPart": ["~", "\":\""]}, {"lPart": "Constants", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "constChar"]}, {"lPart": "BeginExpression", "rPart": ["(", "unOperationMath", "|", "unOperationLogic", ")", "?", "(", "id", "|", "Constants", ")"]}, {"lPart": "BeginExpression", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "EndExpression", "rPart": ["(", "(", "binOperation", "|", "unOperationMath", ")", "Expression", ")", "?"]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "*", ")"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "binOperationMath", "rPart": ["[*/%]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6819fc358558742cb433c0f2"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"<-\"", "Expression", "{toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operator", ")", "(", "OperatorElse1", ")", "(", "OperatorElse2", ")"]}, {"lPart": "Operator", "rPart": ["{whileStack.push(++whileCount);}", "\"while\"", "\"(\"", "{toPFR(\"WhileBegin_\" + peek(whileStack) + \":\");}", "Expression", "{toPFR(\"WhileEnd_\" + peek(whileStack)); toPFR(\"JmpF\");}", "\")\"", "\"do\"", "{toPFR(\"WhileBody_\" + peek(whileStack) + \":\");}", "(", "Operator", ")", "{toPFR(\"WhileBegin_\" + peek(whileStack)); toPFR(\"Jmp\");}", "{toPFR(\"WhileEnd_\" + whileStack.pop() + \":\");}"]}, {"lPart": "Operator", "rPart": ["\"leаve\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expression", "(", "\"option\"", "Constants", "\":\"", "Operator", "*", ")", "+", "(", "\"nooption\"", "\":\"", "(", "Operator", "*", ")", ")", "?", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"call\"", "id", "FunctionCall", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Expression", "rPart": ["{unStack.push(this.currentLexem[1]);}", "unOperation", "BeginExpression", "{toPFR(\"unOperation\"+unStack.pop());}", "EndExpression"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "FunctionCall", "?"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constants"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "binOperation", "|", "unOperationMath", ")", "Expression", "{if(opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpression", "rPart": []}, {"lPart": "unOperation", "rPart": ["unOperationMath", "|", "unOperationLogic"]}, {"lPart": "OperatorElse1", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "Operator"]}, {"lPart": "OperatorElse1", "rPart": ["~", "\"?:\""]}, {"lPart": "OperatorElse2", "rPart": ["\":\"", "Operator"]}, {"lPart": "OperatorElse2", "rPart": ["~", "\":\""]}, {"lPart": "Constants", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "constChar"]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "*", ")"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binOperationMath", "rPart": ["[*/%]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord=true;}"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\n//var opStk = [];\n//var ctlStk=[];\n//var whileCnt=0;\n\nvar unStack, opStack, whileStack, whileCount;\nfunction reboot() {\n whileCount = 0;\n whileStack = [];\n unStack = [];\n opStack = [];\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \">\") return 10;\n if(s == \">=\") return 10;\n if(s == \"<\") return 10;\n if(s == \"<=\") return 10;\n if(s == \"==\") return 10;\n if(s == \"!=\") return 10;\n if(s == \"||\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n if(s == \"&&\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Якимов Е.В.","Collection":"454311511",{"_id": {"$oid": "67c0270baf563521c9d5a15c"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c02aa2af563521c9d5a175"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[ -&(-~]", "?", ")", "[']", ")", "|", "(", "[\\\"]", "(", "[ !#-~]", "*", ")", "[\\\"]", ")"]}, {"lPart": "signOfAriphmeticOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d5af8fe0b22203e7cbfb5d"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "arithmeticSign", "rPart": ["[-+*/<>]"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "functionWord", "rPart": ["[a-z]", "+"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e8e05b4635a960233af5c2"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"@\"", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "Else", "?"]}, {"lPart": "Else", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Program", "rPart": ["(", "Operator", "|", "Expr", ")", "+"]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["(", "\"exit\"", "|", "\"break\"", ")", "delimiter"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constChar", "|", "constStr"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "\"{\"", "(", "\"case\"", "\"(\"", "Const", "\")\"", "\":\"", "Operator", "+", ")", "+", "(", "\"fcase\"", "\"(\"", "\"false\"", "\")\"", "\":\"", "Operator", "+", ")", "?", "\"}\"", "\"end\"", "delimiter"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb7ed78558742cb4335ebf"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["(", "[+-*/<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "delimiter"]}, {"lPart": "EndExpr", "rPart": ["sign", "Expr"]}, {"lPart": "Operator", "rPart": ["\"@\"", "type", "?", "id", "assign", "Expr", "delimiter"]}, {"lPart": "OperatorOrBlock", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "OperatorOrBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"not\"", "OperatorOrBlock"]}, {"lPart": "Else", "rPart": ["~", "\"not\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "OperatorOrBlock", "\"with\"", "type", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "\"{\"", "(", "\"case\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"fcase\"", "\"false\"", "\":\"", "Operator", "+", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "delimiter"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "type", "?", "id", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680c9c3a8558742cb4339910"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["(", "[+-*/<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "delimiter"]}, {"lPart": "EndExpr", "rPart": ["sign", "Expr"]}, {"lPart": "Operator", "rPart": ["\"@\"", "type", "?", "id", "assign", "Expr", "delimiter"]}, {"lPart": "OperatorOrBlock", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "OperatorOrBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"not\"", "OperatorOrBlock"]}, {"lPart": "Else", "rPart": ["~", "\"not\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "OperatorOrBlock", "\"with\"", "type", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "\"{\"", "(", "\"case\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"fcase\"", "\"false\"", "\":\"", "Operator", "+", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "delimiter"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "type", "?", "id", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cbbb98558742cb4339a2d"}, "rules": "lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["(", "[+-*/<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "{toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "sign", "|", "\"&&\"", "|", "\"||\"", "|", "\"!\"", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Operator", "rPart": ["type", "?", "{toPFR(this.currentLexem[1]);}", "id", "assign", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\":=\");}", "delimiter"]}, {"lPart": "OperatorOrBlock", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "OperatorOrBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"not\"", "OperatorOrBlock"]}, {"lPart": "Else", "rPart": ["~", "\"not\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "OperatorOrBlock", "\"with\"", "type", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "\"{\"", "(", "\"case\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"fcase\"", "\"false\"", "\":\"", "Operator", "+", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "delimiter"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "type", "?", "id", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}},
{"FIO":"Доржиев Т.Б.","Collection":"354512552",{"_id": {"$oid": "67ebc5cea600182c7517a98d"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67ebc61ca600182c7517a98f"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constTet", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChr", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "operationSign", "rPart": ["[-+/*]"]}, {"lPart": "assignSign", "rPart": ["[:]", "[=]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f4ee568558742cb43337e1"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constTet", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChr", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "operationSign", "rPart": ["[-+/*%&|^]", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "assignSign", "rPart": ["[:]", "[=]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "logicSign", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "equalitySign", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "signs", "rPart": ["operationSign", "|", "logicSign", "|", "equalitySign"]}, {"lPart": "const", "rPart": ["constBin", "|", "constTet", "|", "constDec", "|", "constReal", "|", "constChr", "|", "constStr"]}, {"lPart": "type", "rPart": ["\"bin\"", "|", "\"tet\"", "|", "\"dec\"", "|", "\"real\"", "|", "\"chr\"", "|", "\"str\""]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "assignSign", "expr", "delimiter"]}, {"lPart": "body", "rPart": ["\"{\"", "(", "assign", "|", "expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "body", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "body", "(", "condElseIf", ")", "*", "(", "condElse", ")", "?"]}, {"lPart": "condElseIf", "rPart": ["\"?:\"", "\"(\"", "expr", "\")\"", "body"]}, {"lPart": "condElse", "rPart": ["\":\"", "body"]}, {"lPart": "loop", "rPart": ["\"exec\"", "body", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "(", "\"exit\"", "delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "(", "switchBody", ")", "+", "(", "\"otherwise\"", "body", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "body", "(", "\"exit\"", "delimiter", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", ")", "*", "\")\"", "\"{\"", "body", "\"}\"", "\"->\"", "id"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680939f28558742cb4338e02"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constTet", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChr", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "operationSign", "rPart": ["[-+/*%&|^]", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "assignSign", "rPart": ["[:]", "[=]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "logicSign", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "equalitySign", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "signs", "rPart": ["operationSign", "|", "logicSign", "|", "equalitySign"]}, {"lPart": "const", "rPart": ["constBin", "|", "constTet", "|", "constDec", "|", "constReal", "|", "constChr", "|", "constStr"]}, {"lPart": "type", "rPart": ["\"bin\"", "|", "\"tet\"", "|", "\"dec\"", "|", "\"real\"", "|", "\"chr\"", "|", "\"str\""]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "assignSign", "expr", "delimiter"]}, {"lPart": "body", "rPart": ["\"{\"", "(", "assign", "|", "expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "body", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "body", "(", "condElseIf", ")", "*", "(", "condElse", ")", "?"]}, {"lPart": "condElseIf", "rPart": ["\"?:\"", "\"(\"", "expr", "\")\"", "body"]}, {"lPart": "condElse", "rPart": ["\":\"", "body"]}, {"lPart": "loop", "rPart": ["\"exec\"", "body", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "(", "\"exit\"", "delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "(", "switchBody", ")", "+", "(", "\"otherwise\"", "body", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "body", "(", "\"exit\"", "delimiter", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", ")", "*", "\")\"", "\"{\"", "body", "\"}\"", "\"->\"", "id"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Кадун В.Д.","Collection":"311321241",{"_id": {"$oid": "67bc4db0af563521c9d58dee"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67cea9c7af563521c9d5d163"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "natural", "rPart": ["[\\-]", "?", "[0-9]", "+"]}, {"lPart": "double", "rPart": ["[\\-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exponential", "rPart": ["[\\-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[\\-+]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "math", "rPart": ["[+\\-*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "comp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}, {"lPart": "commentary", "rPart": ["[/]", "(", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord = true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6817aee28558742cb433b4fb"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "natural", "rPart": ["[0-9]", "+"]}, {"lPart": "double", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exponential", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[\\-+]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "math", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "comp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "commentary", "rPart": ["[/]", "(", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord = true;}"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "binunar", "rPart": ["[\\-]"]}], "extension": "var ignoreLastWord;\nvar tokens = [];"}}{"_id": {"$oid": "6819de468558742cb433bf46"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "natural", "rPart": ["[0-9]", "+"]}, {"lPart": "double", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exponential", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[\\-+]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "[!<>]", "[=]"]}, {"lPart": "commentary", "rPart": ["[/]", "(", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord = true;}"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "binunar", "rPart": ["[\\-]"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "const", "rPart": ["(", "natural", "|", "double", "|", "exponential", "|", "char", ")"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "unar", "|", "binunar", "|", "logic", "|", "binar", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["(", "binunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delim"]}, {"lPart": "operator", "rPart": ["\"in\"", "Expr", "\"then\"", "(", "operators", "|", "operator", ")", "endpart"]}, {"lPart": "endpart", "rPart": ["~", "\"not\""]}, {"lPart": "endpart", "rPart": ["\"not\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "delim", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "delim"]}, {"lPart": "operator", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "operators", "(", "\"break\"", "delim", ")", "?", ")", "+", "(", "\"end\"", "delim", ")"]}], "extension": "var ignoreLastWord;\nvar tokens = [];"}}{"_id": {"$oid": "681a47da8558742cb433c59c"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operators", "|", "function", ")", "+"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "type", ")", "operators"]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delim"]}, {"lPart": "operator", "rPart": ["\"in\"", "Expr", "\"then\"", "(", "operators", "|", "operator", ")", "endpart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "delim", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "delim"]}, {"lPart": "operator", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "operators", "(", "\"break\"", "delim", ")", "?", ")", "+", "(", "\"end\"", "delim", ")"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "delim"]}, {"lPart": "ArgList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["(", "\"natural\"", "|", "\"double\"", "|", "\"exponential\"", "|", "\"char\"", ")"]}, {"lPart": "Expr", "rPart": ["(", "binunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endpart", "rPart": ["~", "\"not\""]}, {"lPart": "endpart", "rPart": ["\"not\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "unar", "|", "binunar", "|", "logic", "|", "binar", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["(", "natural", "|", "double", "|", "exponential", "|", "char", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "binunar", "rPart": ["[\\-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "natural", "rPart": ["[0-9]", "+"]}, {"lPart": "double", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exponential", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[\\-+]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "[!<>]", "[=]"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "commentary", "rPart": ["[/]", "(", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord = true;}"]}], "extension": "var ignoreLastWord;\nvar tokens = [];"}}},
{"FIO":"Липатов Н.А.","Collection":"343434444",{"_id": {"$oid": "67c0425caf563521c9d5a1cc"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c04eadaf563521c9d5a299"}, "rules": "test1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "sign", "rPart": ["[-+*/<>=]", "[=]", "?"]}, {"lPart": "sign", "rPart": ["[!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[~&|]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[@]", "[A-F0-9]", "{1,2}"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c4c214af563521c9d5b578"}, "rules": "LR1Lipatov", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "operationUnary", "rPart": ["[!]", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "sign", "rPart": ["[!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[~&|]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[@]", "[A-F0-9]", "{1,2}"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d68c30e0b22203e7cbfc92"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[a-zA-Z]", "[0-9]", "|", "[0-9]", "[a-zA-Z]", ")", "*"]}], "extension": ""}}{"_id": {"$oid": "67d68c41e0b22203e7cbfc96"}, "rules": "testtt", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d71856e0b22203e7cc06ec"}, "rules": "LR2Lipatov", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "const", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationUnary", "rPart": ["[!]", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "end", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb6dc28558742cb4335cdd"}, "rules": "LR3Lipatov", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constInt", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "not", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "sign", "rPart": ["(", "[+*/]", ")"]}, {"lPart": "Term", "rPart": ["id"]}, {"lPart": "Term", "rPart": ["constBin"]}, {"lPart": "Term", "rPart": ["constOct"]}, {"lPart": "Term", "rPart": ["constInt"]}, {"lPart": "Term", "rPart": ["constChar"]}, {"lPart": "Term", "rPart": ["constString"]}, {"lPart": "Term", "rPart": ["constDouble"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "sign", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Type", "rPart": ["\"Int\"", "|", "\"Double\"", "|", "\"Char\"", "|", "\"String\""]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "id", "\",\"", "Expr", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")", "(", "\"or\"", "\"do\"", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")", "?"]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb8a668558742cb4335f98"}, "rules": "LR4Lipatov", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["(", "id", "\"=>\"", "(", "\"as\"", "Type", ")", "\"(\"", "ArgList", "\")\"", "\"{\"", "(", "Operator", ")", "*", "\"}\"", ")"]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Type", "rPart": ["\"Int\"", "|", "\"Char\"", "|", "\"String\"", "|", "\"Double\""]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorLeave", "|", "OperatorSwitch", "|", "Var", "|", "OperatorReturn", ")"]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "minus", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "id", "\",\"", "Expr", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "OB", "Else", ")"]}, {"lPart": "OperatorCycle", "rPart": ["(", "\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "OB", ")"]}, {"lPart": "OperatorLeave", "rPart": ["\"leave\"", "end"]}, {"lPart": "OperatorSwitch", "rPart": ["(", "\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "constInt", "\":\"", "PO", ")", "+", "(", "\"?~:\"", "PO", ")", "?", ")", "\"}\""]}, {"lPart": "Var", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "end"]}, {"lPart": "OperatorReturn", "rPart": ["(", "\"return\"", "Expr", "end", ")"]}, {"lPart": "Unary", "rPart": ["minus", "|", "not"]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "const", "rPart": ["constBin", "|", "constOct", "|", "constInt", "|", "constChar", "|", "constString", "|", "constDouble"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}, {"lPart": "PO", "rPart": ["(", "OB", "|", "OperatorQuit", ")", "*"]}, {"lPart": "OperatorQuit", "rPart": ["(", "\"quit\"", "end", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "not", "rPart": ["[!]"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constInt", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[%]", ")"]}, {"lPart": "sign", "rPart": ["(", "[+*/]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fcdf448558742cb433696a"}, "rules": "Sample4", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680f4ac78558742cb433a776"}, "rules": "FinalRules", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["(", "id", "\"=>\"", "(", "\"as\"", "Type", ")", "\"(\"", "ArgList", "\")\"", "\"{\"", "(", "Operator", ")", "*", "\"}\"", ")"]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Type", "rPart": ["\"Int\"", "|", "\"Char\"", "|", "\"String\"", "|", "\"Double\""]}, {"lPart": "Operator", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorLeave", "|", "OperatorSwitch", "|", "Var", "|", "OperatorReturn", ")"]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "minus", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "id", "\",\"", "Expr", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"at\"", "Expr", "\"do\"", "OB", "Else", ")"]}, {"lPart": "OperatorCycle", "rPart": ["(", "\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "OB", ")"]}, {"lPart": "OperatorLeave", "rPart": ["\"leave\"", "end"]}, {"lPart": "OperatorSwitch", "rPart": ["(", "\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "constInt", "\":\"", "PO", ")", "+", "(", "\"?~:\"", "PO", ")", "?", ")", "\"}\""]}, {"lPart": "Var", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "end"]}, {"lPart": "OperatorReturn", "rPart": ["(", "\"return\"", "Expr", "end", ")"]}, {"lPart": "Unary", "rPart": ["minus", "|", "not"]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "const", "rPart": ["constBin", "|", "constOct", "|", "constInt", "|", "constChar", "|", "constString", "|", "constDouble"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}, {"lPart": "PO", "rPart": ["(", "OB", "|", "OperatorQuit", ")", "*"]}, {"lPart": "OperatorQuit", "rPart": ["(", "\"quit\"", "end", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "not", "rPart": ["[!]"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[1]", "[0-1]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constInt", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constDouble", "rPart": ["(", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0]", ")", ")", "(", "[.]", "(", "[0-9]", "*", "[1-9]", ")", "|", "(", "[0]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[%]", ")"]}, {"lPart": "sign", "rPart": ["(", "[+*/]", ")"]}, {"lPart": "format", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Облаухов П.К.","Collection":"521111252",{"_id": {"$oid": "67b6e853ce6dd03692d08825"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-3", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67b6f0a3ce6dd03692d0887a"}, "rules": "noName", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}], "extension": ""}}{"_id": {"$oid": "67b70d3dce6dd03692d08a13"}, "rules": "lab1", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;,:]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Space", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}], "extension": ""}}{"_id": {"$oid": "67caa3dfaf563521c9d5c49f"}, "rules": "lab2", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;,:]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Space", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "const", "rPart": ["ConstDec", "|", "ConstOct", "|", "ConstQuad", "|", "ConstFloat", "|", "ConstString", "|", "ConstChar"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "operation", "rPart": ["Operations", "|", "Logic", "|", "Compare"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "Ident", "\"on\"", "expression", "\";\""]}, {"lPart": "expr", "rPart": ["\"(\"", "expression", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"exit;\""]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "block", "\"with\"", "Ident", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "(", "\"case (\"", "const", "\")\"", "\"{\"", "operator", "*", "\"break;\"", "\"}\"", ")", "+", "(", "\"case (false)\"", "operator", "*", ")", "?", "\"end\""]}, {"lPart": "Function", "rPart": ["Ident", "\"(\"", "Ident", "(", "\",\"", "Ident", ")", "?", "\")\"", "\"ret\"", "type", "block"]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}], "extension": ""}}{"_id": {"$oid": "67cac38eaf563521c9d5c563"}, "rules": "lab3", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "const", "rPart": ["ConstDec", "|", "ConstOct", "|", "ConstQuad", "|", "ConstFloat", "|", "ConstString", "|", "ConstChar"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "operation", "rPart": ["Operations", "|", "Logic", "|", "Compare"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "Ident", "\"on\"", "expression", "Delimiter"]}, {"lPart": "expr", "rPart": ["Open", "expression", "Close"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"exit\"", "Delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["OpenBrack", "operator", "+", "ClosedBrack"]}, {"lPart": "cycle", "rPart": ["\"exec\"", "block", "\"with\"", "Ident", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "Function", "rPart": ["Ident", "Open", "Ident", "(", "\",\"", "Ident", ")", "?", "Close", "\"ret\"", "type", "block"]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "OpenBrack", "rPart": ["[{]"]}, {"lPart": "ClosedBrack", "rPart": ["[}]"]}, {"lPart": "Open", "rPart": ["[(]"]}, {"lPart": "Close", "rPart": ["[)]"]}, {"lPart": "case", "rPart": ["\"case\"", "Open", "(", "const", "|", "\"false\"", ")", "Close", "OpenBrack", "operator", "*", "\"break\"", "Delimiter", "ClosedBrack"]}], "extension": ""}}{"_id": {"$oid": "67cbc226af563521c9d5c617"}, "rules": "lab2test", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;,:]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Space", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "const", "rPart": ["ConstDec", "|", "ConstOct", "|", "ConstQuad", "|", "ConstFloat", "|", "ConstString", "|", "ConstChar"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "operation", "rPart": ["Operations", "|", "Logic", "|", "Compare"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "Ident", "\"on\"", "expression", "\";\""]}, {"lPart": "expr", "rPart": ["\"(\"", "expression", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"exit;\""]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "block", "\"with\"", "Ident", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "(", "\"case\"", "\"(\"", "const", "\")\"", "\"{\"", "operator", "+", "\"break;\"", "\"}\"", ")", "+", "(", "\"case (false)\"", "operator", "+", ")", "?", "\"end\""]}, {"lPart": "Function", "rPart": ["Ident", "\"(\"", "Ident", "(", "\",\"", "Ident", ")", "?", "\")\"", "\"/[\"", "\"ret\"", "type", "\"/]\"", "block"]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}], "extension": ""}}{"_id": {"$oid": "67f23563a600182c7517b90e"}, "rules": "lab4", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "const", "rPart": ["ConstDec", "|", "ConstOct", "|", "ConstQuad", "|", "ConstFloat", "|", "ConstString", "|", "ConstChar"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "operation", "rPart": ["Operations", "|", "Logic", "|", "Compare"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "Ident", "\"on\"", "expression", "Delimiter"]}, {"lPart": "expr", "rPart": ["Open", "expression", "Close"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"exit\"", "Delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["OpenBrack", "operator", "+", "ClosedBrack"]}, {"lPart": "cycle", "rPart": ["\"exec\"", "block", "\"with\"", "Ident", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "Function", "rPart": ["Ident", "Open", "Ident", "(", "\",\"", "Ident", ")", "?", "Close", "\"ret\"", "type", "block"]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "OpenBrack", "rPart": ["[{]"]}, {"lPart": "ClosedBrack", "rPart": ["[}]"]}, {"lPart": "Open", "rPart": ["[(]"]}, {"lPart": "Close", "rPart": ["[)]"]}, {"lPart": "case", "rPart": ["\"case\"", "Open", "(", "const", "|", "\"false\"", ")", "Close", "OpenBrack", "operator", "*", "\"break\"", "Delimiter", "ClosedBrack"]}], "extension": ""}}{"_id": {"$oid": "680491668558742cb4337ad9"}, "rules": "lab5", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "const", "rPart": ["ConstDec", "|", "ConstOct", "|", "ConstQuad", "|", "ConstFloat", "|", "ConstString", "|", "ConstChar"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "operation", "rPart": ["Operations", "|", "Logic", "|", "Compare"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "Ident", "\"on\"", "expression", "Delimiter"]}, {"lPart": "expr", "rPart": ["Open", "expression", "Close"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"exit\"", "Delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["OpenBrack", "operator", "+", "ClosedBrack"]}, {"lPart": "cycle", "rPart": ["\"exec\"", "block", "\"with\"", "Ident", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "Function", "rPart": ["Ident", "Open", "Ident", "(", "\",\"", "Ident", ")", "?", "Close", "\"ret\"", "type", "block"]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "OpenBrack", "rPart": ["[{]"]}, {"lPart": "ClosedBrack", "rPart": ["[}]"]}, {"lPart": "Open", "rPart": ["[(]"]}, {"lPart": "Close", "rPart": ["[)]"]}, {"lPart": "case", "rPart": ["\"case\"", "Open", "(", "const", "|", "\"false\"", ")", "Close", "OpenBrack", "operator", "*", "\"break\"", "Delimiter", "ClosedBrack"]}], "extension": ""}}{"_id": {"$oid": "681719db8558742cb433b093"}, "rules": "lab6", "data": {"rList": [{"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["{operatorsCount = 0;}", "Ident", "Open", "Ident", "(", "\",\"", "Ident", ")", "?", "Close", "\"ret\"", "type", "block"]}, {"lPart": "Open", "rPart": ["\"(\""]}, {"lPart": "Close", "rPart": ["\")\""]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "block", "rPart": ["OpenBrack", "operator", "+", "ClosedBrack"]}, {"lPart": "OpenBrack", "rPart": ["\"{\""]}, {"lPart": "ClosedBrack", "rPart": ["\"}\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "ExitOper", "|", "ReturnOper"]}, {"lPart": "assign", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "Ident", "\"on\"", "expr", "{toPFR(\"=\");}", "Delimiter"]}, {"lPart": "if", "rPart": ["{operatorsStack.push(++operatorsCount);}", "\"by\"", "expr", "{putJumpOnFalse(\"else\");}", "block", "{putLabel(\"else\");}", "else", "?", "{operatorsStack.pop();}"]}, {"lPart": "cycle", "rPart": ["{initBreakableOperator();}", "\"exec\"", "{ tracer.rollbackPoint(); }", "block", "{ tmpVars.push(tracer.rollback()); }", "\"with\"", "{ cycle.counter = this.currentLexem[1]; }", "Ident", "\"from\"", "{cycle.startValue = this.currentLexem[1];}", "const", "\"to\"", "{cycle.endValue = this.currentLexem[1];}", "const", "(", "\"step\"", "{cycle.step = this.currentLexem[1];}", "const", ")", "?", "Delimiter", "{cycle.form(tmpVars.pop());}"]}, {"lPart": "switch", "rPart": ["\"select\"", "expr", "case", "+", "\"end\""]}, {"lPart": "ExitOper", "rPart": ["{initExitOperator();}", "(", "\"exit\"", "Delimiter", ")"]}, {"lPart": "ReturnOper", "rPart": ["\"return\"", "expr", "Delimiter", "{ toPFR(Command.Return);}"]}, {"lPart": "expr", "rPart": ["{exprDepth++;}", "BegExpr", "EndExpr", "?", "{if (exprDepth == 1) handleWholeExprEnd(); exprDepth--;}"]}, {"lPart": "Delimiter", "rPart": ["\";\""]}, {"lPart": "const", "rPart": ["ConstDec", "|", "ConstOct", "|", "ConstQuad", "|", "ConstFloat", "|", "ConstString", "|", "ConstChar"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Ident"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{operationsStack.push(\"(\");}", "Open", "expr", "{handleCloseBracket();}", "Close"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "case", "rPart": ["\"case\"", "Open", "(", "const", "|", "\"false\"", ")", "Close", "OpenBrack", "operator", "*", "\"break\"", "Delimiter", "ClosedBrack"]}, {"lPart": "EndExpr", "rPart": ["{handleOp(this.currentLexem[1]);}", "BinaryOperators", "expr"]}, {"lPart": "BinaryOperators", "rPart": ["Logic", "|", "Compare", "|", "Operations"]}, {"lPart": "Logic", "rPart": ["\"&&\"", "|", "\"||\""]}, {"lPart": "Operations", "rPart": ["\"-\"", "|", "\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\""]}, {"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstOct", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstQuad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstString", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "FormWords", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}], "extension": "var ignoreLastWord;\n\nconst Command = Object.freeze({\n  Jump: \"jump\",\n  JumpOnFalse: \"jumpOnFalse\",\n  DefVar: \"defVar\",\n  Cast: \"cast\",\n  Return: \"return\",\n  OpenScope: \"openScope\",\n  CloseScope: \"closeScope\",\n  Move: \"move\"\n});\n\nconst Keyword = Object.freeze({\n  Stack: \"STACK\",\n});\n\nfunction Tracer() {\n  this.history = [];\n  this.rollbackLengths = [];\n}\n\nTracer.prototype = {\n\n  //формирование строки из истории работы\n  getAll: function() {\n    var r = \"\";\n    this.history.forEach(elem => r += \" \" + elem)\n    return r;\n  },\n\n  //очистка истории\n  clear: function() {\n    this.history = [];\n  },\n\n  //установка точки отката\n  rollbackPoint: function() {\n    this.rollbackLengths.push(this.history.length);\n  },\n\n  //откат истории (возвращает удалённую часть истории)\n  rollback: function() {\n\n    const oldLength = this.rollbackLengths.pop();\n    var poppedHistory = Array(this.history.length - oldLength);\n\n    for (var i = poppedHistory.length - 1; i >= 0; i--)\n      poppedHistory[i] = this.history.pop();\n\n    return poppedHistory;\n  }\n\n};\n\nvar tracer = new Tracer();\n\nvar operationsStack = []; //стек операций\nvar operatorsStack = [];\nvar operatorsCount = 0;\nvar tmpVars = [];\nvar exprDepth = 0; //текущая глубина выражения\nvar exitLabels = []; //метки выхода для операторов, из которых можно выйти с помощью exit;\n\nfunction writeError(message) {\n  errors.push(\"Error: \" + message);\n  hasError = true;\n}\n\nfunction writeProgramInfo() {\n  toPFR(\"\\n\");\n  debugMessages.forEach(mes => toPFR(mes + \"\\n\"));\n  debugMessages = [];\n\n  toPFR(\"\\n\");\n  errors.forEach(err => toPFR(err + \"\\n\"));\n  errors = [];\n  hasError = false;\n}\n\n//добавление лексемы в историю\nfunction toPFR(x) {\n  tracer.history.push(x);\n}\n\n//получение элемента с верхушки стека\nfunction peek(stack) {\n  return stack[stack.length - 1];\n}\n\n//снятие count элементов со стека (возвращаются в том порядке, в котором располагались)\nfunction pop(stack, count) {\n  var popped = [];\n  for (var i = 0; i < count; i++) popped.unshift(stack.pop());\n  return popped;\n}\n\n//получение метки для текущего оператора\nfunction getLabel(title) {\n  return title + \"_\" + peek(operatorsStack) + \":\";\n}\n\n//добавление метки для текущего оператора\nfunction putLabel(title) {\n  toPFR(getLabel(title));\n}\n\n//добавление перехода по метке текущего оператора\nfunction putJump(labelTitle) {\n  toPFR(getLabel(labelTitle).replace(':', ''));\n  toPFR(Command.Jump);\n}\n\n//добавление перехода при невыполнении условия по метке текущего оператора\nfunction putJumpOnFalse(labelTitle) {\n  toPFR(getLabel(labelTitle).replace(':', ''));\n  toPFR(Command.JumpOnFalse);\n}\n\n//добавление переменной для текущего оператора\nfunction putVar(name) {\n  toPFR(\"_\" + name + peek(operatorsStack));\n}\n\n//добавление массива лексем\nfunction putArray(arr) {\n  tracer.history = tracer.history.concat(arr);\n}\n\n//инициализация оператора exit;\nfunction initExitOperator() {\n\n  if (exitLabels.length == 0) {\n    writeError(\"break statement not within loop or switch\");\n    return;\n  }\n\n  toPFR(peek(exitLabels));\n  toPFR(Command.Jump);\n}\n\n//деинициализация оператора, из которого можно выйти с помощью exit;\nfunction deinitBreakableOperator() {\n  putLabel(\"Exit\");\n  exitLabels.pop();\n\n  operatorsStack.pop();\n  toPFR(Command.CloseScope);\n}\n\n//получение приоритета арифметического знака\nfunction getPriority(s) {\n  if (s == Command.Cast) return 7;\n  if (s == \"*\" || s == \"/\" || s == \"%\") return 6;\n  if (s == \"-\" || s == \"+\") return 5;\n  if (s == \">=\" || s == \">\" || s == \"<=\" || s == \"<\") return 4;\n  if (s == \"==\" || s == \"!=\") return 3;\n  if (s == \"&&\") return 2;\n  if (s == \"||\") return 1;\n\n  return 0;\n}\n\n//обработка операции при формировании ПФЗ выражения\nfunction handleOp(op) {\n  while (operationsStack.length > 0) {\n    if (getPriority(peek(operationsStack)) >= getPriority(op))\n      toPFR(operationsStack.pop());\n    else\n      break;\n  }\n\n  operationsStack.push(op);\n}\n\n//обработка явного преобразования\nfunction handleCast(analyzer) {\n  toPFR(analyzer.currentLexem[1]);\n  handleOp(Command.Cast);\n}\n\n//обработка закрывающей скобки при формировании ПФЗ выражения\nfunction handleCloseBracket() {\n  while (operationsStack.length > 0) {\n    if (peek(operationsStack) == \"(\") {\n      operationsStack.pop();\n      return;\n    } else\n      toPFR(operationsStack.pop())\n  }\n}\n\n//обработка конца всего выражения при формировании его ПФЗ\nfunction handleWholeExprEnd() {\n  while (operationsStack.length > 0) {\n    if (peek(operationsStack) == \"(\")\n      operationsStack.pop();\n    else\n      toPFR(operationsStack.pop())\n  }\n}\n\nfunction initBreakableOperator() {\n  operatorsStack.push(++operatorsCount);\n  toPFR(Command.OpenScope);\n\n  var label = getLabel(\"Exit\");\n  label = label.substring(0, label.length - 1);\n  exitLabels.push(label);\n}\n\n//для формирования цикла\nfunction Cycle() {\n  this.counter = \"\";\n  this.startValue = 0;\n  this.endValue = 0;\n  this.step = 1;\n}\n\nCycle.prototype = {\n\n  form: function(bodyPFR) {\n    putArray([this.counter, Command.DefVar]);\n    putArray([this.counter, this.startValue, \"=\"]);\n\n    putLabel(\"Condition\");\n    putArray([this.counter, this.endValue, \"<=\"]);\n    putJumpOnFalse(\"Exit\");\n\n    putArray(bodyPFR);\n\n    putArray([this.counter, this.counter, this.step, \"+\", \"=\"]);\n    putJump(\"Condition\");\n\n    deinitBreakableOperator();\n    this.step = 1;\n  }\n};\n\nvar cycle = new Cycle();\n"}}},
{"FIO":"Дронов А.С.","Collection":"313131212",{"_id": {"$oid": "67bb1e6ece6dd03692d094ec"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-z0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "mathOp", "rPart": ["[-+*/]"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "format", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bb2fcbce6dd03692d0954c"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67ce81feaf563521c9d5cfe7"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-z0-9]", "*", ")", "?"]}, {"lPart": "constD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constC", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constE", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constB", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["constD", "|", "constC", "|", "constE", "|", "constB"]}, {"lPart": "mathOp", "rPart": ["[-+*/%]"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "format", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operation", "rPart": ["mathOp", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["\"(\"", "expression", "\")\""]}, {"lPart": "equal", "rPart": ["\"set (\"", "expression", "\",\"", "id", "\")\"", "delimiter"]}, {"lPart": "operator", "rPart": ["equal", "|", "if", "|", "cycle", "|", "switch", "|", "\"leave\"", "delimiter"]}, {"lPart": "if", "rPart": ["\"when\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"other\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "cycle", "rPart": ["\"while\"", "expr", "\"do\"", "block"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "(", "\"case (\"", "const", "\")\"", "\"{\"", "operator", "*", "\"break;\"", "\"}\"", ")", "+", "(", "\"case ()\"", "operator", "*", ")", "?", "\"end\""]}, {"lPart": "func", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "\")\"", "\"ret\"", "type", "block"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cebd8daf563521c9d5d359"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e025004635a960233acac5"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-z0-9]", "*", ")", "?"]}, {"lPart": "constD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constC", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constE", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constB", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["constD", "|", "constC", "|", "constE", "|", "constB"]}, {"lPart": "mathOp", "rPart": ["[-+*/%]"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "format", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operation", "rPart": ["mathOp", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["open", "expression", "close"]}, {"lPart": "equal", "rPart": ["\"set\"", "open", "expression", "\",\"", "id", "close", "delimiter"]}, {"lPart": "operator", "rPart": ["equal", "|", "if", "|", "cycle", "|", "switch", "|", "\"leave\"", "delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["openBrack", "operator", "+", "closeBrack"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "cycle", "rPart": ["\"while\"", "expr", "\"do\"", "block"]}, {"lPart": "case", "rPart": ["\"case\"", "open", "const", "?", "close", "openBrack", "operator", "*", "\"break\"", "delimiter", "closeBrack"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "func", "rPart": ["id", "open", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "close", "\"ret\"", "type", "block"]}, {"lPart": "open", "rPart": ["[(]"]}, {"lPart": "close", "rPart": ["[)]"]}, {"lPart": "openBrack", "rPart": ["[{]"]}, {"lPart": "closeBrack", "rPart": ["[}]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f2970ea600182c7517ba94"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-z0-9]", "*", ")", "?"]}, {"lPart": "constD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constC", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constE", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constB", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["constD", "|", "constC", "|", "constE", "|", "constB"]}, {"lPart": "mathOp", "rPart": ["[-+*/%]"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "format", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operation", "rPart": ["mathOp", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["open", "expression", "close"]}, {"lPart": "equal", "rPart": ["\"set\"", "open", "expression", "\",\"", "id", "close", "delimiter"]}, {"lPart": "operator", "rPart": ["equal", "|", "if", "|", "cycle", "|", "switch", "|", "\"leave\"", "delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["openBrack", "operator", "+", "closeBrack"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "cycle", "rPart": ["\"while\"", "expr", "\"do\"", "block"]}, {"lPart": "case", "rPart": ["\"case\"", "open", "const", "?", "close", "openBrack", "operator", "*", "\"break\"", "delimiter", "closeBrack"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "func", "rPart": ["id", "open", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "close", "\"ret\"", "type", "block"]}, {"lPart": "open", "rPart": ["[(]"]}, {"lPart": "close", "rPart": ["[)]"]}, {"lPart": "openBrack", "rPart": ["[{]"]}, {"lPart": "closeBrack", "rPart": ["[}]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68050ef08558742cb4337ed9"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-z0-9]", "*", ")", "?"]}, {"lPart": "constD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constC", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constE", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constB", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["constD", "|", "constC", "|", "constE", "|", "constB"]}, {"lPart": "mathOp", "rPart": ["[-+*/%]"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "format", "rPart": ["[\\n\\r\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operation", "rPart": ["mathOp", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["open", "expression", "close"]}, {"lPart": "equal", "rPart": ["\"set\"", "open", "expression", "\",\"", "id", "close", "delimiter"]}, {"lPart": "operator", "rPart": ["equal", "|", "if", "|", "cycle", "|", "switch", "|", "\"leave\"", "delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "block", "else", "?"]}, {"lPart": "else", "rPart": ["\"else\"", "block"]}, {"lPart": "block", "rPart": ["openBrack", "operator", "+", "closeBrack"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "cycle", "rPart": ["\"while\"", "expr", "\"do\"", "block"]}, {"lPart": "case", "rPart": ["\"case\"", "open", "const", "?", "close", "openBrack", "operator", "*", "\"break\"", "delimiter", "closeBrack"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "func", "rPart": ["id", "open", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "close", "\"ret\"", "type", "block"]}, {"lPart": "open", "rPart": ["[(]"]}, {"lPart": "close", "rPart": ["[)]"]}, {"lPart": "openBrack", "rPart": ["[{]"]}, {"lPart": "closeBrack", "rPart": ["[}]"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Ярощук Н.К.","Collection":"512533453",{"_id": {"$oid": "65dd699b4b5d9e0496a75328"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "65dda18e4b5d9e0496a75401"}, "rules": "lab1", "data": {"rList": [{"lPart": "ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "format", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constBase4", "rPart": ["[xX]", "[0-3]", "+"]}, {"lPart": "constBase8", "rPart": ["[hH]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "arithmetic", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "65eaa4e04b5d9e0496a76cff"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "format", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constBase4", "rPart": ["[xX]", "[0-3]", "+"]}, {"lPart": "constBase8", "rPart": ["[hH]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "unaryOp", "rPart": ["(", "[!]", ")"]}, {"lPart": "binaryOp", "rPart": ["(", "[+]", ")", "|", "(", "[*]", ")", "|", "(", "[/]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["(", "[-]", ")"]}, {"lPart": "Const", "rPart": ["(", "constReal", "|", "constBase4", "|", "constBase8", "|", "char", "|", "string", ")"]}, {"lPart": "AssignOp", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryOp", "|", "minus", ")", "?", "(", "id", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binaryOp", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlockElement", "rPart": ["(", "(", "AssignOp", ")", "|", "(", "Loop", ")", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "SwitchOp", ")", "|", "(", "ConditionalOp", ")", ")"]}, {"lPart": "Block", "rPart": ["(", "BlockElement", ")", "|", "(", "\"{\"", "(", "BlockElement", ")", "*", "\"}\"", ")"]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Block", ")"]}, {"lPart": "singleLineComment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "multiLineComment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "SwitchBody", ")", "+", "(", "DefaultSwitchBody", ")", "?", "\"}\""]}, {"lPart": "SwitchBody", "rPart": ["\"by\"", "(", "Const", ")", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "DefaultSwitchBody", "rPart": ["\"any\"", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "FunctionDefinition", "rPart": ["\"let\"", "id", "\"on\"", "DataType", "?", "\"(\"", "(", "ArgList", ")", "\")\"", "FunctionBody", "\";\""]}, {"lPart": "DataType", "rPart": ["(", "\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "ArgList", "rPart": ["(", "DataType", "id", ")", "*"]}, {"lPart": "FunctionBody", "rPart": ["\"{\"", "(", "BlockElement", ")", "*", "\"}\""]}, {"lPart": "ConditionalOp", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Block", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "Block"]}, {"lPart": "PartElse", "rPart": ["~", "\"not\""]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "[a-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6600f090e808487613461071"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "format", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constBase4", "rPart": ["[xX]", "[0-3]", "+"]}, {"lPart": "constBase8", "rPart": ["[hH]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "*", "[\\\"]"]}, {"lPart": "unaryOp", "rPart": ["(", "[!]", ")"]}, {"lPart": "binaryOp", "rPart": ["(", "[+]", ")", "|", "(", "[*]", ")", "|", "(", "[/]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["(", "[-]", ")"]}, {"lPart": "Const", "rPart": ["(", "constReal", "|", "constBase4", "|", "constBase8", "|", "char", "|", "string", ")"]}, {"lPart": "AssignOp", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryOp", "|", "minus", ")", "?", "(", "id", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binaryOp", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlockElement", "rPart": ["(", "(", "AssignOp", ")", "|", "(", "Loop", ")", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "SwitchOp", ")", "|", "(", "ConditionalOp", ")", ")"]}, {"lPart": "Block", "rPart": ["(", "BlockElement", ")", "|", "(", "\"{\"", "(", "BlockElement", ")", "*", "\"}\"", ")"]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Block", ")"]}, {"lPart": "singleLineComment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "multiLineComment", "rPart": ["[/]", "[*]", "(", "[]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "SwitchBody", ")", "+", "(", "DefaultSwitchBody", ")", "?", "\"}\""]}, {"lPart": "SwitchBody", "rPart": ["\"by\"", "(", "Const", ")", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "DefaultSwitchBody", "rPart": ["\"any\"", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "FunctionDefinition", "rPart": ["\"let\"", "id", "\"on\"", "DataType", "?", "\"(\"", "(", "ArgList", ")", "\")\"", "FunctionBody", "\";\""]}, {"lPart": "DataType", "rPart": ["(", "\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "ArgList", "rPart": ["(", "DataType", "id", ")", "*"]}, {"lPart": "FunctionBody", "rPart": ["\"{\"", "(", "BlockElement", ")", "*", "\"}\""]}, {"lPart": "ConditionalOp", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Block", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "Block"]}, {"lPart": "PartElse", "rPart": ["~", "\"not\""]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "[a-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "661611d7e808487613465bfd"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "format", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constBase4", "rPart": ["[xX]", "[0-3]", "+"]}, {"lPart": "constBase8", "rPart": ["[hH]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "*", "[\\\"]"]}, {"lPart": "unaryOp", "rPart": ["(", "[!]", ")"]}, {"lPart": "binaryOp", "rPart": ["(", "[+]", ")", "|", "(", "[*]", ")", "|", "(", "[/]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["(", "[-]", ")"]}, {"lPart": "Const", "rPart": ["(", "constReal", "|", "constBase4", "|", "constBase8", "|", "char", "|", "string", ")"]}, {"lPart": "AssignOp", "rPart": ["\"let\"", "id", "(", "\"on\"", "Expr", ")", "?", "\";\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryOp", "|", "minus", ")", "?", "(", "id", "|", "Const", "|", "FunctionCall", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binaryOp", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlockElement", "rPart": ["(", "(", "AssignOp", ")", "|", "(", "Statement", ")", "|", "(", "Loop", ")", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "SwitchOp", ")", "|", "(", "ConditionalOp", ")", ")"]}, {"lPart": "Block", "rPart": ["(", "BlockElement", ")", "|", "(", "\"{\"", "(", "BlockElement", ")", "*", "\"}\"", ")"]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Block", ")"]}, {"lPart": "singleLineComment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "multiLineComment", "rPart": ["[/]", "[*]", "(", "[]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "SwitchBody", ")", "+", "(", "DefaultSwitchBody", ")", "?", "\"}\""]}, {"lPart": "SwitchBody", "rPart": ["\"by\"", "(", "Const", ")", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "DefaultSwitchBody", "rPart": ["\"any\"", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "FunctionDefinition", "rPart": ["\"let\"", "id", "\"on\"", "DataType", "\"(\"", "(", "ParamList", "?", ")", "\")\"", "FunctionBody", "\";\""]}, {"lPart": "DataType", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "ParamList", "rPart": ["(", "DataType", "id", ")", "(", "\",\"", "DataType", "id", ")", "*"]}, {"lPart": "FunctionBody", "rPart": ["\"{\"", "(", "BlockElement", ")", "*", "\"}\""]}, {"lPart": "ConditionalOp", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Block", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "Block"]}, {"lPart": "PartElse", "rPart": ["~", "\"not\""]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "[a-z]", "+"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "ArgList", "?", "\")\""]}, {"lPart": "ArgList", "rPart": ["(", "id", ")", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Statement", "rPart": ["Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6628a7cee808487613468407"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "format", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constBase4", "rPart": ["[xX]", "[0-3]", "+"]}, {"lPart": "constBase8", "rPart": ["[hH]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "*", "[\\\"]"]}, {"lPart": "unaryOp", "rPart": ["(", "[!]", ")"]}, {"lPart": "binaryOp", "rPart": ["(", "[+]", ")", "|", "(", "[*]", ")", "|", "(", "[/]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["(", "[-]", ")"]}, {"lPart": "Const", "rPart": ["(", "constReal", "|", "constBase4", "|", "constBase8", "|", "char", "|", "string", ")"]}, {"lPart": "AssignOp", "rPart": ["\"let\"", "(", "(", "id", "\"on\"", "Expr", ")", "|", "(", "DataType", "id", ")", ")", "\";\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryOp", "|", "minus", ")", "?", "(", "id", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binaryOp", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlockElement", "rPart": ["(", "(", "AssignOp", ")", "|", "(", "Loop", ")", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "id", "\"(\"", "ArgList", "?", "\")\"", "\";\"", ")", "|", "(", "SwitchOp", ")", "|", "(", "ConditionalOp", ")", ")"]}, {"lPart": "Block", "rPart": ["(", "BlockElement", ")", "|", "(", "\"{\"", "(", "BlockElement", ")", "*", "\"}\"", ")"]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Block", ")"]}, {"lPart": "singleLineComment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "multiLineComment", "rPart": ["[/]", "[*]", "(", "[]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "SwitchBody", ")", "+", "(", "DefaultSwitchBody", ")", "?", "\"}\""]}, {"lPart": "SwitchBody", "rPart": ["\"by\"", "(", "Const", ")", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "DefaultSwitchBody", "rPart": ["\"any\"", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "FunctionDefinition", "rPart": ["\"let\"", "id", "\"on\"", "DataType", "\"(\"", "(", "ParamList", "?", ")", "\")\"", "FunctionBody", "\";\""]}, {"lPart": "DataType", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "ParamList", "rPart": ["(", "DataType", "id", ")", "(", "\",\"", "DataType", "id", ")", "*"]}, {"lPart": "FunctionBody", "rPart": ["\"{\"", "(", "BlockElement", ")", "*", "\"}\""]}, {"lPart": "ConditionalOp", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Block", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "Block"]}, {"lPart": "PartElse", "rPart": ["~", "\"not\""]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "[a-z]", "+"]}, {"lPart": "ArgList", "rPart": ["(", "id", ")", "(", "\",\"", "id", ")", "*"]}, {"lPart": "VarDecl", "rPart": ["\"let\"", "DataType", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6629b6cae808487613468b5e"}, "rules": "lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "format", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constBase4", "rPart": ["[xX]", "[0-3]", "+"]}, {"lPart": "constBase8", "rPart": ["[hH]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "(", "[0-9a-fA-F]", ")", "{1,4}", ")", "|", "(", "[]", ")", ")", "*", "[\\\"]"]}, {"lPart": "unaryOp", "rPart": ["(", "[!]", ")"]}, {"lPart": "binaryOp", "rPart": ["(", "[+]", ")", "|", "(", "[*]", ")", "|", "(", "[/]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["(", "[-]", ")"]}, {"lPart": "Const", "rPart": ["(", "constReal", "|", "constBase4", "|", "constBase8", "|", "char", "|", "string", ")"]}, {"lPart": "AssignOp", "rPart": ["\"let\"", "(", "(", "id", "\"on\"", "Expr", ")", "|", "(", "DataType", "id", ")", ")", "\";\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryOp", "|", "minus", ")", "?", "(", "(", "id", "(", "\"(\"", "ArgList", "?", "\")\"", ")", "?", ")", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binaryOp", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlockElement", "rPart": ["(", "(", "AssignOp", ")", "|", "(", "Loop", ")", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "SwitchOp", ")", "|", "(", "ConditionalOp", ")", ")"]}, {"lPart": "Block", "rPart": ["(", "BlockElement", ")", "|", "(", "\"{\"", "(", "BlockElement", ")", "*", "\"}\"", ")"]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Block", ")"]}, {"lPart": "singleLineComment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "multiLineComment", "rPart": ["[/]", "[*]", "(", "[]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "SwitchBody", ")", "+", "(", "DefaultSwitchBody", ")", "?", "\"}\""]}, {"lPart": "SwitchBody", "rPart": ["\"by\"", "(", "Const", ")", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "DefaultSwitchBody", "rPart": ["\"any\"", "\"do\"", "(", "Block", ")", "+"]}, {"lPart": "FunctionDefinition", "rPart": ["\"let\"", "id", "\"on\"", "DataType", "\"(\"", "(", "ParamList", "?", ")", "\")\"", "FunctionBody", "\";\""]}, {"lPart": "DataType", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "ParamList", "rPart": ["(", "DataType", "id", ")", "(", "\",\"", "DataType", "id", ")", "*"]}, {"lPart": "FunctionBody", "rPart": ["\"{\"", "(", "BlockElement", ")", "*", "\"}\""]}, {"lPart": "ConditionalOp", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Block", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "Block"]}, {"lPart": "PartElse", "rPart": ["~", "\"not\""]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "[a-z]", "+"]}, {"lPart": "ArgList", "rPart": ["(", "Expr", ")", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "VarDecl", "rPart": ["\"let\"", "DataType", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Березов Д.С.","Collection":"423413153",{"_id": {"$oid": "6810de148558742cb433a8ce"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "6810e3818558742cb433a914"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", ")", "+", "[\"]"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "duo", "rPart": ["[*/&|><=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6810e4b58558742cb433a91f"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", ")", "+", "[\"]"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "duo", "rPart": ["[*/&|><=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681243fa8558742cb433a9e2"}, "rules": "Lab3", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "block", "|", "operator", ")", "+"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "block", "|", "operator", ")", "end"]}, {"lPart": "operator", "rPart": ["\"exec\"", "(", "block", "|", "operator", ")", "\"with\"", "id", "\"from\"", "consts", "\"to\"", "consts", "(", "\"step\"", "consts", ")", "?", "(", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "consts", "\"do\"", "block", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "end", "rPart": ["~", "\"or do\""]}, {"lPart": "end", "rPart": ["\"or do\"", "(", "block", "|", "operator", ")"]}, {"lPart": "consts", "rPart": ["const", "|", "const4", "|", "const8", "|", "constchar", "|", "conststr"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "duo", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", ")", "+", "[\"]"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "duo", "rPart": ["[*/&|><=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681248ac8558742cb433aa13"}, "rules": "Lab4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "block", "|", "operator", ")", "end"]}, {"lPart": "operator", "rPart": ["\"exec\"", "(", "block", "|", "operator", ")", "\"with\"", "id", "\"from\"", "consts", "\"to\"", "consts", "(", "\"step\"", "consts", ")", "?", "(", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "consts", "\"do\"", "block", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "end", "rPart": ["~", "\"or do\""]}, {"lPart": "end", "rPart": ["\"or do\"", "(", "block", "|", "operator", ")"]}, {"lPart": "consts", "rPart": ["const", "|", "const4", "|", "const8", "|", "constchar", "|", "conststr"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "duo", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", ")", "+", "[\"]"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "duo", "rPart": ["[*/&|><=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68124c7d8558742cb433aa27"}, "rules": "Lab5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "block", "|", "operator", ")", "end"]}, {"lPart": "operator", "rPart": ["\"exec\"", "(", "block", "|", "operator", ")", "\"with\"", "id", "\"from\"", "consts", "\"to\"", "consts", "(", "\"step\"", "consts", ")", "?", "(", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "consts", "\"do\"", "block", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "end", "rPart": ["~", "\"or do\""]}, {"lPart": "end", "rPart": ["\"or do\"", "(", "block", "|", "operator", ")"]}, {"lPart": "consts", "rPart": ["const", "|", "const4", "|", "const8", "|", "constchar", "|", "conststr"]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "duo", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", ")", "+", "[\"]"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "duo", "rPart": ["[*/&|><=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Семенов А.В.","Collection":"124535521",{"_id": {"$oid": "681708f18558742cb433b040"}, "rules": "1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "binar", "rPart": ["[/*&|<>]", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "biunar", "rPart": ["[+-]"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681708f98558742cb433b044"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "68170c1c8558742cb433b059"}, "rules": "2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "binar", "rPart": ["[/*&|<>]", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "biunar", "rPart": ["[+-]"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Шевлякова Т.А.","Collection":"445114513",{"_id": {"$oid": "67badfa7ce6dd03692d093de"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[2]", "[t]", "[0-1]", "+", ")", "|", "(", "[8]", "[t]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67badfd1ce6dd03692d093e4"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67cecdc1af563521c9d5d41b"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Statement", "rPart": ["\"put\"", "(", "id", "|", "const", "|", "constReal", "|", "сonstChar", "|", "constStr", ")", "\"to\"", "id", "\";\""]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[2]", "[t]", "[0-1]", "+", ")", "|", "(", "[8]", "[t]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "signOp", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\n\n"}}{"_id": {"$oid": "67e2d6fa4635a960233adb37"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Prog", "rPart": ["Operator", "*"]}, {"lPart": "Operator", "rPart": ["(", "Stat", "|", "Break", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Term", ")"]}, {"lPart": "Stat", "rPart": ["\"put\"", "Exp", "\"to\"", "id"]}, {"lPart": "Break", "rPart": ["\"exit\""]}, {"lPart": "Term", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "(", "Operators", ")", "(", "\"else\"", "(", "Operators", ")", ")", "?"]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "BegExp", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Exp", "\")\"", ")"]}, {"lPart": "EndExp", "rPart": ["(", "(", "Binary", "|", "unMath", ")", "Exp", ")", "?"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Operators", "\"with\"", "id", "\"from\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2eae34635a960233adbef"}, "rules": "Lab31", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "BegExp", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Exp", "\")\"", ")"]}, {"lPart": "EndExp", "rPart": ["(", "(", "Binary", "|", "Unary", ")", "Exp", ")", "?"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "Stat", "rPart": ["\"put\"", "Exp", "\"to\"", "id"]}, {"lPart": "Assign", "rPart": ["Stat", "*"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Stat", "|", "Break", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Term", ")"]}, {"lPart": "Break", "rPart": ["\"exit\""]}, {"lPart": "Term", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "(", "Operators", ")", "(", "\"else\"", "(", "Operators", ")", ")", "?"]}, {"lPart": "Prog", "rPart": ["Operator", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f53a738558742cb4333c99"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "(", "\"{\"", "Operators", "*", "\"}\"", ")", "\"->\"", "id"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"int2\"", "|", "\"int8\"", "|", "\"real\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Operators", "rPart": ["(", "Stat", "|", "Cycle", "|", "Break", "|", "Switch", "|", "Break2", "|", "Term", "|", "Decl", "|", "Return", ")"]}, {"lPart": "Stat", "rPart": ["\"put\"", "Exp", "\"to\"", "id", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "(", "\"{\"", "Operators", "*", "\"}\"", ")", "\"with\"", "id", "\"from\"", "Constant", "\"to\"", "Constant", "\";\"", "(", "\"step\"", "Constant", "\";\"", ")", "?"]}, {"lPart": "Break", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Switch", "rPart": ["\"??\"", "Exp", "\"{\"", "SwitchCase", "+", "SwitchDef", "\"}\""]}, {"lPart": "Break2", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Term", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "(", "\"{\"", "Operators", "*", "\"}\"", ")", "(", "TermElse", ")"]}, {"lPart": "Decl", "rPart": ["Type", "id", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Exp", "\";\""]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "SwitchDef", "rPart": ["\"?~\"", "\":\"", "(", "\"{\"", "Operators", "*", "\"}\"", ")"]}, {"lPart": "BegExp", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Exp", "\")\"", ")"]}, {"lPart": "EndExp", "rPart": ["(", "(", "Binary", "|", "unMath", ")", "Exp", ")", "?"]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "(", "\"{\"", "Operators", "*", "\"}\"", ")"]}, {"lPart": "TermElse", "rPart": ["\"else\"", "(", "\"{\"", "Operators", "*", "\"}\"", ")"]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]"]}], "extension": ""}}{"_id": {"$oid": "68078fe08558742cb4338364"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "Argum", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", "\"->\"", "Type", "id"]}, {"lPart": "Argum", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "Decl", "|", "Stat", "|", "BreakC", "|", "BreakS", "|", "(", "id", "Parmtr", ")", "|", "Return", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Term", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Term", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "Operator", "TermElse"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Operator", "\"with\"", "id", "\"from\"", "Num", "\"to\"", "Num", "(", "\"step\"", "Num", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Exp", "\"{\"", "SwitchCase", "+", "SwitchDef", "?", "\"}\""]}, {"lPart": "Decl", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Stat", "rPart": ["\"put\"", "Exp", "\"to\"", "id"]}, {"lPart": "BreakC", "rPart": ["\"exit\""]}, {"lPart": "BreakS", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Exp", "?"]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "TermElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "TermElse", "rPart": ["~", "\"else\""]}, {"lPart": "Num", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal"]}, {"lPart": "Parmtr", "rPart": ["\"(\"", "(", "Exp", "(", "\",\"", "Exp", ")", "*", ")", "?", "\")\""]}, {"lPart": "BegExp", "rPart": ["Unary", "?", "(", "(", "id", "Parmtr", "?", ")", "|", "Constant", "|", "\"(\"", "Exp", "\")\"", ")"]}, {"lPart": "EndExp", "rPart": ["(", "(", "Binary", "|", "unMath", ")", "Exp", ")", "?"]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDef", "rPart": ["\"?~\"", "\":\"", "Operator", "*"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "681a0a308558742cb433c18e"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Prog", "rPart": ["{resetAll();}", "Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "Argum", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", "\"->\"", "Type", "id"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Argum", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "Decl", "|", "Stat", "|", "BreakC", "|", "BreakS", "|", "(", "id", "Parmtr", ")", "|", "Return", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Term", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Term", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "Operator", "TermElse"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Exp", "\"{\"", "SwitchCase", "+", "SwitchDef", "?", "\"}\""]}, {"lPart": "Decl", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Stat", "rPart": ["\"put\"", "Exp", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"=\");}"]}, {"lPart": "BreakC", "rPart": ["\"exit\""]}, {"lPart": "BreakS", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Exp", "?"]}, {"lPart": "Exp", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "Unary", "BegExp", "{toPFR(\"Unary\" +unaryStack.pop());}", "EndExp"]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "TermElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "TermElse", "rPart": ["~", "\"else\""]}, {"lPart": "Parmtr", "rPart": ["\"(\"", "(", "Exp", "(", "\",\"", "Exp", ")", "*", ")", "?", "\")\""]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "BegExp", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "Parmtr", "?"]}, {"lPart": "BegExp", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BegExp", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Exp", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExp", "rPart": ["{if((opStack.length>0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) to PFR(op.Stack.pop());opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "unMath", ")", "Exp", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExp", "rPart": []}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDef", "rPart": ["\"?~\"", "\":\"", "Operator", "*"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "Cycle", "rPart": ["{cycleStack.push(++cycleCount);}", "\"cycle\"", "\"(\"", "Stat", "?", "{toPFR(\"CycleBegin_\" + peek(cycleStack) + \":\");}", "\";\"", "(", "Exp", "{toPFR(\"CycleEnd_\" + peek(cycleStack));}", "{toPFR(\"JumpOnFalse\");}", "{toPFR(\"CycleBody_\" + peek(cycleStack));}", "{toPFR(\"Jump\");}", ")", "?", "\";\"", "{toPFR(\"CycleAssignment_\" + peek(cycleStack) + \":\");}", "Stat", "?", "{toPFR(\"CycleBegin_\" + peek(cycleStack));}", "{toPFR(\"Jump\");}", "\")\"", "{toPFR(\"CycleBody_\" + peek(cycleStack) + \":\");}", "Operator", "{toPFR(\"CycleAssignment_\" + peek(cycleStack));}", "{toPFR(\"Jump\");}", "{toPFR(\"CycleEnd_\" + cycleStack.pop() + \":\");}"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n};\n\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for(var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\n// Стеки для обработки операций и управления потоком\nvar unaryStack, opStack, cycleStack, cycleCount;\n\nfunction resetAll() {\n    unaryStack = [];\n    opStack = [];\n    cycleStack = [];\n    cycleCount = 0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\n// Функция определения приоритета операций\nfunction getPriority(s) {\n    switch(s) {\n        case \"(\": return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\": return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\": return 2;\n    }\n}"}}{"_id": {"$oid": "681a49038558742cb433c5bc"}, "rules": "Lab71", "data": {"rList": [{"lPart": "Program", "rPart": ["{resetAll();}", "Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "Argum", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", "\"->\"", "Type", "id"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Argum", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "Decl", "|", "Stat", "|", "BreakC", "|", "BreakS", "|", "(", "id", "Parmtr", ")", "|", "Return", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Term", "|", "Cycle", "|", "Switch"]}, {"lPart": "Term", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "Operator", "TermElse"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Operator", "\"with\"", "{cycleStack.push(++cycleCount);}", "id", "{var loopVar = this.currentLexem[1];}", "\"from\"", "{toPFR(loopVar); toPFR(\"=\");}", "Exp", "\"to\"", "{toPFR(\"CYCLE_CONDITION_\" + peek(cycleStack) + \":\"); toPFR(loopVar); toPFR(\"<=\");}", "Exp", "(", "CycleStep", "|", "CycleBody", ")", "{toPFR(\"CYCLE_CONDITION_\" + peek(cycleStack)); toPFR(\"Jump\"); toPFR(\"CYCLE_FINISH_\" + cycleStack.pop() + \":\");}"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Exp", "\"{\"", "SwitchCase", "+", "SwitchDef", "?", "\"}\""]}, {"lPart": "Decl", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Stat", "rPart": ["\"put\"", "Exp", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"=\");}"]}, {"lPart": "BreakC", "rPart": ["\"exit\""]}, {"lPart": "BreakS", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Exp", "?"]}, {"lPart": "Exp", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "Unary", "BegExp", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExp"]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "TermElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "TermElse", "rPart": ["~", "\"else\""]}, {"lPart": "Num", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal"]}, {"lPart": "Parmtr", "rPart": ["\"(\"", "(", "Exp", "(", "\",\"", "Exp", ")", "*", ")", "?", "\")\""]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "BegExp", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Exp", "\")\"", "{opStack.pop();}"]}, {"lPart": "BegExp", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "Parmtr", "?"]}, {"lPart": "BegExp", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "EndExp", "rPart": ["{if ((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop()); opStack.push(this.currentLexem[1]); }", "(", "Binary", "|", "unMath", ")", "Exp", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExp", "rPart": []}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDef", "rPart": ["\"?~\"", "\":\"", "Operator", "*"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "CycleStep", "rPart": ["\"step\"", "{toPFR(loopVar); toPFR(\"+=\");}", "Exp", "{toPFR(\"CYCLE_FINISH_\" + peek(cycleStack)); toPFR(\"JumpOnFalse\"); toPFR(\"CYCLE_BODY_\" + peek(cycleStack)); toPFR(\"Jump\"); toPFR(\"CYCLE_STEP_\" + peek(cycleStack) + \":\");}", "Operator"]}, {"lPart": "CycleBody", "rPart": ["{toPFR(\"CYCLE_FINISH_\" + peek(cycleStack)); toPFR(\"JumpOnFalse\"); toPFR(\"CYCLE_BODY_\" + peek(cycleStack)); toPFR(\"Jump\"); toPFR(\"CYCLE_STEP_\" + peek(cycleStack) + \":\");}", "Operator", "{toPFR(loopVar); toPFR(\"++\");}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n};\n\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for(var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\n// Стеки для обработки операций и управления потоком\nvar unaryStack, opStack, cycleStack, cycleCount;\n\nfunction resetAll() {\n    unaryStack = [];\n    opStack = [];\n    cycleStack = [];\n    cycleCount = 0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\n// Функция определения приоритета операций\nfunction getPriority(s) {\n    switch(s) {\n        case \"(\": return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\": return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\": return 2;\n    }\n}"}}{"_id": {"$oid": "681a72118558742cb433c81e"}, "rules": "Lab61", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[t]", "[0-7]", "+"]}, {"lPart": "const2", "rPart": ["[2]", "[t]", "[0-1]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "comp", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLog", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "binLog", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Program", "rPart": ["{resetAll();}", "Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "Argum", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", "\"->\"", "Type", "id"]}, {"lPart": "Argum", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Exp", "\")\"", "Operator", "TermElse"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Exp", "\"{\"", "SwitchCase", "+", "SwitchDef", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"put\"", "Exp", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Exp", "?", "\";\""]}, {"lPart": "Exp", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "Unary", "BegExp", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExp"]}, {"lPart": "Exp", "rPart": ["BegExp", "EndExp"]}, {"lPart": "TermElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "TermElse", "rPart": ["~", "\"else\""]}, {"lPart": "Num", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal"]}, {"lPart": "Parmtr", "rPart": ["\"(\"", "(", "Exp", "(", "\",\"", "Exp", ")", "*", ")", "?", "\")\""]}, {"lPart": "BegExp", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Exp", "\")\"", "{opStack.pop();}"]}, {"lPart": "BegExp", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "Parmtr", "?"]}, {"lPart": "BegExp", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "EndExp", "rPart": ["{if ((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop()); opStack.push(this.currentLexem[1]); }", "(", "Binary", "|", "unMath", ")", "Exp", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExp", "rPart": []}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDef", "rPart": ["\"?~\"", "\":\"", "Operator", "*"]}, {"lPart": "Constant", "rPart": ["int", "|", "const2", "|", "const8", "|", "constReal", "|", "сonstChar", "|", "constString"]}, {"lPart": "Unary", "rPart": ["unMath", "|", "unLog"]}, {"lPart": "Binary", "rPart": ["binMath", "|", "binLog", "|", "comp"]}, {"lPart": "Operator", "rPart": ["{ execStack.push(++execCnt); }", "\"exec\"", "{ toPFR(\"EXEC_INITIALIZE_\" + peek(execStack)); toPFR(\"Jump\"); toPFR(\"EXEC_BODY_\" + peek(execStack) + \":\"); }", "Operator", "{ toPFR(\"EXEC_STEPCHANGE_\" + peek(execStack)); toPFR(\"Jump\"); toPFR(\"EXEC_INITIALIZE_\" + peek(execStack) + \":\"); }", "\"with\"", "{ execIdStack.push(this.currentLexem[1]); }", "id", "\"from\"", "{ toPFR(peek(execIdStack)); toPFR(this.currentLexem[1]); toPFR(\"=\"); }", "Num", "{ toPFR(\"EXEC_CONDITION_\" + peek(execStack) + \":\"); }", "\"to\"", "{ toPFR(peek(execIdStack)); toPFR(this.currentLexem[1]); toPFR(\"<=\"); }", "Num", "{ toPFR(\"EXEC_FINISH_\" + peek(execStack)); toPFR(\"JumpOnFalse\"); }", "{ toPFR(\"EXEC_BODY_\" + peek(execStack)); toPFR(\"Jump\"); }", "{ toPFR(\"EXEC_STEPCHANGE_\" + peek(execStack) + \":\"); }", "Step", "{ toPFR(\"EXEC_CONDITION_\" + peek(execStack)); toPFR(\"Jump\"); toPFR(\"EXEC_FINISH_\" + execStack.pop() + \"\"); }"]}, {"lPart": "Step", "rPart": ["\"step\"", "{ toPFR(peek(execIdStack)); toPFR(execIdStack.pop()); toPFR(this.currentLexem[1]); toPFR(\"+\"); toPFR(\"=\"); }", "Num"]}, {"lPart": "Step", "rPart": ["{ toPFR(peek(execIdStack)); toPFR(execIdStack.pop()); toPFR(\"1\"); toPFR(\"+\"); toPFR(\"=\"); }"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n};\n\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for(var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\n// Стеки для обработки операций и управления потоком\nvar unaryStack, opStack, execIdStack, execStack, execCnt;\n\nfunction resetAll() {\n    unaryStack = [];\n    opStack = [];\n    execIdStack = [];\nexecStack =[];\nexecCnt =0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\n// Функция определения приоритета операций\nfunction getPriority(s) {\n    switch(s) {\n        case \"(\": return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\": return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\": return 2;\n    }\n}"}}},
{"FIO":"Гордт М.С.","Collection":"223121322",{"_id": {"$oid": "67c4151baf563521c9d5aefc"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c45cc3af563521c9d5b249"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")", "|", "(", "[\\\"]", "[ !#-~]", "*", "[\\\"]", ")"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6d180e0b22203e7cc01d6"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["(", "[\\\"]", "[]", "+", "[\\\"]", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "arithmeticSign", "rPart": ["[-+*/<>=]"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[s]", "[e]", "[t]", "[(]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "functionWord", "rPart": ["[a-z]", "+", "[@]"]}, {"lPart": "type", "rPart": ["[&]", "(", "(", "[i]", "[n]", "[t]", ")", "|", "(", "[s]", "[t]", "[r]", ")", "|", "(", "[f]", "[l]", "[o]", "[a]", "[t]", ")", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fbcd818558742cb43362e3"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "types", "rPart": ["[$]", "(", "(", "[i]", "[n]", "[t]", ")", "|", "(", "[s]", "[t]", "[r]", ")", "|", "(", "[f]", "[l]", "[o]", "[a]", "[t]", ")", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "splitter", "id", "\")\"", "delimiter"]}, {"lPart": "Programm", "rPart": ["(", "Operator", "|", "Expr", ")", "+"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "\"\\[\"", "Operator", "\"\\]\"", "delimiter", "\"\\[\"", "Expr", "\"\\]\"", "delimiter", "\"\\[\"", "Operator", "\"\\]\"", "\")\"", "BlockOrOperator"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "delimiter"]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "const", "\")\"", "Operator", "+", ")", "+", "(", "\"default\"", "Operator", "+", ")", "\"end\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680eea778558742cb433a418"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "types", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "splitter", "id", "\")\"", "delimiter"]}, {"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "\"\\[\"", "Operator", "\"\\]\"", "delimiter", "\"\\[\"", "Expr", "\"\\]\"", "delimiter", "\"\\[\"", "Operator", "\"\\]\"", "\")\"", "BlockOrOperator"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "delimiter"]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "const", "\")\"", "Operator", "+", ")", "+", "(", "\"default\"", "Operator", "+", ")", "\"end\""]}, {"lPart": "Function", "rPart": ["id", "\"=\"", "types", "\"(\"", "(", "types", "id", "(", "splitter", "types", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Щербакова А.А.","Collection":"214531223",{"_id": {"$oid": "67b8b566ce6dd03692d08f2d"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b8bb54ce6dd03692d08f56"}, "rules": "Lab1", "data": {"rList": [{"lPart": "constExp", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[E]", "(", "[+]", "?", "|", "[-]", ")", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", ")", "[']"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/%&|^]", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[a-zA-Z]", "?", ")", "*"]}, {"lPart": "constInt", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "assignSign", "rPart": ["[:]", "[=]"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd445aaf563521c9d5cae4"}, "rules": "Lab2", "data": {"rList": [{"lPart": "constExp", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[E]", "(", "[+]", "?", "|", "[-]", ")", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", ")", "[']"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/%&|^]", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[a-zA-Z]", "?", ")", "*"]}, {"lPart": "constInt", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "assignSign", "rPart": ["[:]", "[=]"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "const", "rPart": ["constExp", "|", "constChar", "|", "constFloat", "|", "constInt"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"exp\""]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "assignSign", "expr", "delimiter"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "body", "(", "condElseIf", ")", "?", "(", "condElse", ")", "?"]}, {"lPart": "body", "rPart": ["\"{\"", "(", "assign", "|", "expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "body", ")", "?", "\"}\""]}, {"lPart": "condElseIf", "rPart": ["\"?\"", "\":\"", "\"(\"", "expr", "\")\"", "body"]}, {"lPart": "condElse", "rPart": ["\":\"", "body"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "(", "\"leave\"", "delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expr", "switchBody", "(", "\"case\"", "\"(\"", "\"false\"", "\")\"", ")", "?", "\"end\""]}, {"lPart": "switchBody", "rPart": ["\"case\"", "const", "body", "(", "\"break\"", "delimiter", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "type", "id", ")", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "body"]}, {"lPart": "signs", "rPart": ["signOfOperation", "|", "signOfLogic", "|", "signOfEquality"]}, {"lPart": "text", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e1168a4635a960233ad044"}, "rules": "Lab3", "data": {"rList": [{"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["(", "aORf", "|", "cond", "|", "loop", "|", "switch", ")"]}, {"lPart": "aORf", "rPart": ["id", "tail"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "body", "condElseIf", "*", "condElse", "?"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "bodyWhile"]}, {"lPart": "switch", "rPart": ["\"select\"", "expr", "\"{\"", "bodySwitch", "\"}\"", "\"end\""]}, {"lPart": "tail", "rPart": ["(", "\":=\"", "expr", "delimeter", ")", "|", "(", "\"(\"", "argList", "?", "\")\"", "retType", "?", "body", ")"]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "body", "rPart": ["\"{\"", "(", "aORf", "|", "cond", "|", "loop", "|", "switch", ")", "?", "\"}\""]}, {"lPart": "bodyWhile", "rPart": ["\"{\"", "(", "aORf", "|", "cond", "|", "loop", "|", "switch", ")", "?", "(", "\"leave\"", "delimeter", ")", "?", "\"}\""]}, {"lPart": "bodySwitch", "rPart": ["(", "\"case\"", "\"(\"", "switchBranch", "\")\"", "\"{\"", "(", "aORf", "|", "cond", "|", "loop", "|", "switch", ")", "?", "(", "\"break\"", "delimeter", ")", "?", "\"}\"", ")", "+"]}, {"lPart": "condElseIf", "rPart": ["\"?:\"", "\"(\"", "expr", "\")\"", "body"]}, {"lPart": "condElse", "rPart": ["\":\"", "body"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "retType", "rPart": ["\"ret\"", "type"]}, {"lPart": "const", "rPart": ["constExp", "|", "constChar", "|", "constFloat", "|", "constInt"]}, {"lPart": "signs", "rPart": ["signOfOperation", "|", "signOfLogic", "|", "signOfEquality"]}, {"lPart": "switchBranch", "rPart": ["(", "const", "|", "\"false\"", ")", "?"]}, {"lPart": "type", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"exp\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constExp", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[E]", "(", "[+]", "?", "|", "[-]", ")", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", ")", "[']"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/%&|^]", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimeter", "rPart": ["\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Назаров М.А.","Collection":"415114441",{"_id": {"$oid": "6818e34c8558742cb433bb5f"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "6818e7158558742cb433bb70"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[0-9]", "{1,4}", "[a-zA-Z]", "+"]}, {"lPart": "IntOrFloatConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "charConst", "rPart": ["[']", "[]", "[']"]}, {"lPart": "expFloatConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[Ee]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}], "extension": ""}}},
{"FIO":"Толмачев Д.М.","Collection":"221511233",{"_id": {"$oid": "67c455dfaf563521c9d5b1e6"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c46141af563521c9d5b2a5"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", "?", ")", "?", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[+*/=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c850a7af563521c9d5bfa1"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", "?", ")", "?", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[+*/=]"]}], "extension": ""}}{"_id": {"$oid": "67c85904af563521c9d5bfd5"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[o]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "*"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67dacba4e0b22203e7cc1686"}, "rules": "laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonst4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "сonst8", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67ed4c8ca600182c7517af27"}, "rules": "laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonst4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "сonst8", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"-\"", "|", "\"/\""]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "SignOfOperation", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "assignSyntax", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}], "extension": ""}}},
{"FIO":"Щелупанов А.Б.","Collection":"455145234",{"_id": {"$oid": "67bd6c65af563521c9d59166"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bd6d99af563521c9d5916f"}, "rules": "LAb1", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cf32caaf563521c9d5d5e9"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Conststr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "Constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operation", "rPart": ["[-+*/]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "program", "rPart": ["statement", "*"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "Id", "\";\""]}, {"lPart": "operator", "rPart": ["Const", "\";\""]}, {"lPart": "expr", "rPart": ["Conststr", "|", "Const"]}, {"lPart": "statement", "rPart": ["assign", "|", "operator"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}], "extension": "var ignoreLastWord; "}}{"_id": {"$oid": "67e2a6074635a960233ad901"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Conststr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operation", "rPart": ["[+*/]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "LogNo", "rPart": ["[!]"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "Id", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "Expr", "rPart": ["(", "Minus", "|", "LogNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "Operation", "|", "compare", "|", "Minus", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["Const", "|", "Constchar", "|", "Conststr", "|", "Constreal"]}, {"lPart": "operator", "rPart": ["(", "const", "|", "compare", "|", "logic", "|", "Operation", "|", "Minus", "|", "LogNo", ")", "\",\""]}], "extension": "var ignoreLastWord; "}}{"_id": {"$oid": "67f53e1e8558742cb4333d0c"}, "rules": "Lab4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "Id", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "operators", ")", "?", "\"end\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "Minus", "|", "LogNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "const", "rPart": ["Const", "|", "Constchar", "|", "Conststr", "|", "Constreal"]}, {"lPart": "ArgList", "rPart": ["Id", "(", "\",\"", "Id", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "Operation", "|", "compare", "|", "Minus", ")", "Expr", ")", "?"]}, {"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Conststr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "LogNo", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Operation", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord; "}}{"_id": {"$oid": "67f543688558742cb4333df8"}, "rules": "Lab5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "Id", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "operators", ")", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "Minus", "|", "LogNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "const", "rPart": ["Const", "|", "Constchar", "|", "Conststr", "|", "Constreal"]}, {"lPart": "ArgList", "rPart": ["Id", "(", "\",\"", "Id", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "Operation", "|", "compare", "|", "Minus", ")", "Expr", ")", "?"]}, {"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Conststr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "LogNo", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Operation", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}], "extension": "var ignoreLastWord; "}}{"_id": {"$oid": "6808f1858558742cb4338bc5"}, "rules": "Lab6", "data": {"rList": [{"lPart": "prog", "rPart": ["{whileCnt=0;}", "(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["{toPFR(\"Func\");toPFR(this.currentLexem[1]);}", "Id", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "Id", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++whileCnt);}", "\"foreach\"", "\"(\"", "Id", "\"in\"", "{toPFR(\"_cycle_\"); toPFR(this.currentLexem[1]); toPFR(\"=\");}", "const", "{toPFR(\"CycleDo_\" +peek(ctlStk)+ \":\");}", "\":\"", "{toPFR(\"_cycle_\"); toPFR(this.currentLexem[1]); toPFR(\">=\");}", "const", "{toPFR(\"CycleExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "{toPFR(\"_cycle_\");}", "{toPFR(\"1\");}", "{toPFR(\"_cycle_\");}", "{toPFR(\"=\");}", "\")\"", "(", "operators", "|", "operator", ")", "{toPFR(\"CycleDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"CycleExit_\"+peek(ctlStk)+\":\");}"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "operators", ")", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "Minus", "|", "LogNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "const", "rPart": ["Const", "|", "Constchar", "|", "Conststr", "|", "Constreal"]}, {"lPart": "ArgList", "rPart": ["{toPFR(this.currentLexem[1]);}", "Id", "(", "\",\"", "{toPFR(this.currentLexem[1]);}", "Id", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "logic", "|", "Operation", "|", "compare", "|", "Minus", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Conststr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "LogNo", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Operation", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}], "extension": "\nvar ignoreLastWord = false;\nvar whileCnt = 0;\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\n\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n\n return 0;\n}\n"}}},
{"FIO":"Хицков А.К.","Collection":"142543311",{"_id": {"$oid": "67b6af90ce6dd03692d08721"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c1b590af563521c9d5a856"}, "rules": "лаб1", "data": {"rList": [{"lPart": "char", "rPart": ["[\\']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["[0]", "(", "(", "[b]", "[01]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")", ")"]}, {"lPart": "string", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d68191e0b22203e7cbfc30"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "universalSign", "rPart": ["[-+]"]}, {"lPart": "binarySign", "rPart": ["(", "[*^/%<>]", ")", "|", "(", "[<>!+]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "constBase4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constBase16", "rPart": ["[1]", "[6]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67e8d4c14635a960233af57e"}, "rules": "lab3", "data": {"rList": [{"lPart": "File", "rPart": ["(", "Function", "|", "BlockOperator", ")", "+"]}, {"lPart": "BlockOperator", "rPart": ["Break", "|", "OneOperator", "|", "(", "\"{\"", "(", "BlockOperator", ")", "*", "\"}\"", ")"]}, {"lPart": "Break", "rPart": ["(", "\"leave\"", "|", "\"stop\"", ")", "\";\""]}, {"lPart": "OneOperator", "rPart": ["InitOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator"]}, {"lPart": "InitOperator", "rPart": ["(", "type", ")", "?", "id", "(", "\"<-\"", "Expr", ")", "?", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"?\"", "IfExpr", "(", "\"?:\"", "IfExpr", ")", "*", "(", "\":\"", "BlockOperator", ")", "?"]}, {"lPart": "ForOperator", "rPart": ["\"foreach\"", "\"(\"", "(", "type", ")", "?", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "BlockOperator", ")", "*", "(", "\"any\"", "\"do\"", "BlockOperator", ")", "?", "\"}\""]}, {"lPart": "IfExpr", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "BegExpr", "rPart": ["(", "universal", "|", "unarySign", ")", "?", "IdConst", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binarySign", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "Function", "rPart": ["type", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\""]}, {"lPart": "IdConst", "rPart": ["(", "id", "(", "\"(\"", "(", "(", "IdConst", "|", "Expr", ")", "(", "\",\"", "(", "IdConst", "|", "Expr", ")", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "const"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["[0]", "(", "(", "[b]", "[01]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")", ")"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "binarySign", "rPart": ["[*/%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fd15f38558742cb4336abc"}, "rules": "lab4", "data": {"rList": [{"lPart": "File", "rPart": ["Function", "+"]}, {"lPart": "Id", "rPart": ["type", "id"]}, {"lPart": "Function", "rPart": ["id", "\"<-\"", "type", "\"(\"", "(", "Id", "(", "\",\"", "Id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "BlockOperator", "rPart": ["OneOperator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "OneOperator", "rPart": ["InitOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "AssignOperator", "|", "SpecWord"]}, {"lPart": "InitOperator", "rPart": ["Id", "(", "\"<-\"", "Expr", ")", "?", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"?\"", "IfExpr", "ElseIf", "Else"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "IfExpr", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "ForOperator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "BlockOperator", ")", "*", "(", "\"any\"", "\"do\"", "BlockOperator", ")", "?", "\"}\""]}, {"lPart": "AssignOperator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"leave\"", "|", "\"stop\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "IfExpr", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "binarySign", "|", "universal", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["(", "unarySign", "|", "universal", ")", "?", "Factor"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["[0]", "(", "(", "[b]", "[01]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")", ")"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "binarySign", "rPart": ["[*/%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680666cd8558742cb4338141"}, "rules": "lab5", "data": {"rList": [{"lPart": "File", "rPart": ["Function", "+"]}, {"lPart": "Id", "rPart": ["type", "id"]}, {"lPart": "Function", "rPart": ["id", "\"<-\"", "type", "\"(\"", "(", "Id", "(", "\",\"", "Id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "BlockOperator", "rPart": ["OneOperator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "OneOperator", "rPart": ["InitOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "AssignOperator", "|", "SpecWord"]}, {"lPart": "InitOperator", "rPart": ["Id", "(", "\"<-\"", "Expr", ")", "?", "(", "\",\"", "id", "(", "\"<-\"", "Expr", ")", "?", ")", "*", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"?\"", "IfExpr", "ElseIf", "Else"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "IfExpr", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "ForOperator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "BlockOperator", "*", ")", "+", "(", "\"any\"", "\"do\"", "BlockOperator", "*", ")", "?", "\"}\""]}, {"lPart": "AssignOperator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"leave\"", "|", "\"stop\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "IfExpr", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "binarySign", "|", "universal", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["(", "unarySign", "|", "universal", ")", "?", "Factor"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["[0]", "(", "(", "[b]", "[01]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")", ")"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "binarySign", "rPart": ["[*/%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6807a4818558742cb43384ae"}, "rules": "lab5test", "data": {"rList": [{"lPart": "File", "rPart": ["Function", "+"]}, {"lPart": "Id", "rPart": ["type", "id"]}, {"lPart": "Function", "rPart": ["id", "\"<-\"", "type", "\"(\"", "(", "Id", "(", "\",\"", "Id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "BlockOperator", "rPart": ["OneOperator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "OneOperator", "rPart": ["InitOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "AssignOperator", "|", "SpecWord"]}, {"lPart": "InitOperator", "rPart": ["Id", "(", "\"<-\"", "Expr", ")", "?", "(", "\",\"", "id", "(", "\"<-\"", "Expr", ")", "?", ")", "*", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"?\"", "IfExpr", "ElseIf", "Else"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "IfExpr", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "ForOperator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "BlockOperator", "*", ")", "*", "(", "\"any\"", "\"do\"", "BlockOperator", "*", ")", "?", "\"}\""]}, {"lPart": "AssignOperator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"leave\"", "|", "\"stop\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "IfExpr", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "binarySign", "|", "universal", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["(", "unarySign", "|", "universal", ")", "?", "Factor"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "(", "(", "type", "\")\"", "Factor", ")", "|", "(", "Expr", "\")\"", ")", ")", ")", "|", "const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["[0]", "(", "(", "[b]", "[01]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")", ")"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "binarySign", "rPart": ["[*/%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680d8bdc8558742cb4339d24"}, "rules": "lab6", "data": {"rList": [{"lPart": "File", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"<-\"", "type", "\"(\"", "(", "Id", "(", "\",\"", "Id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Id", "rPart": ["type", "id"]}, {"lPart": "BlockOperator", "rPart": ["OneOperator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "OneOperator", "rPart": ["InitOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "AssignOperator", "|", "SpecWord"]}, {"lPart": "InitOperator", "rPart": ["Id", "(", "\"<-\"", "Expr", ")", "?", "(", "\",\"", "id", "(", "\"<-\"", "Expr", ")", "?", ")", "*", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"?\"", "IfExpr", "ElseIf", "Else"]}, {"lPart": "ForOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constInt", "\":\"", "constInt", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "Const", "\"do\"", "BlockOperator", "*", ")", "+", "(", "\"any\"", "\"do\"", "BlockOperator", "*", ")", "?", "\"}\""]}, {"lPart": "AssignOperator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"leave\"", "|", "\"stop\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "IfExpr", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "IfExpr", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "binarySign", "|", "universal", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["(", "unarySign", "|", "universal", ")", "?", "Factor"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constInt", "|", "constDouble", "|", "constBin", "|", "constOctal", "|", "constStr"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "Const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[\\']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "(", "[\"'\\\\]", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "binarySign", "rPart": ["[*/%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Логунков Д.С.","Collection":"324521222",{"_id": {"$oid": "67f66fab8558742cb4334927"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f66fda8558742cb433492e"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "?", "|", "[\\']", "|", "[\\\\]", "[trn]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constInt", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "operations", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "constInt8", "rPart": ["(", "[0]", "|", "(", "[1-7]", "[0-7]", "*", ")", ")", "[_]", "[8]"]}, {"lPart": "constInt4", "rPart": ["(", "[0]", "|", "(", "[1-3]", "[0-3]", "*", ")", ")", "[_]", "[4]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6bbd68558742cb4334db7"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "680627a38558742cb4337fef"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "?", "|", "[\\']", "|", "[\\\\]", "[trn]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constInt", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "operations", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "constInt8", "rPart": ["(", "[0]", "|", "(", "[1-7]", "[0-7]", "*", ")", ")", "[_]", "[8]"]}, {"lPart": "constInt4", "rPart": ["(", "[0]", "|", "(", "[1-3]", "[0-3]", "*", ")", ")", "[_]", "[4]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cbaa88558742cb4339a1b"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Прошин Н.Ю.","Collection":"523233552",{"_id": {"$oid": "67c07046af563521c9d5a448"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c07312af563521c9d5a47a"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[\\.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "four", "rPart": ["[0]", "[qQ]", "[0-4]", "+"]}, {"lPart": "eight", "rPart": ["[0]", "[xX]", "[0-8]", "+"]}, {"lPart": "simbol", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c08961af563521c9d5a50b"}, "rules": "lab1", "data": {"rList": [{"lPart": "Expression", "rPart": ["(", "id", "|", "Const", "|", "Function", "|", "UnaryOperation", "|", "BinaryOperation", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "Const", "rPart": ["simbol", "|", "string", "|", "const", "|", "four", "|", "eight", "|", "ConstBool", "|", "ConstNull"]}, {"lPart": "ConstBool", "rPart": ["(", "\"false\"", "|", "\"true\"", ")"]}, {"lPart": "ConstNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "simbol", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[\\.]", "[0-9]", "*", ")", "?"]}, {"lPart": "four", "rPart": ["[0]", "[qQ]", "[0-3]", "+"]}, {"lPart": "eight", "rPart": ["[0]", "[xX]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}, {"lPart": "unaryOperator", "rPart": ["(", "[!~]", ")"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/$&|%]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "unaryOrBinaryOperator", "rPart": ["(", "[-]", ")"]}, {"lPart": "Conditional", "rPart": ["(", "\"when\"", "Expression", "Block", "(", "\"other\"", "(", "Block", "|", "Expression", ")", ")", "?", ")"]}, {"lPart": "Block", "rPart": ["\"{\"", "Construct", "+", "\"}\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "Block", "|", "Expression", ")"]}, {"lPart": "Construct", "rPart": ["Set", "|", "Expression", "|", "Cycle", "|", "Conditional", "|", "Function", "|", "Switch", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")", "|", "FunctionCall"]}, {"lPart": "Set", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block", "\"->\"", "id"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "\"by\"", "Const", "\"do\"", "SwichBody", "(", "\"by\"", "Const", "\"any\"", "\"do\"", "(", "Construct", "*", "|", "Block", "*", ")", ")", "?", "\"}\""]}, {"lPart": "SwichBody", "rPart": ["(", "Construct", "*", "|", "Block", "*", ")", "(", "\"leave\"", "\";\"", ")", "?"]}, {"lPart": "UnaryOperation", "rPart": ["(", "unaryOperator", "|", "unaryOrBinaryOperator", ")", "Expression"]}, {"lPart": "BinaryOperation", "rPart": ["Expression", "(", "binaryOperator", "|", "unaryOrBinaryOperator", ")", "Expression"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"->\"", "id"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6d39e8558742cb4334f09"}, "rules": "lab18", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block", "\"->\"", "id"]}, {"lPart": "Block", "rPart": ["\"{\"", "Construct", "+", "\"}\""]}, {"lPart": "Construct", "rPart": ["Set", "|", "Cycle", "|", "Conditional", "|", "Switch", "|", "FunctionCall", "|", "Block", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")"]}, {"lPart": "Set", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Construct"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "Construct", "PartElse"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "\"by\"", "Const", "\"do\"", "SwichBody", "(", "\"by\"", "Const", "\"any\"", "\"do\"", "(", "Construct", "*", ")", ")", "?", "\"}\""]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "\"function\"", "\"(\"", "(", "Operand", "(", "\",\"", "Operand", ")", "*", ")", "?", "\")\"", "\"->\"", "id"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "Const", "rPart": ["simbol", "|", "string", "|", "const", "|", "four", "|", "eight"]}, {"lPart": "SwichBody", "rPart": ["(", "Construct", "*", ")"]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "Operand", "rPart": ["id", "|", "Const", "|", "FunctionCall"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "simbol", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9]", "{1,4}", ")", "|", "(", "[d]", "[0-9]", "{1,4}", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[\\.]", "[0-9]", "*", ")", "?"]}, {"lPart": "four", "rPart": ["[0]", "[qQ]", "[0-3]", "+"]}, {"lPart": "eight", "rPart": ["[0]", "[xX]", "[0-7]", "+"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "Construct"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fcc53d8558742cb433681d"}, "rules": "lab19", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block", "\"->\"", "id"]}, {"lPart": "Block", "rPart": ["\"{\"", "Construct", "+", "\"}\""]}, {"lPart": "Construct", "rPart": ["Assig", "|", "Cycle", "|", "Conditional", "|", "Switch", "|", "FunctionCall", "|", "Block", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")"]}, {"lPart": "Assig", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Construct"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "Construct", "PartElse"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "\"by\"", "Const", "\"do\"", "SwichBody", "(", "\"by\"", "Const", "\"any\"", "\"do\"", "(", "Construct", "*", ")", ")", "?", "\"}\""]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "\"function\"", "\"(\"", "(", "Operand", "(", "\",\"", "Operand", ")", "*", ")", "?", "\")\"", "\"->\"", "id"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "Const", "rPart": ["simbol", "|", "string", "|", "const", "|", "four", "|", "eight"]}, {"lPart": "SwichBody", "rPart": ["(", "Construct", "*", ")"]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "Operand", "rPart": ["id", "|", "Const", "|", "FunctionCall"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "simbol", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[\\.]", "[0-9]", "*", ")", "?"]}, {"lPart": "four", "rPart": ["[0]", "[qQ]", "[0-3]", "+"]}, {"lPart": "eight", "rPart": ["[0]", "[xX]", "[0-7]", "+"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "Construct"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6809a01b8558742cb43390b1"}, "rules": "lab0001", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block", "\"->\"", "id"]}, {"lPart": "Block", "rPart": ["\"{\"", "Construct", "+", "\"}\""]}, {"lPart": "Construct", "rPart": ["Set", "|", "Cycle", "|", "Conditional", "|", "Switch", "|", "FunctionCall", "|", "Block", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")"]}, {"lPart": "Set", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Construct"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "Construct", "PartElse"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "\"by\"", "Const", "\"do\"", "SwichBody", "(", "\"by\"", "Const", "\"any\"", "\"do\"", "(", "Construct", "*", ")", ")", "?", "\"}\""]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "\"function\"", "\"(\"", "(", "Operand", "(", "\",\"", "Operand", ")", "*", ")", "?", "\")\"", "\"->\"", "id"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "Construct"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "Const", "rPart": ["simbol", "|", "string", "|", "const", "|", "four", "|", "eight"]}, {"lPart": "SwichBody", "rPart": ["(", "Construct", "*", ")"]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "Operand", "rPart": ["id", "|", "Const", "|", "FunctionCall"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "simbol", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}, {"lPart": "simbol", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[\\.]", "[0-9]", "*", ")", "?"]}, {"lPart": "four", "rPart": ["[0]", "[qQ]", "[0-3]", "+"]}, {"lPart": "eight", "rPart": ["[0]", "[xX]", "[0-7]", "+"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6809af688558742cb433914c"}, "rules": "lab0002", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"set\"", "\"(\"", "\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Block", "rPart": ["\"{\"", "Construct", "+", "\"}\""]}, {"lPart": "Construct", "rPart": ["Set", "|", "Cycle", "|", "Conditional", "|", "Switch", "|", "FunctionCall", "|", "Block", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")"]}, {"lPart": "Set", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Construct"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "Construct", "PartElse"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "\"by\"", "Const", "\"do\"", "SwichBody", "(", "\"by\"", "Const", "\"any\"", "\"do\"", "(", "Construct", "*", ")", ")", "?", "\"}\""]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "Operand", "(", "\",\"", "Operand", ")", "*", ")", "?", "\")\"", "\";\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "Construct"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "Const", "rPart": ["simbol", "|", "string", "|", "const", "|", "four", "|", "eight"]}, {"lPart": "SwichBody", "rPart": ["(", "Construct", "*", ")"]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "Operand", "rPart": ["id", "|", "Const", "|", "FunctionCall"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "simbol", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}, {"lPart": "simbol", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[\\.]", "[0-9]", "*", ")", "?"]}, {"lPart": "four", "rPart": ["[0]", "[qQ]", "[0-3]", "+"]}, {"lPart": "eight", "rPart": ["[0]", "[xX]", "[0-7]", "+"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Син К.","Collection":"343145235",{"_id": {"$oid": "67adc8a8ce6dd03692d07a7a"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67adcf7ace6dd03692d07a92"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "ConstReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "StringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cc3530af563521c9d5c7e6"}, "rules": "lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "ConstReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "StringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/%]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Spliter", "rPart": ["[,:;]"]}, {"lPart": "Comment", "rPart": ["[[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "LogicalOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e001bf4635a960233ac8ef"}, "rules": "lab3", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Const28", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "ConstReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "StringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Spliter", "rPart": ["[,:;]"]}, {"lPart": "Comment", "rPart": ["[[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "unLogical", "rPart": ["[!]"]}, {"lPart": "binLogical", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Const", "rPart": ["Const28", "|", "ConstReal", "|", "StringConst", "|", "CharConst"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["unMath", "?", "(", "Id", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "unMath", "|", "binMath", "|", "compare", "|", "binLogical", ")", "Expr", ")", "?"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Id", "\")\"", "\";\""]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operators", "?", "\"}\"", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "\"{\"", "Operators", "?", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "\"{\"", "Operators", "?", "\"}\""]}, {"lPart": "Break", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Selection", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "Operators", "?", "Termination", "?", ")", "+", "(", "\"nooption\"", "Operators", "?", ")", "?", "\"end\""]}, {"lPart": "Termination", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Operators", "rPart": ["(", "Assignment", "|", "Condition", "|", "Loop", "|", "Selection", "|", "Break", ")", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "(", "Type", "Id", "(", "\",\"", "Type", "Id", ")", "*", ")", "?", "\")\"", "\"ret\"", "(", "Type", "|", "\"void\"", ")", "\"{\"", "Operators", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f26f59a600182c7517ba3d"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "(", "Type", "Id", "(", "\",\"", "Type", "Id", ")", "*", ")", "?", "\")\"", "\"ret\"", "(", "Type", "|", "\"void\"", ")", "\"{\"", "Operators", "?", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Condition", "|", "Loop", "|", "Selection", "|", "Break", "|", "CallFunction", "|", "ret", ")"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Id", "\")\"", "\";\""]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operators", "?", "\"}\"", "PartElse"]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "(", "Const28", "|", "ConstReal", ")", "\":\"", "(", "Const28", "|", "ConstReal", ")", "\")\"", "\"{\"", "Operators", "?", "\"}\""]}, {"lPart": "Selection", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "Operators", "?", "Termination", "?", ")", "+", "(", "\"nooption\"", "Operators", "?", ")", "?", "\"end\""]}, {"lPart": "Break", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "CallFunction", "rPart": ["\"Call\"", "\":\"", "Id", "\"(\"", "(", "Expr", "\",\"", "(", "Expr", ")", "*", ")", "?", "\")\"", "\";\""]}, {"lPart": "ret", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "\"{\"", "Operators", "?", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["(", "unMath", "|", "unLogical", ")", "?", "(", "(", "Id", "(", "CallFunction", ")", "?", ")", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binMath", "|", "compare", "|", "binLogical", "unMath", ")", "Expr", ")", "?"]}, {"lPart": "Const", "rPart": ["Const28", "|", "ConstReal", "|", "StringConst", "|", "CharConst"]}, {"lPart": "Termination", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Const28", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "ConstReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "StringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLogical", "rPart": ["[!]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binLogical", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Spliter", "rPart": ["[,:;]"]}, {"lPart": "Comment", "rPart": ["[[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680645638558742cb4338043"}, "rules": "lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "(", "Id", "(", "\",\"", "Id", ")", "*", ")", "?", "\")\"", "\"ret\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Condition", "|", "Loop", "|", "Selection", "|", "Break", "|", "Termination", "|", "CallFunction", "|", "ret", ")"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Id", "\")\"", "\";\""]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "PartElse"]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "(", "Const28", "|", "ConstReal", ")", "\":\"", "(", "Const28", "|", "ConstReal", ")", "\")\"", "BlockOrOperator"]}, {"lPart": "Selection", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "Operator", "*", ")", "+", "(", "\"nooption\"", "Operator", "*", ")", "?", "\"end\""]}, {"lPart": "Break", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Termination", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "CallFunction", "rPart": ["\"Call\"", "\":\"", "Id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "\";\""]}, {"lPart": "ret", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["(", "unMath", "|", "unLogical", ")", "?", "(", "Id", "(", "CallFunction", ")", "?", "|", "Const", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binMath", "|", "compare", "|", "binLogical", "|", "unMath", ")", "Expr", ")", "?"]}, {"lPart": "Const", "rPart": ["Const28", "|", "ConstReal", "|", "StringConst", "|", "CharConst"]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Const28", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "ConstReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "StringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLogical", "rPart": ["[!]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binLogical", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68177c218558742cb433b366"}, "rules": "lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{initialize();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "(", "Id", "(", "\",\"", "Id", ")", "*", ")", "?", "\")\"", "\"ret\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Condition", "|", "Loop", "|", "Selection", "|", "Break", "|", "Termination", "|", "(", "Id", "ParamList", "\";\"", ")", "|", "ret", ")"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "Id", "\")\"", "\";\"", "{toPFR(\"=\");}"]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "PartElse"]}, {"lPart": "Loop", "rPart": ["{ctlStk.push(++operatorCnt); toPFR(\"ForBegin\"+peek(ctlStk)+\":\");}", "\"foreach\"", "\"(\"", "Id", "{toPFR(this.currentLexem[1]+\"_iter\"); toPFR(\"defVar\");}", "\"in\"", "(", "Const28", "|", "ConstReal", ")", "\":\"", "(", "Const28", "|", "ConstReal", ")", "\")\"", "{toPFR(\"ForCond\"+peek(ctlStk)+\":\");}", "BlockOrOperator", "{toPFR(\"jmp\"); toPFR(\"ForCond\"+peek(ctlStk)); toPFR(\"ForEnd\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Selection", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "Operator", "*", ")", "+", "(", "\"nooption\"", "Operator", "*", ")", "?", "\"end\""]}, {"lPart": "Break", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Termination", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}, {"lPart": "ret", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Expr", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "(", "unMath", "|", "unLogical", ")", "BegExpr", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Id", "(", "ParamList", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const"]}, {"lPart": "BegExpr", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expr", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExpr", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "(", "binMath", "|", "compare", "|", "binLogical", "|", "unMath", ")", "Expr", ")", "{if(opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Const", "rPart": ["Const28", "|", "ConstReal", "|", "StringConst", "|", "CharConst"]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Const28", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "ConstReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "StringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "unLogical", "rPart": ["[!]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binLogical", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере,\n// восходящий выполняет действия не так, как хотелось бы.\n//Пример заимствован из Sample6 и улучшен\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r =\"\";\n for(var i = 0; i < this.history.length; i++)\n  r +=\" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar unaryStack, opStack, ctlStk, operatorCnt;\nfunction initialize(){\n ctlStk = [];\n unaryStack = [];\n opStack = [];\n operatorCnt = 0; \n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n  switch (s) {\n    case \"(\": return 0;\n    case \"||\": return 1;\n    case \"&&\": return 2;\n    case \"==\":\n    case \"!=\": return 3;\n    case \"<\":\n    case \">\":\n    case \"<=\":\n    case \">=\": return 4;\n    case \"+\":\n    case \"-\": return 5;\n    case \"*\":\n    case \"/\": return 6;\n    default: return -1;\n  }\n}\n"}}},
{"FIO":"Еранский К.С.","Collection":"523212121",{"_id": {"$oid": "67b5e60bce6dd03692d085de"}, "rules": "laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}], "extension": ""}}{"_id": {"$oid": "67b5e766ce6dd03692d085fa"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67cd7ce4af563521c9d5cccd"}, "rules": "laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "logica", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "type", "?", "id", "\")\"", "operblock"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "\"exit;\""]}, {"lPart": "assignment", "rPart": ["\"set\"", "\"(\"", "expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "if", "rPart": ["\"when\"", "\"(\"", "expr", "\")\"", "operblock", "(", "\"other\"", "operblock", ")", "?"]}, {"lPart": "const", "rPart": ["constQuadro", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "switch", "rPart": ["\"case\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"when\"", "const", "\"then\"", "\"{\"", "operator", "+", "\"exit;\"", "?", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "operator", "+", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\"", "\"exit;\"", "?"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operations", "rPart": ["signs", "|", "logica"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\""]}, {"lPart": "comma", "rPart": ["[,]"]}], "extension": ""}}{"_id": {"$oid": "67ea41354635a960233b00b2"}, "rules": "laba3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "logica", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "type", "?", "id", "\")\"", "operblock"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "\"exit;\""]}, {"lPart": "assignment", "rPart": ["\"set\"", "\"(\"", "expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "if", "rPart": ["\"when\"", "\"(\"", "expr", "\")\"", "operblock", "(", "\"other\"", "operblock", ")", "?"]}, {"lPart": "const", "rPart": ["constQuadro", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "switch", "rPart": ["\"case\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"when\"", "const", "\"then\"", "\"{\"", "operator", "+", "\"exit;\"", "?", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "operator", "+", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\"", "\"exit;\"", "?"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operations", "rPart": ["signs", "|", "logica"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\""]}, {"lPart": "comma", "rPart": ["[,]"]}], "extension": ""}}{"_id": {"$oid": "67ebc953a600182c7517a9bf"}, "rules": "laba4", "data": {"rList": [{"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "ArgList", "?", "\")\"", "operblock"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "return"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "assignment", "rPart": ["\"set\"", "\"(\"", "expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "if", "rPart": ["\"when\"", "\"(\"", "expr", "\")\"", "operblock", "(", "\"other\"", "operblock", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "(", "\"exit;\"", ")", "?"]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\""]}, {"lPart": "ArgList", "rPart": ["type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "const", "rPart": ["constQuadro", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operations", "rPart": ["signs", "|", "logica"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "logica", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}], "extension": ""}}{"_id": {"$oid": "680510278558742cb4337eee"}, "rules": "laba5", "data": {"rList": [{"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "ArgList", "?", "\")\"", "operblock"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "return"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "assignment", "rPart": ["\"set\"", "\"(\"", "expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "if", "rPart": ["\"when\"", "\"(\"", "expr", "\")\"", "operblock", "(", "\"other\"", "operblock", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "(", "\"exit;\"", ")", "?"]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\""]}, {"lPart": "ArgList", "rPart": ["type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "const", "rPart": ["constQuadro", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operations", "rPart": ["signs", "|", "logica"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "logica", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}], "extension": ""}}{"_id": {"$oid": "681764108558742cb433b24d"}, "rules": "laba6", "data": {"rList": [{"lPart": "global", "rPart": ["{whileCnt=0;}", "(", "func", "|", "operator", ")", "*"]}, {"lPart": "func", "rPart": ["type", "?", "{ toPFR(\"FuncStart_\");toPFR(this.currentLexem[1]);}", "id", "\"(\"", "ArgList", "?", "\")\"", "operblock"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "return"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "assignment", "rPart": ["\"set\"", "\"(\"", "expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "\")\"", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "if", "rPart": ["\"when\"", "\"(\"", "expr", "\")\"", "operblock", "(", "\"other\"", "operblock", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["{ ctlStk.push(++whileCnt);var loop_var, start_val, end_val, step_val = \"1\";var has_step = false;}", "\"exec\"", "operblock", "\"with\"", "{ loop_var = this.currentLexem[1]; }", "id", "\"from\"", "{start_val = this.currentLexem[1];toPFR(loop_var); toPFR(start_val); toPFR(\"=\");}", "const", "\"to\"", "{end_val = this.currentLexem[1]; toPFR(\"LabelStart_\" + peek(ctlStk) + \":\"); toPFR(loop_var); toPFR(end_val); toPFR(\"<=\");toPFR(\"LabelEnd_\" + peek(ctlStk)); toPFR(\"JmpF\");}", "const", "(", "\"step\"", "{ has_step = true; step_val = this.currentLexem[1]; }", "const", ")", "?", "{toPFR(loop_var); toPFR(loop_var); if (has_step) toPFR(step_val); else toPFR(\"1\"); toPFR(\"+\"); toPFR(\"=\");}", "{ toPFR(\"LabelStart_\" + peek(ctlStk)); toPFR(\"Jmp\");}", "(", "\"exit;\"", ")", "?", "{ toPFR(\"LabelEnd_\" + ctlStk.pop() + \":\"); }"]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}, {"lPart": "type", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\"", ")"]}, {"lPart": "ArgList", "rPart": ["type", "?", "{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "type", "?", "{toPFR(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["operand", "(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "operations", "expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "const", "rPart": ["constQuadro", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "operand", "rPart": ["(", "{toPFR(this.currentLexem[1]);}", "const", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "id", "{toPFR(opStk.pop());}", ")"]}, {"lPart": "operations", "rPart": ["signs", "|", "logica"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "logica", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}], "extension": "var ignoreLastWord = false;\nvar whileCnt = 0;\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar ctlStk=[1]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\n\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n\n return 0;\n}\n"}}},
{"FIO":"Демьяненко А.Д.","Collection":"521133345",{"_id": {"$oid": "67baf2d8ce6dd03692d09460"}, "rules": "Rules1", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "ConstQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstDecimals", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "ConstString", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>&|]"]}, {"lPart": "WordForForm", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Space", "rPart": ["[ ]", "+"]}], "extension": ""}}{"_id": {"$oid": "67baf5f6ce6dd03692d0947f"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+3", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67cea972af563521c9d5d144"}, "rules": "Rules2", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]", "?"]}, {"lPart": "ConstQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstDecimals", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "ConstString", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>&|]"]}, {"lPart": "WordForForm", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "func", "rPart": ["Ident", "\"==\"", "type", "\"(\"", "(", "Ident", "(", "\",\"", "Ident", ")", "*", ")", "?", "\")\"", "operblock"]}, {"lPart": "fundexpr", "rPart": ["const", "|", "Ident"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "cycle", "|", "switch", "|", "\"leave\""]}, {"lPart": "assignment", "rPart": ["\"let\"", "Ident", "\"on\"", "expr", "\";\""]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "operblock", "\"esle\"", "operblock", "?"]}, {"lPart": "const", "rPart": ["ConstQuadro", "|", "ConstOctal", "|", "ConstDecimals", "|", "ConstFloat", "|", "ConstChar", "|", "ConstString"]}, {"lPart": "cycle", "rPart": ["\"while\"", "\"(\"", "expr", "\"do\"", "operator", "+", "\")\""]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "operator", "*", "\"leave\"", ")", "+", "\"any do\"", "|", "\"any do\"", "operblock", "\"}\""]}, {"lPart": "expr", "rPart": ["fundexpr", "(", "SignOfOperation", "fundexpr", ")", "*"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\"", "|", "operator"]}], "extension": ""}}{"_id": {"$oid": "67cec15caf563521c9d5d395"}, "rules": "Rules3", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]", "?"]}, {"lPart": "ConstQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstDecimals", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "ConstString", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>&|]"]}, {"lPart": "WordForForm", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "func", "rPart": ["Ident", "\"==\"", "type", "\"(\"", "(", "Ident", "(", "\",\"", "Ident", ")", "*", ")", "?", "\")\"", "operblock"]}, {"lPart": "fundexpr", "rPart": ["const", "|", "Ident"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "cycle", "|", "switch", "|", "\"leave\""]}, {"lPart": "assignment", "rPart": ["\"let\"", "Ident", "\"on\"", "expr", "\";\""]}, {"lPart": "if", "rPart": ["\"by\"", "expr", "operblock", "\"esle\"", "operblock", "?"]}, {"lPart": "const", "rPart": ["ConstQuadro", "|", "ConstOctal", "|", "ConstDecimals", "|", "ConstFloat", "|", "ConstChar", "|", "ConstString"]}, {"lPart": "cycle", "rPart": ["\"while\"", "\"(\"", "expr", "\"do\"", "operator", "+", "\")\""]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "operator", "*", "\"leave\"", ")", "+", "\"any do\"", "|", "\"any do\"", "operblock", "\"}\""]}, {"lPart": "expr", "rPart": ["fundexpr", "(", "SignOfOperation", "fundexpr", ")", "*"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\"", "|", "operator"]}], "extension": ""}}{"_id": {"$oid": "67cec53baf563521c9d5d3c2"}, "rules": "Rules4", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]", "?"]}, {"lPart": "ConstQuadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "ConstOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "ConstDecimals", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "ConstString", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "Operation", "rPart": ["[-+*/%]"]}, {"lPart": "WordForForm", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comments", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "func", "rPart": ["Ident", "\"=\"", "type", "\"(\"", "(", "Ident", "(", "\",\"", "Ident", ")", "*", ")", "?", "\")\"", "operblock"]}, {"lPart": "fundexpr", "rPart": ["const", "|", "Ident"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle"]}, {"lPart": "assignment", "rPart": ["\"let\"", "Ident", "\"on\"", "expr", "Delimiter"]}, {"lPart": "if", "rPart": ["\"by\"", "\"(\"", "expr", "\")\"", "operblock", "else", "?"]}, {"lPart": "const", "rPart": ["ConstQuadro", "|", "ConstOctal", "|", "ConstDecimals", "|", "ConstFloat", "|", "ConstChar", "|", "ConstString"]}, {"lPart": "cycle", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "operblock", "(", "\"leave;\"", ")", "?"]}, {"lPart": "type", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "operator", "*", "\"}\"", "(", "\"leave;\"", ")", "?", ")", "+", "\"any do\"", "operblock", "\"}\""]}, {"lPart": "expr", "rPart": ["fundexpr", "(", "operations", "expr", ")", "?"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "else", "rPart": ["\"else\"", "operblock"]}, {"lPart": "compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operations", "rPart": ["Operation", "|", "logic", "|", "compare"]}], "extension": ""}}},
{"FIO":"Юдакова Н.Е.","Collection":"342332232",{"_id": {"$oid": "67b6a6b6ce6dd03692d086c9"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b6a863ce6dd03692d086d5"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9|a-z|A-Z]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b6a936ce6dd03692d086db"}, "rules": "Начало", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0–9a–zA–Z]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\\x00-\\x7F]", "*"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67c407f6af563521c9d5ae14"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "delemiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd96c0af563521c9d5cda7"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-z]", "[0-9A-Za-z]", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "[\"]", ")", "|", "(", "[']", "[]", "|", "[ \\t\\r\\n]", "[']", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "delemiter", "rPart": ["[;]"]}, {"lPart": "keywords", "rPart": ["[<]", "[-]"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "+", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6dbc9e0b22203e7cc0340"}, "rules": "Лаба22", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "delemiter", "rPart": ["[;]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+", "|", "[<-]"]}, {"lPart": "logic", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "comment", "rPart": ["[//]", "[//]", "+", "{{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea8c13a600182c7517a633"}, "rules": "Лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-z]", "[0-9A-Za-z]", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "+", "[\"]", ")", "|", "(", "[']", "[]", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[ \\t\\r\\n]", "[']", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "+", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "compare", "|", "logic", "|", "unaroperator", "|", "SignOfOperation", ")", "BegExpr", ")", "?"]}, {"lPart": "unaroperator", "rPart": ["[!]"]}, {"lPart": "Assign", "rPart": ["(", "Type", ")", "?", "id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"char\"", "|", "\"boolean\"", "|", "\"float\""]}, {"lPart": "Operator", "rPart": ["Assign", "|", "in", "|", "while", "|", "case"]}, {"lPart": "in", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "(", "\"not\"", "\"{\"", "Operator", "+", "\"}\"", ")", "?"]}, {"lPart": "while", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Operator", "+", "(", "break", ")", "?", "\"}\""]}, {"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "break", "rPart": ["\"leave;\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fcabcb8558742cb43367f5"}, "rules": "Лаба4", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-z]", "[0-9A-Za-z]", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "+", "[\"]", ")", "|", "(", "[']", "[]", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[ \\t\\r\\n]", "[']", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "+", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["(", "binar", "|", "unaroperator", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "compare", "|", "logic", "|", "SignOfOperation", "|", "binar", ")", "BegExpr", ")", "?"]}, {"lPart": "unaroperator", "rPart": ["[!]"]}, {"lPart": "Assign", "rPart": ["id", "Assign"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"char\"", "|", "\"boolean\"", "|", "\"float\""]}, {"lPart": "Operator", "rPart": ["Assign", "|", "in", "|", "while", "|", "case", "|", "break", "|", "return"]}, {"lPart": "in", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "BlockOperator", "Else"]}, {"lPart": "while", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOperator"]}, {"lPart": "prog", "rPart": ["Function", "*"]}, {"lPart": "break", "rPart": ["\"leave;\"", "|", "\"exit;\""]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Else", "rPart": ["\"not\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\"not\""]}, {"lPart": "binar", "rPart": ["[-]"]}, {"lPart": "case", "rPart": ["\"case\"", "Expr", "\"{\"", "Case", "+", "otherwise", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"when\"", "const", "\"then\"", "BlockOperator", "*"]}, {"lPart": "otherwise", "rPart": ["\"otherwise\"", "BlockOperator", "*"]}, {"lPart": "Assign", "rPart": ["(", "\"<-\"", "(", "Type", ")", "?", "\"Expr\"", "\";\"", ")"]}, {"lPart": "Arg", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Function", "rPart": ["(", "id", "\"(\"", "Arg", "?", "\")\"", "\"{\"", "BlockOperator", "+", "\"}\"", ")"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6815ff258558742cb433afa9"}, "rules": "Лаба5", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-z]", "[0-9A-Za-z]", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[t]", "[0-1]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[p]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "+", "[\"]", ")", "|", "(", "[']", "[]", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[ \\t\\r\\n]", "[']", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "+", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["(", "binar", "|", "unaroperator", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "compare", "|", "logic", "|", "SignOfOperation", "|", "binar", ")", "BegExpr", ")", "?"]}, {"lPart": "unaroperator", "rPart": ["[!]"]}, {"lPart": "Assign", "rPart": ["id", "Assign"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"char\"", "|", "\"boolean\"", "|", "\"float\""]}, {"lPart": "Operator", "rPart": ["Assign", "|", "in", "|", "while", "|", "case", "|", "break", "|", "return"]}, {"lPart": "in", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "BlockOperator", "Else"]}, {"lPart": "while", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOperator"]}, {"lPart": "prog", "rPart": ["Function", "+"]}, {"lPart": "break", "rPart": ["\"leave;\"", "|", "\"exit;\""]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Else", "rPart": ["\"not\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\"not\""]}, {"lPart": "binar", "rPart": ["[-]"]}, {"lPart": "case", "rPart": ["\"case\"", "Expr", "\"{\"", "Case", "+", "otherwise", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"when\"", "const", "\"then\"", "BlockOperator", "*"]}, {"lPart": "otherwise", "rPart": ["\"otherwise\"", "BlockOperator", "*"]}, {"lPart": "Assign", "rPart": ["(", "\"<-\"", "(", "Type", ")", "?", "Expr", "\";\"", ")"]}, {"lPart": "Arg", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Function", "rPart": ["(", "id", "\"(\"", "Arg", "?", "\")\"", "\"{\"", "BlockOperator", "+", "\"}\"", ")"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Хекматов Ш.С.","Collection":"525111535",{"_id": {"$oid": "67b2fcb9ce6dd03692d0803c"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c3f4fcaf563521c9d5ad0d"}, "rules": "Пример5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[\\\\]", "[]", "+", ")", "|", "(", "[]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[#]", "[#]", "[]", "*", "[\\r\\t\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "quadro", "rPart": ["[@]", "[0-3]", "+"]}, {"lPart": "octal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "decimals", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "delim", "rPart": ["[;:,]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "signs", "rPart": ["[+*/%\\-]"]}, {"lPart": "Const", "rPart": ["complexChar", "|", "string", "|", "quadro", "|", "octal", "|", "decimals"]}, {"lPart": "Type", "rPart": ["\"dec\"", "|", "\"oct\"", "|", "\"quad\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "Condition", "|", "Loop", "|", "Switch", "|", "(", "\"end\"", "delim", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "Expr", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "unary", "rPart": ["[+\\-]"]}, {"lPart": "Expr", "rPart": ["unary", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Signs", "rPart": ["signs", "|", "unary", "|", "logical"]}, {"lPart": "EndExpr", "rPart": ["Signs", "Expr"]}, {"lPart": "Assign", "rPart": ["id", "assign", "Expr", "delim"]}, {"lPart": "Condition", "rPart": ["\"by\"", "BegExpr", "BlockOper", "elseby", "*", "else", "?"]}, {"lPart": "elseby", "rPart": ["\"elseby\"", "BegExpr", "BlockOper"]}, {"lPart": "else", "rPart": ["\"else\"", "BlockOper"]}, {"lPart": "BlockOper", "rPart": ["\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "Expr", "\"in\"", "decimals", "\":\"", "decimals", "\")\"", "BlockOper"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "case", "+", "caseDef", "?", "\"}\""]}, {"lPart": "case", "rPart": ["\"when\"", "Const", "\"then\"", "BlockOper"]}, {"lPart": "caseDef", "rPart": ["\"otherwise\"", "BlockOper"]}, {"lPart": "unicode", "rPart": ["[']", "[\\\\]", "[u]", "[0-9]", "[0,3]", "[']"]}, {"lPart": "complexChar", "rPart": ["char", "|", "unicode"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c3f605af563521c9d5ad16"}, "rules": "Пример6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["(", "[`]", "(", "(", "[\\\\]", "[]", "+", ")", "|", "(", "[]", ")", ")", "?", "[`]", ")"]}, {"lPart": "constString", "rPart": ["(", "[']", "(", "[]", "*", "(", "[\\\\]", "[]", ")", "?", ")", "*", "[']", ")"]}, {"lPart": "constDecimalInt", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "[.]", "(", "(", "[0-9]", "+", ")", "?", ")", "?"]}, {"lPart": "constQuadro", "rPart": ["[@]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "semicolon", "rPart": ["[;]"]}, {"lPart": "parentOpen", "rPart": ["\"(\""]}, {"lPart": "parentClose", "rPart": ["\")\""]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "unaryOps", "rPart": ["(", "[~!]", ")"]}, {"lPart": "binaryOps", "rPart": ["(", "[*+/%]", ")", "|", "(", "[|]", "[|]", "?", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[<>]", ")", "|", "(", "[<>=!]", "[=]", ")"]}, {"lPart": "universalOps", "rPart": ["(", "[-]", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constBool", "|", "constString", "|", "constDecimalInt", "|", "constReal", "|", "constQuadro", "|", "constHex"]}, {"lPart": "Expr", "rPart": ["(", "CallableExpr", ")"]}, {"lPart": "UnOp", "rPart": ["(", "unaryOps", "|", "universalOps", ")", "Expr"]}, {"lPart": "BiOp", "rPart": ["Expr", "(", "binaryOps", "|", "universalOps", ")", "Expr"]}, {"lPart": "Assignment", "rPart": ["id", "\"put\"", "(", "\"as\"", "Type", ")", "?", "Expr"]}, {"lPart": "Statement", "rPart": ["(", "(", "(", "DeclareVar", "|", "Assignment", "|", "BreakOrExit", "|", "Loop", ")", "semicolon", ")", "|", "FnDeclare", "|", "WhenCond", "|", "Switch", ")"]}, {"lPart": "FnCall", "rPart": ["id", "parentOpen", "(", "Expr", "(", "comma", "Expr", ")", "*", ")", "?", "parentClose"]}, {"lPart": "Type", "rPart": ["(", "\"char\"", "|", "\"string\"", "|", "\"int\"", "|", "\"float\"", ")"]}, {"lPart": "BreakOrExit", "rPart": ["(", "\"break\"", "|", "\"exit\"", ")"]}, {"lPart": "FnBody", "rPart": ["(", "Statement", "|", "\"follow\"", "Statement", "*", "\"stop\"", ")"]}, {"lPart": "WhenCond", "rPart": ["\"by\"", "Expr", "FnBody", "WhenElse"]}, {"lPart": "Loop", "rPart": ["(", "\"exec\"", "FnBody", "\"with\"", "Type", "?", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", ")"]}, {"lPart": "SwitchOption", "rPart": ["\"case\"", "parentOpen", "Expr", "?", "parentClose", "(", "Statement", "*", ")"]}, {"lPart": "SwitchStart", "rPart": ["\"select\"", "Expr"]}, {"lPart": "Switch", "rPart": ["SwitchStart", "SwitchOption", "+", "\"end\""]}, {"lPart": "FnHead", "rPart": ["id", "parentOpen", "(", "(", "Type", "?", "id", ")", "(", "comma", "Type", "?", "id", ")", "*", ")", "parentClose"]}, {"lPart": "FnDeclare", "rPart": ["\"function\"", "Type", "?", "FnHead", "FnBody"]}, {"lPart": "Global", "rPart": ["Statement", "*"]}, {"lPart": "CallableExpr", "rPart": ["id"]}, {"lPart": "DeclareVar", "rPart": ["\"function\"", "id", "\"on\"", "Type"]}, {"lPart": "WhenElse", "rPart": ["\"else\"", "FnBody"]}, {"lPart": "WhenElse", "rPart": ["~", "\"else\""]}, {"lPart": "CallableExpr", "rPart": ["Const"]}, {"lPart": "CallableExpr", "rPart": ["BiOp"]}, {"lPart": "CallableExpr", "rPart": ["UnOp"]}, {"lPart": "CallableExpr", "rPart": ["FnCall"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f636a28558742cb4334498"}, "rules": "Laba4b", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["(", "[#]", "[0-3]", "+", ")", "|", "(", "[#]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[^\"]", "*", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[^']", ")", "[']"]}, {"lPart": "operator", "rPart": ["[+\\-*/%^]"]}, {"lPart": "logicalOperator", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]", "|", "[%]", "|", "[^]", "|", "[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]", "|", "[||]", "|", "[&&]", "|", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[^\\n]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "parenthesis", "rPart": ["\"(\"", "|", "\")\"", "|", "\"[\"", "|", "\"]\"", "|", "\"{\"", "|", "\"}\""]}, {"lPart": "keyword", "rPart": ["\"put\"", "|", "\"to\"", "|", "\"by\"", "|", "\"else\"", "|", "\"exec\"", "|", "\"with\"", "|", "\"from\"", "|", "\"step\"", "|", "\"exit\"", "|", "\"select\"", "|", "\"case\"", "|", "\"break\"", "|", "\"end\"", "|", "\"function\""]}, {"lPart": "whitespace", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "expression", "rPart": ["term", "(", "operator", "term", ")", "*"]}, {"lPart": "term", "rPart": ["id", "|", "constInt", "|", "constReal", "|", "constString", "|", "constChar", "|", "\"(\"", "expression", "\")\""]}, {"lPart": "argument", "rPart": ["id"]}, {"lPart": "argumentList", "rPart": ["(", "argument", "(", "\",\"", "argument", ")", ")", "?"]}, {"lPart": "assignmentStatement", "rPart": ["\"put\"", "expression", "\"to\"", "id", "delimiter"]}, {"lPart": "conditionalStatement", "rPart": ["\"by\"", "\"(\"", "expression", "\")\"", "statement", "(", "\"else\"", "statement", ")", "?"]}, {"lPart": "loopStatement", "rPart": ["\"exec\"", "statement", "\"with\"", "id", "\"from\"", "constInt", "\"to\"", "constInt", "(", "\"step\"", "constInt", ")", "?", "(", "\"exit\"", "delimiter", ")", "?"]}, {"lPart": "switchStatement", "rPart": ["\"select\"", "expression", "\"case\"", "caseClause", "+", "caseDefault", "?", "\"end\""]}, {"lPart": "caseClause", "rPart": ["\"case\"", "\"(\"", "expression", "\")\"", "statement", "(", "\"break\"", "delimiter", ")", "?"]}, {"lPart": "caseDefault", "rPart": ["\"case\"", "\"(\"", "\")\"", "statement"]}, {"lPart": "block", "rPart": ["statement", "|", "\"{\"", "statement", "*", "\"}\""]}, {"lPart": "functionDeclaration", "rPart": ["id", "\"=\"", "\"function\"", "\"(\"", "argumentList", "\")\"", "block"]}, {"lPart": "statement", "rPart": ["assignmentStatement", "|", "conditionalStatement", "|", "loopStatement", "|", "switchStatement", "|", "functionDeclaration"]}, {"lPart": "program", "rPart": ["statement", "+"]}, {"lPart": "delimiter", "rPart": ["\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7428c8558742cb433516d"}, "rules": "Пример3", "data": {"rList": [{"lPart": "Global", "rPart": ["FunctionDeclaration", "+"]}, {"lPart": "FunctionDeclaration", "rPart": ["FunctionHead", "Block"]}, {"lPart": "FunctionHead", "rPart": ["id", "openingParenthesis", "(", "(", "id", ")", "(", "comma", "id", ")", "*", ")", "?", "closingParenthesis"]}, {"lPart": "Block", "rPart": ["(", "Statement", "|", "\"begin\"", "Statement", "*", "\"end\"", ")"]}, {"lPart": "Statement", "rPart": ["(", "Assignment", "|", "Conditional", "|", "Return", "|", "Break", "|", "FunctionCallStatement", "|", "Exit", "|", "Loop", "|", "Switch", ")"]}, {"lPart": "Assignment", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "semicolon"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "semicolon"]}, {"lPart": "Break", "rPart": ["\"break\"", "semicolon"]}, {"lPart": "FunctionCallStatement", "rPart": ["FunctionCallOrId", "semicolon"]}, {"lPart": "Exit", "rPart": ["\"exit\"", "semicolon"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "ExprInParenthesis", "Block", "ConditionalOther"]}, {"lPart": "Loop", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "LoopStep"]}, {"lPart": "Switch", "rPart": ["SwitchHead", "(", "SwitchCase", "SwitchBlock", ")", "+", "SwitchEnd"]}, {"lPart": "Expr", "rPart": ["ExprStart", "ExprEnd"]}, {"lPart": "FunctionCallOrId", "rPart": ["id", "FunctionCallArgs"]}, {"lPart": "ExprInParenthesis", "rPart": ["openingParenthesis", "Expr", "closingParenthesis"]}, {"lPart": "ConditionalOther", "rPart": ["\"other\"", "Block"]}, {"lPart": "ConditionalOther", "rPart": ["~", "\"other\""]}, {"lPart": "LoopStep", "rPart": ["\"step\"", "Expr"]}, {"lPart": "LoopStep", "rPart": ["~", "\"step\""]}, {"lPart": "SwitchHead", "rPart": ["\"select\"", "Expr"]}, {"lPart": "SwitchEnd", "rPart": ["\"end\""]}, {"lPart": "ExprStart", "rPart": ["FunctionCallOrId"]}, {"lPart": "ExprStart", "rPart": ["ExprInParenthesis"]}, {"lPart": "ExprStart", "rPart": ["Const"]}, {"lPart": "ExprEnd", "rPart": ["exprBinaryOperator", "Expr"]}, {"lPart": "ExprEnd", "rPart": ["~", "exprBinaryOperator"]}, {"lPart": "FunctionCallArgs", "rPart": ["openingParenthesis", "(", "(", "Expr", ")", "(", "comma", "Expr", ")", ")", "?", "closingParenthesis"]}, {"lPart": "FunctionCallArgs", "rPart": ["~", "openingParenthesis"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "(", "MaybeExprInParenthesis", ")"]}, {"lPart": "SwitchBlock", "rPart": ["Statement", "+"]}, {"lPart": "SwitchBlock", "rPart": ["~", "Statement"]}, {"lPart": "Const", "rPart": ["(", "constChar", "|", "constString", "|", "constDecimal", "|", "constQuadro", "|", "constHex", "|", "constBoolean", ")"]}, {"lPart": "exprBinaryOperator", "rPart": ["(", "binaryOperator", "|", "unaryOrBinaryOperator", ")"]}, {"lPart": "MaybeExprInParenthesis", "rPart": ["openingParenthesis", "Expr", "?", "closingParenthesis"]}, {"lPart": "constBoolean", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "id", "rPart": ["[_]", "(", "[a-zA-Z0-9]", ")", "*", "[_]"]}, {"lPart": "openingParenthesis", "rPart": ["(", "[(]", ")"]}, {"lPart": "closingParenthesis", "rPart": ["(", "[)]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constDecimal", "rPart": ["(", "[0-9]", "*", ")", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[0-3]", "+", ")"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "(", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/$&|%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "unaryOrBinaryOperator", "rPart": ["(", "[-]", ")"]}, {"lPart": "unaryOperator", "rPart": ["(", "[!~]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fba8458558742cb43360d4"}, "rules": "Laba5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "Binary", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "constint", "rPart": ["(", "[2]", "[#]", "[01]", "+", ")", "|", "(", "[8]", "[#]", "[0-7]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Unary", "rPart": ["[~!-]"]}, {"lPart": "Delimetr", "rPart": ["[;]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constint", "|", "constReal", "|", "constChar", "|", "constString"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Assign", "rPart": ["\"let\"", "Type", "id", "\"on\"", "Expr", "Delimetr"]}, {"lPart": "Condition", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "Block", "CondOther"]}, {"lPart": "CondWhen", "rPart": ["~", "\"when\""]}, {"lPart": "CondOther", "rPart": ["\"other\"", "Block"]}, {"lPart": "CondOther", "rPart": ["~", "\"other\""]}, {"lPart": "Block", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "Type", "id", "\"in\"", "constReal", "\":\"", "constReal", "\")\"", "Block"]}, {"lPart": "Stop", "rPart": ["\"stop\"", "Delimetr"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"when\"", "BegExpr", "\"then\"", "Block", "(", "\"exit\"", "Delimetr", ")", "?"]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "Block"]}, {"lPart": "CaseOtherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "Condition", "|", "Switch", "|", "Cycle", "|", "Return", "|", "Stop", "|", "Func"]}, {"lPart": "Program", "rPart": ["Oper", "+"]}, {"lPart": "Func", "rPart": ["id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "Delimetr"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fcfa968558742cb4336a80"}, "rules": "Laba5a", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "Binary", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "constint", "rPart": ["(", "[4]", "[#]", "[01]", "+", ")", "|", "(", "[8]", "[#]", "[0-7]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Unary", "rPart": ["[~!-]"]}, {"lPart": "Delimetr", "rPart": ["[;]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "(", "Binary", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constint", "|", "constReal", "|", "constChar", "|", "constString"]}, {"lPart": "Assign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "Delimetr"]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Block", "(", "\"else\"", "Block", ")", "?"]}, {"lPart": "Block", "rPart": ["Oper"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "constReal", "\"to\"", "constReal", "(", "\"step\"", ")", "?", "(", "\"exit\"", "Delimetr", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\"", "Expr", "\")\"", "Block", "(", "\"break\"", "Delimetr", ")", "?"]}, {"lPart": "Oper", "rPart": ["Assign"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"case\"", "Block"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808ac618558742cb43387ec"}, "rules": "Пример7", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["(", "[`]", "(", "(", "[\\\\]", "[]", "+", ")", "|", "(", "[]", ")", ")", "?", "[`]", ")"]}, {"lPart": "constString", "rPart": ["(", "[']", "(", "[]", "*", "(", "[\\\\]", "[]", ")", "?", ")", "*", "[']", ")"]}, {"lPart": "constDecimalInt", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "[.]", "(", "(", "[0-9]", "+", ")", "?", ")", "?"]}, {"lPart": "constQuadro", "rPart": ["[@]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "semicolon", "rPart": ["[;]"]}, {"lPart": "parentOpen", "rPart": ["\"(\""]}, {"lPart": "parentClose", "rPart": ["\")\""]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "unaryOps", "rPart": ["(", "[~!]", ")"]}, {"lPart": "binaryOps", "rPart": ["(", "[*+/%]", ")", "|", "(", "[|]", "[|]", "?", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[<>]", ")", "|", "(", "[<>=!]", "[=]", ")"]}, {"lPart": "universalOps", "rPart": ["(", "[-]", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constBool", "|", "constString", "|", "constDecimalInt", "|", "constReal", "|", "constQuadro", "|", "constHex"]}, {"lPart": "Expr", "rPart": ["(", "CallableExpr", ")"]}, {"lPart": "UnOp", "rPart": ["(", "unaryOps", "|", "universalOps", ")", "Expr"]}, {"lPart": "BiOp", "rPart": ["Expr", "(", "binaryOps", "|", "universalOps", ")", "Expr"]}, {"lPart": "Assignment", "rPart": ["id", "\"put\"", "(", "\"as\"", "Type", ")", "?", "Expr"]}, {"lPart": "Statement", "rPart": ["(", "(", "(", "DeclareVar", "|", "Assignment", "|", "BreakOrExit", "|", "Loop", ")", "semicolon", ")", "|", "FnDeclare", "|", "WhenCond", "|", "Switch", ")"]}, {"lPart": "FnCall", "rPart": ["id", "parentOpen", "(", "Expr", "(", "comma", "Expr", ")", "*", ")", "?", "parentClose"]}, {"lPart": "Type", "rPart": ["(", "\"char\"", "|", "\"string\"", "|", "\"int\"", "|", "\"float\"", ")"]}, {"lPart": "BreakOrExit", "rPart": ["(", "\"break\"", "|", "\"exit\"", ")"]}, {"lPart": "FnBody", "rPart": ["(", "Statement", "|", "\"follow\"", "Statement", "*", "\"stop\"", ")"]}, {"lPart": "WhenCond", "rPart": ["\"by\"", "Expr", "FnBody", "WhenElse"]}, {"lPart": "Loop", "rPart": ["(", "\"exec\"", "FnBody", "\"with\"", "Type", "?", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", ")"]}, {"lPart": "SwitchOption", "rPart": ["\"case\"", "parentOpen", "Expr", "?", "parentClose", "(", "Statement", "*", ")"]}, {"lPart": "SwitchStart", "rPart": ["\"select\"", "Expr"]}, {"lPart": "Switch", "rPart": ["SwitchStart", "SwitchOption", "+", "\"end\""]}, {"lPart": "FnHead", "rPart": ["id", "parentOpen", "(", "(", "Type", "?", "id", ")", "(", "comma", "Type", "?", "id", ")", "*", ")", "parentClose"]}, {"lPart": "FnDeclare", "rPart": ["\"function\"", "Type", "?", "FnHead", "FnBody"]}, {"lPart": "Global", "rPart": ["Statement", "*"]}, {"lPart": "CallableExpr", "rPart": ["id"]}, {"lPart": "DeclareVar", "rPart": ["\"function\"", "id", "\"on\"", "Type"]}, {"lPart": "WhenElse", "rPart": ["\"else\"", "FnBody"]}, {"lPart": "WhenElse", "rPart": ["~", "\"else\""]}, {"lPart": "CallableExpr", "rPart": ["Const"]}, {"lPart": "CallableExpr", "rPart": ["BiOp"]}, {"lPart": "CallableExpr", "rPart": ["UnOp"]}, {"lPart": "CallableExpr", "rPart": ["FnCall"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808f42e8558742cb4338bfe"}, "rules": "Laba5b", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "Binary", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "constint", "rPart": ["(", "[4]", "[#]", "[01]", "+", ")", "|", "(", "[8]", "[#]", "[0-7]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Unary", "rPart": ["[~!-]"]}, {"lPart": "Delimetr", "rPart": ["[;]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "(", "Binary", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constint", "|", "constReal", "|", "constChar", "|", "constString"]}, {"lPart": "Assign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "Delimetr"]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Block", "(", "\"else\"", "Block", ")", "?"]}, {"lPart": "Block", "rPart": ["Oper"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "constReal", "\"to\"", "constReal", "(", "\"step\"", ")", "?", "(", "\"exit\"", "Delimetr", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\"", "Expr", "\")\"", "Block", "(", "\"break\"", "Delimetr", ")", "?"]}, {"lPart": "Oper", "rPart": ["Assign"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"case\"", "Block"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6809010f8558742cb4338ca8"}, "rules": "Пример4", "data": {"rList": [{"lPart": "Global", "rPart": ["FunctionDeclaration", "+"]}, {"lPart": "FunctionDeclaration", "rPart": ["FunctionHead", "Block"]}, {"lPart": "FunctionHead", "rPart": ["id", "\"=\"", "\"function\"", "openingParenthesis", "(", "(", "id", ")", "(", "comma", "id", ")", "*", ")", "?", "closingParenthesis"]}, {"lPart": "Block", "rPart": ["(", "Statement", "|", "\"begin\"", "Statement", "*", "\"end\"", ")"]}, {"lPart": "Statement", "rPart": ["(", "Assignment", "|", "Conditional", "|", "Return", "|", "Break", "|", "FunctionCallStatement", "|", "Exit", "|", "Loop", "|", "Switch", ")"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "semicolon"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "semicolon"]}, {"lPart": "Break", "rPart": ["\"break\"", "semicolon"]}, {"lPart": "FunctionCallStatement", "rPart": ["FunctionCallOrId", "semicolon"]}, {"lPart": "Exit", "rPart": ["\"exit\"", "semicolon"]}, {"lPart": "Conditional", "rPart": ["\"by\"", "ExprInParenthesis", "Block", "ConditionalElse"]}, {"lPart": "Loop", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "LoopStep"]}, {"lPart": "Switch", "rPart": ["SwitchHead", "(", "SwitchCase", "SwitchBlock", ")", "+", "SwitchEnd"]}, {"lPart": "Expr", "rPart": ["ExprStart", "ExprEnd"]}, {"lPart": "FunctionCallOrId", "rPart": ["id", "FunctionCallArgs"]}, {"lPart": "ExprInParenthesis", "rPart": ["openingParenthesis", "Expr", "closingParenthesis"]}, {"lPart": "ConditionalElse", "rPart": ["\"else\"", "Block"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"else\""]}, {"lPart": "LoopStep", "rPart": ["\"step\"", "Expr"]}, {"lPart": "LoopStep", "rPart": ["~", "\"step\""]}, {"lPart": "SwitchHead", "rPart": ["\"select\"", "Expr"]}, {"lPart": "SwitchEnd", "rPart": ["\"end\""]}, {"lPart": "ExprStart", "rPart": ["FunctionCallOrId"]}, {"lPart": "ExprStart", "rPart": ["ExprInParenthesis"]}, {"lPart": "ExprStart", "rPart": ["Const"]}, {"lPart": "ExprEnd", "rPart": ["exprBinaryOperator", "Expr"]}, {"lPart": "ExprEnd", "rPart": ["~", "exprBinaryOperator"]}, {"lPart": "FunctionCallArgs", "rPart": ["openingParenthesis", "(", "(", "Expr", ")", "(", "comma", "Expr", ")", ")", "?", "closingParenthesis"]}, {"lPart": "FunctionCallArgs", "rPart": ["~", "openingParenthesis"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "(", "MaybeExprInParenthesis", ")"]}, {"lPart": "SwitchBlock", "rPart": ["Statement", "+"]}, {"lPart": "SwitchBlock", "rPart": ["~", "Statement"]}, {"lPart": "Const", "rPart": ["(", "constChar", "|", "constString", "|", "constDecimal", "|", "constQuadro", "|", "constHex", "|", "constBoolean", ")"]}, {"lPart": "exprBinaryOperator", "rPart": ["(", "binaryOperator", "|", "unaryOrBinaryOperator", ")"]}, {"lPart": "MaybeExprInParenthesis", "rPart": ["openingParenthesis", "Expr", "?", "closingParenthesis"]}, {"lPart": "constBoolean", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "openingParenthesis", "rPart": ["(", "[(]", ")"]}, {"lPart": "closingParenthesis", "rPart": ["(", "[)]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constDecimal", "rPart": ["(", "[0-9]", "*", ")", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[0-3]", "+", ")"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "(", "[0-9a-fA-F]", ")"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/$&|%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "unaryOrBinaryOperator", "rPart": ["(", "[-]", ")"]}, {"lPart": "unaryOperator", "rPart": ["(", "[!~]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"boo\"", "|", "\"str\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Нагорный Н.И.","Collection":"345342533",{"_id": {"$oid": "67ac3fc0ce6dd03692d0785c"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+2", "deltat": 2000, "assist": 1}}{"_id": {"$oid": "67b959aece6dd03692d0903e"}, "rules": "Тест1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z_]", "[a-zA-Z_0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operand", "rPart": ["(", "[-+*/]", "[=]", "?", ")", "|", "(", "[=]", "[=]", "?", ")", "|", "(", "(", "[>]", "[=>]", "?", ")", "|", "(", "[<]", "[=<]", "?", ")", ")"]}, {"lPart": "color", "rPart": ["[#]", "[0-9a-f]", "{6,6}"]}, {"lPart": "coment", "rPart": ["[■]", "[a-zA-Z0-9.^\\n]", "*", "[\\n]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b976b1ce6dd03692d0906f"}, "rules": "Kurs", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "operand", "rPart": ["[-+/*]"]}, {"lPart": "operand", "rPart": ["[><=!]", "[=]", "?"]}, {"lPart": "coment", "rPart": ["[■]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "coment", "rPart": ["[■]", "[░]", "[]", "*", "[░]", "[■]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ba88a9ce6dd03692d091fa"}, "rules": "Kurs2", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "BlockOperator", "NotOperator"]}, {"lPart": "BlockOperator", "rPart": ["(", "Operator", ")", "|", "(", "\"{\"", "BlockOperator", "+", "\"}\"", ")", "|", "\"stop;\""]}, {"lPart": "Expr", "rPart": ["BeginExpr", "AddExpr"]}, {"lPart": "NotOperator", "rPart": ["\"not\"", "BlockOperator"]}, {"lPart": "NotOperator", "rPart": ["~", "\"not\""]}, {"lPart": "BeginExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "AddExpr", "rPart": ["(", "operand", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operand", "rPart": ["[-+/*]"]}, {"lPart": "operand", "rPart": ["[><=!]", "[=]", "?"]}, {"lPart": "coment", "rPart": ["[■]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "coment", "rPart": ["[■]", "[░]", "[]", "*", "[░]", "[■]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "POperator", ")", "+", "(", "\"otherwise\"", "POperator", ")", "?", "\"}\""]}, {"lPart": "POperator", "rPart": ["(", "Operator", "|", "(", "\"{\"", "POperator", "*", "\"}\"", ")", "|", "\"exit;\"", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ba97bfce6dd03692d09223"}, "rules": "Kurs3", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "BlockOperator", "NotOperator"]}, {"lPart": "BlockOperator", "rPart": ["(", "Operator", ")", "|", "(", "\"{\"", "BlockOperator", "+", "\"}\"", ")", "|", "\"stop;\""]}, {"lPart": "Expr", "rPart": ["BeginExpr", "AddExpr"]}, {"lPart": "NotOperator", "rPart": ["\"not\"", "BlockOperator"]}, {"lPart": "NotOperator", "rPart": ["~", "\"not\""]}, {"lPart": "BeginExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "AddExpr", "rPart": ["(", "operand", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operand", "rPart": ["[-+/*]"]}, {"lPart": "operand", "rPart": ["[><=!]", "[=]", "?"]}, {"lPart": "coment", "rPart": ["[■]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "coment", "rPart": ["[■]", "[░]", "[]", "*", "[░]", "[■]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "POperator", ")", "+", "(", "\"otherwise\"", "POperator", ")", "?", "\"}\""]}, {"lPart": "POperator", "rPart": ["(", "Operator", "|", "(", "\"{\"", "POperator", "*", "\"}\"", ")", "|", "\"exit;\"", ")"]}, {"lPart": "Args", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"double\"", "|", "\"int\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "Args", "id", "(", "\",\"", "Args", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "POperator", "\"}\"", "\"->\"", "id"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd0799af563521c9d5c9f8"}, "rules": "tetra", "data": {"rList": [{"lPart": "markid", "rPart": ["[A-Z]", "[0-9]", "+", "[:]", "?"]}, {"lPart": "code", "rPart": ["[A-Z]", "{3,4}"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operid", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Regular", "rPart": ["(", "markid", "Pcode", "*", ")", "|", "(", "(", "\"FUNC\"", "|", "\"CALL\"", ")", "operid", ")"]}, {"lPart": "Pcode", "rPart": ["code", "(", "operid", "|", "markid", ")", "{1,2}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd0b57af563521c9d5ca12"}, "rules": "Kurs4", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"put\"", "FExpr", "\"to\"", "id", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constN", "\":\"", "constN", "\")\"", "POperator"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "FExpr", "\")\"", "\"then\"", "POperator", "NotOperator"]}, {"lPart": "Expr", "rPart": ["BeginExpr", "AddExpr"]}, {"lPart": "NotOperator", "rPart": ["\"not\"", "POperator"]}, {"lPart": "NotOperator", "rPart": ["~", "\"not\""]}, {"lPart": "BeginExpr", "rPart": ["id", "CExpr", "?", "|", "Const", "|", "(", "\"(\"", "FExpr", "\")\"", ")", "|", "ArgConv"]}, {"lPart": "AddExpr", "rPart": ["(", "(", "OperandB", "|", "operandUnar", "|", "opearndLog", ")", "operandUNOreverse", "?", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "constN", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constT", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "constT", "rPart": ["[\\\"]", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "*", "[\\\"]"]}, {"lPart": "constN", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constN", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operandBinS", "rPart": ["[-+]"]}, {"lPart": "operandUnar", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "coment", "rPart": ["[■]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "coment", "rPart": ["[■]", "[░]", "[]", "*", "[░]", "[■]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "FExpr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "POperator", ")", "+", "(", "\"otherwise\"", "POperator", ")", "?", "\"}\""]}, {"lPart": "POperator", "rPart": ["(", "Operator", "|", "(", "\"{\"", "POperator", "*", "\"}\"", ")", ")"]}, {"lPart": "Args", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"double\"", "|", "\"int\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "POperator", "*", "\"}\"", "\"->\"", "id"]}, {"lPart": "Program", "rPart": ["(", "Function", "|", "Variable", ")", "+"]}, {"lPart": "Variable", "rPart": ["id", "IDM", "?", "\";\""]}, {"lPart": "ArgConv", "rPart": ["Args", "\"(\"", "FExpr", "\")\""]}, {"lPart": "Operator", "rPart": ["id", "(", "IDM", "|", "CExpr", ")", "?", "\";\""]}, {"lPart": "CExpr", "rPart": ["\"->\"", "\"(\"", "(", "FExpr", "(", "\",\"", "FExpr", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "FExpr", "rPart": ["(", "operandBinS", "|", "operandUNOreverse", ")", "?", "Expr"]}, {"lPart": "operandBinM", "rPart": ["[*/]"]}, {"lPart": "OperandB", "rPart": ["operandBinM", "|", "operandBinS"]}, {"lPart": "Const", "rPart": ["constT", "|", "constN"]}, {"lPart": "opearndLog", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operandUNOreverse", "rPart": ["[!]"]}, {"lPart": "IDM", "rPart": ["(", "\",\"", "id", ")", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f66af48558742cb43348b7"}, "rules": "Kurs5", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"put\"", "FExpr", "{toPFR(23)}", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constN", "\":\"", "constN", "\")\"", "POperator"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "FExpr", "\")\"", "\"then\"", "POperator", "NotOperator"]}, {"lPart": "Expr", "rPart": ["BeginExpr", "AddExpr"]}, {"lPart": "NotOperator", "rPart": ["\"not\"", "POperator"]}, {"lPart": "NotOperator", "rPart": ["~", "\"not\""]}, {"lPart": "BeginExpr", "rPart": ["id", "CExpr", "?", "|", "Const", "|", "(", "\"(\"", "FExpr", "\")\"", ")", "|", "ArgConv"]}, {"lPart": "AddExpr", "rPart": ["(", "(", "OperandB", "|", "operandUnar", "|", "opearndLog", ")", "operandUNOreverse", "?", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "constN", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constT", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "constT", "rPart": ["[\\\"]", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "*", "[\\\"]"]}, {"lPart": "constN", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constN", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operandBinS", "rPart": ["[-+]"]}, {"lPart": "operandUnar", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "coment", "rPart": ["[■]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "coment", "rPart": ["[■]", "[░]", "[]", "*", "[░]", "[■]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "FExpr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "POperator", "*", ")", "+", "(", "\"otherwise\"", "POperator", "*", ")", "?", "\"}\""]}, {"lPart": "POperator", "rPart": ["(", "Operator", "|", "(", "\"{\"", "POperator", "*", "\"}\"", ")", ")"]}, {"lPart": "Args", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"double\"", "|", "\"int\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "POperator", "*", "\"}\"", "\"->\"", "id"]}, {"lPart": "Program", "rPart": ["(", "Function", "|", "Variable", ")", "+"]}, {"lPart": "Variable", "rPart": ["id", "IDM", "?", "\";\""]}, {"lPart": "ArgConv", "rPart": ["Args", "\"(\"", "FExpr", "\")\""]}, {"lPart": "Operator", "rPart": ["id", "(", "IDM", "|", "CExpr", ")", "?", "\";\""]}, {"lPart": "CExpr", "rPart": ["\"->\"", "\"(\"", "(", "FExpr", "(", "\",\"", "FExpr", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "FExpr", "rPart": ["(", "operandBinS", "|", "operandUNOreverse", ")", "?", "Expr"]}, {"lPart": "operandBinM", "rPart": ["[*/]"]}, {"lPart": "OperandB", "rPart": ["operandBinM", "|", "operandBinS"]}, {"lPart": "Const", "rPart": ["constT", "|", "constN"]}, {"lPart": "opearndLog", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operandUNOreverse", "rPart": ["[!]"]}, {"lPart": "IDM", "rPart": ["(", "\",\"", "id", ")", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "67f7abf98558742cb4335417"}, "rules": "Kurs5alt", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"put\"", "FExpr", "\"to\"", "{printPC(wrapPut(exprToPC(lecsemburg).pseudoCode,this.currentLexem[1]));}", "id", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "{prepareOper.push(this.currentLexem[1])}", "id", "\"in\"", "{prepareOper.push(this.currentLexem[1])}", "constN", "\":\"", "{prepareOper.push(this.currentLexem[1]); printPC(beginForEachLoop(prepareOper));}", "constN", "\")\"", "POperator", "{printPC(endForEachLoop())}"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "FExpr", "\")\"", "{printPC(wrapIn(exprToPC(lecsemburg).pseudoCode,generateLabel(\"in\")));}", "\"then\"", "POperator", "{prepareLabelSwitch();}", "NotOperator"]}, {"lPart": "Expr", "rPart": ["BeginExpr", "AddExpr"]}, {"lPart": "NotOperator", "rPart": ["\"not\"", "POperator"]}, {"lPart": "NotOperator", "rPart": ["~", "\"not\""]}, {"lPart": "BeginExpr", "rPart": ["{lecsemburg.push(this.currentLexem[1]);}", "id", "(", "CExpr", ")", "?", "|", "{lecsemburg.push(this.currentLexem[1]);}", "Const", "|", "(", "{lecsemburg.push(\"(\")}", "\"(\"", "FExpr", "{lecsemburg.push(\")\")}", "\")\"", ")", "|", "ArgConv"]}, {"lPart": "AddExpr", "rPart": ["(", "{lecsemburg.push(this.currentLexem[1]);}", "(", "OperandB", "|", "operandUnar", "|", "opearndLog", ")", "(", "{lecsemburg.push(this.currentLexem[1]);}", "operandUNOreverse", ")", "?", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "constN", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constT", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "constT", "rPart": ["[\\\"]", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "*", "[\\\"]"]}, {"lPart": "constN", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constN", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operandBinS", "rPart": ["[-+]"]}, {"lPart": "operandUnar", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "coment", "rPart": ["[■]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "coment", "rPart": ["[■]", "[░]", "[]", "*", "[░]", "[■]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "FExpr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "POperator", "*", ")", "+", "(", "\"otherwise\"", "POperator", "*", ")", "?", "\"}\""]}, {"lPart": "POperator", "rPart": ["(", "Operator", "|", "(", "\"{\"", "POperator", "*", "\"}\"", ")", ")"]}, {"lPart": "Args", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"double\"", "|", "\"int\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "IDM", "?", ")", "?", "\")\"", "\"{\"", "POperator", "*", "\"}\"", "\"->\"", "id"]}, {"lPart": "Program", "rPart": ["(", "Function", "|", "Variable", ")", "+", "{toPFR(\"\\nall ok\");}"]}, {"lPart": "Variable", "rPart": ["{lecsemburg.push(this.currentLexem[1]);}", "id", "IDM", "?", "\";\"", "{printPC(varToPC(lecsemburg).pseudoCode);}"]}, {"lPart": "ArgConv", "rPart": ["{lecsemburg.push(this.currentLexem[1]);}", "Args", "{lecsemburg.push(\"(\");}", "\"(\"", "FExpr", "{lecsemburg.push(\")\");}", "\")\""]}, {"lPart": "Operator", "rPart": ["{lecsemburg.push(this.currentLexem[1]);}", "id", "(", "IDM", "|", "(", "CExpr", "{printPC(exprToPC(lecsemburg).pseudoCode);}", ")", ")", "?", "\";\"", "{printPC(varToPC(lecsemburg).pseudoCode);}"]}, {"lPart": "CExpr", "rPart": ["{lecsemburg.push(\"->\");lecsemburg.push(\"(\");}", "\"->\"", "\"(\"", "(", "FExpr", "(", "{lecsemburg.push(\",\");}", "\",\"", "FExpr", ")", "*", ")", "?", "{lecsemburg.push(\")\");}", "\")\""]}, {"lPart": "Operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "FExpr", "rPart": ["(", "{lecsemburg.push(this.currentLexem[1]);}", "operandBinS", "|", "{lecsemburg.push(this.currentLexem[1]);}", "operandUNOreverse", ")", "?", "Expr"]}, {"lPart": "operandBinM", "rPart": ["[*/]"]}, {"lPart": "OperandB", "rPart": ["operandBinM", "|", "operandBinS"]}, {"lPart": "Const", "rPart": ["constT", "|", "constN"]}, {"lPart": "opearndLog", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operandUNOreverse", "rPart": ["[!]"]}, {"lPart": "IDM", "rPart": ["(", "\",\"", "{lecsemburg.push(this.currentLexem[1]);}", "id", ")", "+"]}], "extension": "//function(){in (4==2-47+65) then put 0+7==2 to ip; not put ods+4 to ods;}->io\n\n//function(){put int(foo->(1, 2 + 3)) == 10 && bar->(4) != string(5) || !flag to io;in (2!=5-3) then put 2 to il;}->alt\n\n//function(){in(2)then put 0 to yu; in(3) then in(4) then put 2 to po; put 6 to yu;}->lo\n\n//function(){foreach(xi in 1:3) put x to screen;}->fo\n\nvar ignoreLastWord;\nvar testcounter = 0;\nvar toConvert = [];\nvar nowfuncname = \"\";\nvar lecsemburg = [];\nvar preventLabel = [];\nvar labelCounter = 0;\nvar labelPrepare = false;\nvar labelDepthCounter = 1;\nvar prepareOper = [];\nvar loopLabelStack = [];\n\nfunction prepareLabelSwitch() {\n  if (!labelPrepare) {\n    labelPrepare = true;\n    labelDepthCounter = 1;\n  } else {\n    labelDepthCounter++; // увеличиваем уровень вложенности\n  }\n}\n\n\n\nfunction emit(array, code, a = \"░░░░\", b = \"░░░░\") {\n  if (!Array.isArray(array)) {\n    console.error(\"emit error: 'array' is not an array!\", array);\n    throw new TypeError(\"emit expects first argument to be an array\");\n  }\n\n  // Вывод всех меток кроме финальной\n  if (labelPrepare && preventLabel.length > 1 && labelDepthCounter > 1) {\n    while (labelDepthCounter > 1 && preventLabel.length > 1) {\n      var label = preventLabel.pop();\n      labelDepthCounter--;\n      array.push([label, \"LBL\", labelDepthCounter, \"░░░░\"]);\n    }\n  }\n\n  // Последняя (финальная) метка\n  var finalLabel = \"░░░░\";\n  if (labelPrepare && preventLabel.length > 0 && labelDepthCounter === 1) {\n    finalLabel = preventLabel.pop();\n    labelDepthCounter = 0;\n    labelPrepare = false;\n  }\n\n  array.push([finalLabel, code, a, b]);\n}\n\n\n\n\n\nfunction generateLabel(prefix = \"L\", prevAdd = true) {\n  var label = prefix + labelCounter++;\n  if (prevAdd) preventLabel.push(label);\n  return label;\n}\n\n\nfunction getReztest() {\n  for (var i = 0; i < toConvert.length; i++) {\n    toPFR(toConvert[i]);\n  }\n}\n\nfunction getRezExpr() {\n  printPC(exprToPC(lecsemburg));\n  lecsemburg = [];\n  toPFR(\"\\n\");\n}\n\nfunction printPC(code) {\n  if (!Array.isArray(code)) {\n    console.error(\"printPC error: input is not an array!\", code);\n    return;\n  }\n  toPFR(\"\\n\");\n  for (const row of code) {\n    toPFR(row.join(',') + '\\n');\n  }\n}\n\nfunction varToPC(tokens) {\n  var output = [];\n  var temp = [];\n\n  if (!Array.isArray(tokens)) return { pseudoCode: [], temp: [] };\n\n  for (var t of tokens) {\n      emit(output, \"VAR\", t, \"░░░░\");\n      temp.push(t);\n  }\n  lecsemburg = [];\n  return {\n    pseudoCode: output,\n    temp: temp\n  };\n}\n\n\nfunction exprToPC(tokens, tempCounter = { id: 0 }) {\n  const output = [];\n  const opStack = [];\n  const tempStack = [];\n\n  const precedence = {\n    \"||\": 1, \"&&\": 2,\n    \"==\": 3, \"!=\": 3,\n    \"<\": 4, \"<=\": 4, \">\": 4, \">=\": 4,\n    \"+\": 5, \"-\": 5,\n    \"*\": 6, \"/\": 6,\n    \"!\": 7,\n  };\n\n  const OP_CODES = {\n    '&&': 'AND', '||': 'OR',\n    '*': 'MUL', '/': 'DIV',\n    '+': 'ADD', '-': 'SUB',\n    '==': 'CMP', '!=': 'NEQ',\n    '<': 'LT', '<=': 'LTE',\n    '>': 'GT', '>=': 'GTE',\n    '!': 'NOT'\n  };\n\n  const mapOp = op => OP_CODES[op] || op;\n  const isOperator = t => precedence.hasOwnProperty(t);\n  const isUnary = t => t === \"!\";\n  const getTemp = () => `_t${tempCounter.id++}`;\n\n  const popOperator = () => {\n    const op = opStack.pop();\n    if (isUnary(op)) {\n      const a = tempStack.pop() || \"░░░░\";\n      const res = getTemp();\n      emit(output, mapOp(op), a);\n      tempStack.push(res);\n    } else {\n      const b = tempStack.pop() || \"░░░░\";\n      const a = tempStack.pop() || \"░░░░\";\n      const res = getTemp();\n      emit(output, mapOp(op), a, b);\n      tempStack.push(res);\n    }\n  };\n\n  for (var i = 0; i < tokens.length; i++) {\n    const t = tokens[i];\n    if (t === \"(\") {\n      opStack.push(t);\n    } else if (t === \")\") {\n      while (opStack.length && opStack[opStack.length - 1] !== \"(\") {\n        popOperator();\n      }\n      opStack.pop(); // remove \"(\"\n    } else if (isOperator(t)) {\n      while (\n        opStack.length &&\n        isOperator(opStack[opStack.length - 1]) &&\n        precedence[opStack[opStack.length - 1]] >= precedence[t]\n      ) {\n        popOperator();\n      }\n      opStack.push(t);\n    } else if ([\"int\", \"char\", \"string\"].includes(t)) {\n      if (tokens[i + 1] === \"(\") {\n        const convType = t;\n        i += 2;\n        var depth = 1;\n        const convExpr = [];\n        while (i < tokens.length && depth > 0) {\n          if (tokens[i] === \"(\") depth++;\n          else if (tokens[i] === \")\") depth--;\n          if (depth > 0) convExpr.push(tokens[i]);\n          i++;\n        }\n        i--;\n        const convResult = exprToPC(convExpr, tempCounter);\n        output.push(...convResult.pseudoCode);\n        const last = convResult.temp.slice(-1)[0];\n        const res = getTemp();\n        emit(output, \"CAST\", convType.toLowerCase(), last || \"░░░░\");\n        tempStack.push(res);\n      }\n    } else if (t === \"->\") {\n      const funcName = tempStack.pop();\n      i += 1;\n      var depth = 1;\n      const argExpr = [];\n      while (i < tokens.length && depth > 0) {\n        i++;\n        if (tokens[i] === \"(\") depth++;\n        else if (tokens[i] === \")\") depth--;\n        if (depth > 0) argExpr.push(tokens[i]);\n      }\n      const argsSplit = splitByComma(argExpr);\n      const argTemps = [];\n      for (var a of argsSplit) {\n        const r = exprToPC(a, tempCounter);\n        output.push(...r.pseudoCode);\n        argTemps.push(r.temp.at(-1) || \"░░░░\");\n      }\n      const res = getTemp();\n      emit(output, \"CALL\", funcName, argTemps.length);\n      argTemps.forEach((arg, idx) => {\n        emit(output, \"PARAM\", arg, idx);\n      });\n      tempStack.push(res);\n    } else {\n      tempStack.push(t); // литералы и идентификаторы\n    }\n  }\n\n  while (opStack.length) {\n    popOperator();\n  }\n\n  if (output.length === 0 && tempStack.length > 0) {\n    const operand = tempStack.pop();\n    emit(output, \"PUSH\", operand);\n    tempStack.push(operand);\n  }\n  lecsemburg = [];\n  return {\n    pseudoCode: output,\n    temp: tempStack\n  };\n}\n\n\nfunction splitByComma(tokens) {\n  const result = [];\n  var buf = [], depth = 0;\n  for (var t of tokens) {\n    if (t === \"(\") depth++;\n    if (t === \")\") depth--;\n    if (t === \",\" && depth === 0) {\n      result.push(buf);\n      buf = [];\n    } else {\n      buf.push(t);\n    }\n  }\n  if (buf.length) result.push(buf);\n  return result;\n}\n\nfunction wrapPut(code, targetId) {\n  var lastLine = code[code.length - 1];\n  var resultVar = lastLine?.[2] || lastLine?.[1] || \"░░░░\";\n  emit(code, \"PUT\", resultVar, targetId);\n  return code; // <--- ЭТО ОБЯЗАТЕЛЬНО\n}\n\nfunction wrapIn(pseudoCode, label) {\n  emit(pseudoCode, \"JOF\", label);\n  return pseudoCode; // <--- ЭТО ОБЯЗАТЕЛЬНО\n}\n\nfunction beginForEachLoop(prepareOper) {\n  var code = [];\n\n  var to = prepareOper.pop();     // верхний элемент — правая граница\n  var from = prepareOper.pop();   // потом левая граница\n  var id = prepareOper.pop();     // потом переменная итерации\n\n  var startLabel = generateLabel(\"L\", false); // не добавляем в preventLabel\n  var endLabel = generateLabel(\"L\");\n\n  loopLabelStack.push({ start: startLabel, end: endLabel, iterVar: id });\n\n  emit(code, \"SET\", id, from);                  // инициализация переменной\n  code.push([startLabel, \"CMP\", id, to]);       // сравнение\n  emit(code, \"JGT\", endLabel);                  // прыжок если больше\n\n  //prepareLabelSwitch();                         // активируем режим метки\n  return code;                                  // <--- ЭТО ОБЯЗАТЕЛЬНО\n}\n\nfunction endForEachLoop() {\n  var code = [];\n\n  var loop = loopLabelStack.pop();\n  var id = loop.iterVar;\n\n  emit(code, \"INC\", id);                        // увеличение итератора\n  emit(code, \"JMP\", loop.start);                // прыжок в начало\n  //code.push([loop.end, \"LBL\", \"0\", \"░░░░\"]);    // конец цикла как метка\n\n  prepareLabelSwitch();                         // сброс режима метки\n  return code;                                  // <--- ЭТО ОБЯЗАТЕЛЬНО\n}\n\n\nfunction constToInt(w) {\n  if (w.startsWith(\"0b\")) return parseInt(w.substring(2), 2).toString(10);\n  if (w.startsWith(\"0o\")) return parseInt(w.substring(2), 8).toString(10);\n  return w;\n}\n\nfunction Tracer() {\n  this.history = [];\n}\n\nTracer.prototype = {\n  put(b) {\n    this.history.push(b);\n  },\n  getAll() {\n    return this.history.join(\" \");\n  },\n  clear() {\n    this.history = [];\n  }\n};\n\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n  tracer.put(x);\n}\n\nfunction clear() {\n  tracer.clear();\n  opStk = [];\n  ctlStk = [];\n  onStk = [];\n  operandStk = [];\n  idTbl = [];\n  typeTbl = [];\n  operatorCnt = 0;\n}\n"}}},
{"FIO":"Тимофеев Д.В.","Collection":"224155135",{"_id": {"$oid": "67ad6df9ce6dd03692d07904"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67fe6e4d8558742cb4336e29"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", "[0-9]", "*", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+-/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe721c8558742cb4336e3f"}, "rules": "lab2", "data": {"rList": [{"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", "[0-9]", "*", ")", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe765b8558742cb4336e7a"}, "rules": "lab3", "data": {"rList": [{"lPart": "Prog", "rPart": ["OperBlock", "+"]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OperBlock", "PartElse"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", "[0-9]", "*", ")", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680140f58558742cb4337664"}, "rules": "lab4", "data": {"rList": [{"lPart": "Prog", "rPart": ["OperBlock", "+"]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OperBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"loop\"", "OperBlock", "\"until\"", "\"(\"", "Expr", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "OperBlock", "*", ")", "+", "(", "\"nooption\"", "OperBlock", "*", ")", "?", "\"end\"", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", "[0-9]", "*", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6804e97c8558742cb4337e29"}, "rules": "lab5", "data": {"rList": [{"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["id", "Args", "\"{\"", "OperBlock", "*", "\"}\""]}, {"lPart": "Args", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "*", "\")\""]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OperBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"loop\"", "OperBlock", "\"until\"", "\"(\"", "Expr", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "OperBlock", "*", ")", "+", "(", "\"nooption\"", "OperBlock", "*", ")", "?", "\"end\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["id", "Params", "?"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "Params", "rPart": ["\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\""]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", "[0-9]", "*", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6815d0af8558742cb433af5e"}, "rules": "lab7", "data": {"rList": [{"lPart": "Prog", "rPart": ["{clear();}", "Func", "+", "{toPseudoCode();}"]}, {"lPart": "Func", "rPart": ["{userSignStk.push(this.currentLexem[1]);}", "id", "Args", "{toPFR(\"function\");}", "\"{\"", "OperBlock", "*", "\"}\""]}, {"lPart": "Args", "rPart": ["\"(\"", "(", "{argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "{argStk.push(this.currentLexem[1]);}", "id", ")", "*", "{toPFR(\"arg\"); }", ")", "?", "\")\""]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expr", "\";\"", "{toPFR(\":=\");}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"by\"", "Expr", "{ toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "OperBlock", "{toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"loop\"", "{toPFR(\"LoopDo_\" + peek(ctlStk)+\":\");}", "OperBlock", "\"until\"", "\"(\"", "Expr", "{ toPFR(\"LoopExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\"); toPFR(\"LoopDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LoopExit_\" + peek(ctlStk)+\":\");}", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\"", "{ toPFR(\"Loop\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"fin\"", "\";\"", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\" +peek(ctlStk) + \"Expr\");}", "\"choice\"", "\"(\"", "Expr", "{toPFR(\"let\");}", "\")\"", "(", "\"option\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1);}", "{ toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\" +peek(ctlStk) + \"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk));toPFR(\"jmpOnFalse\");}", "\":\"", "OperBlock", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmp\");}", ")", "+", "(", "\"nooption\"", "\":\"", "OperBlock", ")", "?", "\"end\"", "\";\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\");}", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\");}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "{isUnary =false;}", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "id", "(", "Params", ")", "?"]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]) ) ) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "Expr", "{toPFR(\"param\");}", "(", "\",\"", "Expr", "{toPFR(\"param\");}", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]", "{isUnary =true;}"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    isUnary = false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Код> <Операнд> <Операнд> <Результат>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {                \n                toPFR(\"\\n\");\n                toPFR(word);\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n                \n\n            } else\n                label = false;\n            //var tmp = 0;\n            toPFR(word);\n            //tmp = opStk.pop();\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            //++resCnt;\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(userSignStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10; //знак арифметической операции\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; //знак операции сравнения\n        case \":=\":\n            return 20; //знак операции присваивания\n        case \"jmp\":\n            return 40; //знак операции безусловной передачи управления\n        case \"jmpOnFalse\":\n            return 41; //знак операции передачи управления по условию\n        case \"function\":\n            return 50; // объявление функции\n        case \"return\":\n            return 51; // оператор return\n        case \"arg\":\n            return 52; // оператор arg\n        case \"param\":\n            return 53; // оператор param\n    }\n    return 0;\n}"}}{"_id": {"$oid": "6815d98d8558742cb433af84"}, "rules": "lab6", "data": {"rList": [{"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["{userSignStk.push(this.currentLexem[1]);}", "id", "Args", "{toPFR(\"function\");}", "\"{\"", "OperBlock", "*", "\"}\""]}, {"lPart": "Args", "rPart": ["\"(\"", "(", "{argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "{argStk.push(this.currentLexem[1]);}", "id", ")", "*", "{toPFR(\"arg\"); }", ")", "?", "\")\""]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expr", "\";\"", "{toPFR(\":=\");}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"by\"", "Expr", "{ toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "OperBlock", "{toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"loop\"", "{toPFR(\"LoopDo_\" + peek(ctlStk)+\":\");}", "OperBlock", "\"until\"", "\"(\"", "Expr", "{ toPFR(\"LoopExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\"); toPFR(\"LoopDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LoopExit_\" + peek(ctlStk)+\":\");}", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\"", "{ toPFR(\"Loop\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"fin\"", "\";\"", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\" +peek(ctlStk) + \"Expr\");}", "\"choice\"", "\"(\"", "Expr", "{toPFR(\"let\");}", "\")\"", "(", "\"option\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1);}", "{ toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\" +peek(ctlStk) + \"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk));toPFR(\"jmpOnFalse\");}", "\":\"", "OperBlock", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmp\");}", ")", "+", "(", "\"nooption\"", "\":\"", "OperBlock", ")", "?", "\"end\"", "\";\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\");}", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\");}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "{isUnary =false;}", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "id", "(", "Params", ")", "?"]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]) ) ) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "Expr", "{toPFR(\"param\");}", "(", "\",\"", "Expr", "{toPFR(\"param\");}", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0]", "[e]", "[0-7]", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]", "{isUnary =true;}"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    isUnary = false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Код> <Операнд> <Операнд> <Результат>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {                \n                toPFR(\"\\n\");\n                toPFR(word);\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n                \n\n            } else\n                label = false;\n            //var tmp = 0;\n            toPFR(word);\n            //tmp = opStk.pop();\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            //++resCnt;\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(userSignStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10; //знак арифметической операции\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; //знак операции сравнения\n        case \":=\":\n            return 20; //знак операции присваивания\n        case \"jmp\":\n            return 40; //знак операции безусловной передачи управления\n        case \"jmpOnFalse\":\n            return 41; //знак операции передачи управления по условию\n        case \"function\":\n            return 50; // объявление функции\n        case \"return\":\n            return 51; // оператор return\n        case \"arg\":\n            return 52; // оператор arg\n        case \"param\":\n            return 53; // оператор param\n    }\n    return 0;\n}"}}},
{"FIO":"Федотов К.Д.","Collection":"445345151",{"_id": {"$oid": "67bd7429af563521c9d591af"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bd768aaf563521c9d591c0"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67cd5ce3af563521c9d5cba4"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/=]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!><]", "[=]", "?", ")"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e0f6a84635a960233acef5"}, "rules": "lab3", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "Stop"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperCycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "ConstNum", "\":\"", "ConstNum", "\")\"", "Statement"]}, {"lPart": "Stop", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67eb6ec3a600182c7517a7c5"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "StopFin", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperCycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "ConstNum", "\":\"", "ConstNum", "\")\"", "Statement"]}, {"lPart": "OperSwitch", "rPart": ["\"choice\"", "Expr", "forSwitch", "*", "forSwitch2", "\"end\""]}, {"lPart": "StopFin", "rPart": ["\"stop\"", "\";\"", "|", "\"fin\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "forSwitch2", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"option\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Unary", "rPart": ["unarySign", "|", "binaryOrUnarySign"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "ConstWithSign", "rPart": ["(", "binaryOrUnarySign", ")", "?", "ConstNum"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68032d1c8558742cb43377aa"}, "rules": "lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "StopFin", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperCycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "ConstNum", "\":\"", "ConstNum", "\")\"", "Statement"]}, {"lPart": "OperSwitch", "rPart": ["\"choice\"", "Expr", "forSwitch", "*", "forSwitch2", "\"end\""]}, {"lPart": "StopFin", "rPart": ["(", "\"stop\"", "\";\"", ")", "|", "(", "\"fin\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "forSwitch2", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"option\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Unary", "rPart": ["unarySign", "|", "binaryOrUnarySign"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "ConstWithSign", "rPart": ["binaryOrUnarySign", "?", "ConstNum"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680f403d8558742cb433a6b1"}, "rules": "lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{whileCnt = 0;}", "Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "StopFin", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "\"to\"", "{toPFR(this.currentLexem[1]);while(opStk.length > 0) opStk.pop();}", "id", "{ toPFR(\"=\");}", "\";\""]}, {"lPart": "OperCond", "rPart": ["{ctlStk.push(++whileCnt); toPFR(\"If_\"+peek(ctlStk)+\":\");}", "\"in\"", "\"(\"", "Expr", "{toPFR(\"Else_\" +peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"then\"", "Statement", "{toPFR(\"Exit_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Else_\" +peek(ctlStk)+\":\");}", "Not", "{toPFR(\"Exit_\" +ctlStk.pop()+\":\");}"]}, {"lPart": "OperCycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "ConstNum", "\":\"", "ConstNum", "\")\"", "Statement"]}, {"lPart": "OperSwitch", "rPart": ["\"choice\"", "Expr", "forSwitch", "*", "forSwitch2", "\"end\""]}, {"lPart": "StopFin", "rPart": ["(", "\"stop\"", "\";\"", ")", "|", "(", "\"fin\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "forSwitch2", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const", "|", "(", "{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "{++calledFuncArgsNum;}", "Expr", "(", "\",\"", "{++calledFuncArgsNum;}", "Expr", ")", "*", ")", "?", "\")\"", "{checkFuncArgs(peek(opStk));}", ")", "?", ")", "{toPFR(opStk.pop());}", "|", "{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"option\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Unary", "rPart": ["unarySign", "|", "binaryOrUnarySign"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]);}", "Binary", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "ConstWithSign", "rPart": ["binaryOrUnarySign", "?", "ConstNum"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"*\") return 50;\n if(s == \"/\") return 50;\n if(s == \"+\") return 40;\n if(s == \"-\") return 40;\n if(s == \"<\") return 35;\n if(s == \"<=\") return 35;\n if(s == \">\") return 35;\n if(s == \">=\") return 35;\n if(s == \"==\") return 30;\n if(s == \"!=\") return 30;\n if(s == \"&\") return 25;\n if(s == \"^\") return 24;\n if(s == \"|\") return 23;\n if(s === \"&&\") return 20;\n if(s == \"||\") return 10;\n if(s == \"=\") return 5;\n if(s == \"(\") return 1;\n return 0;\n}\n"}}{"_id": {"$oid": "68144a998558742cb433ac95"}, "rules": "lab7", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Function", "+", "{toPseudoCode();}"]}, {"lPart": "Function", "rPart": ["{opStk.push(this.currentLexem[1]); addFunctionName(this.currentLexem[1]);}", "id", "\"(\"", "ArgList", "\")\"", "{toPFR(opStk.pop() + \":\");}", "FuncBlock", "{checkFunction()}"]}, {"lPart": "ArgList", "rPart": ["(", "{toPFR(this.currentLexem[1]); pushArgToMap(lastFuncName, this.currentLexem[1]); pushVarToMap(lastFuncName, this.currentLexem[1]);}", "id", "{toPFR(\"GetArgument\");}", "(", "\",\"", "{toPFR(this.currentLexem[1]); pushArgToMap(lastFuncName, this.currentLexem[1]); pushVarToMap(lastFuncName, this.currentLexem[1]);}", "id", "{toPFR(\"GetArgument\");}", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "StopFin", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"set\");}", "\";\""]}, {"lPart": "OperCond", "rPart": ["{ctlStk.push(++whileCnt); toPFR(\"If_\"+peek(ctlStk)+\":\");}", "\"in\"", "\"(\"", "Expr", "{toPFR(\"Else_\" +peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"then\"", "Statement", "{toPFR(\"Exit_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Else_\" +peek(ctlStk)+\":\");}", "Not", "{toPFR(\"Exit_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "OperCycle", "rPart": ["{++quitCnt; ctlStk.push(++whileCnt);toPFR(\"foreach_\"+whileCnt);}", "\"foreach\"", "\"(\"", "{opStk.push(this.currentLexem[1]);}", "{toPFR(this.currentLexem[1]);}", "id", "\"in\"", "ConstWithSign", "{cmpConst += constSign*peek(constStk); while (constStk.length>0) toPFR(constStk.pop()); toPFR(\":=\"); insertJump(\"CheckLoop_\"+peek(ctlStk), false); toPFR(\"IncrementLoop_\"+peek(ctlStk)+\":\"); toPFR(peek(opStk)); toPFR(peek(opStk)); toPFR(\"1\"); toPFR(\"+\"); toPFR(\":=\"); toPFR(\"CheckLoop_\"+peek(ctlStk)+\":\"); toPFR(opStk.pop());}", "\":\"", "ConstWithSign", "{ cmpConst+=constSign*peek(constStk); while (constStk.length>0) toPFR(constStk.pop()); if (cmpConst < 0) toPFR(\"<\"); else toPFR(\">=\"); insertJump(\"ExitLoop_\"+peek(ctlStk), true); insertJump(\"EnterLoop_\"+peek(ctlStk), false);}", "\")\"", "{toPFR(\"EnterLoop_\"+peek(ctlStk)+\":\");}", "Statement", "{insertJump(\"IncrementLoop_\"+peek(ctlStk), false);}", "{opStk.pop();}", "{--quitCnt; toPFR(\"ExitLoop_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "OperSwitch", "rPart": ["{leaveCnt++; ctlStk.push(++whileCnt); onStk.push(1);toPFR(\"SwitchExpr\"+ whileCnt);}", "\"choice\"", "Expr", "{toPFR(\":=\");}", "forSwitch", "+", "{toPFR(\"LSwitch\"+peek(ctlStk)+\"Option\"+peek(onStk) + \":\");}", "forSwitch2", "\"end\"", "{toPFR(\"ExitChoice_\"+ctlStk.pop()+\":\"); onStk.pop(); --leaveCnt;}"]}, {"lPart": "StopFin", "rPart": ["(", "{checkBreakOp(\"stop\"); }", "\"stop\"", "\";\"", ")", "|", "(", "{checkBreakOp(\"fin\"); }", "\"fin\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\"", "{hasReturn = true; toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?", "{if (opStk.length > 0 && (peek(opStk) == \"-\" || peek(opStk) == \"!\")) toPFR(opStk.pop());}"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "forSwitch2", "rPart": ["\"nooption\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const", "|", "(", "{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "{++calledFuncArgsNum;}", "Expr", "(", "\",\"", "{++calledFuncArgsNum;}", "Expr", ")", "*", ")", "?", "\")\"", "{checkFuncArgs(peek(opStk));}", ")", "?", ")", "{toPFR(opStk.pop());}", "|", "{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"option\"", "{toPFR(this.currentLexem[1]);}", "ConstWithSign", "{toPFR(\"SwitchExpr\"+peek(ctlStk)); toPFR(\"==\"); toPFR(\"LSwitch\"+peek(ctlStk)+\"?=\"+peek(onStk)); toPFR(\"JmpOnFalse\"); toPFR(\"LSwitch\"+peek(ctlStk)+\"Option\"+peek(onStk)+\":\");}", "\":\"", "Statement", "*", "{toPFR(\"LSwitch\"+peek(ctlStk)+\"Option\"+(parseInt(peek(onStk))+1)); toPFR(\"Jmp\"); toPFR(\"LSwitch\"+peek(ctlStk)+\"?=\"+peek(onStk)+\":\"); onStk.push(parseInt(peek(onStk))+1);}"]}, {"lPart": "Unary", "rPart": ["{opStk.push(this.currentLexem[1]);}", "(", "unarySign", "|", "{toPFR(\"0\");}", "binaryOrUnarySign", ")"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]);}", "Binary", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "ConstWithSign", "rPart": ["binaryOrUnarySign", "?", "ConstNum"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n  this.history = [];\n};\n\nTracer.prototype = {\n  put: function(b) {\n    this.history.push(b);\n  },\n  getAll: function() {\n    var r = '';\n    var errorsNum = errors.length;\n    if (errorsNum == 0) {\n      for (var i = 0; i < this.history.length; i++) r += ' ' + this.history[i];\n    } else {\n      for (var i = 0; i < errorsNum; i++) r += errors[i] + '\\n';\n    }\n    return r;\n  },\n  clear: function() {\n    this.history = [];\n  }\n};\n\nvar tracer = new Tracer();\nvar retireCnt = 0;\nvar opStk = [];\nvar ctlStk = [];\nvar whileCnt = 0;\nvar operandStk = [];\nvar tmpVarNumber = -1;\nvar varStk = [];\nvar onStk = [];\nvar idStk = new Map();\nvar curType = \"\";\nvar name;\nvar functionMap = new Map();\nvar errors = [];\nvar calledFuncArgsNum = 0;\nvar hasReturn = false;\nvar varArr = [];\nvar constSign = 1;\nvar cmpConst = 0;\nvar leaveCnt = 0;\nvar quitCnt = 0;\nvar lastQuitCnt = 0;\nvar lastLeaveCnt = 0;\nvar constStk=[];\n\nvar funcStk = {};\nvar curFunc = \"\";\nvar argCnt = 0;\n\nfunction toPFR(x) {\n  tracer.put(x);\n}\n\nfunction peek(o) {\n  return o[o.length - 1];\n}\n\n\nfunction clear() {\n  funcStk = {};\n  opStk = [];\n  ctlStk = [];\n  whileCnt = 0;\n  operandStk = [];\n  tmpVarNumber = -1;\n  varStk = [];\n  curType = \"\";\n  onStk = [];\n  functionMap.clear();\n  errors = [];\n  varArr = [];\n  curFunc = \"\";\n  argCnt = 0;\n  constSign = 1;\n  cmpConst = 0;\n}\n\nfunction getStepSign() {\n if (constStk.length > 1) {\n   constStk.pop();\n   return constStk.pop();\n } else if (constStk.length == 1) {\n   constStk.pop();\n   return \"+\";\n } else if (cmpConst < 0) {\n   return \"+\";\n }\n return \"-\";\n};\n\nfunction getPriority(s) {\n  if (s == '(') return 0;\n  if (s == 'set') return 5;\n  if (s == '&&') return 10;\n  if (s == '||') return 15;\n  if (s == '&') return 20;\n  if (s == '|') return 20;\n  if (s == '^') return 20;\n  if (s == '==') return 25;\n  if (s == '!=') return 25;\n  if (s == '<=') return 30;\n  if (s == '<') return 30;\n  if (s == '>=') return 30;\n  if (s == '>') return 30;\n  if (s == '+') return 35;\n  if (s == '-') return 35;\n  if (s == '*') return 40;\n  if (s == '/') return 40;\n  if (s == '!') return 45;\n\n  return 0;\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод (триады):\\n\");\n    var operandStk = [];\n    var expr = false;\n    var resultCounter = 0; // Для генерации уникальных имён результатов (t0, t1, ...)\n\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0) {\n            // Операнд (переменная или значение)\n            operandStk.push(word);\n        }\n\n        if (type === 5 || type === 10 || type === 11) {\n            // Арифметические или логические операции (например, +, -, ==)\n            expr = true;\n            var op = operandStk.pop(); // Берём только один операнд\n            var result = \"t\" + resultCounter++;\n            toPFR(word + \" \" + op + \" \" + result + \"\\n\");\n            operandStk.push(result);\n        }\n\n        if (type === 20) {\n            // Присваивание (move)\n            expr = false;\n            var op = operandStk.pop(); // Источник\n            var result = operandStk.pop(); // Назначение\n            toPFR(\"move \" + op + \" \" + result + \"\\n\");\n        }\n\n        if (type === 21) {\n            expr = true;\n            var op = operandStk.pop();\n            var result = \"t\" + resultCounter++;\n            toPFR(word[0] + \" \" + op + \" \" + result + \"\\n\");\n            operandStk.push(result); \n        }\n\n        if (type === 40 || type === 41) {\n            expr = false;\n            var op = operandStk.pop();\n            var result = (type === 41) ? \"STACK\" : \"_\"; // Для типа 41 результат — STACK\n            toPFR(word + \" \" + op + \" \" + result + \"\\n\");\n        }\n\n        if (type === 50) {\n            // Возврат (return)\n            expr = false;\n            var op = expr ? \"STACK\" : operandStk.pop();\n            var result = \"_\"; // Возврат не требует результата\n            toPFR(word + \" \" + op + \" \" + result + \"\\n\");\n        }\n    }\n}\n\nfunction getType(w) {\n  switch (w) {\n    case '+':\n    case '-':\n    case '/':\n    case '*':\n      return 10;  // знак арифметической операции\n    case '>':\n    case '<':\n    case '<=':\n    case '>=':\n    case '==':\n    case '!=':\n      return 11;  // знак операции сравнения\n    case 'set':\n      return 20;  // знак операции присваивания\n    case 'Jmp':\n      return 40;  // знак операции безусловной передачи управления\n    case 'JmpOnFalse':\n      return 41;  // знак операции передачи управления по условию\n    case 'return':\n      return 50;  // знак операции значения управления из функции\n  }\n  return 0;\n}\nfunction addFunctionName(name) {\n  if (!functionMap.has(name)) {\n    functionMap.set(name, [[], new Set()]);\n  } else {\n    errors.push(\n        'error: function with name ' + name + ' has been already defined');\n  }\n\n  lastFuncName = name;\n}\n\nfunction pushArgToMap(key, value) {\n  functionMap.get(key)[0].push(value);\n}\nfunction insertJump(labelName, onFalse) {\n toPFR(labelName);\n if (onFalse == true) {\n  toPFR(\"JmpOnFalse\");\n } else {\n  toPFR(\"Jmp\");\n }\n};\n\nfunction pushVarToMap(key, value) {\n  // checkIfInsideOperator();\n  if (!functionMap.get(key)[1].has(value)) {\n    functionMap.get(key)[1].add(value);\n  }\n}\n\nfunction checkFuncDecl(name) {\n  if (!functionMap.has(name)) {\n    errors.push('error: function with name ' + name + ' is not declared');\n    return false;\n  }\n  return true;\n}\n\nfunction checkFuncArgs(name) {\n  var result = true;\n  if ((result = checkFuncDecl(name)) &&\n      calledFuncArgsNum !== functionMap.get(name)[0].length) {\n    errors.push(\n        'error: function with name ' + name +\n        ' has more/less args than defined');\n    result = false;\n  }\n\n  calledFuncArgsNum = 0;\n  return result;\n}\n\nfunction checkReturnDecl() {\n  if (!hasReturn) {\n    errors.push(\n        'error: function with name ' + lastFuncName +\n        ' has no return operator');\n    return false;\n  }\n  return true;\n}\n\nfunction checkFunction() {\n  checkReturnDecl();\n  varArr = [];\n  hasReturn = false;\n}\n\nfunction checkBreakOp(name) {\n  if (name === 'fin') {\n    if (leaveCnt > 0) {\n      toPFR('ExitChoice_' + leaveCnt);\n      toPFR('Jmp');\n    } else {\n      errors.push('error: leave operator usage out of switch operator');\n    }\n  } else {\n    if (quitCnt > 0) {\n      toPFR('ExitForeach_' + quitCnt);\n      toPFR('Jmp');\n    } else {\n      errors.push('error: break operator usage out of cycle operator');\n    }\n  }\n}\n\nfunction checkVarDecl(key, name) {\n  if (!functionMap.get(key)[1].has(name)) {\n    errors.push('error: variable with name ' + name + ' is not declared');\n    return false;\n  }\n  return true;\n}\n\nfunction checkVarInMemory(variable) {\n  for (const [key, value] of Object.entries(memory)) {\n    if (variable === key) return true;\n  }\n  return false;\n}"}}},
{"FIO":"Красков В.С.","Collection":"233531433",{"_id": {"$oid": "67d2cba9e0b22203e7cbf4eb"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67d2ef48e0b22203e7cbf5c6"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}], "extension": ""}}{"_id": {"$oid": "67d2ef4be0b22203e7cbf5c9"}, "rules": "1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}], "extension": ""}}{"_id": {"$oid": "67d2ef61e0b22203e7cbf5d3"}, "rules": "Res1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}], "extension": ""}}{"_id": {"$oid": "67d2ef7ae0b22203e7cbf5e0"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d33cbfe0b22203e7cbf76f"}, "rules": "Res2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "[^\"]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[^']", "{1}", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "constBase4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constBase16", "rPart": ["[1]", "[6]", "[x]", "[0-9a-fA-F]", "+"]}], "extension": ""}}{"_id": {"$oid": "681ad3098558742cb433c856"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "universalSign", "rPart": ["[-+]"]}, {"lPart": "binarySign", "rPart": ["(", "[*^/%<>]", ")", "|", "(", "[<>!+]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "constBase4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constBase16", "rPart": ["[1]", "[6]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "AssignOperator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "binarySign", "|", "universalSign", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["(", "unarySign", "|", "universalSign", ")", "?", "Factor"]}, {"lPart": "Factor", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Factor", "rPart": ["id", "|", "Const"]}, {"lPart": "Const", "rPart": ["Int", "|", "float", "|", "string", "|", "char", "|", "constBase4", "|", "constBase16"]}], "extension": ""}}{"_id": {"$oid": "681ae0008558742cb433c884"}, "rules": "lab3", "data": {"rList": [{"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "universalSign", "rPart": ["[-+]"]}, {"lPart": "binarySign", "rPart": ["(", "[*^/%<>]", ")", "|", "(", "[<>!+]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "constBase4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constBase16", "rPart": ["[1]", "[6]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\";\""]}, {"lPart": "SwitchOperator", "rPart": ["\"select\"", "Expr", "\"case\"", "\"(\"", "CasePart"]}, {"lPart": "CasePart", "rPart": ["Const", "\")\"", "BlockOperator", "*", "\"case\"", "\"(\"", "CasePart"]}, {"lPart": "CasePart", "rPart": ["\"false\"", "\")\"", "BlockOperator", "*", "\"end\"", "\";\""]}, {"lPart": "ForOperator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOperator"]}, {"lPart": "IfOperator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "BlockOperator", "ElseIfPart", "ElsePart"]}, {"lPart": "ElseIfPart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "BlockOperator", "ElseIfPart"]}, {"lPart": "ElseIfPart", "rPart": ["~", "\"?:\""]}, {"lPart": "ElsePart", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "ElsePart", "rPart": ["~", "\":\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"break\"", "|", "\"leave\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["DefineOperator", "|", "AssignOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "SpecWord"]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "DefineOperator", "rPart": ["\"var\"", "id", "\";\""]}, {"lPart": "AssignOperator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "binarySign", "|", "universalSign", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["(", "unarySign", "|", "universalSign", ")", "?", "Factor"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "Const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?"]}, {"lPart": "Const", "rPart": ["Int", "|", "float", "|", "string", "|", "char", "|", "constBase4", "|", "constBase16"]}], "extension": ""}}},
{"FIO":"Рюмина Е.О.","Collection":"354431143",{"_id": {"$oid": "67badad8ce6dd03692d093ce"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67badfe9ce6dd03692d093e7"}, "rules": "Lab1", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["(", "Type", ")", "?", "Id", "\"(\"", "(", "Type", "Arguments", ")", "?", "\")\"", "BlockOperator", "+"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "Arguments", "rPart": ["Expression", "\",\"", "Expression", "*"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "BlockOperator", "rPart": ["(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}], "extension": ""}}{"_id": {"$oid": "67d047b3af563521c9d5d99e"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["(", "[2]", "[_]", "[0-1]", "+", ")", "|", "(", "[4]", "[_]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "brakets", "rPart": ["[(){}]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/><]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67e296d24635a960233ad8b6"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMath", "rPart": ["[-+]"]}, {"lPart": "Compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const2", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "Const4", "rPart": ["[4]", "[_]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "[\" \\ ]", "|", "[\\] [x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", "[']"]}, {"lPart": "Space", "rPart": ["[\\r\\n\\t ]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[/]", "[/]", "[\\n\\r]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "FunctionCall", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "Unary", ")", "Expression", ")", "?"]}, {"lPart": "Type", "rPart": ["\"const2\"", "|", "\"const4\"", "|", "\"const10\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Constant", "rPart": ["Const2", "|", "Const4", "|", "Const10", "|", "String", "|", "Char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["UnaryMath", "|", "UnaryLogic"]}, {"lPart": "Binary", "rPart": ["BinaryMath", "|", "Compare", "|", "BinaryLogic"]}, {"lPart": "BinaryMath", "rPart": ["[*/]"]}, {"lPart": "BinaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["(", "Type", "|", "\"void\"", ")", "?", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Assignment", "|", "FunctionCall", "|", "Break", "|", "Return", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch", "|", "Comments"]}, {"lPart": "Declaration", "rPart": ["Type", "id"]}, {"lPart": "Assignment", "rPart": ["id", "\":=\"", "Expression"]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "\"do\"", "(", "Operator", "|", "Operators", ")", "ConditionTail", "?"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "(", "SwitchTail", ")", "?", "\"end\""]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "ConditionTail", "rPart": ["\"or\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "SwitchTail", "rPart": ["\"сase\"", "\"(\"", "\"false\"", "\")\"", "(", "Operator", "|", "Operators", ")", "*"]}], "extension": ""}}{"_id": {"$oid": "67f15d95a600182c7517b706"}, "rules": "Lab4", "data": {"rList": [{"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMath", "rPart": ["[-+]"]}, {"lPart": "Compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const2", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "Const4", "rPart": ["[4]", "[_]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "[\" \\ ]", "|", "[\\] [x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", "[']"]}, {"lPart": "Space", "rPart": ["[\\r\\n\\t ]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[/]", "[/]", "[\\n\\r]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "UnaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Type", "rPart": ["\"const2\"", "|", "\"const4\"", "|", "\"const10\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Constant", "rPart": ["Const2", "|", "Const4", "|", "Const10", "|", "String", "|", "Char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["UnaryMath", "|", "UnaryLogic"]}, {"lPart": "Binary", "rPart": ["BinaryMath", "|", "Compare", "|", "BinaryLogic"]}, {"lPart": "BinaryMath", "rPart": ["[*/]"]}, {"lPart": "BinaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["(", "Type", ")", "?", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Declaration", "rPart": ["Type", "id"]}, {"lPart": "Assignment", "rPart": ["id", "\":=\"", "Expression"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionTail1", "ConditionTail2"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+"]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "SwitchTail", "rPart": ["\"case\"", "\"(\"", "\"false\"", "\")\"", "(", "Operator", "|", "Operators", ")", "*"]}, {"lPart": "ConditionTail1", "rPart": ["\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionTail2", "rPart": ["\"or\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Assignment", "|", "Break", "|", "Return", ")", "\";\""]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch", "|", "Comments"]}], "extension": ""}}{"_id": {"$oid": "6804b1ce8558742cb4337be2"}, "rules": "Lab5", "data": {"rList": [{"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMath", "rPart": ["[-+]"]}, {"lPart": "Compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const2", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "Const4", "rPart": ["[4]", "[_]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "[\" \\ ]", "|", "[\\] [x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", "[']"]}, {"lPart": "Space", "rPart": ["[\\r\\n\\t ]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "(", "id", "FunctionCall", "?", ")", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "UnaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "Constant", "rPart": ["Const2", "|", "Const4", "|", "Const10", "|", "String", "|", "Char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["UnaryMath", "|", "UnaryLogic"]}, {"lPart": "Binary", "rPart": ["BinaryMath", "|", "Compare", "|", "BinaryLogic"]}, {"lPart": "BinaryMath", "rPart": ["[*/]"]}, {"lPart": "BinaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Declaration", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "?"]}, {"lPart": "Assignment", "rPart": ["\":=\"", "Expression"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionBlock", "ConditionElse"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "ConditionBlock"]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Break", "|", "Return", "|", "Statement", ")", "\";\""]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Operator", "rPart": ["Condition", "|", "(", "Cycle", "|", "CycleBreak", ")", "|", "Switch"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "SwitchCase", "+", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*"]}, {"lPart": "ConditionBlock", "rPart": ["\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionElse", "rPart": ["\"or\"", "ConditionBlock"]}, {"lPart": "ConditionElse", "rPart": ["~", "\"or\""]}, {"lPart": "Statement", "rPart": ["id", "StatementTail"]}, {"lPart": "StatementTail", "rPart": ["Assignment", "|", "FunctionCall"]}, {"lPart": "CycleBreak", "rPart": ["\"leave\"", "\";\""]}], "extension": ""}}{"_id": {"$oid": "6819f7d68558742cb433c0bd"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{resetAll();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Break", "|", "Return", "|", "Statement", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "(", "Cycle", "|", "CycleBreak", ")", "|", "Switch"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionBlock", "ConditionElse"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "SwitchCase", "+", "\"end\""]}, {"lPart": "Declaration", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression", "{ toPFR(\"return\"); }"]}, {"lPart": "Statement", "rPart": ["{ toPFR(this.currentLexem[1]); }", "id", "StatementTail", "{toPFR(\"=\");}"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Expression", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "Unary", "BeginExpression", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExpression"]}, {"lPart": "ConditionBlock", "rPart": ["\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionElse", "rPart": ["\"or\"", "ConditionBlock"]}, {"lPart": "ConditionElse", "rPart": ["~", "\"or\""]}, {"lPart": "Cycle", "rPart": ["{ cycleStack.push(++cycleCount); toPFR(\"cycle \" + peek(cycleStack)); toPFR(\"cycleBegin cycle\" + peek(cycleStack)); }", "\"while\"", "\"(\"", "Expression", "\")\"", "{ toPFR(\"JumpOnFalse cycleEnd cycle\" + peek(cycleStack)); }", "ConditionBlock", "{ toPFR(\"Jump cycleBegin cycle\" + peek(cycleStack)); toPFR(\"cycleAssignment cycle\" + peek(cycleStack)); toPFR(\"cycleEnd cycle\" + peek(cycleStack)); cycleStack.pop(); }"]}, {"lPart": "CycleBreak", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "StatementTail", "rPart": ["Assignment", "|", "FunctionCall"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "FunctionCall", "?"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop()); opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "UnaryMath", ")", "Expression", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpression", "rPart": []}, {"lPart": "Unary", "rPart": ["UnaryMath", "|", "UnaryLogic"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*"]}, {"lPart": "Assignment", "rPart": ["\":=\"", "Expression"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Constant", "rPart": ["Const2", "|", "Const4", "|", "Const10", "|", "String", "|", "Char", "|", "\"false\""]}, {"lPart": "Binary", "rPart": ["BinaryMath", "|", "Compare", "|", "BinaryLogic"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "UnaryMath", "rPart": ["[-+]"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "Const2", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "Const4", "rPart": ["[4]", "[_]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "[\" \\ ]", "|", "[\\] [x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", "[']"]}, {"lPart": "BinaryMath", "rPart": ["[*/]"]}, {"lPart": "Compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "BinaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Space", "rPart": ["[\\r\\n\\t ]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере,\n// восходящий выполняет действия не так, как хотелось бы.\n//Пример заимствован из Sample6 и улучшен\n\nvar ignoreLastWord;\nvar assignTargetId = null;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar unaryStack, opStack, cycleStack, cycleCount;\nfunction resetAll() {\n unaryStack = [];\n opStack = [];\n cycleStack = [];\n cycleCount = 0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n switch (s) {\n  case \"(\": \n   return 0;\n  case \"+\":\n  case \"-\":\n  case \"<\":\n  case \">\":\n  case \"==\":\n  case \"!=\":\n  case \"<=\":\n  case \">=\":\n  case \"||\":\n   return 1;\n  case \"*\": \n  case \"/\":\n  case \"&&\":\n   return 2;\n  }\n}"}}},
{"FIO":"Рябов И.М.","Collection":"311444314",{"_id": {"$oid": "67c4679aaf563521c9d5b357"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67dacbdfe0b22203e7cc1691"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9+]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9+]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67dacfcce0b22203e7cc16e5"}, "rules": "лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const2", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed52f2a600182c7517afb3"}, "rules": "лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const2", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"-\"", "|", "\"/\""]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "SignOfOperation", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "assignSyntax", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Воронков И.И.","Collection":"521224523",{"_id": {"$oid": "67cb0853af563521c9d5c5a0"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67cd68d0af563521c9d5cc09"}, "rules": "зазание1", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-Z]", "[0-9]", "{0,3}", "[a-Z]"]}, {"lPart": "QuatConst", "rPart": ["[0-3]", "[Q]"]}, {"lPart": "OctalConst", "rPart": ["[0-7]", "[O]"]}, {"lPart": "DecConst", "rPart": ["[0-9]"]}, {"lPart": "StringConst", "rPart": ["[\"]", "[\"]", "[]", "*", "[\"]"]}, {"lPart": "CharConst", "rPart": ["[']", "[]", "*", "[']"]}, {"lPart": "AssOp", "rPart": ["[let]", "[ ]", "[a-Z* | 0-9*]", "[ ]", "[on]", "[ ]", "[a-Z0-9+*/()-]", "*", "[;]"]}, {"lPart": "CondOp", "rPart": ["[when]", "[ ]", "[a-zA-Z0-9]", "*", "[ ]", "[a-z; | {a-z;}]", "[ ]", "[other]", "[ ]", "[a-z; | {a-z;}]"]}, {"lPart": "Cycle", "rPart": ["[cycle]", "[ ]", "[([ ]", "[a-zA-Z0-9]", "*", "[:=]", "[a-zA-Z0-9]", "[ ]", "[;]", "[ ]", "[ [a-zA-Z0-9]", "*", "[ ]", "[;]", "[ ]", "[a-zA-Z0-9]", "*", "[:=]", "[a-zA-Z0-9]", "[ ]", "[)]", "[ ]", "[a-z; | {a-z;} ]", "[ ]", "[quit;]", "*"]}, {"lPart": "Switch", "rPart": ["[??]", "[x > y]", "[ ]", "{ [?= x][ ][:][ ][operator | operators]* [ [ quit; ] ] [ ?= x][ ][:][ ][operator | operators]* [ [ quit; ] ] [?= x][ ][:][ ][operator | operators]* [ [ quit; ] ] [ ?= x][ ][:][ ][operator | operators]* [ [ quit; ]][ ?~ ][:][ [operator | operators]*]]}"]}, {"lPart": "Fun", "rPart": ["[function]", "[ ]", "[\\(]", "[ ArgList ]", "[ \\)]", "[opertions;]", "*", "[ ]", "[->]", "[ ]", "[fun]"]}, {"lPart": "Type", "rPart": ["(", "[type]", "[: ]", "[var]", ")", "*"]}, {"lPart": "Tetrad", "rPart": ["[operationCode]", "[{opertations;}]", "[{operations;}]", "[a-Z]"]}, {"lPart": "Space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67dad6e6e0b22203e7cc17da"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0]", "(", "[q]", "[0-3]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "operations", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67daf1fbe0b22203e7cc1975"}, "rules": "lab2", "data": {"rList": [{"lPart": "SimpleAssign", "rPart": ["(", "let", "type", "id", "on", "const", "semicolon", ")", "*"]}, {"lPart": "rbracket", "rPart": ["\")\""]}, {"lPart": "lbracket", "rPart": ["\"(\""]}, {"lPart": "rbrace", "rPart": ["\"}\""]}, {"lPart": "lbrace", "rPart": ["\"{\""]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "colon", "rPart": ["\":\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "funAssign", "rPart": ["\"->\""]}, {"lPart": "function", "rPart": ["\"function\""]}, {"lPart": "else", "rPart": ["\"?~\""]}, {"lPart": "elseIf", "rPart": ["\"?=\""]}, {"lPart": "if", "rPart": ["\"??\""]}, {"lPart": "quit", "rPart": ["\"quit\""]}, {"lPart": "cycle", "rPart": ["\"cycle\""]}, {"lPart": "other", "rPart": ["\"other\""]}, {"lPart": "when", "rPart": ["\"when\""]}, {"lPart": "on", "rPart": ["\"on\""]}, {"lPart": "let", "rPart": ["\"let\""]}, {"lPart": "unaryOperator", "rPart": ["\"not\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"==\"", "|", "\">\""]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0]", "(", "[q]", "[0-3]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\\\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ecab6fa600182c7517aaf7"}, "rules": "lab3", "data": {"rList": [{"lPart": "File", "rPart": ["BlockOperator", "*"]}, {"lPart": "BlockOperator", "rPart": ["(", "(", "Operator", "|", "Quit", ")", "|", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["(", "AssignOperator", "\";\"", ")", "|", "IfOperator", "|", "ForOperator"]}, {"lPart": "AssignOperator", "rPart": ["\"let\"", "(", "type", ")", "?", "id", "(", "\"on\"", "Expr", ")", "?"]}, {"lPart": "IfOperator", "rPart": ["\"when\"", "Expr", "BlockOperator", "(", "\"other\"", "BlockOperator", ")", "?"]}, {"lPart": "ForOperator", "rPart": ["\"cycle\"", "\"(\"", "AssignOperator", "\";\"", "Expr", "\";\"", "AssignOperator", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "BegExpr", "rPart": ["(", "unarySign", "|", "universal", ")", "?", "(", "(", "id", "|", "const", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binarySign", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "Quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "const", "rPart": ["[0]", "(", "[q]", "[0-3]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\\']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[\\']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "binarySign", "rPart": ["[*%/<>]", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe657a8558742cb4336dbd"}, "rules": "lab4", "data": {"rList": [{"lPart": "File", "rPart": ["Function", "+"]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "SwitchOper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "BlockOperator", ")", "+", "(", "\"?~\"", "\":\"", "BlockOperator", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "AssignOper", "\";\"", ")", "|", "IfOper", "|", "ForOperator", "|", "SwitchOper", "|", "SpecWord"]}, {"lPart": "AssignOper", "rPart": ["\"let\"", "(", "type", ")", "?", "id", "(", "\"on\"", "Expr", ")", "?"]}, {"lPart": "IfOper", "rPart": ["\"when\"", "Expr", "BlockOperator", "ElsePart"]}, {"lPart": "ElsePart", "rPart": ["\"other\"", "BlockOperator"]}, {"lPart": "ElsePart", "rPart": ["~", "\"other\""]}, {"lPart": "ForOperator", "rPart": ["\"cycle\"", "\"(\"", "AssignOper", "\";\"", "Expr", "\";\"", "AssignOper", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["(", "universal", "|", "unarySign", ")", "?", "BegExpr", "(", "(", "universal", "|", "binarySign", ")", "Expr", ")", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "BegExpr", "rPart": ["const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "SpecWord", "rPart": ["(", "\"quit\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "(", "type", ")", "?", "id", "(", "\",\"", "(", "type", ")", "?", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\"->\"", "id", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "universal", "rPart": ["[-+]"]}, {"lPart": "const", "rPart": ["[0]", "(", "[q]", "[0-3]", "+", ")", "|", "(", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "binarySign", "rPart": ["[*%/<>]", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680f160d8558742cb433a527"}, "rules": "lab5", "data": {"rList": [{"lPart": "File", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "(", "type", ")", "?", "id", "(", "\",\"", "(", "type", ")", "?", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\"on\"", "type", "?", "id", "\";\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"string\"", "|", "\"char\"", "|", "\"bool\""]}, {"lPart": "Operator", "rPart": ["AssignOperator", "|", "DefineOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "SpecWord"]}, {"lPart": "AssignOperator", "rPart": ["AssignHelper", "\";\""]}, {"lPart": "DefineOperator", "rPart": ["type", "?", "id", "(", "\"on\"", "Expr", ")", "?", "(", "\",\"", "id", "(", "\"on\"", "Expr", ")", "?", ")", "*", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"when\"", "Expr", "BlockOperator", "ElsePart"]}, {"lPart": "ForOperator", "rPart": ["\"cycle\"", "\"(\"", "AssignHelper", "\";\"", "Expr", "\";\"", "AssignHelper", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "BlockOperator", "*", ")", "+", "(", "\"?~\"", "\":\"", "BlockOperator", "*", ")", "?", "\"}\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"quit\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "AssignHelper", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "universalSign", "|", "binarySign", ")", "Term", ")", "*"]}, {"lPart": "ElsePart", "rPart": ["\"other\"", "BlockOperator"]}, {"lPart": "ElsePart", "rPart": ["~", "\"other\""]}, {"lPart": "Term", "rPart": ["(", "universalSign", "|", "unarySign", ")", "?", "Factor"]}, {"lPart": "Const", "rPart": ["constQuat", "|", "constOctal", "|", "constInt", "|", "constReal", "|", "constChar", "|", "constStr"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "Const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "constQuat", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\"'ntr\\\\]", "|", "(", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "(", "[\\\\]", "(", "[\"'ntr\\\\]", "|", "(", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", ")", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "universalSign", "rPart": ["[-+]"]}, {"lPart": "binarySign", "rPart": ["[*%/<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Гартман П.С.","Collection":"315421232",{"_id": {"$oid": "67bd73edaf563521c9d591ab"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67be01efaf563521c9d5950a"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67be0368af563521c9d59512"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}], "extension": "\n"}}{"_id": {"$oid": "67be0373af563521c9d59514"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", ")", "(", "[eE]", "[+-]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67be36b8af563521c9d59583"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67d325d8e0b22203e7cbf75c"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", ")", "(", "[eE]", "[+-]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "uOperation", "rPart": ["[!]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "dots", "rPart": ["[;,]"]}, {"lPart": "biOperator", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "mixOperation", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e81c8a4635a960233af489"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", ")", "(", "[eE]", "[+-]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "uOperation", "rPart": ["[!]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "biOperation", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "mixOperation", "rPart": ["[-]"]}, {"lPart": "constants", "rPart": ["const", "|", "float", "|", "char"]}, {"lPart": "operator", "rPart": ["\"quit\""]}, {"lPart": "break", "rPart": ["\"break\""]}, {"lPart": "unary", "rPart": ["uOperation", "|", "mixOperation"]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "unary", "|", "biOperation", ")", "expression", ")", "?"]}, {"lPart": "put", "rPart": ["\"put\"", "expression", "\"to\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["put", "|", "conditional", "|", "cycle", "|", "select"]}, {"lPart": "conditional", "rPart": ["\"at\"", "expression", "\"do\"", "operator", "(", "\"or\"", "\"do\"", "operator", ")"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "put", "?", "\";\"", "expression", "?", "\";\"", "put", "?", "\";\"", "\")\"", "operator"]}, {"lPart": "select", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "case", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "operator", "*", "break", "?"]}, {"lPart": "operator", "rPart": ["\"{\"", "operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e826d44635a960233af4a6"}, "rules": "Result", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", ")", "(", "[eE]", "[+-]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "uOperation", "rPart": ["[!]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "biOperation", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "mixOperation", "rPart": ["[-]"]}, {"lPart": "constants", "rPart": ["const", "|", "float", "|", "char"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "unary", "rPart": ["uOperation", "|", "mixOperation"]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "mixOperation", "|", "biOperation", ")", "expression", ")", "?"]}, {"lPart": "put", "rPart": ["\"put\"", "expression", "\"to\"", "id", "\";\""]}, {"lPart": "conditional", "rPart": ["\"at\"", "expression", "\"do\"", "operator", "(", "\"or\"", "\"do\"", "operator", ")"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "put", "?", "\";\"", "expression", "?", "\";\"", "put", "?", "\";\"", "\")\"", "operator"]}, {"lPart": "select", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "operator", "rPart": ["put", "|", "conditional", "|", "cycle", "|", "select"]}, {"lPart": "case", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "operator", "*", "break", "?"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67fa25358558742cb4335728"}, "rules": "Lab4", "data": {"rList": [{"lPart": "program", "rPart": ["function", "*"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "arg", "?", "\")\"", "\"{\"", "operator", "*", "\"}\""]}, {"lPart": "arg", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["put", "|", "conditional", "|", "cycle", "|", "select", "|", "quit", "|", "(", "id", "\"(\"", "param", "?", "\")\"", "\";\"", ")"]}, {"lPart": "put", "rPart": ["\"put\"", "expression", "\"to\"", "id", "\";\""]}, {"lPart": "conditional", "rPart": ["\"at\"", "expression", "\"do\"", "OB", "else"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "put", "|", "\";\"", ")", "expression", "?", "\";\"", "put", "?", "\")\"", "OB"]}, {"lPart": "select", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "(", "\"(\"", "param", "?", "\")\"", ")", "?", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "mixOperation", "|", "biOperation", ")", "expression", ")", "?"]}, {"lPart": "OB", "rPart": ["operator", "|", "(", "\"{\"", "operator", "*", "\"}\"", ")"]}, {"lPart": "else", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "else", "rPart": ["~", "\"or\""]}, {"lPart": "case", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "OB", "*", "break", "?"]}, {"lPart": "param", "rPart": ["expression", "(", "\",\"", "expression", ")", "*"]}, {"lPart": "unary", "rPart": ["uOperation", "|", "mixOperation"]}, {"lPart": "constants", "rPart": ["const", "|", "float", "|", "char", "|", "\"false\""]}, {"lPart": "break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "uOperation", "rPart": ["[!]"]}, {"lPart": "mixOperation", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", ")", "(", "[eE]", "[+-]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "biOperation", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680c9bc48558742cb433990c"}, "rules": "Lab5", "data": {"rList": [{"lPart": "program", "rPart": ["function", "*"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "arg", "?", "\")\"", "\"{\"", "operator", "*", "\"}\""]}, {"lPart": "arg", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["(", "put", "\";\"", ")", "|", "conditional", "|", "cycle", "|", "select", "|", "quit", "|", "(", "id", "\"(\"", "param", "?", "\")\"", "\";\"", ")"]}, {"lPart": "put", "rPart": ["\"put\"", "expression", "\"to\"", "id"]}, {"lPart": "conditional", "rPart": ["\"at\"", "expression", "\"do\"", "OB", "else"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "put", "?", "\";\"", ")", "expression", "?", "\";\"", "put", "?", "\")\"", "OB"]}, {"lPart": "select", "rPart": ["\"select\"", "expression", "case", "+", "\"end\""]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "(", "\"(\"", "param", "?", "\")\"", ")", "?", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "mixOperation", "|", "biOperation", ")", "expression", ")", "?"]}, {"lPart": "OB", "rPart": ["operator", "|", "(", "\"{\"", "operator", "*", "\"}\"", ")"]}, {"lPart": "else", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "else", "rPart": ["~", "\"or\""]}, {"lPart": "case", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "OB", "*", "break", "?"]}, {"lPart": "param", "rPart": ["expression", "(", "\",\"", "expression", ")", "*"]}, {"lPart": "unary", "rPart": ["uOperation", "|", "mixOperation"]}, {"lPart": "constants", "rPart": ["const", "|", "float", "|", "char", "|", "\"false\""]}, {"lPart": "break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "uOperation", "rPart": ["[!]"]}, {"lPart": "mixOperation", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", ")", "(", "[eE]", "[+-]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "biOperation", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Полковников П.С.","Collection":"433234234",{"_id": {"$oid": "67b4590dce6dd03692d08209"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 500, "assist": 1}}{"_id": {"$oid": "67c03d78af563521c9d5a1ba"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d17f9caf563521c9d5e268"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/><]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[s]", "[e]", "[t]", "[(]"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Bracket", "rPart": ["[(){}]"]}, {"lPart": "types", "rPart": ["[$]", "(", "(", "[i]", "[n]", "[t]", ")", "|", "(", "[s]", "[t]", "[r]", ")", "|", "(", "[f]", "[l]", "[o]", "[a]", "[t]", ")", ")"]}, {"lPart": "keyWord", "rPart": ["(", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d54b81e0b22203e7cbfa6e"}, "rules": "test", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "SimpleTerm", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Term", "rPart": ["SimpleTerm", "|", "CallExpr"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "Delimiter"]}, {"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "Delimiter"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "Params", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "CallExpr", "rPart": ["id", "\"(\"", "Args", "?", "\")\""]}, {"lPart": "Args", "rPart": ["Term", "(", "\",\"", "Term", ")", "*"]}, {"lPart": "Params", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7a2784635a960233af119"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "types", "rPart": ["[$]", "(", "(", "[i]", "[n]", "[t]", ")", "|", "(", "[s]", "[t]", "[r]", ")", "|", "(", "[f]", "[l]", "[o]", "[a]", "[t]", ")", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "Spliter", "id", "\")\"", "Delimiter"]}, {"lPart": "Programm", "rPart": ["(", "Operator", "|", "Expr", ")", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fa2cfb8558742cb4335736"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "Delimiter"]}, {"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "Delimiter"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\""]}, {"lPart": "Term", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680ca3208558742cb433992b"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "Delimiter"]}, {"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "Delimiter"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\""]}, {"lPart": "Term", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cb53d8558742cb43399af"}, "rules": "Lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0]", "[h]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ !#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["{ExprStk.push(this.currentLexem[1]);count += 1;console.log(count, this.currentLexem);}", "Term"]}, {"lPart": "AddPart", "rPart": ["(", "{ExprStk.push(this.currentLexem[1]);}", "(", "\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", "|", "\"|\"", "|", "\"&\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\"", "{ExprStk.push(\")\")}"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"y*\"", "|", "\"y/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "{for (const token of infixToPostfix(ExprStk)) toPFR(token);toPFR(\"set\");}", "\")\"", "Delimiter"]}, {"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["(", "\"leave\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "Delimiter"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\""]}, {"lPart": "Term", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n\n\n// main() {\n//  set((y + (3 * 8)) & (4 - 7), i);\n// }\n\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar ExprStk = [];\nlet count = 0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction not(a) {\n return !a;\n}\n\n// Приоритеты операторов\nconst precedence = {\n    '&': 1,\n    '|': 1,\n    '>': 2,\n    '<': 2,\n    '>=': 2,\n    '<=': 2,\n    '==': 2,\n    '!=': 2,\n    '+': 3,\n    '-': 3,\n    '*': 4,\n    '/': 4,\n    '^': 5\n};\n\n\nfunction infixToPostfix(tokens) {\n    const output = [];\n    const operatorStack = [];\n    \n    // Функция для проверки, является ли токен оператором\n    const isOperator = (token) => token in precedence;\n    \n    for (const token of tokens) {\n        if (token === '(') {\n            operatorStack.push(token);\n        } else if (token === ')') {\n            // Выталкиваем все операторы до открывающей скобки\n            while (operatorStack.length > 0 && operatorStack[operatorStack.length - 1] !== '(') {\n                output.push(operatorStack.pop());\n            }\n            operatorStack.pop(); // Удаляем '(' из стека\n        } else if (isOperator(token)) {\n            // Выталкиваем операторы с большим или равным приоритетом\n            while (\n                operatorStack.length > 0 &&\n                operatorStack[operatorStack.length - 1] !== '(' &&\n                precedence[operatorStack[operatorStack.length - 1]] >= precedence[token]\n            ) {\n                output.push(operatorStack.pop());\n            }\n            operatorStack.push(token);\n        } else {\n            // Операнды сразу в выход\n            output.push(token);\n        }\n    }\n    \n    // Выталкиваем оставшиеся операторы\n    while (operatorStack.length > 0) {\n        output.push(operatorStack.pop());\n    }\n    \n    return output;\n}"}}},
{"FIO":"Ищенко О.Н.","Collection":"424322553",{"_id": {"$oid": "67bc153ece6dd03692d096cd"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[+-*/]"]}, {"lPart": "constEight", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constFour", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "(", "[\\n]", "|", "[\\r\\n]", ")", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bc3367ce6dd03692d0974a"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "68060dd48558742cb4337fad"}, "rules": "lab2", "data": {"rList": [{"lPart": "global", "rPart": ["functionExpression", "+"]}, {"lPart": "functionExpression", "rPart": ["\"function\"", "\"(\"", "(", "id", ")", "?", "(", "\",\"", "id", ")", "*", "\")\"", "functionBlock", "\"->\"", "id"]}, {"lPart": "functionBlock", "rPart": ["\"{\"", "(", "operator", ")", "*", "(", "\"return\"", "operand", "?", "delimiter", ")", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["assignmentExpression", "|", "conditionalExpression", "|", "cycleExpression", "|", "switchExpression"]}, {"lPart": "assignmentExpression", "rPart": ["id", "\":=\"", "expression", "delimiter"]}, {"lPart": "conditionalExpression", "rPart": ["\"in\"", "\"(\"", "logicalExpression", "\")\"", "\"then\"", "operationBlock", "(", "\"not\"", "operationBlock", ")", "?"]}, {"lPart": "cycleExpression", "rPart": ["\"cycle\"", "\"(\"", "assignmentExpression", "expression", "delimiter", "assignmentExpression", "\")\"", "operationBlock", "(", "\"quit;\"", ")", "?"]}, {"lPart": "switchExpression", "rPart": ["\"case\"", "expression", "\"{\"", "(", "\"when\"", "const", "\"then\"", "(", "operator", "|", "operationBlock", ")", "(", "\"exit\"", "delimiter", ")", "?", ")", "+", "(", "\"otherwise\"", "(", "operator", "|", "operationBlock", ")", ")", "?", "\"}\""]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "expression", "rPart": ["(", "unaryOperation", ")", "?", "operand", "(", "operation", "operand", ")", "?"]}, {"lPart": "logicalExpression", "rPart": ["operand", "(", "compareOperation", "operand", ")", "?"]}, {"lPart": "operationBlock", "rPart": ["\"{\"", "(", "operator", ")", "+", "\"}\""]}, {"lPart": "const", "rPart": ["constDec", "|", "constEight", "|", "constFour", "|", "constChar", "|", "constString"]}, {"lPart": "operation", "rPart": ["binaryOperation", "|", "unaryOperation", "|", "logicOperation", "|", "compareOperation"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constEight", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constFour", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "unaryOperation", "rPart": ["[-+]"]}, {"lPart": "compareOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "binaryOperation", "rPart": ["[*/]"]}, {"lPart": "logicOperation", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "(", "[\\n]", "|", "[\\r\\n]", ")", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68062e298558742cb4338008"}, "rules": "lab2test", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryOperation", "rPart": ["[*/]"]}, {"lPart": "constEight", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constFour", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "(", "[\\n]", "|", "[\\r\\n]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unaryOperation", "rPart": ["[-+]"]}, {"lPart": "compareOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "logicOperation", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "operation", "rPart": ["binaryOperation", "|", "unaryOperation", "|", "logicOperation"]}, {"lPart": "const", "rPart": ["constDec", "|", "constEight", "|", "constFour", "|", "constChar", "|", "constString"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "expression", "rPart": ["(", "unaryOperation", ")", "?", "operand", "(", "operation", "operand", ")", "?"]}, {"lPart": "assignmentExpression", "rPart": ["id", "\":=\"", "expression"]}, {"lPart": "logicalExpression", "rPart": ["operand", "(", "compareOperation", "operand", ")", "?"]}, {"lPart": "operationBlock", "rPart": ["\"{\"", "(", "operator", ")", "+", "\"}\""]}, {"lPart": "conditionalExpression", "rPart": ["\"in\"", "\"(\"", "logicalExpression", "\")\"", "\"then\"", "(", "operationBlock", "|", "operator", ")", "notExpression", "?"]}, {"lPart": "operator", "rPart": ["assignmentExpression", "|", "conditionalExpression", "|", "cycleExpression", "|", "switchExpression"]}, {"lPart": "cycleExpression", "rPart": ["\"cycle\"", "\"(\"", "assignmentExpression", "delimiter", "expression", "delimiter", "assignmentExpression", "\")\"", "(", "operator", "|", "operationBlock", ")"]}, {"lPart": "switchExpression", "rPart": ["\"case\"", "expression", "\"{\"", "(", "\"when\"", "const", "\"then\"", "(", "operator", "|", "operationBlock", ")", "(", "\"exit\"", "delimiter", ")", "?", ")", "+", "(", "\"otherwise\"", "(", "operator", "|", "operationBlock", ")", ")", "?", "\"}\""]}, {"lPart": "functionExpression", "rPart": ["\"function\"", "\"(\"", "(", "id", ")", "?", "(", "\",\"", "id", ")", "*", "\")\"", "functionBlock", "\"->\"", "id"]}, {"lPart": "functionBlock", "rPart": ["\"{\"", "(", "operator", ")", "*", "(", "\"return\"", "operand", "?", "delimiter", ")", "?", "\"}\""]}, {"lPart": "global", "rPart": ["functionExpression", "+"]}, {"lPart": "notExpression", "rPart": ["\"not\"", "(", "operationBlock", "|", "operator", ")"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Шахид Ш.","Collection":"452544412",{"_id": {"$oid": "67c5707eaf563521c9d5b6dd"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67f686228558742cb4334acc"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "binary", "rPart": ["[+*/]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}], "extension": ""}}{"_id": {"$oid": "67f79bab8558742cb4335388"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "binary", "rPart": ["[+*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "delimeter", "rPart": ["[;,:]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "ternary", "rPart": ["[?]", "|", "[?=]"]}], "extension": ""}}{"_id": {"$oid": "67f7eaf48558742cb4335530"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Prog", "rPart": ["(", "CmpOp", "|", "AssignOp", "|", "CycleOp", "|", "Operator", ")", "+"]}, {"lPart": "CmpOp", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OB", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "OB", ")", "*", "(", "\":\"", "OB", ")", "*"]}, {"lPart": "AssignOp", "rPart": ["T", "id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "CycleOp", "rPart": ["\"foreach\"", "\"(\"", "T", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "OB"]}, {"lPart": "Operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"float\""]}, {"lPart": "Expr", "rPart": ["(", "unary", "|", "minus", ")", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Prog", "\"}\"", ")", "|", "(", "CmpOp", "|", "AssignOp", "|", "CycleOp", "|", "Operator", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "сonstReal", "|", "constStr", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "binary", "Expr", ")", "|", "(", "minus", "Expr", ")", "|", "(", "logic", "Expr", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[x]", "[01]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binary", "rPart": ["[+*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}},
{"FIO":"Малыхин Н.А.","Collection":"513422424",{"_id": {"$oid": "67be73dfaf563521c9d595dd"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67be757daf563521c9d595fb"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['\"\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "contreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67be7a1eaf563521c9d59642"}, "rules": "labaratornaya1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "charconst", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "contreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67be81d1af563521c9d5966f"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "contreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cffd59af563521c9d5d812"}, "rules": "labaratornaya2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[^']", "|", "[]", ")", "[']"]}, {"lPart": "constexp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*", "[^]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "contreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "compare", "rPart": ["[<>=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["[!]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e14d474635a960233ad28d"}, "rules": "labaratornaya3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[^']", "|", "[]", ")", "[']"]}, {"lPart": "constexp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*", "[^]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "compare", "rPart": ["[<>=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "endPart", "rPart": ["~", "\"or do\""]}, {"lPart": "endPart", "rPart": ["\"or do\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "minus", "|", "sign", "|", "compare", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["charconst", "|", "constexp", "|", "constreal", "|", "const10"]}, {"lPart": "operator", "rPart": ["(", "const", "|", "compare", "|", "logic", "|", "sign", "|", "minus", "|", "logno", ")", "\",\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f4041e8558742cb433368e"}, "rules": "labaratornaya4", "data": {"rList": [{"lPart": "function", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"exp\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operators", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operators", ")", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"or do\""]}, {"lPart": "endPart", "rPart": ["\"or do\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["type", "?", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "minus", "|", "sign", "|", "compare", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["charconst", "|", "constexp", "|", "constreal", "|", "const10"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[^']", "|", "[]", ")", "[']"]}, {"lPart": "constexp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*", "[^]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["[<>=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680660b78558742cb43380ef"}, "rules": "labaratornaya5", "data": {"rList": [{"lPart": "function", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"exp\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operators", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operators", ")", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"or do\""]}, {"lPart": "endPart", "rPart": ["\"or do\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["type", "?", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "minus", "|", "sign", "|", "compare", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["charconst", "|", "constexp", "|", "constreal", "|", "const10"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[^']", "|", "[]", ")", "[']"]}, {"lPart": "constexp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*", "[^]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["[<>=]", "|", "(", "[!=<>]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Журов М.В.","Collection":"233125431",{"_id": {"$oid": "67c47a88af563521c9d5b486"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c47a94af563521c9d5b488"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", "?", ")", "?", ")", "*"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c47da4af563521c9d5b4a1"}, "rules": "Lab1", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constHex", "rPart": ["[H]", "[H]", "[0-9a-fA-F]", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67dabf7fe0b22203e7cc15f3"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[H]", "[H]", "[0-9a-fA-F]", "*"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "delimiter", "rPart": ["[:]"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "brackets", "rPart": ["(", "[(]", "[]", "+", "[)]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "lbrace", "rPart": ["[{]"]}, {"lPart": "rbrace", "rPart": ["[}]"]}, {"lPart": "operator", "rPart": ["[=>]", "*"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Comma", "rPart": ["[,]"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "const", "\",\"", "id", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed5b15a600182c7517b01f"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[H]", "[H]", "[0-9a-fA-F]", "*"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "delimiter", "rPart": ["[:]"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "lbrace", "rPart": ["[{]"]}, {"lPart": "rbrace", "rPart": ["[}]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "const", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Operator", "\"else\"", "Operator"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "Operator", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "Operator", ")", "?", "\")\"", "Operator", "(", "\"quit;\"", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "Operator", "(", "\"fin;\"", ")", "?", ")", "+", "(", "\"nooption\"", "Operator", ")", "?", "\"end\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "universal", "rPart": ["\"-\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "unaryPostfix", "rPart": ["\"++\"", "|", "\"--\""]}], "extension": ""}}{"_id": {"$oid": "67edefd4a600182c7517b2c3"}, "rules": "lab3test", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[H]", "[H]", "[0-9a-fA-F]", "*"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", "*", ")", "[\"]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "delimiter", "rPart": ["[:]"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "universal", "rPart": ["\"-\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Operator", "\"else\"", "Operator"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\"", "\";\"", "Expr", "\";\"", "\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\"", "\")\"", "Operator", "\"quit;\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "Operator", "(", "\"fin;\"", ")", "?", ")", "+", "(", "\"nooption\"", "Operator", ")", "?", "\"end\""]}, {"lPart": "file", "rPart": ["Operator", "+"]}], "extension": ""}}{"_id": {"$oid": "67ffbd688558742cb43371ab"}, "rules": "lab4", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[H]", "[H]", "[0-9a-fA-F]", "*"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", "*", ")", "[\"]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "Expr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "universal", "rPart": ["\"-\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "BlokOperator", "operatorFix"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "(", "\"(\"", "\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", ")", "?", "\")\"", "BlokOperator"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "BlokOperator", "*", ")", "*", "(", "\"nooption\"", "BlokOperator", "*", ")", "?", "\"end\""]}, {"lPart": "file", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["id", "\"=>\"", "\"(\"", "(", "(", "id", ")", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlokOperator", "*", "\"}\""]}, {"lPart": "operatorFix", "rPart": ["\"else\"", "BlokOperator"]}, {"lPart": "operatorFix", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "BlokOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["(", "\"quit\"", "|", "\"fin\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}], "extension": ""}}},
{"FIO":"Нацаренус А.Р.","Collection":"243553412",{"_id": {"$oid": "67c41e33af563521c9d5af50"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c443dcaf563521c9d5b108"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[0-9]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c444f4af563521c9d5b117"}, "rules": "Пример12", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[0-9]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c45dc6af563521c9d5b25c"}, "rules": "лаб1", "data": {"rList": [{"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[trn]", ")", "+", "[\"]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[trn]", ")", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6cb72e0b22203e7cc0113"}, "rules": "лаб2", "data": {"rList": [{"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "+", "[\"]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "endCond", "rPart": ["[:]"]}, {"lPart": "rule", "rPart": ["(", "[a-zA-Z]", "+", "[a-zA-Z]", "+", "[a-zA-Z]", "+", ")"]}, {"lPart": "increment", "rPart": ["[+]", "[+]"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck", "|", "mixed"]}, {"lPart": "Unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["constString", "|", "constInt", "|", "constChar", "|", "constOct", "|", "constBin", "|", "constFloat"]}, {"lPart": "Oper", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expression", "rPart": ["Unarny", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "Unarny", "|", "binary", ")", "Expression", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f3b6628558742cb433351b"}, "rules": "лаб3", "data": {"rList": [{"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "+", "[\"]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck"]}, {"lPart": "Unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["constString", "|", "constInt", "|", "constChar", "|", "constOct", "|", "constBin", "|", "constFloat"]}, {"lPart": "Oper", "rPart": ["\"set\"", "\"(\"", "(", "Expression", ")", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expression", "rPart": ["Unarny", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "mixed", "|", "binary", ")", "Expression", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb76f38558742cb4335e00"}, "rules": "лаб4", "data": {"rList": [{"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "operator", "rPart": ["Cond", "|", "Oper", "|", "Cycle", "|", "Switch"]}, {"lPart": "Cond", "rPart": ["\"?\"", "\"(\"", "(", "Expression", ")", "\")\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")", "\"?:\"", "\"(\"", "(", "Expression", ")", "\")\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")", "\":\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "Oper", "rPart": ["\"set\"", "\"(\"", "(", "Expression", ")", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "(", "(", "\"{\"", "operator", "*", "retire", "?", "\"}\"", ")", "|", "operator", ")", "\"until\"", "\"(\"", "(", "Expression", ")", "\")\""]}, {"lPart": "Switch", "rPart": ["\"switch\"", "\"(\"", "(", "Expression", ")", "\")\"", "\"{\"", "(", "\"by\"", "constant", "\"do\"", "\"{\"", "(", "\"{\"", "operator", "*", "\"}\"", "\";\"", "leave", ")", "\"}\"", ")", "+", "\"}\"", "(", "\"any\"", "\"do\"", "\"{\"", "operator", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "Expression", "rPart": ["Unarny", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "mixed", "|", "binary", ")", "Expression", ")", "?"]}, {"lPart": "constant", "rPart": ["constString", "|", "constInt", "|", "constChar", "|", "constOct", "|", "constBin", "|", "constFloat"]}, {"lPart": "Unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "+", "[\"]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Иванов И.Е.","Collection":"443555113",{"_id": {"$oid": "67d6812ee0b22203e7cbfc1a"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67d6816ce0b22203e7cbfc1e"}, "rules": "lab1", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstStr", "rPart": ["(", "[\\\"]", "[]", "*", "[\\\"]", ")"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[s]", "[e]", "[t]", "[(]"]}, {"lPart": "Comment", "rPart": ["[#]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "functionWord", "rPart": ["[a-z]", "+", "[@]"]}, {"lPart": "Bracket", "rPart": ["[(){}]"]}, {"lPart": "Splitter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}], "extension": ""}}{"_id": {"$oid": "67e8f98a4635a960233af81d"}, "rules": "lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstStr", "rPart": ["(", "[\\\"]", "[]", "*", "[\\\"]", ")"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[s]", "[e]", "[t]", "[(]"]}, {"lPart": "Comment", "rPart": ["[#]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "functionWord", "rPart": ["[a-z]", "+", "[@]"]}, {"lPart": "Bracket", "rPart": ["[(){}]"]}, {"lPart": "Splitter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}], "extension": ""}}},
{"FIO":"Стрельников А.Ю.","Collection":"244443132",{"_id": {"$oid": "67c440bcaf563521c9d5b0cd"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c462ceaf563521c9d5b2dc"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "[0-9]", "?", ")", "+"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "operationSign", "rPart": ["[+-*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67d6d9b4e0b22203e7cc030c"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binOper", "rPart": ["[-+*/]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "brace", "rPart": ["[(){}]"]}, {"lPart": "dot", "rPart": ["[;]"]}, {"lPart": "pris", "rPart": ["[:]", "[=]", "[ ]", "?"]}, {"lPart": "rules", "rPart": ["(", "[a-zA-Z]", "+", "[a-zA-Z]", "+", ")"]}], "extension": ""}}{"_id": {"$oid": "67e8027c4635a960233af452"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binOper", "rPart": ["[+*/]"]}, {"lPart": "logicBinOper", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compareOper", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "brace", "rPart": ["[(){}]"]}, {"lPart": "dot", "rPart": ["[;]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicInversion", "rPart": ["[!]"]}, {"lPart": "unaryOper", "rPart": ["logicInversion", "|", "minus"]}, {"lPart": "binaryOper", "rPart": ["binOper", "|", "logicBinOper", "|", "compareOper"]}, {"lPart": "constans", "rPart": ["binConst", "|", "octConst", "|", "decConst", "|", "floatConst", "|", "strConst", "|", "charConst"]}, {"lPart": "expression", "rPart": ["unaryOper", "?", "(", "id", "|", "constans", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "minus", "|", "binaryOper", ")", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "expression"]}], "extension": ""}}{"_id": {"$oid": "67fb50c68558742cb4335abd"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binOper", "rPart": ["[+*/]"]}, {"lPart": "logicBinOper", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compareOper", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicInversion", "rPart": ["[!]"]}, {"lPart": "unaryOper", "rPart": ["logicInversion", "|", "minus"]}, {"lPart": "binaryOper", "rPart": ["binOper", "|", "logicBinOper", "|", "compareOper"]}, {"lPart": "constans", "rPart": ["binConst", "|", "octConst", "|", "decConst", "|", "floatConst", "|", "strConst", "|", "charConst"]}, {"lPart": "expression", "rPart": ["unaryOper", "?", "(", "id", "|", "constans", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "minus", "|", "binaryOper", ")", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "expression", "\";\""]}, {"lPart": "operator", "rPart": ["assign", "|", "condOper", "|", "cycleOper", "|", "switchOper", "|", "callFunction"]}, {"lPart": "condOper", "rPart": ["\"at\"", "expression", "\"do\"", "(", "operator", "|", "operatorBlock", ")", "elseOper"]}, {"lPart": "operatorBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operatorBlockAny", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "elseOper", "rPart": ["\"or do\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "elseOper", "rPart": ["~", "\"or do\""]}, {"lPart": "program", "rPart": ["(", "operator", "*", "|", "operatorBlock", "*", "|", "function", "*", ")"]}, {"lPart": "cycleOper", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "decConst", "\":\"", "decConst", "\")\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "operator", "rPart": ["\"stop;\""]}, {"lPart": "switchOper", "rPart": ["\"switch\"", "expression", "\"{\"", "caseSwitch", "+", "(", "\"any\"", "\"do\"", "caseBody", ")", "\"}\""]}, {"lPart": "caseSwitch", "rPart": ["\"by\"", "constans", "\"do\"", "caseBody"]}, {"lPart": "caseBody", "rPart": ["(", "operator", "?", "|", "operatorBlockAny", ")", "\"leave;\""]}, {"lPart": "type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "argument", "rPart": ["type", "id"]}, {"lPart": "function", "rPart": ["type", "id", "\"(\"", "argument", "*", "\")\"", "operatorBlockAny"]}, {"lPart": "callFunction", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "|", "constans", "\",\"", "?", ")", "*", "\")\""]}], "extension": ""}}{"_id": {"$oid": "680e704d8558742cb433a266"}, "rules": "lab5", "data": {"rList": [{"lPart": "program", "rPart": ["function", "*"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "id", "?", "(", "\",\"", "id", ")", "*", "\")\"", "operatorBlockAny"]}, {"lPart": "operatorBlockAny", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "operator", "rPart": ["assign", "|", "condOper", "|", "cycleOper", "|", "switchOper", "|", "leave", "|", "\"stop\"", "\";\"", "|", "\"return\"", "expression", "?", "\";\"", "|", "\"(\"", "type", "\")\"", "id", "\";\""]}, {"lPart": "assign", "rPart": ["id", "rest", "\";\""]}, {"lPart": "condOper", "rPart": ["\"at\"", "expression", "\"do\"", "(", "operator", "|", "operatorBlock", ")", "elseOper"]}, {"lPart": "cycleOper", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "decConst", "\":\"", "decConst", "\")\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "switchOper", "rPart": ["\"switch\"", "expression", "\"{\"", "caseSwitch", "+", "(", "\"any\"", "\"do\"", "caseBody", "*", ")", "\"}\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "rest", "rPart": ["\":=\"", "expression", "|", "\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "expression", "rPart": ["(", "unaryOper", "?", "(", "id", "(", "\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\"", ")", "?", "|", "constans", "|", "\"(\"", "(", "expression", "|", "type", ")", "\")\"", "id", "?", ")", ")", "(", "(", "minus", "|", "binaryOper", ")", "expression", ")", "?"]}, {"lPart": "elseOper", "rPart": ["\"or\"", "\"do\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "elseOper", "rPart": ["~", "\"or\""]}, {"lPart": "operatorBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "caseSwitch", "rPart": ["\"by\"", "constans", "\"do\"", "caseBody", "*"]}, {"lPart": "constans", "rPart": ["binConst", "|", "octConst", "|", "decConst", "|", "floatConst", "|", "strConst", "|", "charConst"]}, {"lPart": "caseBody", "rPart": ["operator", "|", "(", "operatorBlockAny", ")"]}, {"lPart": "unaryOper", "rPart": ["logicInversion", "|", "minus"]}, {"lPart": "binaryOper", "rPart": ["binOper", "|", "logicBinOper", "|", "compareOper"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "logicInversion", "rPart": ["[!]"]}, {"lPart": "binOper", "rPart": ["[+*/]"]}, {"lPart": "logicBinOper", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compareOper", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "681a60fe8558742cb433c777"}, "rules": "lab6", "data": {"rList": [{"lPart": "program", "rPart": ["{reboot();}", "function", "*"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "operatorBlockAny"]}, {"lPart": "operatorBlockAny", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "operator", "rPart": ["assign", "|", "condOper", "|", "cycleOper", "|", "switchOper", "|", "leave", "|", "\"stop\"", "\";\"", "|", "\"return\"", "expression", "?", "\";\"", "|", "\"(\"", "type", "\")\"", "id", "\";\""]}, {"lPart": "assign", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "rest", "\";\""]}, {"lPart": "condOper", "rPart": ["\"at\"", "expression", "\"do\"", "(", "operator", "|", "operatorBlock", ")", "elseOper"]}, {"lPart": "cycleOper", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "decConst", "\":\"", "decConst", "\")\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "switchOper", "rPart": ["\"switch\"", "expression", "\"{\"", "caseSwitch", "+", "(", "\"any\"", "\"do\"", "caseBody", "*", ")", "\"}\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "rest", "rPart": ["\":=\"", "expression", "{toPFR(\"=\");}", "|", "\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "expression", "rPart": ["(", "{ operationUnary(); }", "unaryOper", "?", "(", "{toPFR(this.currentLexem[1]);}", "id", "(", "{expressionBegin();}", "\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\"", "{expressionEnd();}", ")", "?", "{ operationUnaryLogic(); }", "|", "{toPFR(this.currentLexem[1]);}", "constans", "{ operationUnaryLogic(); }", "|", "{expressionBegin();}", "\"(\"", "(", "expression", "|", "{ toPFR(this.currentLexem[1]); }", "type", ")", "\")\"", "{expressionEnd();}", "{toPFR(this.currentLexem[1]);}", "id", "?", ")", ")", "(", "(", "{ operationBinar(); }", "minus", "|", "{ operationBinar(); }", "binaryOper", ")", "expression", ")", "?"]}, {"lPart": "elseOper", "rPart": ["\"or\"", "\"do\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "elseOper", "rPart": ["~", "\"or\""]}, {"lPart": "operatorBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "caseSwitch", "rPart": ["\"by\"", "constans", "\"do\"", "caseBody", "*"]}, {"lPart": "constans", "rPart": ["binConst", "|", "octConst", "|", "decConst", "|", "floatConst", "|", "strConst", "|", "charConst"]}, {"lPart": "caseBody", "rPart": ["operator", "|", "(", "operatorBlockAny", ")"]}, {"lPart": "unaryOper", "rPart": ["logicInversion", "|", "minus"]}, {"lPart": "binaryOper", "rPart": ["binOper", "|", "logicBinOper", "|", "compareOper"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "logicInversion", "rPart": ["[!]"]}, {"lPart": "binOper", "rPart": ["[+*/]"]}, {"lPart": "logicBinOper", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compareOper", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n   this.history = [];\n};\n\nTracer.prototype = {\n   put: function(b){\n      this.history.push(b);\n   },\n\n   getAll: function(){\n      var r = \"\";\n      for(var i = 0; i < this.history.length; i++)\n          r += \" \" + this.history[i];\n      return r;\n   },\n\n   clear: function(){\n       this.history = [];\n   }\n};\n\nvar tracer = new Tracer();\n\nvar unarStack, operStack, loopStack, loopCnt;\n\nfunction reboot() {\n    unarStack = [];\n    operStack = [];\n    loopStack = [];\n    loopCnt = 0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x); // добавляем в history через Tracer\n}\n\nfunction look(v) {\n    return v[v.length - 1];\n}\n\nfunction getPrecedence(s) {\n    switch (s) {\n        case \"(\":\n            return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\":\n            return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\":\n            return 2;\n    }\n}\n\nfunction expressionBegin() {\n    toPFR(this.currentLexem[1]);\n}\n\nfunction expressionEnd() {\n    while (operStack.length > 0) {\n        toPFR(operStack.pop());\n    }\n}\n\nfunction operationUnary() {\n    unarStack.push(this.currentLexem[1]);\n}\n\nfunction operationUnaryLogic() {\n    if (unarStack.length > 0) {\n        toPFR(\"unary\" + unarStack.pop());\n    }\n}\n\nfunction operationBinar() {\n    while (operStack.length > 0 &&\n           getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1])) {\n        toPFR(operStack.pop());\n    }\n    operStack.push(this.currentLexem[1]);\n}\n\nfunction operationBinarLogic() {\n    while (operStack.length > 0 &&\n           getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1])) {\n        toPFR(operStack.pop());\n    }\n    operStack.push(this.currentLexem[1]);\n}\n\nfunction operationCompare() {\n    while (operStack.length > 0 &&\n           getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1])) {\n        toPFR(operStack.pop());\n    }\n    operStack.push(this.currentLexem[1]);\n}"}}{"_id": {"$oid": "681a77618558742cb433c83f"}, "rules": "lab61", "data": {"rList": [{"lPart": "program", "rPart": ["{reboot();}", "function", "*"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "operatorBlockAny"]}, {"lPart": "operatorBlockAny", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "operator", "rPart": ["assign", "|", "condOper", "|", "cycleOper", "|", "switchOper", "|", "leave", "|", "\"stop\"", "\";\"", "|", "\"return\"", "expression", "?", "\";\"", "|", "\"(\"", "type", "\")\"", "id", "\";\""]}, {"lPart": "assign", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "rest", "\";\""]}, {"lPart": "condOper", "rPart": ["\"at\"", "expression", "\"do\"", "(", "operator", "|", "operatorBlock", ")", "elseOper"]}, {"lPart": "cycleOper", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "decConst", "\":\"", "decConst", "\")\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "switchOper", "rPart": ["\"switch\"", "expression", "\"{\"", "caseSwitch", "+", "(", "\"any\"", "\"do\"", "caseBody", "*", ")", "\"}\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "rest", "rPart": ["\":=\"", "expression", "{toPFR(\"=\");}", "|", "\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "expression", "rPart": ["(", "unaryOper", "?", "(", "{toPFR(this.currentLexem[1]);}", "id", "(", "{expressionBegin();}", "\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\"", "{expressionEnd();}", ")", "?", "|", "{toPFR(this.currentLexem[1]);}", "constans", "|", "{expressionBegin();}", "\"(\"", "(", "expression", "|", "{ toPFR(this.currentLexem[1]); }", "type", ")", "\")\"", "id", "?", ")", ")", "(", "{if((operStack.length > 0) && (getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1]))) toPFR(operStack.pop()); operStack.push(this.currentLexem[1]);}", "(", "minus", "|", "binaryOper", ")", "expression", "{if (operStack.length >0) toPFR(operStack.pop());}", ")", "?"]}, {"lPart": "elseOper", "rPart": ["\"or\"", "\"do\"", "(", "operator", "|", "operatorBlock", ")"]}, {"lPart": "elseOper", "rPart": ["~", "\"or\""]}, {"lPart": "operatorBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "caseSwitch", "rPart": ["\"by\"", "constans", "\"do\"", "caseBody", "*"]}, {"lPart": "constans", "rPart": ["binConst", "|", "octConst", "|", "decConst", "|", "floatConst", "|", "strConst", "|", "charConst"]}, {"lPart": "caseBody", "rPart": ["operator", "|", "(", "operatorBlockAny", ")"]}, {"lPart": "unaryOper", "rPart": ["logicInversion", "|", "minus"]}, {"lPart": "binaryOper", "rPart": ["binOper", "|", "logicBinOper", "|", "compareOper"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binConst", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "octConst", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "logicInversion", "rPart": ["[!]"]}, {"lPart": "binOper", "rPart": ["[+*/]"]}, {"lPart": "logicBinOper", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compareOper", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n   this.history = [];\n};\n\nTracer.prototype = {\n   put: function(b){\n      this.history.push(b);\n   },\n\n   getAll: function(){\n      var r = \"\";\n      for(var i = 0; i < this.history.length; i++)\n          r += \" \" + this.history[i];\n      return r;\n   },\n\n   clear: function(){\n       this.history = [];\n   }\n};\n\nvar tracer = new Tracer();\n\nvar unarStack, operStack, loopStack, loopCnt;\n\nfunction reboot() {\n    unarStack = [];\n    operStack = [];\n    loopStack = [];\n    loopCnt = 0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x); // добавляем в history через Tracer\n}\n\nfunction look(v) {\n    return v[v.length - 1];\n}\n\nfunction getPrecedence(s) {\n    switch (s) {\n        case \"(\":\n            return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\":\n            return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\":\n            return 2;\n    }\n}\n\nfunction expressionBegin() {\n    toPFR(this.currentLexem[1]);\n}\n\nfunction expressionEnd() {\n    while (operStack.length > 0) {\n        toPFR(operStack.pop());\n    }\n}\n\nfunction operationUnary() {\n    unarStack.push(this.currentLexem[1]);\n}\n\nfunction operationUnaryLogic() {\n    if (unarStack.length > 0) {\n        toPFR(\"unary\" + unarStack.pop());\n    }\n}\n\nfunction operationBinar() {\n    while (operStack.length > 0 &&\n           getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1])) {\n        toPFR(operStack.pop());\n    }\n    operStack.push(this.currentLexem[1]);\n}\n\nfunction operationBinarLogic() {\n    while (operStack.length > 0 &&\n           getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1])) {\n        toPFR(operStack.pop());\n    }\n    operStack.push(this.currentLexem[1]);\n}\n\nfunction operationCompare() {\n    while (operStack.length > 0 &&\n           getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1])) {\n        toPFR(operStack.pop());\n    }\n    operStack.push(this.currentLexem[1]);\n}"}}},
{"FIO":"Заверткин М.А.","Collection":"352453323",{"_id": {"$oid": "67becf2baf563521c9d5981d"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bed353af563521c9d59844"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[+-]", "?", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[+-]", "?", "[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[+-]", "?", "[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[+-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "*", "[\"]"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "operator", "rPart": ["[+-/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c445e0af563521c9d5b128"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[\\\\]", "[']", "|", "[\\\\]", "[]", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[]", ")", "*", "[\"]"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "operator", "rPart": ["[+\\-/*=<>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}, {"lPart": "syntaxTODO", "rPart": ["[{}()]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d25be7e0b22203e7cbf212"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[\\\\]", "[']", "|", "[\\\\]", "[]", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[]", ")", "*", "[\"]"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "binaryOperator", "rPart": ["[+\\-/*=<>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionContinuation"]}, {"lPart": "ExpressionStart", "rPart": ["const"]}, {"lPart": "ExpressionContinuation", "rPart": ["(", "binaryOperator", "Expression", ")", "?"]}, {"lPart": "Assign", "rPart": ["id", "assign", "Expression"]}, {"lPart": "Program", "rPart": ["Statement", "+"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionStart", "rPart": ["id"]}, {"lPart": "If", "rPart": ["\"at\"", "Expression", "\"do\"", "CodeBlock", "(", "\"or\"", "\"do\"", "CodeBlock", ")", "?"]}, {"lPart": "CodeBlock", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "Statement", "rPart": ["Assign", "|", "If"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e470c74635a960233ae69e"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Statement", "+"]}, {"lPart": "Statement", "rPart": ["StatementNoBr", "br"]}, {"lPart": "StatementNoBr", "rPart": ["(", "Assign", "|", "If", "|", "Loop", "|", "Switch", "|", "FuncCall", ")"]}, {"lPart": "br", "rPart": ["(", "lineBreak", "|", "comment", ")", "+"]}, {"lPart": "Assign", "rPart": ["Types", "?", "id", "assign", "(", "Expression", "|", "FuncDefinition", ")", "\";\""]}, {"lPart": "If", "rPart": ["\"at\"", "Expression", "\"do\"", "CodeBlock", "Else"]}, {"lPart": "Loop", "rPart": ["\"loop\"", "RetirableCodeBlock", "\"until\"", "Expression"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "br", "SwitchBy", "+", "SwitchAny", "\"}\""]}, {"lPart": "FuncCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionContinuation"]}, {"lPart": "Expression", "rPart": ["UnaryOp", "Expression"]}, {"lPart": "CodeBlock", "rPart": ["\"{\"", "br", "Statement", "*", "\"}\"", "|", "StatementNoBr"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "CodeBlock"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}, {"lPart": "RetirableCodeBlock", "rPart": ["\"{\"", "br", "(", "Statement", "|", "\"retire\"", "\";\"", "br", ")", "*", "\"}\"", "|", "Statement"]}, {"lPart": "SwitchAny", "rPart": ["\"any\"", "\"do\"", "(", "LeavableCodeBlock", "|", "br", ")"]}, {"lPart": "SwitchAny", "rPart": []}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\""]}, {"lPart": "FuncDefinition", "rPart": ["Types", "\"(\"", "(", "ArgDefinition", "(", "\",\"", "ArgDefinition", ")", "*", ")", "?", "\")\"", "CodeBlock"]}, {"lPart": "ExpressionStart", "rPart": ["const"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionStart", "rPart": ["id"]}, {"lPart": "ExpressionContinuation", "rPart": ["(", "BinaryOp", "Expression", ")", "?"]}, {"lPart": "UnaryOp", "rPart": ["unaryOp", "|", "unaryBinaryOp"]}, {"lPart": "SwitchBy", "rPart": ["\"by\"", "const", "\"do\"", "(", "LeavableCodeBlock", "|", "br", ")"]}, {"lPart": "LeavableCodeBlock", "rPart": ["\"{\"", "br", "(", "Statement", "|", "\"leave\"", "\";\"", "br", ")", "*", "\"}\"", "br", "|", "(", "Statement", "|", "\"leave\"", "\";\"", "br", ")", "*"]}, {"lPart": "ArgDefinition", "rPart": ["Types", "?", "id"]}, {"lPart": "BinaryOp", "rPart": ["binaryOp", "|", "unaryBinaryOp"]}, {"lPart": "lineBreak", "rPart": ["[\\n\\r]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[\\\\]", "[']", "|", "[\\\\]", "[]", "|", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", ")", "*", "[\"]"]}, {"lPart": "unaryOp", "rPart": ["[!]"]}, {"lPart": "unaryBinaryOp", "rPart": ["[+-]"]}, {"lPart": "binaryOp", "rPart": ["[/*=<>]", "|", "[<]", "[=]", "|", "[=]", "[>]", "|", "[|]", "[|]", "|", "[&]", "[&]", "|", "[!]", "[=]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e4be7f4635a960233ae7b5"}, "rules": "Lab4nobr", "data": {"rList": [{"lPart": "Program", "rPart": ["Statement", "+"]}, {"lPart": "Statement", "rPart": ["(", "Assign", "|", "If", "|", "Loop", "|", "Switch", "|", "FuncCall", ")"]}, {"lPart": "Assign", "rPart": ["Types", "?", "id", "assign", "(", "Expression", "|", "FuncDefinition", ")"]}, {"lPart": "If", "rPart": ["\"at\"", "Expression", "\"do\"", "CodeBlock", "Else"]}, {"lPart": "Loop", "rPart": ["\"loop\"", "RetirableCodeBlock", "\"until\"", "Expression"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "(", "\"by\"", "const", "\"do\"", "LeavableCodeBlock", "?", ")", "+", "(", "\"any\"", "\"do\"", "LeavableCodeBlock", ")", "?", "\"}\""]}, {"lPart": "FuncCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionContinuation"]}, {"lPart": "Expression", "rPart": ["UnaryOp", "Expression"]}, {"lPart": "CodeBlock", "rPart": ["\"{\"", "Statement", "*", "\"}\"", "|", "Statement"]}, {"lPart": "RetirableCodeBlock", "rPart": ["\"{\"", "(", "Statement", "|", "\"retire\"", "\";\"", ")", "*", "\"}\""]}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\""]}, {"lPart": "FuncDefinition", "rPart": ["Types", "\"(\"", "(", "ArgDefinition", "(", "\",\"", "ArgDefinition", ")", "*", ")", "?", "\")\"", "CodeBlock"]}, {"lPart": "ExpressionStart", "rPart": ["const"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionStart", "rPart": ["id"]}, {"lPart": "ExpressionContinuation", "rPart": ["(", "BinaryOp", "Expression", ")", "?"]}, {"lPart": "UnaryOp", "rPart": ["unaryOp", "|", "unaryBinaryOp"]}, {"lPart": "LeavableCodeBlock", "rPart": ["\"{\"", "(", "Statement", "|", "\"leave\"", "\";\"", ")", "*", "\"}\""]}, {"lPart": "ArgDefinition", "rPart": ["Types", "?", "id"]}, {"lPart": "BinaryOp", "rPart": ["binaryOp", "|", "unaryBinaryOp"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[\\\\]", "[']", "|", "[\\\\]", "[]", "|", "[]", "|", "[\\\\]", "[d]", "[0-9]", "{2}", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[]", "|", "[\\\\]", "[d]", "[0-9]", "{2}", ")", "*", "[\"]"]}, {"lPart": "unaryOp", "rPart": ["[!]"]}, {"lPart": "unaryBinaryOp", "rPart": ["[+-]"]}, {"lPart": "binaryOp", "rPart": ["[/*=<>]", "|", "[<]", "[=]", "|", "[=]", "[>]", "|", "[|]", "[|]", "|", "[&]", "[&]", "|", "[!]", "[=]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Else", "rPart": ["(", "\"or\"", "\"do\"", "CodeBlock", ")", "?"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681a19018558742cb433c2ae"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Statement", "+"]}, {"lPart": "Statement", "rPart": ["StatementNoBr", "br"]}, {"lPart": "StatementNoBr", "rPart": ["(", "Assign", "|", "If", "|", "Loop", "|", "Switch", "|", "FuncCall", ")"]}, {"lPart": "br", "rPart": ["(", "lineBreak", "|", "comment", ")", "+"]}, {"lPart": "Assign", "rPart": ["Types", "?", "id", "assign", "(", "Expression", "|", "FuncDefinition", ")", "\";\""]}, {"lPart": "If", "rPart": ["\"at\"", "Expression", "\"do\"", "CodeBlock", "Else"]}, {"lPart": "Loop", "rPart": ["\"loop\"", "RetirableCodeBlock", "\"until\"", "Expression"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "br", "SwitchBy", "+", "SwitchAny", "\"}\""]}, {"lPart": "FuncCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionContinuation"]}, {"lPart": "Expression", "rPart": ["UnaryOp", "Expression"]}, {"lPart": "CodeBlock", "rPart": ["\"{\"", "br", "Statement", "*", "\"}\"", "|", "StatementNoBr"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "CodeBlock"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}, {"lPart": "RetirableCodeBlock", "rPart": ["\"{\"", "br", "(", "Statement", "|", "\"retire\"", "\";\"", "br", ")", "*", "\"}\"", "|", "Statement"]}, {"lPart": "SwitchAny", "rPart": ["\"any\"", "\"do\"", "(", "LeavableCodeBlock", "|", "br", ")"]}, {"lPart": "SwitchAny", "rPart": []}, {"lPart": "Types", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\""]}, {"lPart": "FuncDefinition", "rPart": ["Types", "\"(\"", "(", "ArgDefinition", "(", "\",\"", "ArgDefinition", ")", "*", ")", "?", "\")\"", "CodeBlock"]}, {"lPart": "ExpressionStart", "rPart": ["const"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionStart", "rPart": ["id"]}, {"lPart": "ExpressionContinuation", "rPart": ["(", "BinaryOp", "Expression", ")", "?"]}, {"lPart": "UnaryOp", "rPart": ["unaryOp", "|", "unaryBinaryOp"]}, {"lPart": "SwitchBy", "rPart": ["\"by\"", "const", "\"do\"", "(", "LeavableCodeBlock", "|", "br", ")"]}, {"lPart": "LeavableCodeBlock", "rPart": ["\"{\"", "br", "(", "Statement", "|", "\"leave\"", "\";\"", "br", ")", "*", "\"}\"", "br", "|", "(", "Statement", "|", "\"leave\"", "\";\"", "br", ")", "*"]}, {"lPart": "ArgDefinition", "rPart": ["Types", "?", "id"]}, {"lPart": "BinaryOp", "rPart": ["binaryOp", "|", "unaryBinaryOp"]}, {"lPart": "lineBreak", "rPart": ["[\\n\\r]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[\\\\]", "[']", "|", "[\\\\]", "[]", "|", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", ")", "*", "[\"]"]}, {"lPart": "unaryOp", "rPart": ["[!]"]}, {"lPart": "unaryBinaryOp", "rPart": ["[+-]"]}, {"lPart": "binaryOp", "rPart": ["[/*=<>]", "|", "[<]", "[=]", "|", "[=]", "[>]", "|", "[|]", "[|]", "|", "[&]", "[&]", "|", "[!]", "[=]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Михеев В.М.","Collection":"241242441",{"_id": {"$oid": "67ae081cce6dd03692d07b10"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b0b143ce6dd03692d07dc1"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b0b3b8ce6dd03692d07dd2"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[1]", "[x]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b73dbbce6dd03692d08a41"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[u]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\\\"]", "?", "[]", "*", ")", "|", "(", "[u]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "const2", "rPart": ["[2]", "[#]", "[01]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>|&^/%+-]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimetr", "rPart": ["[,;:]"]}, {"lPart": "bracket", "rPart": ["(", "[{]", "[]", "+", "[}]", ")", "|", "(", "[(]", "[]", "+", "[)]", ")"]}, {"lPart": "keywords", "rPart": ["[a-z]", "[a-z]", "+"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67dbf88ce0b22203e7cc1cac"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"let\"", "Type", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "case", "Else", "?"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Type", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "case", "\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "case", ")", "+", "(", "\"otherwise\"", "case", ")", "?", "\"}\"", "\"exit\"", "\";\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"float\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "Operand", "(", "Operation", "Expr", ")", "?"]}, {"lPart": "case", "rPart": ["\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Const", "rPart": ["constReal", "|", "constChar", "|", "constString", "|", "const2", "|", "const8"]}, {"lPart": "Operand", "rPart": ["Const", "|", "id", "|", "(", "\"(\"", "Expr", "\")\"", ")", "+"]}, {"lPart": "Else", "rPart": ["\"other\"", "case"]}, {"lPart": "Operation", "rPart": ["logicOper", "|", "arifmOper", "|", "compareOper"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\\\"]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "const2", "rPart": ["[2]", "[#]", "[01]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "logicOper", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "arifmOper", "rPart": ["[-+*/^%]"]}, {"lPart": "compareOper", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimetr", "rPart": ["[:;,]"]}, {"lPart": "Unary", "rPart": ["[-!~*]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67dd2e1ee0b22203e7cc1e6d"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "Binary", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[#]", "[01]", "+", ")", "|", "(", "[8]", "[#]", "[0-7]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Unary", "rPart": ["[~!-]"]}, {"lPart": "Delimetr", "rPart": ["[;]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constInt", "|", "constReal", "|", "constChar", "|", "constString"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Assign", "rPart": ["\"let\"", "Declare", "\"on\"", "Expr", "Delimetr"]}, {"lPart": "Condition", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "Block", "CondOther"]}, {"lPart": "CondWhen", "rPart": ["~", "\"when\""]}, {"lPart": "CondOther", "rPart": ["\"other\"", "Block"]}, {"lPart": "CondOther", "rPart": ["~", "\"other\""]}, {"lPart": "Block", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "Declare", "\"in\"", "constReal", "\":\"", "constReal", "\")\"", "Block"]}, {"lPart": "Stop", "rPart": ["\"stop\"", "Delimetr"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"when\"", "BegExpr", "\"then\"", "Block", "(", "\"exit\"", "Delimetr", ")", "?"]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "Block"]}, {"lPart": "CaseOtherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "Condition", "|", "Switch", "|", "Cycle", "|", "Return", "|", "Stop"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "Delimetr"]}, {"lPart": "Program", "rPart": ["Oper", "+"]}, {"lPart": "Func", "rPart": ["id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Declare", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67dfdd9e4635a960233ac7eb"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[#]", "[01]", "+", ")", "|", "(", "[8]", "[#]", "[0-7]", "+", ")"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\"]", "[]", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "unicode", "rPart": ["['\"]", "[\\\\]", "[u]", "[0-9]", "{1,4}", "['\"]"]}, {"lPart": "OperBin", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "OperUn", "rPart": ["[~!]"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "Delimetr", "rPart": ["[;]"]}, {"lPart": "Binary", "rPart": ["OperBin", "|", "Minus"]}, {"lPart": "Unary", "rPart": ["OperUn", "|", "Minus"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constReal", "|", "constChar", "|", "constString", "|", "unicode"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["Const"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Assign", "rPart": ["\"let\"", "Declare", "\"on\"", "Expr", "Delimetr"]}, {"lPart": "Condition", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "Block", "CondOther"]}, {"lPart": "CondOther", "rPart": ["\"other\"", "Block"]}, {"lPart": "Block", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "Declare", "\"in\"", "constReal", "\":\"", "constReal", "\")\"", "Block"]}, {"lPart": "Stop", "rPart": ["\"stop\"", "Delimetr"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"if\"", "Const", "\"then\"", "Block", "+", "(", "\"exit\"", "Delimetr", ")", "?"]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "Block", "+"]}, {"lPart": "Oper", "rPart": ["Assign", "|", "Condition", "|", "Switch", "|", "Cycle", "|", "Return", "|", "Stop", "|", "Declare"]}, {"lPart": "Program", "rPart": ["Func", "+"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "Delimetr"]}, {"lPart": "Func", "rPart": ["id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Declare", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68050fb18558742cb4337ee3"}, "rules": "Lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[#]", "[01]", "+", ")", "|", "(", "[8]", "[#]", "[0-7]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "unicode", "rPart": ["[']", "[\\\\]", "[u]", "[0-9]", "{1,4}", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\"\\\\]", "[]", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "dualOp", "rPart": ["[+-]"]}, {"lPart": "unaryOp", "rPart": ["[~!]"]}, {"lPart": "binaryOp", "rPart": ["[*/%^]"]}, {"lPart": "logicOp", "rPart": ["[><]", "|", "(", "[!=><]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Unary", "rPart": ["dualOp", "|", "unaryOp"]}, {"lPart": "Binary", "rPart": ["binaryOp", "|", "dualOp", "|", "logicOp"]}, {"lPart": "Const", "rPart": ["decimal", "|", "char", "|", "unicode", "|", "string", "|", "constInt"]}, {"lPart": "Expr", "rPart": ["{depth++;}", "(", "{handleUnaryOp(this.currentLexem[1]);}", "Unary", ")", "?", "BegExpr", "EndExpr", "?", "{if (depth === 1) freeOperatorStack(); depth--;}"]}, {"lPart": "BegExpr", "rPart": ["{pushLexem(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{pushLexem(this.currentLexem[1]);}", "Const"]}, {"lPart": "BegExpr", "rPart": ["{operatorStack.push('(');}", "\"(\"", "Expr", "{handleCloseBracket();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{handleOp(this.currentLexem[1]);}", "Binary", "Expr"]}, {"lPart": "Assign", "rPart": ["\"let\"", "{pushLexem(this.currentLexem[1]);}", "id", "{tracer.pushRollbackPoint();}", "\"on\"", "Expr", "{tmp = tracer.rollback(); pushHistory(tmp); pushLexem('=');}", "\";\""]}, {"lPart": "Condition", "rPart": ["{operandStack.push(++operandCount);}", "\"when\"", "Expr", "{setJumpElse('Else');}", "Block", "{setJump('Exit'); setLabel('Else');}", "CondOther", "{setLabel('Exit'); operandStack.pop();}"]}, {"lPart": "CondOther", "rPart": ["\"other\"", "Block"]}, {"lPart": "CondOther", "rPart": ["~", "\"other\""]}, {"lPart": "Block", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "Oper", "rPart": ["Assign", "|", "Condition", "|", "Cycle", "|", "Return", "|", "Switch", "|", "Stop", "|", "Declare"]}, {"lPart": "Cycle", "rPart": ["{pushBreakable();}", "\"foreach\"", "{tracer.pushRollbackPoint();}", "\"(\"", "Type", "{cycle.counter_ = this.currentLexem[1];}", "id", "\"in\"", "{cycle.startValue_ = this.currentLexem[1];}", "decimal", "\":\"", "{cycle.endValue_ = this.currentLexem[1];}", "decimal", "\")\"", "Block", "{tmp.push(tracer.rollback()); cycle.form(tmp.pop());}"]}, {"lPart": "Stop", "rPart": ["{pushExit();}", "\"stop\"", "\";\""]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Case", "rPart": ["\"if\"", "BegExpr", "\"then\"", "Block", "+", "(", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "Block", "+"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\"", "{pushLexem(CMDS_.RETURN);}"]}, {"lPart": "Func", "rPart": ["{operandCount = 0;}", "id", "\"=>\"", "\"as\"", "Type", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "ArgList", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Program", "rPart": ["{clearAll();}", "Func", "+"]}, {"lPart": "Declare", "rPart": ["Type", "{pushLexem(this.currentLexem[1]);}", "id", "(", "\",\"", "{pushLexem(this.currentLexem[1]);}", "id", ")", "*", "\";\""]}], "extension": "var ignoreLastWord;\n\nvar Tracer = class Tracer {\n  constructor() {\n    this.history_ = []\n    this.rollbackPoint_ = []\n  }\n\n  getAll() {\n    return this.history_.reduce((acc, cur) => `${acc} ${cur}`, \"\")\n  }\n\n  setHistory(history) {\n    this.history_ = history\n  }\n\n  getHistory() {\n    return this.history_\n  }\n\n  pushLexem(...lexs) {\n    lexs.forEach((e) => this.history_.push(e))\n  }\n\n  pushRollbackPoint() {\n    this.rollbackPoint_.push(this.history_.length)\n  }\n\n  rollback() {\n    const len = this.rollbackPoint_.pop()\n    let oldHistory = Array(this.history_.length - len)\n\n    for (let i = oldHistory.length - 1; i >= 0; i--)\n      oldHistory[i] = this.history_.pop()\n\n    return oldHistory\n  }\n}\n\nvar CMDS_ = {\n  JUMP: \"jump\",\n  JUMP_ELSE: \"jumpElse\",\n  RETURN: \"return\",\n  SCOPE_IN: \"scopeIn\",\n  SCOPE_OUT: \"scopeOut\",\n}\n\nvar KEYS_ = {\n  STACK: \"stack\",\n}\n\nvar operatorStack = []\nvar operandStack = []\nvar operandCount = 0\nvar tmp = []\nvar depth = 0\nvar exits = []\n\nvar pushLexem = (...lexs) => tracer.pushLexem(...lexs)\n\nvar writeError = (msg) => {\n  errors.push(`Error: ${msg}`)\n  hasError = true\n}\n\nvar writeInfo = () => {\n  pushLexem('\\n')\n  debugMessages.forEach((msg) => pushLexem(`${msg}\\n`))\n  debugMessages = []\n\n  pushLexem('\\n')\n  errors.forEach((msg) => pushLexem(`${msg}\\n`))\n  errors = []\n\n  hasError = false\n}\n\nvar peekStack = (stack) => stack[stack.length - 1]\n\nvar popStack = (stack, count) => {\n  let popped = []\n  for (let i = 0; i < count; i++) popped = [stack.pop(), ...popped]\n  return popped\n}\n\nvar getLabel = (label) => `#${label}_${peekStack(operandStack)}#`\nvar setLabel = (label) => pushLexem(getLabel(label))\n\nvar setJump = (label) => pushLexem(getLabel(label), CMDS_.JUMP)\nvar setJumpElse = (label) => pushLexem(getLabel(label), CMDS_.JUMP_ELSE)\n\nvar pushVar = (name) => pushLexem(`${name} ${peekStack()}`)\nvar pushHistory = (history) => tracer.setHistory([...tracer.getHistory(), ...history])\n\nvar pushExit = () => {\n  exits.length === 0\n    ? writeError('No exits or function declarations')\n    : pushLexem(peekStack(exits), CMDS_.JUMP)\n}\n\nvar pushBreakable = () => {\n  operandStack.push(++operandCount)\n  pushLexem(CMDS_.SCOPE_IN)\n  exits.push(getLabel('Exit'))\n}\n\nvar popBreakable = () => {\n  setLabel('Exit')\n  exits.pop()\n\n  operandStack.pop()\n  pushLexem(CMDS_.SCOPE_OUT)\n}\n\nvar getPriority = (lex) => {\n  if (!lex) return -1\n\n  if (lex === '~') return 9\n  if (lex === '!') return 8\n  if (lex.match(/[%*\\/]/g)) return 6\n  if (lex.match(/[+-]/g)) return 5\n  if (lex.match(/[><]=?/g)) return 4\n  if (lex.match(/[!=]=?/g)) return 3\n  if (lex === '&&') return 2\n  if (lex === '||') return 1\n\n  return 0\n}\n\nvar handleOp = (op) => {\n  while (operatorStack.length) {\n    if (getPriority(peekStack(operatorStack)) >= getPriority(op)) {\n      pushLexem(operatorStack.pop())\n    }\n    else {\n      break\n    }\n  }\n\n  operatorStack.push(op)\n}\n\nvar handleUnaryOp = (op) => handleOp(op === '-' ? '~' : op)\n\nvar handleCloseBracket = () => {\n  while (operatorStack.length) {\n    if (peekStack(operatorStack) === '(') {\n      operatorStack.pop()\n      break\n    } else {\n      pushLexem(operatorStack.pop())\n    }\n  }\n}\n\nvar freeOperatorStack = () => {\n  while (operatorStack.length) {\n    if (peekStack(operatorStack) === '(') {\n      operatorStack.pop()\n    } else {\n      pushLexem(operatorStack.pop())\n    }\n  }\n}\n\nvar Cycle = class Cycle {\n  constructor() {\n    this.counter_ = '';\n    this.startValue_ = 0;\n    this.endValue_ = 0;\n    this.step_ = 1;\n  }\n\n  form(body) {\n    pushHistory([this.counter_]);\n    pushHistory([this.counter_, this.startValue_, \"=\"]);\n\n    setLabel(\"Condition\");\n    pushHistory([this.counter_, this.endValue_, \"<=\"]);\n    setJumpElse(\"Exit\");\n\n    pushHistory(body);\n\n    pushHistory([this.counter_, this.counter_, this.step_, \"+\", \"=\"]);\n    setJump(\"Condition\");\n\n    popBreakable();\n    this.step = 1;\n  }\n}\n\nvar tracer = new Tracer()\nvar cycle = new Cycle()\n\nvar clearAll = () => {\n  operandCount = 0\n  operandStack = []\n  operatorStack = []\n  tmp = []\n  depth = 0\n  exits = []\n\n  tracer.history_ = []\n  tracer.rollbackPoint_ = []\n\n  cycle.counter_ = ''\n  cycle.startValue_ = 0\n  cycle.endValue_ = 0\n  cycle.step_ = 1\n}\n"}}},
{"FIO":"Факеев И.С.","Collection":"412343522",{"_id": {"$oid": "67db8f8fe0b22203e7cc1b92"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67db9554e0b22203e7cc1bb7"}, "rules": "noName", "data": {"rList": [{"lPart": "const10", "rPart": ["[0-9]", "+"]}], "extension": ""}}{"_id": {"$oid": "67db9688e0b22203e7cc1bcb"}, "rules": "laab1", "data": {"rList": [{"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}], "extension": ""}}{"_id": {"$oid": "67ed601ca600182c7517b086"}, "rules": "lab1", "data": {"rList": [{"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}], "extension": ""}}{"_id": {"$oid": "67ee0127a600182c7517b357"}, "rules": "laab2", "data": {"rList": [{"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["[| &]"]}, {"lPart": "keywords", "rPart": ["[A-Z]", "+"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "ы", "rPart": []}, {"lPart": "delimetr", "rPart": ["[;,:]"]}], "extension": ""}}{"_id": {"$oid": "680073e98558742cb43374c0"}, "rules": "laab3", "data": {"rList": [{"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}], "extension": ""}}{"_id": {"$oid": "680077998558742cb43374ea"}, "rules": "laab33", "data": {"rList": [{"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["[| &]"]}, {"lPart": "keywords", "rPart": ["[A-Z]", "+"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "delimetr", "rPart": ["[;,:]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "universal", "rPart": ["\"-\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "\":\"", "\")\"", "\"{\"", "Operator", "(", "\"stop;\"", ")", "?", "\"}\""]}, {"lPart": "file", "rPart": ["Operator", "+"]}], "extension": ""}}},
{"FIO":"Андреева Е.Д.","Collection":"341222354",{"_id": {"$oid": "67b6e2e0ce6dd03692d087f6"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b6e332ce6dd03692d087fe"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-z]", "(", "[A-Za-z0-9]", ")", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "(", "[!<>]", "[=]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "binunar", "rPart": ["[-]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+", "|", "[?]", "|", "(", "[?]", "[:]", ")", "|", "[:]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67ca7adcaf563521c9d5c45e"}, "rules": "Sample5", "data": {"rList": [{"lPart": "Expr", "rPart": ["(", "Expr", "AddSign", ")", "?", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "AddSign", "rPart": ["\"+\"", "|", "\"-\""]}, {"lPart": "EndExpr", "rPart": ["(", "EndExpr", "MultSign", ")", "?", "Term"]}, {"lPart": "Term", "rPart": ["const", "|", "id"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultSign", "rPart": ["\"*\"", "|", "\"/\""]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": []}, {"lPart": "keywords", "rPart": ["[a-z]", "+", "|", "[?]", "|", "(", "[?]", "[:]", ")", "|", "[:]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67daae76e0b22203e7cc156e"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-z]", "(", "[A-Za-z0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "(", "[!<>]", "[=]", ")"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "binunar", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e15b4b4635a960233ad33a"}, "rules": "lab3", "data": {"rList": [{"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endpart"]}, {"lPart": "Expr", "rPart": ["(", "binunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endpart", "rPart": ["~", "\"other\""]}, {"lPart": "endpart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "unar", "|", "binunar", "|", "logic", "|", "binar", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["(", "[a-z]", "(", "[A-Za-z0-9]", ")", "*", ")"]}, {"lPart": "binunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "(", "[!<>]", "[=]", ")"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operators", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "case2", "?", "\"}\""]}, {"lPart": "case2", "rPart": ["\"otherwise\"", "operators"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67ee3172a600182c7517b3cf"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operators", "|", "function", ")", "+"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"=\"", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endpart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operators", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "case2", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "binunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endpart", "rPart": ["~", "\"other\""]}, {"lPart": "endpart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "unar", "|", "binunar", "|", "logic", "|", "binar", ")", "Expr", ")", "?"]}, {"lPart": "case2", "rPart": ["\"otherwise\"", "operators"]}, {"lPart": "id", "rPart": ["(", "[a-z]", "(", "[A-Za-z0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "binunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "(", "[!<>]", "[=]", ")"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680508518558742cb4337ebc"}, "rules": "lab5", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operators", "|", "function", ")", "+"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"=\"", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endpart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operators", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "case2", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "binunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endpart", "rPart": ["~", "\"other\""]}, {"lPart": "endpart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "unar", "|", "binunar", "|", "logic", "|", "binar", ")", "Expr", ")", "?"]}, {"lPart": "case2", "rPart": ["\"otherwise\"", "operators"]}, {"lPart": "id", "rPart": ["(", "[a-z]", "(", "[A-Za-z0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "binunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "(", "[!<>]", "[=]", ")"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6817066e8558742cb433b026"}, "rules": "lab6", "data": {"rList": [{"lPart": "program", "rPart": ["{whileCnt=0;}", "(", "operators", "|", "function", ")", "+"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "function", "rPart": ["{toPFR(\"func\");toPFR(this.currentLexem[1]);}", "id", "\"=\"", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endpart"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++opCnt);}", "\"cycle\"", "\"(\"", "{toPFR(\"_cycle_\");}", "operator", "{toPFR(\"CycleDo_\"+peek(ctlStk));}", "Expr", "{toPFR(\"_cycle_\");}", "\";\"", "operator", "{toPFR(\"CycleExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\"); }", "{toPFR(\"_cycle_\");}", "\")\"", "(", "operators", "|", "operator", ")", "{toPFR(\"CycleDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"CycleExit_\" +peek(ctlStk)+\":\");}"]}, {"lPart": "operator", "rPart": ["{toPFR(\"labelLoopFalse\"+peek(ctlStk)); toPFR(\"JumpFalse\");}", "\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operators", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "case2", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "ArgList", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "binunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endpart", "rPart": ["~", "\"other\""]}, {"lPart": "endpart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "unar", "|", "binunar", "|", "logic", "|", "binar", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "case2", "rPart": ["\"otherwise\"", "operators"]}, {"lPart": "id", "rPart": ["(", "[a-z]", "(", "[A-Za-z0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "binunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "[<>]", "|", "(", "[!<>]", "[=]", ")"]}, {"lPart": "binar", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar userSignStk = []; //стек имен функций как знаков операций, объявляемых пользователем\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n"}}},
{"FIO":"Рыжов К.К.","Collection":"232524143",{"_id": {"$oid": "67b1a220ce6dd03692d07e89"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67b82caece6dd03692d08b29"}, "rules": "Lb1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "strconst", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "charconst", "rPart": ["[']", "[a-zA-Z0-9!@#$%^&*()_+-= ]", "[']"]}, {"lPart": "signofoperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cc01b8af563521c9d5c725"}, "rules": "Lb2", "data": {"rList": [{"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "Const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "[a-zA-Z0-9!@#$%^&*()_+-= ]", "[']"]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const10", "|", "Const16", "|", "String", "|", "Char", ")"]}, {"lPart": "Math", "rPart": ["[+-/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Brackets", "rPart": ["[(){}]"]}, {"lPart": "Assign", "rPart": ["Id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "AssignExtension", "rPart": ["Assign", "*", "(", "Condition", "|", "Cycle", ")", "?"]}, {"lPart": "Expression", "rPart": ["(", "ExpressionStart", "ExpressionEnd", ")", "|", "Condition", "|", "Cycle"]}, {"lPart": "ExpressionStart", "rPart": ["(", "Id", "|", "Const", ")"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionEnd", "rPart": ["(", "(", "Math", "|", "Comparison", "|", "Logic", ")", "Expression", ")", "?"]}, {"lPart": "Condition", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "OperatorBlock", "ConditionTail"]}, {"lPart": "OperatorBlock", "rPart": ["Expression"]}, {"lPart": "ConditionTail", "rPart": ["ConditionElseIfPart", "ConditionElsePart"]}, {"lPart": "ConditionElseIfPart", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "OperatorBlock"]}, {"lPart": "ConditionElsePart", "rPart": ["\":\"", "OperatorBlock"]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "AssignWithoutDel", "?", "\";\"", "Expression", "?", "\";\"", "AssignWithoutDel", "?", ")", "\")\"", "OperatorBlock"]}, {"lPart": "AssignWithoutDel", "rPart": ["Id", "\"<-\"", "Expression"]}, {"lPart": "Delimiter", "rPart": ["[,:;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d5377de0b22203e7cbf9e9"}, "rules": "Lb3", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "BlockOperator", "+"]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", "|", "\"void\"", ")"]}, {"lPart": "Arguments", "rPart": ["Type", "Expression", "(", "\",\"", "Type", "Expression", ")", "*"]}, {"lPart": "BlockOperator", "rPart": ["(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "Id", "|", "Const", ")"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionEnd", "rPart": ["(", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", ")", "?"]}, {"lPart": "Operator", "rPart": ["Id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["ConditionalStart", "ConditionalElse"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "Id", "\"<-\"", "Expression", "\";\"", "|", "\";\"", ")", "(", "Expression", "\";\"", "|", "\";\"", ")", "(", "(", "Id", "\"<-\"", "Expression", ")", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "Id", "|", "Const", ")", "\";\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "ConditionalStart", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElse", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\":\""]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const10", "|", "Const16", "|", "String", "|", "Char", ")"]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ebb1e2a600182c7517a907"}, "rules": "Lb4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "BlockOperator", "+"]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", "|", "\"void\"", ")"]}, {"lPart": "Arguments", "rPart": ["Type", "Expression", "(", "\",\"", "Type", "Expression", ")", "*"]}, {"lPart": "BlockOperator", "rPart": ["(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "Id", "|", "Const", ")"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExpressionEnd", "rPart": ["(", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", ")", "?"]}, {"lPart": "Operator", "rPart": ["Id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["ConditionalStart", "ConditionalElse"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "Id", "\"<-\"", "Expression", "\";\"", "|", "\";\"", ")", "(", "Expression", "\";\"", "|", "\";\"", ")", "(", "(", "Id", "\"<-\"", "Expression", ")", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "Id", "|", "Const", ")", "\";\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "ConditionalStart", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElse", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\":\""]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const10", "|", "Const16", "|", "String", "|", "Char", ")"]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f654328558742cb43345b6"}, "rules": "Lb5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Arguments", "rPart": ["Type", "Id", "(", "\",\"", "Type", "Id", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["Id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["ConditionalStart", "ConditionalElsePart1", "ConditionalElsePart2"]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "(", "Id", "\"<-\"", "Expression", "\";\"", ")", "|", "\";\"", ")", "(", "Expression", "\";\"", "|", "\";\"", ")", "(", "(", "Id", "\"<-\"", "Expression", ")", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Type", "Id", "\"<-\"", "Expression", "\";\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "ConditionalStart", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["~", "\"?:\""]}, {"lPart": "ConditionalElsePart2", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart2", "rPart": ["~", "\":\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "\"{\"", "Operators", "\"}\""]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "Id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\"", ")", "?", "|", "Const", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "ExpressionEnd", "rPart": ["(", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", ")", "?"]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const10", "|", "Const16", "|", "String", "|", "Char", ")"]}, {"lPart": "Id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6804941b8558742cb4337af4"}, "rules": "Lb6", "data": {"rList": [{"lPart": "Program", "rPart": ["{whileCnt=0;}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Arguments", "rPart": ["Type", "Id", "(", "\",\"", "Type", "Id", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expression", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "Id", "\"<-\"", "Expression", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["ConditionalStart", "ConditionalElsePart1", "ConditionalElsePart2"]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"cycle\"", "\"(\"", "(", "(", "Id", "\"<-\"", "Expression", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\";\"", ")", "|", "\";\"", ")", "(", "Expression", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\";\"", "|", "\";\"", ")", "(", "(", "Id", "\"<-\"", "Expression", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", ")", ")", "?", "\")\"", "BlockOperator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Type", "{toPFR(this.currentLexem[1]);}", "Id", "(", "\"<-\"", "Expression", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", ")", "?", "\";\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "ConditionalStart", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["~", "\"?:\""]}, {"lPart": "ConditionalElsePart2", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart2", "rPart": ["~", "\":\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "\"{\"", "Operators", "\"}\""]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "{toPFR(this.currentLexem[1]);}", "Id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\"", ")", "?", "|", "(", "{toPFR(this.currentLexem[1]);}", "Const", ")", "|", "(", "{opStk.push(\"(\");}", "\"(\"", "Expression", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\"", ")", ")"]}, {"lPart": "ExpressionEnd", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const10", "|", "Const16", "|", "String", "|", "Char", ")"]}, {"lPart": "Id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}{"_id": {"$oid": "6817225e8558742cb433b0d8"}, "rules": "Lb7", "data": {"rList": [{"lPart": "Program", "rPart": ["{operatorCnt=0;}", "Function", "+", "{toPseudoCode();}"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Arguments", "rPart": ["Type", "Id", "(", "\",\"", "Type", "Id", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expression", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "Id", "\"<-\"", "Expression", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"cycle\"", "\"(\"", "(", "(", "Id", "\"<-\"", "Expression", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\";\"", ")", "|", "\";\"", ")", "(", "Expression", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\";\"", "|", "\";\"", ")", "(", "(", "Id", "\"<-\"", "Expression", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", ")", ")", "?", "\")\"", "BlockOperator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Type", "{toPFR(this.currentLexem[1]);}", "Id", "(", "\"<-\"", "Expression", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt); toPFR(\"exprBy\"+operatorCnt);onStk.push(0); toPFR(\"defVar\");}", "\"?\"", "\"(\"", "Expression", "\")\"", "{toPFR(\"exprBy\"+operatorCnt); toPFR(\"=\");}", "(", "{toPFR(\"exprBy\"+peek(ctlStk));toPFR(\"==\"); toPFR(\"LBy\"+peek(ctlStk)+\"On\"+peek(onStk)); toPFR(\"jmpOnFalse\");}", "BlockOperator", "{toPFR(\"LBy\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LBy\"+peek(ctlStk)+\"On\"+peek(onStk)+\":\"); onStk.push(onStk.pop()+1); }", ")", "{toPFR(\"LBy\"+ctlStk.pop()+\":\");}", "ConditionalElsePart1", "ConditionalElsePart2"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "ConditionalElsePart1", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["~", "\"?:\""]}, {"lPart": "ConditionalElsePart2", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart2", "rPart": ["~", "\":\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "\"{\"", "Operators", "\"}\""]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "{toPFR(this.currentLexem[1]);}", "Id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\"", ")", "?", "|", "(", "{toPFR(this.currentLexem[1]);}", "Const", ")", "|", "(", "{opStk.push(\"(\");}", "\"(\"", "Expression", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\"", ")", ")"]}, {"lPart": "ExpressionEnd", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const10", "|", "Const16", "|", "String", "|", "Char", ")"]}, {"lPart": "Id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "Const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = [];\nvar ctlStk=[];\nvar onStk=[];\nvar userSignStk=[];\nvar operandStk=[];\nvar operatorCnt=0;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction toPseudoCode(){\n var lim=tracer.history.length;\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignStk.indexOf(word)>=0))\n   type=5;\n  if(type===0)\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    operandStk.push(word);\n   }\n  if(type===5){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type==40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n// ...\n  }\n  return 0;\n}"}}},
{"FIO":"Малахов М.А.","Collection":"224423335",{"_id": {"$oid": "67c874dbaf563521c9d5c144"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c87768af563521c9d5c150"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", "?", ")", "?", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "constDec", "rPart": ["[f]", "[f]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67dac64ae0b22203e7cc161f"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "*"]}, {"lPart": "space", "rPart": ["[\\t]", "+", "{ignoreLastWord = True}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}], "extension": ""}}{"_id": {"$oid": "67dac88fe0b22203e7cc1656"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constTetr", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "assignSyntax", "rPart": ["id", "\":=\"", "const"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed50d7a600182c7517af9a"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constTetr", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", "*", ")", "[\"]"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "SignOfOperation", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"-\"", "|", "\"/\""]}, {"lPart": "EndExpr", "rPart": ["(", "SignOfOperation", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "assignSyntax", "rPart": ["id", "\":=\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680ce6378558742cb4339bd5"}, "rules": "lab3", "data": {"rList": [{"lPart": "file", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "id", "\":=\"", "Expr", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "id", "\":=\"", "Expr", ")", "?", "\")\"", "BlokOperator"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlokOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "binary", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constTetr", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", "*", ")", "[\"]"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Бирюков Г.В.","Collection":"553432313",{"_id": {"$oid": "67ce06c5af563521c9d5cef8"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67ce0731af563521c9d5cefc"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67cf02abaf563521c9d5d4eb"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d1b1f8e0b22203e7cbeeb4"}, "rules": "лаб", "data": {"rList": [{"lPart": "ProgrammText", "rPart": ["(", "Assignment2", ")", "+"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "(", "(", "Expression", ")", "\",\"", "id", ")", "\")\"", "delimiter"]}, {"lPart": "Assignment2", "rPart": ["\"set\"", "\"(\"", "(", "(", "FunctionSet", ")", "\",\"", "id", ")", "\")\"", "delimiter"]}, {"lPart": "Expression", "rPart": ["BeginExpr", "ExprOpr"]}, {"lPart": "FunctionSet", "rPart": ["Types", "\"(\"", "(", "FunctionArgument", "(", "\",\"", "FunctionArgument", ")", "*", ")", "?", "\")\"", "Block", "delimiter"]}, {"lPart": "BeginExpr", "rPart": ["(", "logicUn", "|", "minus", ")", "?", "(", "ExpressionId", "|", "Const", ")"]}, {"lPart": "BeginExpr", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "ExprOpr", "rPart": ["(", "(", "logicBin", "|", "math", "|", "minus", ")", "Expression", ")", "?"]}, {"lPart": "Types", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"char\"", "|", "\"string\"", "|", "\"double\""]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "+", "\"}\""]}, {"lPart": "FunctionArgument", "rPart": ["Types", "id"]}, {"lPart": "ExpressionId", "rPart": ["id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "Const", "rPart": ["const", "|", "constBin", "|", "constQuat", "|", "Char", "|", "constString"]}, {"lPart": "Statement", "rPart": ["Conditional", "|", "Assignment", "|", "ExprStatement", "|", "Return", "|", "Block", "|", "Loop", "|", "Switch", "|", "delimiter", "|", "\"leave\"", "delimiter", "|", "\"exit\"", "delimiter"]}, {"lPart": "Char", "rPart": ["constChar", "|", "constCharCode"]}, {"lPart": "Conditional", "rPart": ["If", "Else"]}, {"lPart": "ExprStatement", "rPart": ["Types", "id", "delimiter"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression", "?", "delimiter"]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Statement"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "Case", "+", "(", "\"otherwise\"", "Statement", "+", ")", "?", "\"}\""]}, {"lPart": "If", "rPart": ["\"at\"", "Expression", "\"do\"", "Statement", "delimiter"]}, {"lPart": "Else", "rPart": ["\"or\"", "\"do\"", "Statement"]}, {"lPart": "Case", "rPart": ["\"when\"", "Expression", "\"then\"", "Statement", "+"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "logicUn", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-+]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constQuat", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[\\\\]", "?", "[]", ")", "*", "[\"]"]}, {"lPart": "logicBin", "rPart": ["(", "[<>]", ")", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "math", "rPart": ["[*/]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "constCharCode", "rPart": ["[']", "[\\\\]", "[u]", "[0-9]", "{1,9}", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "keyword", "rPart": ["[a-zA-Z]", "{3,9}"]}, {"lPart": "Else", "rPart": ["~", "\"or\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Симахин Е.В.","Collection":"143431522",{"_id": {"$oid": "67bf45baaf563521c9d59e83"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67bf481baf563521c9d59ea8"}, "rules": "1lab", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[\\t]", "?", "[\\n]", "?", "[\\r]", "?", "{ignoreLastWord=true}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680921bd8558742cb4338d5d"}, "rules": "2lab", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "space", "rPart": ["[\\t]", "?", "[\\n]", "?", "[\\r]", "?", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "char", "rPart": ["[]", "+"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "680947a78558742cb4338e2a"}, "rules": "3lab", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "space", "rPart": ["[\\t]", "?", "[\\n]", "?", "[\\r]", "?", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["\"set \"", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\",\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "const", "rPart": []}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Калинин И.А.","Collection":"531322421",{"_id": {"$oid": "67bee51aaf563521c9d598a9"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c02316af563521c9d5a14d"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-2]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-Z]", ""]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c03565af563521c9d5a190"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d17f58af563521c9d5e25b"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "opLogic", "rPart": ["[!]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "opCompare", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[<]", "|", "[>]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d3cd77e0b22203e7cbf87f"}, "rules": "lab3", "data": {"rList": [{"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "block", "|", "operator", ")", "endPart"]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "(", "block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "opLogic", "|", "opCompare", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constChar", "|", "constReal", "|", "constStr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "opLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "opCompare", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[<]", "|", "[>]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["Expr", "\",\""]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "block", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "\"}\""]}, {"lPart": "other", "rPart": ["\"otherwise\"", "block"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ee29f4a600182c7517b3b4"}, "rules": "lab4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "block", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"four\"", "|", "\"sixtn\"", "|", "\"str\"", "|", "\"char\"", "|", "\"int\""]}, {"lPart": "ArgList", "rPart": ["type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "block", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "block", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "(", "block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "other", "rPart": ["\"otherwise\"", "block"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "opLogic", "|", "opCompare", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constChar", "|", "constReal", "|", "constStr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "opLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "opCompare", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[<]", "|", "[>]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6807a3fe8558742cb43384a1"}, "rules": "lab5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "block", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"four\"", "|", "\"sixtn\"", "|", "\"str\"", "|", "\"char\"", "|", "\"int\""]}, {"lPart": "ArgList", "rPart": ["type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "block", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "block", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "(", "block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "other", "rPart": ["\"otherwise\"", "block"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "opLogic", "|", "opCompare", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constChar", "|", "constReal", "|", "constStr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "opLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "opCompare", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[<]", "|", "[>]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Дранкевич М.Е.","Collection":"232515341",{"_id": {"$oid": "67c7054baf563521c9d5bbd8"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c712b3af563521c9d5bc3e"}, "rules": "LabRab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "const", "rPart": ["[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "?", "|", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "[0-9]", ")", "|", "[ntrvwWdD\\'\\\"\\\\]", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "colon", "rPart": ["\":\""]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "lBracket", "rPart": ["\"(\""]}, {"lPart": "rBracket", "rPart": ["\")\""]}, {"lPart": "lSquareBracket", "rPart": ["\"[\""]}, {"lPart": "rSquareBracket", "rPart": ["\"]\""]}, {"lPart": "qMark", "rPart": ["\"?\""]}, {"lPart": "exec", "rPart": ["\"exec\""]}, {"lPart": "with", "rPart": ["\"with\""]}, {"lPart": "from", "rPart": ["\"from\""]}, {"lPart": "to", "rPart": ["\"to\""]}, {"lPart": "step", "rPart": ["\"step\""]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "choice", "rPart": ["\"choice\""]}, {"lPart": "option", "rPart": ["\"option\""]}, {"lPart": "fin", "rPart": ["\"fin\""]}, {"lPart": "nooption", "rPart": ["\"nooption\""]}, {"lPart": "end", "rPart": ["\"end\""]}, {"lPart": "assignExpr", "rPart": ["(", "id", "assign", "Expr", "semicolon", ")", "*"]}, {"lPart": "type", "rPart": ["\"double\"", "|", "\"int\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "unaryOperator", "rPart": ["\"!\"", "|", "\"++\"", "|", "\"--\""]}, {"lPart": "lBrace", "rPart": ["\"{\""]}, {"lPart": "rBrace", "rPart": ["\"}\""]}, {"lPart": "lComment", "rPart": ["\"/*\""]}, {"lPart": "rComment", "rPart": ["\"*/\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67c712ecaf563521c9d5bc4b"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67c75870af563521c9d5bdf8"}, "rules": "aaa", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "?", "|", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "[0-9]", ")", "|", "[ntrvwWdD\\'\\\"\\\\]", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "[]", ")", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67daaeede0b22203e7cc1589"}, "rules": "LabRab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "const", "rPart": ["[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "?", "|", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "[0-9]", ")", "|", "[ntrvwWdD\\'\\\"\\\\]", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "colon", "rPart": ["\":\""]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "lBracket", "rPart": ["\"(\""]}, {"lPart": "rBracket", "rPart": ["\")\""]}, {"lPart": "lSquareBracket", "rPart": ["\"[\""]}, {"lPart": "rSquareBracket", "rPart": ["\"]\""]}, {"lPart": "qMark", "rPart": ["\"?\""]}, {"lPart": "exec", "rPart": ["\"exec\""]}, {"lPart": "with", "rPart": ["\"with\""]}, {"lPart": "from", "rPart": ["\"from\""]}, {"lPart": "to", "rPart": ["\"to\""]}, {"lPart": "step", "rPart": ["\"step\""]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "choice", "rPart": ["\"choice\""]}, {"lPart": "option", "rPart": ["\"option\""]}, {"lPart": "fin", "rPart": ["\"fin\""]}, {"lPart": "nooption", "rPart": ["\"nooption\""]}, {"lPart": "end", "rPart": ["\"end\""]}, {"lPart": "assignExpr", "rPart": ["id", "assign", "Expr", "semicolon"]}, {"lPart": "type", "rPart": ["\"double\"", "|", "\"int\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "unaryOperator", "rPart": ["\"!\"", "|", "\"++\"", "|", "\"--\""]}, {"lPart": "lBrace", "rPart": ["\"{\""]}, {"lPart": "rBrace", "rPart": ["\"}\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{/{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67eba207a600182c7517a841"}, "rules": "LabRab3", "data": {"rList": [{"lPart": "Programm", "rPart": ["Operator", "*"]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "(", "Operator", "fin", "?", ")", ")", "(", "\"nooption\"", "(", "Operator", "fin", "?", ")", ")", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "(", "(", "Operator", "|", "\"{\"", "Operator", "exit", "?", "\"}\"", ")", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", ")", "(", "\":\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "minus", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "minus", "rPart": ["\"-\""]}, {"lPart": "exit", "rPart": ["\"exit;\""]}, {"lPart": "unaryPostfix", "rPart": ["\"++\"", "|", "\"--\""]}, {"lPart": "fin", "rPart": ["\"fin;\""]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "const", "rPart": ["[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "+", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67fba5688558742cb433609b"}, "rules": "LabRab4", "data": {"rList": [{"lPart": "Programm", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["type", "id", "\"<-\"", "(", "Expr", "|", "OperatorFunc", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "(", "OperatorBlock", "*", ")", ")", "+", "(", "\"nooption\"", "(", "OperatorBlock", "*", ")", ")", "?", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "OperatorBlock", "\"with\"", "id", "\"from\"", "Number", "\"to\"", "Number", "(", "\"step\"", "Number", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIfFix", "IfFix"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Number", "rPart": ["constQUAT", "|", "constHEX", "|", "constDEC"]}, {"lPart": "ElseIfFix", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock"]}, {"lPart": "ElseIfFix", "rPart": ["~", "\"?:\""]}, {"lPart": "IfFix", "rPart": ["\":\"", "OperatorBlock"]}, {"lPart": "IfFix", "rPart": ["~", "\":\""]}, {"lPart": "OperatorFunc", "rPart": ["type", "\"(\"", "(", "(", "ArgElem", ")", "(", "\",\"", "ArgElem", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "minus", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["Number", "|", "constCHAR", "|", "constSTR"]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "minus", "rPart": ["\"-\""]}, {"lPart": "ArgElem", "rPart": ["type", "id"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constQUAT", "rPart": ["[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "constHEX", "rPart": ["[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "constDEC", "rPart": ["[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}, {"lPart": "constCHAR", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constSTR", "rPart": ["[\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "+", "[\"]"]}, {"lPart": "constDOUBLE", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67fe2d7d8558742cb4336d16"}, "rules": "LabRabForTest", "data": {"rList": [{"lPart": "Programm", "rPart": ["Operator", "*"]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "(", "Operator", "fin", "?", ")", ")", "(", "\"nooption\"", "(", "Operator", "fin", "?", ")", ")", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "(", "(", "Operator", "|", "\"{\"", "Operator", "exit", "?", "\"}\"", ")", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", "(", "ElseIfFix", ")", "(", "\":\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "minus", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "minus", "rPart": ["\"-\""]}, {"lPart": "exit", "rPart": ["\"exit;\""]}, {"lPart": "unaryPostfix", "rPart": ["\"++\"", "|", "\"--\""]}, {"lPart": "fin", "rPart": ["\"fin;\""]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "const", "rPart": ["[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "+", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true}"]}, {"lPart": "ElseIfFix", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "ElseIfFix", "rPart": ["~", "\"?:\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68123dbc8558742cb433a9b6"}, "rules": "LabRab5", "data": {"rList": [{"lPart": "Programm", "rPart": ["OperatorFunc", "+"]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "(", "OperatorBlock", "*", ")", ")", "+", "(", "\"nooption\"", "(", "OperatorBlock", "*", ")", ")", "?", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "OperatorBlock", "\"with\"", "id", "\"from\"", "Number", "\"to\"", "Number", "(", "\"step\"", "Number", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "Operator", "rPart": ["type", "id", "(", "\"<-\"", "Expr", ")", "?", "(", "\",\"", "id", "(", "\"<-\"", "Expr", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIfFix", "IfFix"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Number", "rPart": ["constQUAT", "|", "constHEX", "|", "constDEC"]}, {"lPart": "ElseIfFix", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock"]}, {"lPart": "ElseIfFix", "rPart": ["~", "\"?:\""]}, {"lPart": "IfFix", "rPart": ["\":\"", "OperatorBlock"]}, {"lPart": "IfFix", "rPart": ["~", "\":\""]}, {"lPart": "OperatorFunc", "rPart": ["id", "\"<-\"", "type", "\"(\"", "(", "(", "ArgElem", ")", "(", "\",\"", "ArgElem", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", "\";\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "minus", ")", "?", "(", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")", "|", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["Number", "|", "constCHAR", "|", "constSTR"]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "minus", "rPart": ["\"-\""]}, {"lPart": "ArgElem", "rPart": ["type", "id"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constQUAT", "rPart": ["[0-3]", "+", "[Q]", "[U]", "[A]", "[T]"]}, {"lPart": "constHEX", "rPart": ["[0-9a-fA-F]", "+", "[H]", "[E]", "[X]"]}, {"lPart": "constDEC", "rPart": ["[0-9]", "+", "(", "[D]", "[E]", "[C]", ")", "?"]}, {"lPart": "constCHAR", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constSTR", "rPart": ["[\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "+", "[\"]"]}, {"lPart": "constDOUBLE", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Кузнецов В.С.","Collection":"413321431",{"_id": {"$oid": "67ada5a3ce6dd03692d079d2"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67ae02e7ce6dd03692d07b0b"}, "rules": "Laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cf8a38af563521c9d5d5fe"}, "rules": "Laba211", "data": {"rList": [{"lPart": "expr", "rPart": ["srtring"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/><]"]}, {"lPart": "assign", "rPart": ["\"set(\"", "id", "\",\"", "expr", "\")\""]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e26e7f4635a960233ad776"}, "rules": "Laba311", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "double", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "FunctionCall", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "Unary", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int10", "|", "exp", "|", "double", "|", "char", "|", "\"false\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"inte\"", "|", "\"double\"", "|", "\"char\""]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Assignment", "|", "FunctionCall", "|", "Break", "|", "Return", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch", "|", "comment"]}, {"lPart": "Declaration", "rPart": ["id"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Condition", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "(", "Operator", "|", "Operators", ")", "(", "\"not\"", "(", "Operator", "|", "Operators", ")", ")", "?"]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "\";\"", "Expression", "?", "\";\"", "Assignment", "?", "\")\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "(", "Switchdefault", ")", "?", "\"end\""]}, {"lPart": "Switchdefault", "rPart": ["\"case\"", "\"(\"", "\"false\"", "\")\"", "(", "Operator", "|", "Operators", ")", "*"]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f3a4098558742cb4333433"}, "rules": "Laba411", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", "|", "Return", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch", "|", "comment"]}, {"lPart": "Condition", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "(", "Operator", "|", "Operators", ")", "OperatorElse"]}, {"lPart": "OperatorElse", "rPart": ["\"not\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "OperatorElse", "rPart": ["~", "\"not\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "\";\"", "Expression", "?", "\";\"", "Assignment", "?", "\")\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "\")\"", ")", "?", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int10", "|", "exp", "|", "double", "|", "char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "double", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680730bd8558742cb43381b4"}, "rules": "Laba5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", "|", "Return", "|", "Expression", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch"]}, {"lPart": "Condition", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "(", "Operator", "|", "Operators", ")", "OperatorElse"]}, {"lPart": "OperatorElse", "rPart": ["\"not\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "OperatorElse", "rPart": ["~", "\"not\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "\";\"", "Expression", "?", "\";\"", "Assignment", "?", "\")\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "\")\"", ")", "?", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int10", "|", "exp", "|", "double", "|", "char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "double", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6818efe98558742cb433bba5"}, "rules": "Laba511", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", "|", "Return", "|", "Expression", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch"]}, {"lPart": "Condition", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "(", "Operator", "|", "Operators", ")", "OperatorElse"]}, {"lPart": "OperatorElse", "rPart": ["\"not\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "OperatorElse", "rPart": ["~", "\"not\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "\";\"", "Expression", "?", "\";\"", "Assignment", "?", "\")\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "\")\"", ")", "?", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["int10", "|", "exp", "|", "double", "|", "char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "double", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6819d07a8558742cb433beb0"}, "rules": "Sample66", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"WhileBegin_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"WhileEnd_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"WhilleBegin_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"WhileEnd_\"+ctlStk.pop()+\":\");toPFR(\"\\n\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "6819d61d8558742cb433bec1"}, "rules": "Laba6", "data": {"rList": [{"lPart": "Program", "rPart": ["{resetAll();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", "|", "Return", "|", "Expression", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["Condition", "|", "Cycle", "|", "Switch"]}, {"lPart": "Condition", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "(", "Operator", "|", "Operators", ")", "OperatorElse"]}, {"lPart": "OperatorElse", "rPart": ["\"not\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "OperatorElse", "rPart": ["~", "\"not\""]}, {"lPart": "Cycle", "rPart": ["{cycleStack.push(++cycleCount);}", "\"cycle\"", "\"(\"", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack)+\":\")}", "\";\"", "(", "Expression", "{toPFR(\"CycleEnd_\"+peek(cycleStack));toPFR(\"JumpOnFalse\");toPFR(\"CycleBody_\"+peek(cycleStack));toPFR(\"Jump\");}", ")", "?", "\";\"", "{toPFR(\"CycleAssignment_\"+peek(cycleStack)+\":\");}", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack));toPFR(\"Jump\");}", "\")\"", "{toPFR(\"CycleBody_\"+peek(cycleStack)+\":\");}", "(", "Operator", "|", "Operators", ")", "{toPFR(\"CycleAssignment_\"+peek(cycleStack));toPFR(\"Jump\");toPFR(\"CycleEnd_\"+cycleStack.pop()+\":\");}"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constant", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "\")\"", "{toPFR(\"set\");}"]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Expression", "rPart": ["{unaryStk.push(this.currentLexem[1]);}", "Unary", "BeginExpression", "{toPFR(\"Unary\"+unaryStk.pop());}", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "\")\"", ")", "?"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BeginExpression", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStk.pop();}"]}, {"lPart": "EndExpression", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "Binary", "|", "unaryMath", ")", "Expression", "{if(opStk.length > 0) toPFR(opStk.pop());}"]}, {"lPart": "EndExpression", "rPart": []}, {"lPart": "Constant", "rPart": ["int10", "|", "exp", "|", "double", "|", "char", "|", "\"false\""]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "double", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// Доработанный 6 пример\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar unaryStk, opStk, cycleStack, cycleCount;\nfunction resetAll() {\n unaryStk = [];\n opStk = [];\n cycleStack=[];\n cycleCount=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n switch (s) {\n  case \"(\":\n   return 0;\n  case \"+\":\n  case \"-\":\n  case \"<\":\n  case \">\":\n  case \"==\":\n  case \"!=\":\n  case \"<=\":\n  case \">=\":\n  case \"||\":\n   return 1;\n  case \"*\":\n  case \"/\":\n  case \"&&\":\n   return 2;\n }\n}\n"}}},
{"FIO":"Белянов М.В.","Collection":"524251233",{"_id": {"$oid": "67aeb31dce6dd03692d07b64"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 500, "assist": 1}}{"_id": {"$oid": "67bc3d81ce6dd03692d097b5"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "+", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[\"ntr\\\\]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"ntr\\\\]", ")", "+", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bc4311ce6dd03692d097f6"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67bd6f65af563521c9d5918d"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[']", "|", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "+", "[\"]"]}, {"lPart": "op1", "rPart": ["[!]"]}, {"lPart": "op2", "rPart": ["[+*/<>]", "|", "(", "[!><=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "op12", "rPart": ["[-]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2c3b4e0b22203e7cbf48c"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67d2c3cde0b22203e7cbf48f"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "67d2ccc5e0b22203e7cbf4ee"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[']", "|", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "+", "[\"]"]}, {"lPart": "op1", "rPart": ["[!]"]}, {"lPart": "op2", "rPart": ["[+*/<>]", "|", "(", "[!><=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "op12", "rPart": ["[-]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "op12", "|", "op1", ")", "?", "(", "id", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "op12", ")", "?", "(", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "op2", "|", "op12", ")", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "Else"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Else", "rPart": ["\"other\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")"]}, {"lPart": "seq", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7800c8558742cb4335314"}, "rules": "Lab4", "data": {"rList": [{"lPart": "seq", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "Else"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Else", "rPart": ["\"other\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")"]}, {"lPart": "BegExpr", "rPart": ["op1", "(", "id", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "BegExpr", "rPart": ["op12", "?", "(", "const", "|", "(", "id", "|", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "op2", "|", "op12", ")", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "op1", "rPart": ["[!]"]}, {"lPart": "op12", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[']", "|", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "+", "[\"]"]}, {"lPart": "op2", "rPart": ["[+*/<>]", "|", "(", "[!><=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"loop\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "Case", "+", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\"", "const", "\")\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")"]}, {"lPart": "const", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680719478558742cb433819f"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Function", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"float\"", "|", "\"int\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "(", "Type", ")", "?", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "Else"]}, {"lPart": "Operator", "rPart": ["\"loop\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expr", "Case", "+", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Else", "rPart": ["\"other\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")"]}, {"lPart": "BegExpr", "rPart": ["op1", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "BegExpr", "rPart": ["op12", "?", "(", "const", "|", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "op2", "|", "op12", ")", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\"", "const", "\")\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "op1", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[']", "|", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "+", "[\"]"]}, {"lPart": "const", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "op12", "rPart": ["[-]"]}, {"lPart": "op2", "rPart": ["[+*/<>]", "|", "(", "[!><=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "seq", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Гречанова Е.С.","Collection":"522352554",{"_id": {"$oid": "67c29a04af563521c9d5a8f4"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 7000, "assist": 1}}{"_id": {"$oid": "67c29cd7af563521c9d5a932"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67c29d8caf563521c9d5a951"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c2a0ecaf563521c9d5a9aa"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[d]", "[e]", "[c]", "[0-9]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "|", "[\\'\\\"]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d7f36fe0b22203e7cc0c80"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\\\\"\\']", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "[]", "|", "[\\\\\\'\\\"]", ")", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "oper", "rPart": ["[/*]"]}, {"lPart": "assign", "rPart": ["[<]", "[–]"]}, {"lPart": "funcId", "rPart": ["[-]", "[>]"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "brackets", "rPart": ["(", "[{]", "[]", "*", "[}]", ")", "|", "(", "[(]", "[]", "*", "[)]", ")"]}, {"lPart": "logic", "rPart": ["[|&]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea19904635a960233aff90"}, "rules": "Лаба3", "data": {"rList": [{"lPart": "Operator", "rPart": ["(", "id", "\"<–\"", "Expr", "\";\"", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "\"loop\"", "\"{\"", "Operator", "\"}\"", "\"until\"", "\"(\"", "Expr", "\")\"", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "(", "\"retire;\"", ")", "?", "\"}\"", "(", "\"not\"", "\"{\"", "Operator", "(", "\"retire;\"", ")", "?", "\"}\"", ")", "?", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "\"{\"", "Operator", "(", "\"exit;\"", ")", "?", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "Operator", "(", "\"exit;\"", ")", "?", "\"}\"", ")", "?", "\"}\"", ")", "*"]}, {"lPart": "Expr", "rPart": ["UnExpr", "|", "(", "BegExpr", "EndExpr", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", "|", "comp", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "UnExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|&]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed0925a600182c7517ad5e"}, "rules": "лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\\\\"\\']", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|&]"]}, {"lPart": "Operator", "rPart": ["(", "id", "\"<–\"", "Expr", "\";\"", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"loop\"", "\"{\"", "(", "Operator", "(", "\"retire;\"", ")", "?", ")", "\"}\"", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Expr", "rPart": ["UnExpr", "|", "(", "BegExpr", "EndExpr", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", "|", "comp", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "UnExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed61faa600182c7517b0a2"}, "rules": "Лаба32", "data": {"rList": [{"lPart": "Operator", "rPart": ["id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "\"{\"", "Operator", "+", "\"}\"", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "(", "\"not\"", "\"{\"", "Operator", "+", "\"}\"", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "\"{\"", "(", "Operator", "+", ")", "?", "(", "\"exit\"", "\";\"", ")", "?", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "(", "Operator", "+", ")", "(", "\"exit\"", "\";\"", ")", "?", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Expr", "rPart": ["UnExpr", "|", "(", "BegExpr", "EndExpr", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", "|", "comp", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "UnExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|&]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ffa5918558742cb43370d2"}, "rules": "Лаба4", "data": {"rList": [{"lPart": "Prog", "rPart": ["Function", "*"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "id", "(", "\",\"", "id", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "OperBlock", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "OperBlock", "PartNot"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "OperBlock", "*", ")", "+", "(", "\"otherwise\"", "OperBlock", "*", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "PartNot", "rPart": ["\"not\"", "OperBlock"]}, {"lPart": "PartNot", "rPart": ["~", "\"not\""]}, {"lPart": "OperBlock", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Expr", "rPart": ["UnExpr", "|", "(", "BegExpr", "EndExpr", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", "|", "comp", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "UnExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"!\"", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|&]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68121f138558742cb433a988"}, "rules": "Лаба5", "data": {"rList": [{"lPart": "Prog", "rPart": ["Function", "*"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "id", "?", "(", "\",\"", "id", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "OperBlock", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "OperBlock", "PartNot"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "OperBlock", "*", ")", "+", "(", "\"otherwise\"", "OperBlock", "*", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "id", "|", "const", ")", "\";\""]}, {"lPart": "PartNot", "rPart": ["\"not\"", "OperBlock"]}, {"lPart": "PartNot", "rPart": ["~", "\"not\""]}, {"lPart": "OperBlock", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Expr", "rPart": ["UnExpr", "|", "(", "BegExpr", "EndExpr", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "|", "const", "|", "(", "\"func\"", "id", "\"(\"", "(", "id", "|", "const", ")", "?", "(", "\",\"", "(", "id", "|", "const", ")", ")", "*", "\")\"", ")", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", "|", "comp", "|", "logic", ")", "Expr", ")", "?"]}, {"lPart": "UnExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"!\"", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[o]", "[c]", "[t]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "(", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|&]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Заломский А.А.","Collection":"524444543",{"_id": {"$oid": "6807692e8558742cb43381e8"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")", "|", "(", "[0]", "[f]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808f79d8558742cb4338c3f"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "6808f7e78558742cb4338c49"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")", "|", "(", "[0]", "[f]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808fa668558742cb4338c77"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")", "|", "(", "[0]", "[f]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "\"|\"", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Program", "rPart": ["(", "Operator", "|", "Expr", ")", "+"]}, {"lPart": "Const", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["(", "\"exit\"", "|", "\"break\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"@\"", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "Operator", "+", "\"}\"", "Or", "?"]}, {"lPart": "Or", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "Operator", "+", "\"stop\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Operator", "+", "\"quit\"", "delimiter", ")", "+", "(", "\"?~:\"", "Operator", "+", "\"quit\"", "delimiter", ")", "?", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680efddc8558742cb433a4ac"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")", "|", "(", "[0]", "[f]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "\"|\"", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Const", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["(", "\"exit\"", "|", "\"break\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"@\"", "type", "?", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "Operator", "+", "\"}\"", "Or", "?"]}, {"lPart": "Or", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "Operator", "+", "\"stop\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Operator", "+", "\"quit\"", "delimiter", ")", "+", "(", "\"?~:\"", "Operator", "+", "\"quit\"", "delimiter", ")", "?", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\"->\"", "id", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"tester","Collection":"000000000",{"_id": {"$oid": "6201d1d1620cc55b46eb595b"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-1", "deltat": 5000, "assist": 0}}{"_id": {"$oid": "67b29ba7ce6dd03692d07f78"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d38845e0b22203e7cbf7a4"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0]", "[t]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "[\\\\]", "[']", "|", "[\\\\]", "[]", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[]", ")", "*", "[\"]"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "operator", "rPart": ["[+\\-/*=<>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67d38d6ee0b22203e7cbf7c3"}, "rules": "err", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[\\\\]", "[]", "+", ")", "|", "(", "[]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[#]", "[#]", "[]", "*", "[\\r\\t\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "quadro", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "octal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "decimals", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "keywords", "rPart": ["[a-z]", "{3,}"]}, {"lPart": "brackets", "rPart": ["[\\[\\]\\(\\)\\{\\}]"]}, {"lPart": "signs", "rPart": ["[+*/%\\-]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "delim", "rPart": ["[;:,]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!]", "[!]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6818a6248558742cb433babc"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "6818a6308558742cb433bac1"}, "rules": "Sample22", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Колошницина П.Д.","Collection":"334352341",{"_id": {"$oid": "67b2a218ce6dd03692d07f94"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b2ed7dce6dd03692d08031"}, "rules": "Пример1", "data": {"rList": [{"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}], "extension": ""}}{"_id": {"$oid": "67d50f2fe0b22203e7cbf98e"}, "rules": "Lab1", "data": {"rList": [{"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}], "extension": ""}}{"_id": {"$oid": "67e2678f4635a960233ad761"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constF", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constS", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constI", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/<>]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;,]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}], "extension": ""}}{"_id": {"$oid": "67e7b74f4635a960233af212"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constF", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constS", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constI", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/<>]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;,]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "Term", "rPart": ["id", "|", "constI", "|", "constS", "|", "constF"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "expr", ")", "?"]}, {"lPart": "Term", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", "|", "\"<\"", "|", "\">\"", "|", "\"=\"", "|", "\"!=\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "assign", "expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "\"{\"", "Operator", "\"}\"", "NotOp", "?"]}, {"lPart": "NotOp", "rPart": ["\"not\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "\"{\"", "Operator", "\"}\"", "\"until\"", "\"(\"", "expr", "\")\"", "\"retire\"", "?"]}, {"lPart": "programm", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"case\"", "expr", "\"{\"", "\"when\"", "(", "constF", "|", "constS", "|", "constI", "\"then\"", "Operator", "+", "\"exit;\"", ")", "+", "(", "\"otherwise\"", "Operator", "*", ")", "?", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f9ff868558742cb43356ed"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constF", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constS", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "constI", "rPart": ["(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/<>]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;,]"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "Term", "rPart": ["id", "|", "constI", "|", "constS", "|", "constF"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "expr", ")", "?"]}, {"lPart": "Term", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", "|", "\"<\"", "|", "\">\"", "|", "\"=\"", "|", "\"!=\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "assign", "expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "\"{\"", "Operator", "\"}\"", "NotOp", "?"]}, {"lPart": "NotOp", "rPart": ["\"not\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "\"{\"", "Operator", "\"}\"", "\"until\"", "\"(\"", "expr", "\")\"", "\"retire\"", "?"]}, {"lPart": "programm", "rPart": ["function", "+"]}, {"lPart": "Operator", "rPart": ["\"case\"", "expr", "\"{\"", "\"when\"", "(", "constF", "|", "constS", "|", "constI", "\"then\"", "Operator", "+", "\"exit;\"", ")", "+", "(", "\"otherwise\"", "Operator", "*", ")", "?", "\"}\""]}, {"lPart": "function", "rPart": ["type", "?", "\"(\"", "(", "type", "?", "id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"};\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Киреев Е.И.","Collection":"411524252",{"_id": {"$oid": "67c402a7af563521c9d5adc0"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c41493af563521c9d5aed4"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,3}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[+-]", "[0-9]", "*"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binary", "rPart": ["(", "[*+/%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n\\b]", "+"]}, {"lPart": "unary", "rPart": ["[+]", "[+]", "|", "[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "stub", "rPart": ["(", "[A-Za-z]", "+", "[A-Za-z]", "+", "[A-Za-z]", "+", ")", "|", "[A-Za-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c414d1af563521c9d5aef2"}, "rules": "лабораторная1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d79722e0b22203e7cc0a02"}, "rules": "LR", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[+-]", "[0-9]", "*"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Binary", "rPart": ["binaryArif", "|", "binaryLogic", "|", "binaryCheck"]}, {"lPart": "Unary", "rPart": ["unary", "|", "mixed"]}, {"lPart": "Constant", "rPart": ["constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "Expression", "rPart": ["Unary", "?", "(", "id", "(", "\"(\"", "id", "?", "(", "\",\"", "id", ")", "*", "\")\"", ")", "?", "|", "Constant", "|", "(", "\"(\"", "Expression", "\")\"", ")", ")", "(", "(", "mixed", "|", "Binary", ")", "Expression", ")", "?"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "(", "Expression", ")"]}, {"lPart": "Condition", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")", "elseif", "else"]}, {"lPart": "Oper", "rPart": ["Assign", "\";\"", "|", "Condition", "|", "Cycle", "|", "Select", "|", "quit", "|", "return", "|", "id", "(", "\"(\"", "id", "?", "(", "\",\"", "id", ")", "*", "\")\"", ")", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assign", "?", "\";\"", "Expression", "?", "\";\"", "Assign", "?", "\")\"", "(", "(", "\"{\"", "Oper", "+", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Select", "rPart": ["\"??\"", "Expression", "\"{\"", "case1", "+", "case2", "?", "\"}\""]}, {"lPart": "case1", "rPart": ["\"?=\"", "Constant", "\":\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "*", "|", "Oper", "*", ")"]}, {"lPart": "case2", "rPart": ["\"?~\"", "\":\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "*", "|", "Oper", "*", ")"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "argum", "\")\"", "\"{\"", "Oper", "*", "\"}\""]}, {"lPart": "Program", "rPart": ["Oper", "*", "Function", "*"]}, {"lPart": "elseif", "rPart": ["\"?:\"", "\"(\"", "Expression", "\")\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "else", "rPart": ["\":\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "else", "rPart": ["~", "\":\""]}, {"lPart": "elseif", "rPart": ["~", "\"?:\""]}, {"lPart": "return", "rPart": ["\"return\"", "Expression", "\";\""]}, {"lPart": "argum", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Зяблицкий Ф.А.","Collection":"331544535",{"_id": {"$oid": "67c717c8af563521c9d5bc67"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]"]}, {"lPart": "const", "rPart": ["[0-9A-F]", "+", "[H]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrvabf0]", "|", "(", "[d]", "[0-3]", "[0-9]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c717dfaf563521c9d5bc6b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c7dd60af563521c9d5bead"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 2000, "assist": 1}}{"_id": {"$oid": "67d80bc3e0b22203e7cc0d18"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67dae9c6e0b22203e7cc18d7"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]"]}, {"lPart": "const", "rPart": ["[0-9A-F]", "+", "[H]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "let", "rPart": ["\"Let\""]}, {"lPart": "on", "rPart": ["\"On\""]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "lbracket", "rPart": ["\"(\""]}, {"lPart": "rbracket", "rPart": ["\")\""]}, {"lPart": "lsqbracket", "rPart": ["\"[\""]}, {"lPart": "rsqbracket", "rPart": ["\"]\""]}, {"lPart": "questmark", "rPart": ["\"?\""]}, {"lPart": "colon", "rPart": ["\":\""]}, {"lPart": "foreach", "rPart": ["\"foreach\""]}, {"lPart": "in", "rPart": ["\"in\""]}, {"lPart": "stop", "rPart": ["\"stop\""]}, {"lPart": "quit", "rPart": ["\"quit\""]}, {"lPart": "equal", "rPart": ["\"=\""]}, {"lPart": "squig", "rPart": ["\"~\""]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{/{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["\"double\"", "|", "\"int\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "lcurbracket", "rPart": ["\"{\""]}, {"lPart": "rcurbracket", "rPart": ["\"}\""]}, {"lPart": "function", "rPart": ["\"function\""]}, {"lPart": "pointer", "rPart": ["\"->\""]}, {"lPart": "unaryOperator", "rPart": ["\"++\"", "|", "\"--\"", "|", "\"!\""]}, {"lPart": "assignExpr", "rPart": ["(", "let", "type", "id", "on", "Expr", "semicolon", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67db72fae0b22203e7cc1acf"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67de93bf4635a960233ac3bd"}, "rules": "lab3", "data": {"rList": [{"lPart": "Operator", "rPart": ["(", "\"let\"", "id", "\"on\"", "Expr", "\";\"", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "Operator", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "Operator", ")", "(", "\":\"", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "Operator", "(", "\"stop;\"", ")"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "(", "\"quit;\"", ")", "?", ")", "\"?~:\"", "Operator", "\"}\""]}, {"lPart": "type", "rPart": ["\"double\"", "|", "\"int\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "universal", "rPart": ["\"-\""]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]"]}, {"lPart": "const", "rPart": ["[0-9A-F]", "+", "[H]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["(", "[ \\t]", "|", "[\\n]", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ded4bf4635a960233ac5e5"}, "rules": "Sample4", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67fe7f708558742cb4336ece"}, "rules": "lab4", "data": {"rList": [{"lPart": "Main", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}->\"", "id"]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["id", "(", "\"on\"", "Expr", ")", "?", "(", "\",\"", "id", "\"on\"", "Expr", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "BlockOperator", "*", ")", "*", "(", "\"?~:\"", "BlockOperator", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "If", "ElseIf", "Else"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "If", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "If", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", "|", "(", "\"(\"", "(", "(", "Type", "\")\"", "BegExpr", ")", "|", "Expr", "\")\"", ")", ")", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]"]}, {"lPart": "const", "rPart": ["[0-9A-F]", "+", "[H]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "unaryPrefix", "rPart": ["[!]"]}, {"lPart": "universal", "rPart": ["[-]"]}, {"lPart": "binary", "rPart": ["[*/+%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["(", "[ \\t]", "|", "[\\n]", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680872018558742cb43385dc"}, "rules": "lab5", "data": {"rList": [{"lPart": "Main", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}->\"", "id"]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["id", "(", "\"on\"", "Expr", ")", "?", "(", "\",\"", "id", "\"on\"", "Expr", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "BlockOperator", "*", ")", "*", "(", "\"?~:\"", "BlockOperator", "*", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "If", "ElseIf", "Else"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "If", "rPart": ["\"(\"", "Expr", "\")\"", "BlockOperator"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "If", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", "|", "(", "\"(\"", "(", "(", "Type", "\")\"", "BegExpr", ")", "|", "Expr", "\")\"", ")", ")", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "const", "rPart": ["[0-3]", "+", "[Q]"]}, {"lPart": "const", "rPart": ["[0-9A-F]", "+", "[H]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "unaryPrefix", "rPart": ["[!]"]}, {"lPart": "universal", "rPart": ["[-]"]}, {"lPart": "binary", "rPart": ["[*/+%^<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["(", "[ \\t]", "|", "[\\n]", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Левицкий А.В.","Collection":"445511215",{"_id": {"$oid": "67b2bda1ce6dd03692d07fa7"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b56085ce6dd03692d083f8"}, "rules": "ShenaniganScript1", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+", "[\\n\\t\\r ]", "?"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+", "[\\n\\t\\r ]", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "[\\n\\t\\r ]", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[\\n\\t\\r ]", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+", "[\\n\\t\\r ]", "?"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "*", "[\"]"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operators", "rPart": ["[-+*/=<>!]", "[=]", "?"]}, {"lPart": "Operators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c1b1f5af563521c9d5a842"}, "rules": "ShenaniganScript2", "data": {"rList": [{"lPart": "Program", "rPart": ["(", "Operators", "|", "Function", ")", "+"]}, {"lPart": "Operators", "rPart": ["Assignment", "|", "Declaration", "|", "Condition", "|", "LoopBlock", "|", "SwitchBlock", "|", "FunctionCall"]}, {"lPart": "Function", "rPart": ["Ident", "\"(\"", "FunctionArgsDeclaration", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "OperatorBlock"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "Ident", "\";\""]}, {"lPart": "Declaration", "rPart": ["Type", "Ident"]}, {"lPart": "Condition", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", ")", "*", "(", "\":\"", "OperatorBlock", ")", "?"]}, {"lPart": "LoopBlock", "rPart": ["\"exec\"", "OperatorBlock", "\"with\"", "Ident", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?"]}, {"lPart": "SwitchBlock", "rPart": ["\"select\"", "Expr", "SwitchCase", "\"end\""]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "FunctionResult"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "(", "Operators", "|", "\"exit;\"", "|", "\"return\"", "Expr", "|", "\"break;\"", "|", "\"continue;\"", ")", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "SwitchCase", "rPart": ["(", "\"case\"", "\"(\"", "(", "Const", "|", "\"false\"", ")", "\")\"", "OperatorBlock", "*", ")", "+"]}, {"lPart": "FunctionResult", "rPart": ["Ident", "\"(\"", "Arguments", "?", "\")\""]}, {"lPart": "FunctionArgsDeclaration", "rPart": ["(", "FunctionArgsDeclaration", "\",\"", ")", "?", "Declaration"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["\"!\"", "Expr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "EndExpr", "rPart": ["(", "ExprOperators", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["Ident", "|", "Const", "|", "FunctionResult"]}, {"lPart": "Arguments", "rPart": ["(", "Arguments", "\",\"", ")", "?", "Term"]}, {"lPart": "ExprOperators", "rPart": ["MathOperators", "|", "LogicOperators", "|", "CompOperators"]}, {"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "MathOperators", "rPart": ["[-+*/]"]}, {"lPart": "LogicOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompOperators", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n// блоки(оба) с ? в Condition ломают все из-за OperationBlock, вместе со скобками, Expr и Condition по отдельности\n// Program с + тоже ломает\n\n// Function имя вызывает конфликт с Term из-за Expr в Operators\n\n// Победить + и - перед Expr и Const, сейчас через 0 +- Expr"}}{"_id": {"$oid": "67dbd7d1e0b22203e7cc1c04"}, "rules": "ShenaniganScript3", "data": {"rList": [{"lPart": "Program", "rPart": ["(", "Operators", "|", "Function", ")", "+"]}, {"lPart": "Operators", "rPart": ["Assignment", "|", "VarDeclaration", "|", "Condition", "|", "LoopBlock", "|", "SwitchBlock", "|", "FunctionCall"]}, {"lPart": "Function", "rPart": ["Ident", "\"(\"", "FunctionArgsDeclaration", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "OperatorBlock"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "Ident", "Delim"]}, {"lPart": "VarDeclaration", "rPart": ["Declaration", "Delim"]}, {"lPart": "Condition", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", ")", "*", "(", "\":\"", "OperatorBlock", ")", "?"]}, {"lPart": "LoopBlock", "rPart": ["\"exec\"", "OperatorBlock", "\"with\"", "Ident", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "Delim"]}, {"lPart": "SwitchBlock", "rPart": ["\"select\"", "Expr", "SwitchCase", "\"end\"", "Delim"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "FunctionResult", "Delim"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "(", "Operators", "|", "\"exit;\"", "|", "(", "\"return\"", "Expr", "Delim", ")", "|", "\"break;\"", "|", "\"continue;\"", ")", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "UnaryExpr", "|", "BinaryExpr", "|", "Term"]}, {"lPart": "Declaration", "rPart": ["Type", "Ident"]}, {"lPart": "SwitchCase", "rPart": ["(", "\"case\"", "\"(\"", "(", "Const", "|", "\"false\"", ")", "\")\"", "OperatorBlock", "*", ")", "+"]}, {"lPart": "FunctionResult", "rPart": ["Ident", "\"(\"", "Arguments", "?", "\")\""]}, {"lPart": "FunctionArgsDeclaration", "rPart": ["(", "FunctionArgsDeclaration", "\",\"", ")", "?", "Declaration"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "UnaryExpr", "rPart": ["UnaryOperators", "Expr"]}, {"lPart": "BinaryExpr", "rPart": ["Expr", "BinaryOperators", "Expr"]}, {"lPart": "Term", "rPart": ["Ident", "|", "Const", "|", "FunctionResult"]}, {"lPart": "UnaryOperators", "rPart": ["\"!\"", "|", "UniversalOperators"]}, {"lPart": "BinaryOperators", "rPart": ["MathOperators", "|", "LogicOperators", "|", "CompOperators", "|", "UniversalOperators"]}, {"lPart": "Arguments", "rPart": ["(", "Arguments", "\",\"", ")", "?", "Term"]}, {"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Delim", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "UniversalOperators", "rPart": ["[-+]"]}, {"lPart": "MathOperators", "rPart": ["[*/%]"]}, {"lPart": "LogicOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompOperators", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n// блоки(оба) с ? в Condition ломают все из-за OperationBlock, вместе со скобками, Expr и Condition по отдельности\n// Program с + тоже ломает\n\n// Function имя вызывает конфликт с Term из-за Expr в Operators"}}{"_id": {"$oid": "67ea926da600182c7517a6a7"}, "rules": "ShenaniganScript4", "data": {"rList": [{"lPart": "Program", "rPart": ["(", "Operators", "|", "Function", ")", "+"]}, {"lPart": "Operators", "rPart": ["Assignment", "|", "VarDeclaration", "|", "Condition", "|", "LoopBlock", "|", "SwitchBlock", "|", "FunctionCall"]}, {"lPart": "Function", "rPart": ["Ident", "\"(\"", "FunctionArgsDeclaration", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "OperatorBlock"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "Ident", "Delim"]}, {"lPart": "VarDeclaration", "rPart": ["Declaration", "Delim"]}, {"lPart": "Condition", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", ")", "*", "(", "\":\"", "OperatorBlock", ")", "?"]}, {"lPart": "LoopBlock", "rPart": ["\"exec\"", "OperatorBlock", "\"with\"", "Ident", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "Delim"]}, {"lPart": "SwitchBlock", "rPart": ["\"select\"", "Expr", "SwitchCase", "\"end\"", "Delim"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "IdentOrFunction", "Delim"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "(", "Operators", "|", "\"exit;\"", "|", "(", "\"return\"", "Expr", "Delim", ")", "|", "\"break;\"", "|", "\"continue;\"", ")", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["UnaryOperators", "?", "ExprBeg", "ExprEnd"]}, {"lPart": "Declaration", "rPart": ["Type", "Ident"]}, {"lPart": "SwitchCase", "rPart": ["(", "\"case\"", "\"(\"", "(", "Const", "|", "\"false\"", ")", "\")\"", "OperatorBlock", "*", ")", "+"]}, {"lPart": "IdentOrFunction", "rPart": ["Ident", "(", "\"(\"", "Arguments", "?", "\")\"", ")", "?"]}, {"lPart": "FunctionArgsDeclaration", "rPart": ["Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "ExprBeg", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "Term"]}, {"lPart": "ExprEnd", "rPart": ["BinaryOperators", "Expr"]}, {"lPart": "ExprEnd", "rPart": []}, {"lPart": "FunctionArgsDeclaration0", "rPart": ["\",\"", "Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": []}, {"lPart": "UnaryOperators", "rPart": ["\"!\"", "|", "UniversalOperators"]}, {"lPart": "Term", "rPart": ["IdentOrFunction", "|", "Const"]}, {"lPart": "BinaryOperators", "rPart": ["MathOperators", "|", "LogicOperators", "|", "CompOperators", "|", "UniversalOperators"]}, {"lPart": "Arguments", "rPart": ["Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": ["\",\"", "Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": []}, {"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Delim", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "UniversalOperators", "rPart": ["[-+]"]}, {"lPart": "MathOperators", "rPart": ["[*/%]"]}, {"lPart": "LogicOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompOperators", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fde2758558742cb4336c20"}, "rules": "TEST", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "StatementBlock", "rPart": ["(", "Op", "|", "(", "\"{\"", "Op", "*", "\"}\"", ")", ")"]}, {"lPart": "Function", "rPart": ["{tracer.setFuncContextCurrent(this);}", "Ident", "\"(\"", "FunctionArgsDeclaration", "?", "\")\"", "FunctionRet", "StatementBlock"]}, {"lPart": "Op", "rPart": ["NormalOp", "|", "AuxiliaryOp"]}, {"lPart": "FunctionRet", "rPart": ["\"ret\"", "Type"]}, {"lPart": "FunctionRet", "rPart": []}, {"lPart": "NormalOp", "rPart": ["Assignment", "|", "VarDeclaration", "|", "Condition", "|", "LoopBlock", "|", "SwitchBlock", "|", "FunctionCall"]}, {"lPart": "AuxiliaryOp", "rPart": ["ExitOp", "|", "ReturnOp", "|", "BreakOp", "|", "ContinueOp"]}, {"lPart": "FunctionArgsDeclaration", "rPart": ["Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "Type", "rPart": ["{tracer.currentPFR(this);}", "(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "{tracer.putRollback();}", "Expr", "\"to\"", "{tracer.rollbackWithCurrent(this);}", "Ident", "{tracer.toPFR(\"=\");}", "Delim"]}, {"lPart": "VarDeclaration", "rPart": ["Declaration", "Delim"]}, {"lPart": "Condition", "rPart": ["{tracer.pushIf();}", "CondIf", "CondElif", "CondElse", "{tracer.putLabelIf(); }"]}, {"lPart": "LoopBlock", "rPart": ["{tracer.pushLoop();}", "LoopExec", "LoopWith", "LoopStep", "Delim", "{tracer.putLoopToHistory(); tracer.popLoop();}"]}, {"lPart": "SwitchBlock", "rPart": ["{tracer.pushSwitch();}", "\"select\"", "{tracer.putRollback();}", "Expr", "{tracer.peekSwitch().formValue(tracer); tracer.putRollback();}", "SwitchCase", "\"end\"", "Delim", "{tracer.putSwitchToHistory(); tracer.popSwitch();}"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "IdentOrFunction", "Delim"]}, {"lPart": "ExitOp", "rPart": ["\"exit\"", "Delim", "{tracer.jmpExit();}"]}, {"lPart": "ReturnOp", "rPart": ["\"return\"", "Expr", "Delim", "{tracer.toPFR(\"RET\" + tracer.getFuncContext());}"]}, {"lPart": "BreakOp", "rPart": ["\"break\"", "Delim", "{tracer.jmpBreak();}"]}, {"lPart": "ContinueOp", "rPart": ["\"continue\"", "Delim", "{tracer.jmpContinue();}"]}, {"lPart": "Declaration", "rPart": ["{tracer.putRollback();}", "Type", "{tracer.rollbackWithCurrent(this);}", "Ident"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": ["\",\"", "Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": []}, {"lPart": "Expr", "rPart": ["{tracer.incScope();}", "(", "{tracer.handleUnaryCurrent(this);}", "UnaryOperators", ")", "?", "ExprBeg", "ExprEnd", "{if (tracer.scope()==1) tracer.endExprScopeFull(); tracer.decScope();}"]}, {"lPart": "CondIf", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "{tracer.pushIfElse(); tracer.putJmpFIfElse();}", "StatementBlock", "{tracer.putJmpIf(); tracer.putLabelIfElse();}"]}, {"lPart": "CondElif", "rPart": ["CondElif0", "CondElif1"]}, {"lPart": "CondElif", "rPart": ["~", "\"?:\""]}, {"lPart": "CondElse", "rPart": ["\":\"", "StatementBlock"]}, {"lPart": "CondElse", "rPart": ["~", "\":\""]}, {"lPart": "LoopExec", "rPart": ["{tracer.putRollback();}", "\"exec\"", "StatementBlock"]}, {"lPart": "LoopWith", "rPart": ["\"with\"", "{tracer.peekLoop().setLoopVarCurrent(this);}", "Ident", "\"from\"", "{tracer.peekLoop().setBeginCurrent(this);}", "Const", "\"to\"", "{tracer.peekLoop().setEndCurrent(this);}", "Const"]}, {"lPart": "LoopStep", "rPart": ["\"step\"", "{tracer.peekLoop().setStepCurrent(this);}", "Const"]}, {"lPart": "LoopStep", "rPart": []}, {"lPart": "SwitchCase", "rPart": ["(", "\"case\"", "\"(\"", "(", "{tracer.addSwitchCase(); tracer.peekSwitchCase().setValueCurrent(this);}", "Const", "|", "{tracer.addDefautSwitchCase();}", "\"false\"", ")", "\")\"", "{tracer.putRollback();}", "StatementBlock", "*", ")", "+"]}, {"lPart": "IdentOrFunction", "rPart": ["{tracer.currentPFR(this);}", "Ident", "(", "{tracer.pushFuncCall();}", "\"(\"", "Arguments", "?", "\")\"", "{tracer.putFuncCallToHistory();}", ")", "?"]}, {"lPart": "ExprBeg", "rPart": ["(", "{tracer.beginExprScope();}", "\"(\"", "Expr", "\")\"", "{tracer.endExprScope();}", ")", "|", "Term"]}, {"lPart": "ExprEnd", "rPart": ["{tracer.handleNewOpCurrent(this);}", "BinaryOperators", "Expr"]}, {"lPart": "ExprEnd", "rPart": []}, {"lPart": "CondElif0", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "{tracer.pushIfElse(); tracer.putJmpFIfElse();}", "StatementBlock", "{tracer.putJmpIf(); tracer.putLabelIfElse();}"]}, {"lPart": "CondElif1", "rPart": ["CondElif0", "CondElif1"]}, {"lPart": "CondElif1", "rPart": ["~", "\"?:\""]}, {"lPart": "UnaryOperators", "rPart": ["NegationOperator", "|", "UniversalOperators"]}, {"lPart": "Term", "rPart": ["IdentOrFunction", "|", "(", "{tracer.currentPFR(this);}", "Const", ")"]}, {"lPart": "BinaryOperators", "rPart": ["MathOperators", "|", "LogicOperators", "|", "CompOperators", "|", "UniversalOperators"]}, {"lPart": "Arguments", "rPart": ["{tracer.incFuncCall();}", "Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": ["\",\"", "{tracer.incFuncCall();}", "Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": []}, {"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Delim", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "UniversalOperators", "rPart": ["[-+]"]}, {"lPart": "MathOperators", "rPart": ["[*/%]"]}, {"lPart": "LogicOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompOperators", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "NegationOperator", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.opStack_ = []\n    this.ifStack_ = []\n    this.elseStack_ = [] // for elif-else labels\n    this.loopStack_ = []\n    this.switchStack_ = []\n    this.funcCallStack_ = []\n\n    this.historyStack_ = []\n    this.rollbackStack_ = []\n\n    this.scopeDepth_ = 0\n    this.ifDepth_ = 0\n    this.elseDepth_ = 0\n    this.loopDepth_ = 0\n    this.switchDepth_ = 0\n\n    this.funcContext_ = \"Main\"\n}\n\nTracer.prototype = {\n    clear: function () {\n        this.opStack_ = []\n        this.ifStack_ = []\n        this.elseStack_ = []\n        this.loopStack_ = []\n        this.switchStack_ = []\n\n        this.historyStack_ = []\n        this.rollbackStack_ = []\n\n        this.scopeDepth_ = 0\n        this.ifDepth_ = 0\n        this.elseDepth_ = 0\n        this.loopDepth_ = 0\n        this.switchDepth_ = 0\n\n        this.funcContext_ = \"Main\"\n    },\n    getAll: function () {\n        return this.historyStack_.join(' ')\n    },\n    peekStack: function (stack) {\n        return stack[stack.length - 1]\n    },\n    popStack: function (stack) {\n        return stack.pop()\n    },\n    pushStack: function (stack, symbol) {\n        stack.push(symbol)\n    },\n    toPFR: function (symbol) {\n        this.historyStack_.push(symbol)\n    },\n    currentPFR: function (la) {\n        this.toPFR(la.currentLexem[1])\n    },\n    beginExprScope: function () {\n        this.pushStack(this.opStack_, \"(\")\n    },\n    endExprScope: function () {\n        while (this.opStack_.length > 0) {\n            if (this.peekStack(this.opStack_) == \"(\") {\n                this.popStack(this.opStack_)\n                return; // omitted when whole expr\n            } else {\n                this.toPFR(this.popStack(this.opStack_))\n            }\n        }\n    },\n    endExprScopeFull: function () {\n        while (this.opStack_.length > 0) {\n            if (this.peekStack(this.opStack_) == \"(\") {\n                this.popStack(this.opStack_)\n            } else {\n                this.toPFR(this.popStack(this.opStack_))\n            }\n        }\n    },\n    getPriority: function (symbol) {\n        switch (symbol) {\n            case '<':\n            case '>':\n            case '>=':\n            case '<=':\n            case '!=':\n            case '==':\n                return 2\n            case \"&&\":\n            case \"||\":\n                return 4\n            case \"+\":\n            case \"-\":\n                return 8\n            case \"%\":\n                return 16\n            case \"*\":\n            case \"/\":\n                return 32\n            // case \"(\": // ignore it, not an operator\n            //     return 64\n            case \"!\":\n                return 128\n            case \"m\": // unary\n                return 256\n        }\n        return 0\n    },\n    putRollback: function () {\n        this.rollbackStack_.push(this.historyStack_.length)\n    },\n    getRollback: function () {\n        var point = this.rollbackStack_.pop()\n        var newHistory = Array(this.historyStack_.length - point)\n        for (var i = newHistory.length - 1; i >= 0; i--)\n            newHistory[i] = this.historyStack_.pop()\n        return newHistory\n    },\n    rollback: function () {\n        var arr = this.getRollback()\n        this.historyStack_ = this.historyStack_.concat(arr)\n    },\n    rollbackWithCurrent: function (la) {\n        var arr = this.getRollback()\n        this.toPFR(la.currentLexem[1])\n        this.historyStack_ = this.historyStack_.concat(arr)\n    },\n    handleNewOp: function (op) {\n        while (this.opStack_.length > 0) {\n            if (this.getPriority(this.peekStack(this.opStack_)) >= this.getPriority(op))\n                this.toPFR(this.popStack(this.opStack_))\n            else\n                break\n        }\n        this.opStack_.push(op)\n    },\n    handleNewOpCurrent: function (la) {\n        this.handleNewOp(la.currentLexem[1])\n    },\n    handleUnary: function (op) {\n        if (op == \"-\") this.handleNewOp(\"m\")\n        else this.handleNewOp(op)\n    },\n    handleUnaryCurrent: function (la) {\n        this.handleUnary(la.currentLexem[1])\n    },\n    incScope: function () {\n        this.scopeDepth_++\n    },\n    decScope: function () {\n        this.scopeDepth_--\n    },\n    scope: function () {\n        return this.scopeDepth_\n    },\n    pushIf: function () {\n        this.pushStack(this.ifStack_, ++this.ifDepth_)\n    },\n    popIf: function () {\n        this.popStack(this.ifStack_)\n    },\n    formIfLabel: function () {\n        return \"IFEXIT\" + this.peekStack(this.ifStack_)\n    },\n    putJmpIf: function () {\n        this.toPFR(this.formIfLabel())\n        this.toPFR(\"JMP\")\n    },\n    putLabelIf: function () {\n        this.toPFR(this.formIfLabel() + \":\")\n        this.popIf()\n    },\n    pushIfElse: function () {\n        this.pushStack(this.elseStack_, ++this.elseDepth_)\n    },\n    popIfElse: function () {\n        this.popStack(this.elseStack_)\n    },\n    formIfElseLabel: function () {\n        return \"IFELSE\" + this.peekStack(this.elseStack_)\n    },\n    putJmpFIfElse: function () {\n        this.toPFR(this.formIfElseLabel())\n        this.toPFR(\"JMPF\")\n    },\n    putLabelIfElse: function () {\n        this.toPFR(this.formIfElseLabel() + \":\")\n        this.popIfElse()\n    },\n    pushLoop: function () {\n        this.loopDepth_++\n        var loop = new Loop(this.loopDepth_)\n        this.loopStack_.push(loop)\n    },\n    peekLoop: function () {\n        return this.peekStack(this.loopStack_)\n    },\n    popLoop: function () {\n        this.loopStack_.pop()\n    },\n    putLoopToHistory: function () {\n        var tempHistory = this.getRollback()\n        var loop = this.peekStack(this.loopStack_)\n        loop.putBeginToHistory(this)\n        this.historyStack_ = this.historyStack_.concat(tempHistory)\n        loop.putEndToHistory(this)\n    },\n    jmpExit: function () { // for loops\n        this.toPFR(\"EXITEND\" + this.peekStack(this.loopStack_).getId() + this.getFuncContext())\n        this.toPFR(\"JMP\")\n    },\n    jmpContinue: function () { // for loops\n        this.toPFR(\"CONTBEGIN\" + this.peekStack(this.loopStack_).getId() + this.getFuncContext())\n        this.toPFR(\"JMP\")\n    },\n    jmpBreak: function () { // for switches\n        this.toPFR(\"BREAKEND\" + this.peekStack(this.switchStack_).getId() + this.getFuncContext())\n        this.toPFR(\"JMP\")\n    },\n    getFuncContext() {\n        return this.funcContext_\n    },\n    setFuncContext(funcContext) {\n        this.funcContext_ = funcContext\n    },\n    setFuncContextCurrent(la) {\n        this.setFuncContext(la.currentLexem[1])\n    },\n    pushSwitch: function () {\n        this.switchDepth_++\n        var sw = new Switch(this.switchDepth_)\n        this.switchStack_.push(sw)\n    },\n    peekSwitch: function () {\n        return this.peekStack(this.switchStack_)\n    },\n    popSwitch: function () {\n        this.switchStack_.pop()\n    },\n    putSwitchToHistory: function () {\n        var sw = this.peekStack(this.switchStack_)\n        sw.putToHistory(this)\n    },\n    addSwitchCase: function () {\n        var sw = this.peekStack(this.switchStack_)\n        var newCase = new Case(sw.getId())\n        sw.addCase(newCase)\n    },\n    addDefautSwitchCase: function () {\n        var sw = this.peekStack(this.switchStack_)\n        var newCase = new Case(sw.getId())\n        sw.setDefaultCase(newCase)\n    },\n    peekSwitchCase: function () {\n        var sw = this.peekStack(this.switchStack_)\n        return this.peekStack(sw.getCases())\n    },\n    pushFuncCall: function () {\n        this.pushStack(this.funcCallStack_, 0)\n    },\n    popFuncCall: function () {\n        return this.popStack(this.funcCallStack_)\n    },\n    peekFuncCall: function () {\n        return this.peekStack(this.funcCallStack_)\n    },\n    incFuncCall: function () {\n        var funcCall = this.popStack(this.funcCallStack_)\n        funcCall++\n        this.pushStack(this.funcCallStack_, funcCall)\n    },\n    putFuncCallToHistory: function () {\n        var funcCall = this.popStack(this.funcCallStack_)\n        this.toPFR(\"CALLF\" + funcCall)\n    }\n}\n\nfunction Loop(id) {\n    this.loopVar_ = \"\"\n    this.begin_ = 0\n    this.end_ = 0\n    this.step_ = 1\n    this.id_ = id\n}\n\nLoop.prototype = {\n    getId() {\n        return this.id_\n    },\n    getLoopVar() {\n        return this.loopVar_\n    },\n    getBegin() {\n        return this.begin_\n    },\n    getEnd() {\n        return this.end_\n    },\n    getStep() {\n        return this.step_\n    },\n    setLoopVar(loopVar) {\n        this.loopVar_ = loopVar\n    },\n    setBegin(begin) {\n        this.begin_ = begin\n    },\n    setEnd(end) {\n        this.end_ = end\n    },\n    setStep(step) {\n        this.step_ = step\n    },\n    setLoopVarCurrent(la) {\n        this.setLoopVar(la.currentLexem[1])\n    },\n    setBeginCurrent(la) {\n        this.setBegin(la.currentLexem[1])\n    },\n    setEndCurrent(la) {\n        this.setEnd(la.currentLexem[1])\n    },\n    setStepCurrent(la) {\n        this.setStep(la.currentLexem[1])\n    },\n    putBeginToHistory(tracer) {\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(\"LOOPVAR\" + this.id_)\n\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.begin_)\n        tracer.toPFR(\"=\")\n\n        tracer.toPFR(\"LOOPBEGIN\" + this.id_ + tracer.getFuncContext() + \":\") // loop label\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.end_)\n        tracer.toPFR(\"<=\")\n\n        tracer.toPFR(\"EXITEND\" + this.id_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMPF\")\n    },\n    putEndToHistory(tracer) {\n        tracer.toPFR(\"CONTBEGIN\" + this.id_ + tracer.getFuncContext() + \":\")\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.step_)\n        tracer.toPFR(\"+\")\n        tracer.toPFR(\"=\")\n\n        tracer.toPFR(\"LOOPBEGIN\" + this.id_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMP\")\n\n        tracer.toPFR(\"EXITEND\" + this.id_ + tracer.getFuncContext() + \":\")\n    }\n}\n\nfunction Switch(id) {\n    this.cases_ = []\n    this.defaultCase_ = []\n    this.id_ = id\n}\n\nSwitch.prototype = {\n    getId() {\n        return this.id_\n    },\n    getCases() {\n        return this.cases_\n    },\n    getDefaultCase() {\n        return this.defaultCase_\n    },\n    addCase(newCase) {\n        this.cases_.push(newCase)\n    },\n    setDefaultCase(newCase) {\n        this.defaultCase_.push(newCase)\n    },\n    formValue(tracer) {\n        var tempHistory = tracer.getRollback()\n        tracer.toPFR(\"SWITCHVAR\" + this.id_)\n        tracer.historyStack_ = tracer.historyStack_.concat(tempHistory)\n        tracer.toPFR(\"=\")\n    },\n    putToHistory(tracer) {\n        const caseBodies = [];\n        if (this.defaultCase_.length > 0)\n            caseBodies.push(this.defaultCase_[0].getDefRollbackBlock(tracer))\n        for (var i = this.cases_.length - 1; i >= 0; i--) {\n            caseBodies.push(this.cases_[i].getRollbackBlock(tracer))\n        }\n        for (var i = caseBodies.length - 1; i >= 0; i--)\n            tracer.historyStack_ = tracer.historyStack_.concat(caseBodies[i])\n        this.putMapToHistory(tracer)\n        tracer.toPFR(\"BREAKEND\" + this.id_ + tracer.getFuncContext() + \":\")\n    },\n    putMapToHistory(tracer) {\n        if (this.defaultCase_.length > 0) {\n            this.defaultCase_[0].putDefCondToHistory(tracer)\n        }\n        for (var i = this.cases_.length - 1; i >= 0; i--) {\n            this.cases_[i].putCondToHistory(tracer)\n        }\n        tracer.popStack(tracer.rollbackStack_)\n    }\n}\n\nfunction Case(id) {\n    this.value_ = \"\"\n    this.id_ = id\n}\n\nCase.prototype = {\n    getId() {\n        return this.id_\n    },\n    getValue() {\n        return this.value_\n    },\n    setValue(value) {\n        this.value_ = value\n    },\n    setValueCurrent(la) {\n        this.setValue(la.currentLexem[1])\n    },\n    putCondToHistory(tracer) {\n        var point = tracer.peekStack(tracer.rollbackStack_)\n        var tempHistory = Array(tracer.historyStack_.length - point)\n        for (var i = tempHistory.length - 1; i >= 0; i--)\n            tempHistory[i] = tracer.historyStack_.pop()\n        tracer.toPFR(\"SWITCHVAR\" + this.id_)\n        tracer.toPFR(this.value_)\n        tracer.toPFR(\"!=\")\n        tracer.toPFR(\"CASEIN\" + this.id_ + \"_\" + this.value_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMPF\")\n        tracer.historyStack_ = tracer.historyStack_.concat(tempHistory)\n    },\n    putDefCondToHistory(tracer) {\n        var point = tracer.peekStack(tracer.rollbackStack_)\n        var tempHistory = Array(tracer.historyStack_.length - point)\n        for (var i = tempHistory.length - 1; i >= 0; i--)\n            tempHistory[i] = tracer.historyStack_.pop()\n        tracer.toPFR(\"DEFAULTCASE\" + this.id_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMP\")\n        tracer.historyStack_ = tracer.historyStack_.concat(tempHistory)\n    },\n    getRollbackBlock(tracer) {\n        const body = tracer.getRollback();\n        const label = [\"CASEIN\" + this.id_ + \"_\" + this.value_ + tracer.getFuncContext() + \":\"];\n        return label.concat(body);\n    },\n    getDefRollbackBlock(tracer) {\n        const body = tracer.getRollback();\n        const label = [\"DEFAULTCASE\" + this.id_ + tracer.getFuncContext() + \":\"];\n        return label.concat(body);\n    }\n}\n\nvar tracer = new Tracer()"}}{"_id": {"$oid": "67fde8fd8558742cb4336c22"}, "rules": "ShenaniganScript5", "data": {"rList": [{"lPart": "Program", "rPart": ["(", "StatementBlock", "|", "Function", ")", "+"]}, {"lPart": "StatementBlock", "rPart": ["Op", "|", "(", "\"{\"", "Op", "*", "\"}\"", ")"]}, {"lPart": "Function", "rPart": ["Ident", "\"(\"", "FunctionArgsDeclaration", "?", "\")\"", "FunctionRet", "StatementBlock"]}, {"lPart": "Op", "rPart": ["NormalOp", "|", "AuxiliaryOp"]}, {"lPart": "FunctionRet", "rPart": ["\"ret\"", "Type"]}, {"lPart": "FunctionRet", "rPart": []}, {"lPart": "NormalOp", "rPart": ["Assignment", "|", "VarDeclaration", "|", "Condition", "|", "LoopBlock", "|", "SwitchBlock", "|", "FunctionCall"]}, {"lPart": "AuxiliaryOp", "rPart": ["ExitOp", "|", "ReturnOp", "|", "BreakOp", "|", "ContinueOp"]}, {"lPart": "FunctionArgsDeclaration", "rPart": ["Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "Ident", "Delim"]}, {"lPart": "VarDeclaration", "rPart": ["Declaration", "Delim"]}, {"lPart": "Condition", "rPart": ["CondIf", "CondElif", "CondElse"]}, {"lPart": "LoopBlock", "rPart": ["LoopExec", "LoopWith", "LoopStep", "Delim"]}, {"lPart": "SwitchBlock", "rPart": ["\"select\"", "Expr", "SwitchCase", "\"end\"", "Delim"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "IdentOrFunction", "Delim"]}, {"lPart": "ExitOp", "rPart": ["\"exit\"", "Delim"]}, {"lPart": "ReturnOp", "rPart": ["\"return\"", "Expr", "Delim"]}, {"lPart": "BreakOp", "rPart": ["\"break\"", "Delim"]}, {"lPart": "ContinueOp", "rPart": ["\"continue\"", "Delim"]}, {"lPart": "Declaration", "rPart": ["Type", "Ident"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": ["\",\"", "Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": []}, {"lPart": "Expr", "rPart": ["UnaryOperators", "?", "ExprBeg", "ExprEnd"]}, {"lPart": "CondIf", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "StatementBlock"]}, {"lPart": "CondElif", "rPart": ["CondElif0", "CondElif1"]}, {"lPart": "CondElif", "rPart": ["~", "\"?:\""]}, {"lPart": "CondElse", "rPart": ["~", "\":\""]}, {"lPart": "CondElse", "rPart": ["CondElse0", "CondElse1"]}, {"lPart": "LoopExec", "rPart": ["\"exec\"", "StatementBlock"]}, {"lPart": "LoopWith", "rPart": ["\"with\"", "Ident", "\"from\"", "Const", "\"to\"", "Const"]}, {"lPart": "LoopStep", "rPart": ["\"step\"", "Const"]}, {"lPart": "LoopStep", "rPart": []}, {"lPart": "SwitchCase", "rPart": ["(", "\"case\"", "\"(\"", "(", "Const", "|", "\"false\"", ")", "\")\"", "StatementBlock", "*", ")", "+"]}, {"lPart": "IdentOrFunction", "rPart": ["Ident", "(", "\"(\"", "Arguments", "?", "\")\"", ")", "?"]}, {"lPart": "ExprBeg", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "Term"]}, {"lPart": "ExprEnd", "rPart": ["BinaryOperators", "Expr"]}, {"lPart": "ExprEnd", "rPart": []}, {"lPart": "CondElif0", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "StatementBlock"]}, {"lPart": "CondElif1", "rPart": ["CondElif0", "CondElif1"]}, {"lPart": "CondElif1", "rPart": ["~", "\"?:\""]}, {"lPart": "CondElse0", "rPart": ["\":\"", "StatementBlock"]}, {"lPart": "CondElse1", "rPart": ["CondElse0", "CondElse1"]}, {"lPart": "CondElse1", "rPart": ["~", "\":\""]}, {"lPart": "UnaryOperators", "rPart": ["\"!\"", "|", "UniversalOperators"]}, {"lPart": "Term", "rPart": ["IdentOrFunction", "|", "Const"]}, {"lPart": "BinaryOperators", "rPart": ["MathOperators", "|", "LogicOperators", "|", "CompOperators", "|", "UniversalOperators"]}, {"lPart": "Arguments", "rPart": ["Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": ["\",\"", "Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": []}, {"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Delim", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "UniversalOperators", "rPart": ["[-+]"]}, {"lPart": "MathOperators", "rPart": ["[*/%]"]}, {"lPart": "LogicOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompOperators", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6814a8748558742cb433ad72"}, "rules": "ShenaniganScript6", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "StatementBlock", "rPart": ["(", "Op", "|", "(", "\"{\"", "Op", "*", "\"}\"", ")", ")"]}, {"lPart": "Function", "rPart": ["{tracer.setFuncContextCurrent(this);}", "Ident", "\"(\"", "FunctionArgsDeclaration", "?", "\")\"", "FunctionRet", "StatementBlock"]}, {"lPart": "Op", "rPart": ["NormalOp", "|", "AuxiliaryOp"]}, {"lPart": "FunctionRet", "rPart": ["\"ret\"", "Type", "{tracer.popStack(tracer.historyStack_);}"]}, {"lPart": "FunctionRet", "rPart": []}, {"lPart": "NormalOp", "rPart": ["Assignment", "|", "VarDeclaration", "|", "Condition", "|", "LoopBlock", "|", "SwitchBlock", "|", "FunctionCall"]}, {"lPart": "AuxiliaryOp", "rPart": ["ExitOp", "|", "ReturnOp", "|", "BreakOp", "|", "ContinueOp"]}, {"lPart": "FunctionArgsDeclaration", "rPart": ["Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "Type", "rPart": ["{tracer.currentPFR(this);}", "(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "{tracer.putRollback();}", "Expr", "\"to\"", "{tracer.rollbackWithCurrent(this);}", "Ident", "{tracer.toPFR(\"=\");}", "Delim"]}, {"lPart": "VarDeclaration", "rPart": ["Declaration", "Delim"]}, {"lPart": "Condition", "rPart": ["{tracer.pushIf();}", "CondIf", "CondElif", "CondElse", "{tracer.putLabelIf(); }"]}, {"lPart": "LoopBlock", "rPart": ["{tracer.pushLoop();}", "LoopExec", "LoopWith", "LoopStep", "Delim", "{tracer.putLoopToHistory(); tracer.popLoop();}"]}, {"lPart": "SwitchBlock", "rPart": ["{tracer.pushSwitch();}", "\"select\"", "{tracer.putRollback();}", "Expr", "{tracer.peekSwitch().formValue(tracer); tracer.putRollback();}", "SwitchCase", "\"end\"", "Delim", "{tracer.putSwitchToHistory(); tracer.popSwitch();}"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "IdentOrFunction", "Delim"]}, {"lPart": "ExitOp", "rPart": ["\"exit\"", "Delim", "{tracer.jmpExit();}"]}, {"lPart": "ReturnOp", "rPart": ["\"return\"", "Expr", "Delim", "{tracer.toPFR(\"RET\" + tracer.getFuncContext());}"]}, {"lPart": "BreakOp", "rPart": ["\"break\"", "Delim", "{tracer.jmpBreak();}"]}, {"lPart": "ContinueOp", "rPart": ["\"continue\"", "Delim", "{tracer.jmpContinue();}"]}, {"lPart": "Declaration", "rPart": ["{tracer.putRollback();}", "Type", "{tracer.rollbackWithCurrent(this);}", "Ident"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": ["\",\"", "Declaration", "FunctionArgsDeclaration0"]}, {"lPart": "FunctionArgsDeclaration0", "rPart": []}, {"lPart": "Expr", "rPart": ["{tracer.incScope();}", "(", "{tracer.handleUnaryCurrent(this);}", "UnaryOperators", ")", "?", "ExprBeg", "ExprEnd", "{if (tracer.scope()==1) tracer.endExprScopeFull(); tracer.decScope();}"]}, {"lPart": "CondIf", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "{tracer.pushIfElse(); tracer.putJmpFIfElse();}", "StatementBlock", "{tracer.putJmpIf(); tracer.putLabelIfElse();}"]}, {"lPart": "CondElif", "rPart": ["CondElif0", "CondElif1"]}, {"lPart": "CondElif", "rPart": ["~", "\"?:\""]}, {"lPart": "CondElse", "rPart": ["\":\"", "StatementBlock"]}, {"lPart": "CondElse", "rPart": ["~", "\":\""]}, {"lPart": "LoopExec", "rPart": ["{tracer.putRollback();}", "\"exec\"", "StatementBlock"]}, {"lPart": "LoopWith", "rPart": ["\"with\"", "{tracer.peekLoop().setLoopVarCurrent(this);}", "Ident", "\"from\"", "{tracer.peekLoop().setBeginCurrent(this);}", "Const", "\"to\"", "{tracer.peekLoop().setEndCurrent(this);}", "Const"]}, {"lPart": "LoopStep", "rPart": ["\"step\"", "{tracer.peekLoop().setStepCurrent(this);}", "Const"]}, {"lPart": "LoopStep", "rPart": []}, {"lPart": "SwitchCase", "rPart": ["(", "\"case\"", "\"(\"", "(", "{tracer.addSwitchCase(); tracer.peekSwitchCase().setValueCurrent(this);}", "Const", "|", "{tracer.addDefautSwitchCase();}", "\"false\"", ")", "\")\"", "{tracer.putRollback();}", "StatementBlock", "*", ")", "+"]}, {"lPart": "IdentOrFunction", "rPart": ["{tracer.currentPFR(this);}", "Ident", "(", "{tracer.pushFuncCall();}", "\"(\"", "Arguments", "?", "\")\"", "{tracer.putFuncCallToHistory();}", ")", "?"]}, {"lPart": "ExprBeg", "rPart": ["(", "{tracer.beginExprScope();}", "\"(\"", "Expr", "\")\"", "{tracer.endExprScope();}", ")", "|", "Term"]}, {"lPart": "ExprEnd", "rPart": ["{tracer.handleNewOpCurrent(this);}", "BinaryOperators", "Expr"]}, {"lPart": "ExprEnd", "rPart": []}, {"lPart": "CondElif0", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "{tracer.pushIfElse(); tracer.putJmpFIfElse();}", "StatementBlock", "{tracer.putJmpIf(); tracer.putLabelIfElse();}"]}, {"lPart": "CondElif1", "rPart": ["CondElif0", "CondElif1"]}, {"lPart": "CondElif1", "rPart": ["~", "\"?:\""]}, {"lPart": "UnaryOperators", "rPart": ["NegationOperator", "|", "UniversalOperators"]}, {"lPart": "Term", "rPart": ["IdentOrFunction", "|", "(", "{tracer.currentPFR(this);}", "Const", ")"]}, {"lPart": "BinaryOperators", "rPart": ["MathOperators", "|", "LogicOperators", "|", "CompOperators", "|", "UniversalOperators"]}, {"lPart": "Arguments", "rPart": ["{tracer.incFuncCall();}", "Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": ["\",\"", "{tracer.incFuncCall();}", "Term", "Arguments0"]}, {"lPart": "Arguments0", "rPart": []}, {"lPart": "Ident", "rPart": ["[a-zA-Zа-яА-Я]", "+", "[0-9]", "{,3}"]}, {"lPart": "Delim", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "Const", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "Const", "rPart": ["[0-9]", "?", "[.]", "[0-9]", "+"]}, {"lPart": "Const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\'\"]", ")", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "UniversalOperators", "rPart": ["[-+]"]}, {"lPart": "MathOperators", "rPart": ["[*/%]"]}, {"lPart": "LogicOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompOperators", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "Comments", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[\\t \\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "NegationOperator", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.opStack_ = []\n    this.ifStack_ = []\n    this.elseStack_ = [] // for elif-else labels\n    this.loopStack_ = []\n    this.switchStack_ = []\n    this.funcCallStack_ = []\n\n    this.historyStack_ = []\n    this.rollbackStack_ = []\n\n    this.scopeDepth_ = 0\n    this.ifDepth_ = 0\n    this.elseDepth_ = 0\n    this.loopDepth_ = 0\n    this.switchDepth_ = 0\n\n    this.funcContext_ = \"Main\"\n}\n\nTracer.prototype = {\n    clear: function () {\n        this.opStack_ = []\n        this.ifStack_ = []\n        this.elseStack_ = []\n        this.loopStack_ = []\n        this.switchStack_ = []\n\n        this.historyStack_ = []\n        this.rollbackStack_ = []\n\n        this.scopeDepth_ = 0\n        this.ifDepth_ = 0\n        this.elseDepth_ = 0\n        this.loopDepth_ = 0\n        this.switchDepth_ = 0\n\n        this.funcContext_ = \"Main\"\n    },\n    getAll: function () {\n        return this.historyStack_.join(' ')\n    },\n    peekStack: function (stack) {\n        return stack[stack.length - 1]\n    },\n    popStack: function (stack) {\n        return stack.pop()\n    },\n    pushStack: function (stack, symbol) {\n        stack.push(symbol)\n    },\n    toPFR: function (symbol) {\n        this.historyStack_.push(symbol)\n    },\n    currentPFR: function (la) {\n        this.toPFR(la.currentLexem[1])\n    },\n    beginExprScope: function () {\n        this.pushStack(this.opStack_, \"(\")\n    },\n    endExprScope: function () {\n        while (this.opStack_.length > 0) {\n            if (this.peekStack(this.opStack_) == \"(\") {\n                this.popStack(this.opStack_)\n                return; // omitted when whole expr\n            } else {\n                this.toPFR(this.popStack(this.opStack_))\n            }\n        }\n    },\n    endExprScopeFull: function () {\n        while (this.opStack_.length > 0) {\n            if (this.peekStack(this.opStack_) == \"(\") {\n                this.popStack(this.opStack_)\n            } else {\n                this.toPFR(this.popStack(this.opStack_))\n            }\n        }\n    },\n    getPriority: function (symbol) {\n        switch (symbol) {\n            case '<':\n            case '>':\n            case '>=':\n            case '<=':\n            case '!=':\n            case '==':\n                return 2\n            case \"&&\":\n            case \"||\":\n                return 4\n            case \"+\":\n            case \"-\":\n                return 8\n            case \"%\":\n                return 16\n            case \"*\":\n            case \"/\":\n                return 32\n            // case \"(\": // ignore it, not an operator\n            //     return 64\n            case \"!\":\n                return 128\n            case \"m\": // unary\n                return 256\n        }\n        return 0\n    },\n    putRollback: function () {\n        this.rollbackStack_.push(this.historyStack_.length)\n    },\n    getRollback: function () {\n        var point = this.rollbackStack_.pop()\n        var newHistory = Array(this.historyStack_.length - point)\n        for (var i = newHistory.length - 1; i >= 0; i--)\n            newHistory[i] = this.historyStack_.pop()\n        return newHistory\n    },\n    rollback: function () {\n        var arr = this.getRollback()\n        this.historyStack_ = this.historyStack_.concat(arr)\n    },\n    rollbackWithCurrent: function (la) {\n        var arr = this.getRollback()\n        this.toPFR(la.currentLexem[1])\n        this.historyStack_ = this.historyStack_.concat(arr)\n    },\n    handleNewOp: function (op) {\n        while (this.opStack_.length > 0) {\n            if (this.getPriority(this.peekStack(this.opStack_)) >= this.getPriority(op))\n                this.toPFR(this.popStack(this.opStack_))\n            else\n                break\n        }\n        this.opStack_.push(op)\n    },\n    handleNewOpCurrent: function (la) {\n        this.handleNewOp(la.currentLexem[1])\n    },\n    handleUnary: function (op) {\n        if (op == \"-\") this.handleNewOp(\"m\")\n        else this.handleNewOp(op)\n    },\n    handleUnaryCurrent: function (la) {\n        this.handleUnary(la.currentLexem[1])\n    },\n    incScope: function () {\n        this.scopeDepth_++\n    },\n    decScope: function () {\n        this.scopeDepth_--\n    },\n    scope: function () {\n        return this.scopeDepth_\n    },\n    pushIf: function () {\n        this.pushStack(this.ifStack_, ++this.ifDepth_)\n    },\n    popIf: function () {\n        this.popStack(this.ifStack_)\n    },\n    formIfLabel: function () {\n        return \"IFEXIT\" + this.peekStack(this.ifStack_)\n    },\n    putJmpIf: function () {\n        this.toPFR(this.formIfLabel())\n        this.toPFR(\"JMP\")\n    },\n    putLabelIf: function () {\n        this.toPFR(this.formIfLabel() + \":\")\n        this.popIf()\n    },\n    pushIfElse: function () {\n        this.pushStack(this.elseStack_, ++this.elseDepth_)\n    },\n    popIfElse: function () {\n        this.popStack(this.elseStack_)\n    },\n    formIfElseLabel: function () {\n        return \"IFELSE\" + this.peekStack(this.elseStack_)\n    },\n    putJmpFIfElse: function () {\n        this.toPFR(this.formIfElseLabel())\n        this.toPFR(\"JMPF\")\n    },\n    putLabelIfElse: function () {\n        this.toPFR(this.formIfElseLabel() + \":\")\n        this.popIfElse()\n    },\n    pushLoop: function () {\n        this.loopDepth_++\n        var loop = new Loop(this.loopDepth_)\n        this.loopStack_.push(loop)\n    },\n    peekLoop: function () {\n        return this.peekStack(this.loopStack_)\n    },\n    popLoop: function () {\n        this.loopStack_.pop()\n    },\n    putLoopToHistory: function () {\n        var tempHistory = this.getRollback()\n        var loop = this.peekStack(this.loopStack_)\n        loop.putBeginToHistory(this)\n        this.historyStack_ = this.historyStack_.concat(tempHistory)\n        loop.putEndToHistory(this)\n    },\n    jmpExit: function () { // for loops\n        this.toPFR(\"EXITEND\" + this.peekStack(this.loopStack_).getId() + this.getFuncContext())\n        this.toPFR(\"JMP\")\n    },\n    jmpContinue: function () { // for loops\n        this.toPFR(\"CONTBEGIN\" + this.peekStack(this.loopStack_).getId() + this.getFuncContext())\n        this.toPFR(\"JMP\")\n    },\n    jmpBreak: function () { // for switches\n        this.toPFR(\"BREAKEND\" + this.peekStack(this.switchStack_).getId() + this.getFuncContext())\n        this.toPFR(\"JMP\")\n    },\n    getFuncContext() {\n        return this.funcContext_\n    },\n    setFuncContext(funcContext) {\n        this.funcContext_ = funcContext\n    },\n    setFuncContextCurrent(la) {\n        this.setFuncContext(la.currentLexem[1])\n    },\n    pushSwitch: function () {\n        this.switchDepth_++\n        var sw = new Switch(this.switchDepth_)\n        this.switchStack_.push(sw)\n    },\n    peekSwitch: function () {\n        return this.peekStack(this.switchStack_)\n    },\n    popSwitch: function () {\n        this.switchStack_.pop()\n    },\n    putSwitchToHistory: function () {\n        var sw = this.peekStack(this.switchStack_)\n        sw.putToHistory(this)\n    },\n    addSwitchCase: function () {\n        var sw = this.peekStack(this.switchStack_)\n        var newCase = new Case(sw.getId())\n        sw.addCase(newCase)\n    },\n    addDefautSwitchCase: function () {\n        var sw = this.peekStack(this.switchStack_)\n        var newCase = new Case(sw.getId())\n        sw.setDefaultCase(newCase)\n    },\n    peekSwitchCase: function () {\n        var sw = this.peekStack(this.switchStack_)\n        return this.peekStack(sw.getCases())\n    },\n    pushFuncCall: function () {\n        this.pushStack(this.funcCallStack_, 0)\n    },\n    popFuncCall: function () {\n        return this.popStack(this.funcCallStack_)\n    },\n    peekFuncCall: function () {\n        return this.peekStack(this.funcCallStack_)\n    },\n    incFuncCall: function () {\n        var funcCall = this.popStack(this.funcCallStack_)\n        funcCall++\n        this.pushStack(this.funcCallStack_, funcCall)\n    },\n    putFuncCallToHistory: function () {\n        var funcCall = this.popStack(this.funcCallStack_)\n        this.toPFR(\"CALLF\" + funcCall)\n    }\n}\n\nfunction Loop(id) {\n    this.loopVar_ = \"\"\n    this.begin_ = 0\n    this.end_ = 0\n    this.step_ = 1\n    this.id_ = id\n}\n\nLoop.prototype = {\n    getId() {\n        return this.id_\n    },\n    getLoopVar() {\n        return this.loopVar_\n    },\n    getBegin() {\n        return this.begin_\n    },\n    getEnd() {\n        return this.end_\n    },\n    getStep() {\n        return this.step_\n    },\n    setLoopVar(loopVar) {\n        this.loopVar_ = loopVar\n    },\n    setBegin(begin) {\n        this.begin_ = begin\n    },\n    setEnd(end) {\n        this.end_ = end\n    },\n    setStep(step) {\n        this.step_ = step\n    },\n    setLoopVarCurrent(la) {\n        this.setLoopVar(la.currentLexem[1])\n    },\n    setBeginCurrent(la) {\n        this.setBegin(la.currentLexem[1])\n    },\n    setEndCurrent(la) {\n        this.setEnd(la.currentLexem[1])\n    },\n    setStepCurrent(la) {\n        this.setStep(la.currentLexem[1])\n    },\n    putBeginToHistory(tracer) {\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(\"LOOPVAR\" + this.id_)\n\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.begin_)\n        tracer.toPFR(\"=\")\n\n        tracer.toPFR(\"LOOPBEGIN\" + this.id_ + tracer.getFuncContext() + \":\") // loop label\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.end_)\n        tracer.toPFR(\"<=\")\n\n        tracer.toPFR(\"EXITEND\" + this.id_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMPF\")\n    },\n    putEndToHistory(tracer) {\n        tracer.toPFR(\"CONTBEGIN\" + this.id_ + tracer.getFuncContext() + \":\")\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.loopVar_)\n        tracer.toPFR(this.step_)\n        tracer.toPFR(\"+\")\n        tracer.toPFR(\"=\")\n\n        tracer.toPFR(\"LOOPBEGIN\" + this.id_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMP\")\n\n        tracer.toPFR(\"EXITEND\" + this.id_ + tracer.getFuncContext() + \":\")\n    }\n}\n\nfunction Switch(id) {\n    this.cases_ = []\n    this.defaultCase_ = []\n    this.id_ = id\n}\n\nSwitch.prototype = {\n    getId() {\n        return this.id_\n    },\n    getCases() {\n        return this.cases_\n    },\n    getDefaultCase() {\n        return this.defaultCase_\n    },\n    addCase(newCase) {\n        this.cases_.push(newCase)\n    },\n    setDefaultCase(newCase) {\n        this.defaultCase_.push(newCase)\n    },\n    formValue(tracer) {\n        var tempHistory = tracer.getRollback()\n        tracer.toPFR(\"SWITCHVAR\" + this.id_)\n        tracer.historyStack_ = tracer.historyStack_.concat(tempHistory)\n        tracer.toPFR(\"=\")\n    },\n    putToHistory(tracer) {\n        const caseBodies = [];\n        if (this.defaultCase_.length > 0)\n            caseBodies.push(this.defaultCase_[0].getDefRollbackBlock(tracer))\n        for (var i = this.cases_.length - 1; i >= 0; i--) {\n            caseBodies.push(this.cases_[i].getRollbackBlock(tracer))\n        }\n        for (var i = caseBodies.length - 1; i >= 0; i--)\n            tracer.historyStack_ = tracer.historyStack_.concat(caseBodies[i])\n        this.putMapToHistory(tracer)\n        tracer.toPFR(\"BREAKEND\" + this.id_ + tracer.getFuncContext() + \":\")\n    },\n    putMapToHistory(tracer) {\n        if (this.defaultCase_.length > 0) {\n            this.defaultCase_[0].putDefCondToHistory(tracer)\n        }\n        for (var i = this.cases_.length - 1; i >= 0; i--) {\n            this.cases_[i].putCondToHistory(tracer)\n        }\n        tracer.popStack(tracer.rollbackStack_)\n    }\n}\n\nfunction Case(id) {\n    this.value_ = \"\"\n    this.id_ = id\n}\n\nCase.prototype = {\n    getId() {\n        return this.id_\n    },\n    getValue() {\n        return this.value_\n    },\n    setValue(value) {\n        this.value_ = value\n    },\n    setValueCurrent(la) {\n        this.setValue(la.currentLexem[1])\n    },\n    putCondToHistory(tracer) {\n        var point = tracer.peekStack(tracer.rollbackStack_)\n        var tempHistory = Array(tracer.historyStack_.length - point)\n        for (var i = tempHistory.length - 1; i >= 0; i--)\n            tempHistory[i] = tracer.historyStack_.pop()\n        tracer.toPFR(\"SWITCHVAR\" + this.id_)\n        tracer.toPFR(this.value_)\n        tracer.toPFR(\"!=\")\n        tracer.toPFR(\"CASEIN\" + this.id_ + \"_\" + this.value_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMPF\")\n        tracer.historyStack_ = tracer.historyStack_.concat(tempHistory)\n    },\n    putDefCondToHistory(tracer) {\n        var point = tracer.peekStack(tracer.rollbackStack_)\n        var tempHistory = Array(tracer.historyStack_.length - point)\n        for (var i = tempHistory.length - 1; i >= 0; i--)\n            tempHistory[i] = tracer.historyStack_.pop()\n        tracer.toPFR(\"DEFAULTCASE\" + this.id_ + tracer.getFuncContext())\n        tracer.toPFR(\"JMP\")\n        tracer.historyStack_ = tracer.historyStack_.concat(tempHistory)\n    },\n    getRollbackBlock(tracer) {\n        const body = tracer.getRollback();\n        const label = [\"CASEIN\" + this.id_ + \"_\" + this.value_ + tracer.getFuncContext() + \":\"];\n        return label.concat(body);\n    },\n    getDefRollbackBlock(tracer) {\n        const body = tracer.getRollback();\n        const label = [\"DEFAULTCASE\" + this.id_ + tracer.getFuncContext() + \":\"];\n        return label.concat(body);\n    }\n}\n\nvar tracer = new Tracer()"}}},
{"FIO":"Хайрулин А.В.","Collection":"214322154",{"_id": {"$oid": "65df0c1e4b5d9e0496a757ea"}, "rules": "l1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}], "extension": ""}}{"_id": {"$oid": "65df0c7e4b5d9e0496a757fa"}, "tune": {"language": "js", "scanner": "", "parser": "", "saving": "-4", "deltat": 0, "assist": 1}}},
{"FIO":"Сафрошкина А.И.","Collection":"242151511",{"_id": {"$oid": "67beea1daf563521c9d598f2"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signbin", "rPart": ["[*/&|><=]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67beebbaaf563521c9d5990e"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67cffa6faf563521c9d5d7ed"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "assignSign", "rPart": ["[<]", "[-]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "assign", "rPart": ["id", "assignSign", "Expr", "del"]}, {"lPart": "del", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "signex", "Expr", ")", "?"]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "logExpr", "\")\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "const", ")", "logic", "(", "id", "|", "const", ")"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "loopBlock", "\"}\"", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "loopBlock", "rPart": ["(", "block", ")", "(", "\"retire\"", "\";\"", ")", "?", "(", "loopBlock", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "\"{\"", "switchBody", "\"}\"", "(", "\"case\"", "\"(\"", "\"false\"", "\")\"", ")", "?", "\"end\""]}, {"lPart": "switchBody", "rPart": ["\"case\"", "const", "block", "(", "\"break\"", "del", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"else\"", "\"{\"", "block", "\"}\""]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "\")\"", "\"{\"", "block", "\"}\"", "\"->\"", "id"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3aab94635a960233ade9c"}, "rules": "lab3", "data": {"rList": [{"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "\"{\"", "block", "\"}\"", "\"->\"", "id"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "Expr", "delimetr"]}, {"lPart": "Expr", "rPart": ["(", "signun", "|", "signex", ")", "?", "(", "id", "|", "const", ")", "(", "(", "signex", "|", "logic", "|", "compare", "|", "signbin", ")", "Expr", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "\"{\"", "block", "\"}\"", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "delimetr", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "switchBody", "(", "\"case\"", "\"(\"", "\"false\"", "\")\"", ")", "?", "\"end\""]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "switchBody", "rPart": ["\"case\"", "\"(\"", "const", "\")\"", "\"{\"", "block", "\"}\"", "(", "\"break\"", "delimetr", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "operator", "rPart": ["assign", "|", "loop", "|", "switch", "|", "cond", "|", "func"]}, {"lPart": "condElse", "rPart": ["\"else\"", "\"{\"", "block", "\"}\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "Program", "rPart": ["operator", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e4ddab4635a960233ae865"}, "rules": "lab33", "data": {"rList": [{"lPart": "start", "rPart": ["(", "func", "|", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "block", "\"->\"", "id"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "block", "(", "\"break\"", "\";\"", ")", "?", ")", "+", "\"end\""]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "block", "|", "operator", ")", "condElse"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["SimpleExpr", "(", "(", "signex", "|", "logic", "|", "compare", "|", "signbin", ")", "SimpleExpr", ")", "*"]}, {"lPart": "condElse", "rPart": ["\"else\"", "(", "block", "|", "operator", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"else\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "SimpleExpr", "rPart": [":", "(", "signun", "|", "signex", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", "|", "const", "|", "return", ")"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f64dfd8558742cb433457d"}, "rules": "lab4", "data": {"rList": [{"lPart": "start", "rPart": ["(", "func", "|", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "block", "\"->\"", "id"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "block", "(", "\"break\"", "\";\"", ")", "?", ")", "+", "\"end\""]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "block", "|", "operator", ")", "condElse"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["SimpleExpr", "(", "(", "signex", "|", "logic", "|", "compare", "|", "signbin", ")", "SimpleExpr", ")", "*"]}, {"lPart": "condElse", "rPart": ["\"else\"", "(", "block", "|", "operator", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"else\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "SimpleExpr", "rPart": ["(", "signun", "|", "signex", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", "|", "const", "|", "return", ")"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f651c78558742cb4334597"}, "rules": "lab5", "data": {"rList": [{"lPart": "start", "rPart": ["(", "func", "|", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "block", "\"->\"", "id"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "block", "(", "\"break\"", "\";\"", ")", "?", ")", "+", "\"end\""]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "block", "|", "operator", ")", "condElse"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["SimpleExpr", "(", "(", "signex", "|", "logic", "|", "compare", "|", "signbin", ")", "SimpleExpr", ")", "*"]}, {"lPart": "condElse", "rPart": ["\"else\"", "(", "block", "|", "operator", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"else\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "SimpleExpr", "rPart": ["(", "signun", "|", "signex", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", "|", "const", "|", "return", ")"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68095e718558742cb4338f99"}, "rules": "lab6t", "data": {"rList": [{"lPart": "start", "rPart": ["(", "func", "|", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "block", "\"->\"", "id", "\";\""]}, {"lPart": "assign", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"<-\"", "Expr", "{ while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\"); }", "\";\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "block", "(", "\"break\"", "\";\"", ")", "?", ")", "+", "\"end\""]}, {"lPart": "cond", "rPart": ["{ctlStk.push(++whileCnt); toPFR(\"Label_if_\" + peek(ctlStk) + \":\");}", "\"by\"", "\"(\"", "Expr", "\")\"", "{toPFR(\"Label_else_\" + peek(ctlStk)); toPFR(\"JmpOnFalse\");}", "block", "{toPFR(\"Label_end_\" + peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label_else_\" + peek(ctlStk) + \":\");}", "condElse"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\"); }", "\"(\"", "Expr", "{ if (peek(opStk) == \"(\") opStk.pop(); }", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{ if (opStk.length > 0 && getPriority(peek(opStk)) >= getPriority(this.currentLexem[1])) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]); }", "(", "signex", "|", "logic", "|", "compare", "|", "signbin", ")", "Expr", "{ if (opStk.length > 0) if (peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "condElse", "rPart": ["\"else\"", "(", "block", "|", "operator", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"else\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", "|", "const", "|", "return", ")"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n}\nTracer.prototype = {\n    put: function (b) {\n        this.history.push(b);\n    },\n    getAll: function () {\n        return this.history.join(\" \");\n    },\n    clear: function () {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk = [];\nvar whileCnt = 0;\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\" || s == \"-\") return 10;\n    if (s == \"*\" || s == \"/\") return 20;\n    return 0;\n}\n"}}{"_id": {"$oid": "6809aa588558742cb433912b"}, "rules": "lab6", "data": {"rList": [{"lPart": "start", "rPart": ["(", "func", "|", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "block", "\"->\"", "id", "\";\""]}, {"lPart": "assign", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"<-\"", "Expr", "{ while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\"); }", "\";\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "block", "(", "\"break\"", "\";\"", ")", "?", ")", "+", "\"end\""]}, {"lPart": "cond", "rPart": ["{ctlStk.push(++whileCnt); toPFR(\"Label_if_\" + peek(ctlStk) + \":\");}", "\"by\"", "\"(\"", "Expr", "\")\"", "{toPFR(\"Label_else_\" + peek(ctlStk)); toPFR(\"JmpOnFalse\");}", "block", "{toPFR(\"Label_end_\" + peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label_else_\" + peek(ctlStk) + \":\");}", "condElse"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\"); }", "\"(\"", "Expr", "{ if (peek(opStk) == \"(\") opStk.pop(); }", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{ if (opStk.length > 0 && getPriority(peek(opStk)) >= getPriority(this.currentLexem[1])) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]); }", "(", "signex", "|", "logic", "|", "compare", "|", "signbin", ")", "Expr", "{ if (opStk.length > 0) if (peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "condElse", "rPart": ["\"else\"", "(", "block", "|", "operator", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"else\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", "|", "const", "|", "return", ")"]}, {"lPart": "type", "rPart": ["\"const2\"", "|", "\"const8\"", "|", "\"const10\"", "|", "\"constfloat\"", "|", "\"conststr\"", "|", "\"constchar\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constchar", "|", "conststr", "|", "constfloat"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signex", "rPart": ["[+-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "signbin", "rPart": ["[*/&|]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "[']"]}, {"lPart": "conststr", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "+", ")", "[\"]"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n}\nTracer.prototype = {\n    put: function (b) {\n        this.history.push(b);\n    },\n    getAll: function () {\n        return this.history.join(\" \");\n    },\n    clear: function () {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk = [];\nvar whileCnt = 0;\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\" || s == \"-\") return 10;\n    if (s == \"*\" || s == \"/\") return 20;\n    return 0;\n}\n"}}},
{"FIO":"Короленко Р.В.","Collection":"243255232",{"_id": {"$oid": "65db559f4b5d9e0496a74750"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "65db57d24b5d9e0496a747ab"}, "rules": "LabFirst", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[е]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "brackets", "rPart": ["[{}()]"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "65fbc153e80848761345ffd7"}, "rules": "LabSecond", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "*", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord =true;}"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "const", "rPart": ["(", "char", "|", "const10", ")"]}, {"lPart": "rightText", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["\"at\"", "\"(\"", "expr", "\")\"", "\"do\"", "\"{\"", "operator", "+", "\"}\"", "elseOp", "?"]}, {"lPart": "elseOp", "rPart": ["\"or do\"", "operator", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "endExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "const10", "|", "char", "|", "exp"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["\"loop\"", "\"(\"", "operator", "\")\"", "\"until\"", "\"(\"", "expr", "\")\"", "\"{exit;}\""]}, {"lPart": "term", "rPart": ["\"(\"", "expr", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66046754e808487613462b89"}, "rules": "LabThird", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "*", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord =true;}"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "const", "rPart": ["(", "char", "|", "const10", ")"]}, {"lPart": "rightText", "rPart": ["operator", "+"]}, {"lPart": "elseOp", "rPart": ["\"or do\"", "\"{\"", "operator", "+", "\"}\""]}, {"lPart": "expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "endExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "const"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["\"loop\"", "\"(\"", "operator", "\")\"", "\"until\"", "\"(\"", "expr", "\")\"", "\"{retire;}\""]}, {"lPart": "operator", "rPart": ["\"at(\"", "expr", "\") do\"", "\"{\"", "operator", "+", "\"}\"", "elseOp", "?"]}, {"lPart": "operator", "rPart": ["\"select\"", "expr", "\"{\"", "(", "switchOper", ")", "+", "(", "\"case()\"", "operator", "+", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "switchOper", "rPart": ["(", "\"case(\"", "const", "\")\"", "operator", "+", "(", "\"break\"", "\";\"", ")", "?", ")"]}, {"lPart": "type", "rPart": ["(", "\"string\"", "|", "\"char\"", "|", "\"int\"", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6616b604e808487613466197"}, "rules": "test", "data": {"rList": [{"lPart": "ident", "rPart": ["[a-A]"]}], "extension": ""}}{"_id": {"$oid": "6629384de8084876134688e8"}, "rules": "LabForth", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord =true;}"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "const", "rPart": ["(", "char", "|", "const10", ")"]}, {"lPart": "rightText", "rPart": ["operator", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "endExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "const"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "expr", "\")\""]}, {"lPart": "operator", "rPart": ["\"at(\"", "expr", "\") do\"", "OB", "conditionalNot"]}, {"lPart": "operator", "rPart": ["\"select\"", "expr", "\"{\"", "(", "switchOper", ")", "+", "(", "\"case()\"", "operator", "+", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "switchOper", "rPart": ["(", "\"case(\"", "const", "\")\"", "operator", "+", "(", "\"break\"", "\";\"", ")", "?", ")"]}, {"lPart": "type", "rPart": ["(", "\"string\"", "|", "\"char\"", "|", "\"int\"", ")"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator"]}, {"lPart": "conditionalNot", "rPart": ["\"or do\"", "OB"]}, {"lPart": "conditionalNot", "rPart": ["~", "\"or do\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "664e2113516ab411de5d6c98"}, "rules": "LabFiveth", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord =true;}"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "const", "rPart": ["(", "char", "|", "const10", ")"]}, {"lPart": "rightText", "rPart": ["operator", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "endExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "const"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "expr", "\")\""]}, {"lPart": "operator", "rPart": ["\"at(\"", "expr", "\") do\"", "OB", "conditionalNot"]}, {"lPart": "operator", "rPart": ["\"select\"", "expr", "\"{\"", "(", "switchOper", ")", "+", "(", "\"case()\"", "operator", "+", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "switchOper", "rPart": ["(", "\"case(\"", "const", "\")\"", "operator", "+", "(", "\"break\"", "\";\"", ")", "?", ")"]}, {"lPart": "type", "rPart": ["(", "\"string\"", "|", "\"char\"", "|", "\"int\"", ")"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator"]}, {"lPart": "conditionalNot", "rPart": ["\"or do\"", "OB"]}, {"lPart": "conditionalNot", "rPart": ["~", "\"or do\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "agrList", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "function", "rPart": ["type", "id", "agrList", "\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["(", "\"(string)\"", "|", "\"(char)\"", "|", "\"(int)\"", ")"]}, {"lPart": "operator", "rPart": ["\"return\"", "(", "expr", ")", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "664e269a516ab411de5d6d4c"}, "rules": "LabSixth", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord =true;}"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", "(", "\",\"", "\"put\"", "expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", ")", "*", "\";\""]}, {"lPart": "const", "rPart": ["(", "char", "|", "const10", ")"]}, {"lPart": "rightText", "rPart": ["operator", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "endExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "const"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"loop\"", "OB", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+peek(ctlStk)+\":\");}", "\"until\"", "\"(\"", "expr", "{toPFR(\"Label1_\"+ctlStk.pop());}", "\")\""]}, {"lPart": "operator", "rPart": ["\"at\"", "\"(\"", "expr", "\")\"", "\"do\"", "OB", "conditionalNot"]}, {"lPart": "operator", "rPart": ["\"select\"", "expr", "\"{\"", "(", "switchOper", ")", "+", "\"}\"", "\"end\""]}, {"lPart": "switchOper", "rPart": ["(", "\"case(\"", "const", "?", "\")\"", "operator", "+", "(", "\"break\"", "\";\"", ")", "?", ")"]}, {"lPart": "type", "rPart": ["(", "\"string\"", "|", "\"char\"", "|", "\"int\"", ")"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator"]}, {"lPart": "conditionalNot", "rPart": ["\"or do\"", "OB"]}, {"lPart": "conditionalNot", "rPart": ["~", "\"or do\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "agrList", "rPart": ["{opStk.push(this.currentLexem[1]);}", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "{toPFR(opStk.pop());}"]}, {"lPart": "function", "rPart": ["type", "id", "agrList", "\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["(", "\"string\"", "|", "\"char\"", "|", "\"int\"", ")"]}, {"lPart": "operator", "rPart": ["\"return\"", "(", "expr", ")", "?", "\";\""]}, {"lPart": "program", "rPart": ["{whileCnt=0;}", "function", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "6667c79dd383c435c8681524"}, "rules": "Lab7", "data": {"rList": [{"lPart": "program", "rPart": ["{opCnt=0;}", "function", "+", "{toPseudoCode(); opStk=[];}"]}, {"lPart": "function", "rPart": ["type", "{curF = \"Func_\" +this.currentLexem[1]; toPFR(curF+ \":\");}", "id", "agrList", "\"{\"", "operator", "+", "\"}\"", "{toPFR(curF+ \"_Exit:\");}"]}, {"lPart": "type", "rPart": ["(", "\"string\"", "|", "\"char\"", "|", "\"int\"", ")"]}, {"lPart": "agrList", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", "(", "\",\"", "\"put\"", "expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", ")", "*", "\";\""]}, {"lPart": "operator", "rPart": ["{loopStk.push(++opCnt);}", "\"loop\"", "{toPFR(\"LoopBeg_\"+peek(loopStk)+\":\");}", "OB", "\"until\"", "\"(\"", "expr", "{toPFR(\"LoopExit_\"+peek(loopStk)); toPFR(\"JmpOnFalse\");}", "\")\"", "{toPFR(\"LoopBeg_\"+peek(loopStk));toPFR(\"Jmp\"); toPFR(\"LoopExit_\"+loopStk.pop()+\":\");}"]}, {"lPart": "operator", "rPart": ["{atStk.push(++opCnt)}", "\"at\"", "expr", "{toPFR(\"IfElse\"+peek(atStk)); toPFR(\"JmpOnFalse\");}", "\"do\"", "OB", "{toPFR(\"IfExit\"+peek(atStk));toPFR(\"Jmp\"); toPFR(\"IfElse\"+peek(atStk)+\":\");}", "conditionalNot", "{toPFR(\"IfExit\"+atStk.pop()+\":\")}"]}, {"lPart": "operator", "rPart": ["{swiStk.push(++opCnt); swiEntered.push(\"0\"); toPFR(\"sV_\"+peek(swiStk)); onStk.push(0); toPFR(\"defVar\");}", "\"select\"", "expr", "{toPFR(\"sV_\"+peek(swiStk)); toPFR(\"<-\");}", "(", "\"case\"", "\"(\"", "{toPFR(this.currentLexem[1]);}", "const", "\")\"", "{toPFR(\"sV_\"+peek(swiStk)); toPFR(\"==\"); toPFR(\"1\"); toPFR(\"SwitchEntered_\"+peek(swiStk)); toPFR(\"==\"); toPFR(\"||\"); toPFR(\"SwitchEnd_\"+peek(swiStk)+\"_case_\"+peek(onStk)); toPFR(\"JmpOnFalse\"); toPFR(\"SwitchEntered_\"+peek(swiStk)); toPFR(\"1\"); toPFR(\"<-\");}", "operator", "+", "(", "\"break\"", "\";\"", "{toPFR(\"SwitchExit_\"+peek(swiStk)); toPFR(\"Jmp\");}", ")", "?", "{toPFR(\"SwitchEnd_\"+peek(swiStk)+\"_case_\"+peek(onStk)+\":\"); onStk.push(onStk.pop()+1);}", ")", "+", "(", "\"case(\"", "\")\"", "operator", "+", ")", "?", "\"end\"", "{toPFR(\"SwitchExit_\"+swiStk.pop()+\":\"); swiEntered.pop();}"]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\"", "{if(loopStk.length >0) toPFR(\"LoopExit_\"+peek(loopStk));if(loopStk.length >0) toPFR(\"Jmp\"); else toPFR(\"ERROR\");}", "|", "\"return\"", "{ toPFR(curF +\"_R\");}", "expr", "\";\"", "{ while(opStk.length > 0) toPFR(opStk.shift()); toPFR(\"<-\"); toPFR(curF+ \"_Exit\");toPFR(\"Jmp\");}"]}, {"lPart": "expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", "|", "{opStk.push(this.currentLexem[1]);}", "ne", ")", "?", "begExpr", "endExpr"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator"]}, {"lPart": "conditionalNot", "rPart": ["\"or do\"", "OB"]}, {"lPart": "conditionalNot", "rPart": ["~", "\"or do\""]}, {"lPart": "begExpr", "rPart": ["{toPFR(this.currentLexem[1])}", "id"]}, {"lPart": "begExpr", "rPart": ["{toPFR(this.currentLexem[1])}", "const"]}, {"lPart": "begExpr", "rPart": ["{opStk.push(\"(\")}", "\"(\"", "expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "endExpr", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "signs", "expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "const", "rPart": ["(", "char", "|", "const10", "|", "exp", ")"]}, {"lPart": "signs", "rPart": ["(", "minus", "|", "binary", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "*"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binary", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord =true;}"]}, {"lPart": "ne", "rPart": ["[!]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar loopStk=[];\nvar opCnt=0;\nvar atStk=[];\nvar swiStk=[];\nvar swiEntered=[];\nvar onStk=[];\nvar tetradNumber = -1;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n\nfunction toPseudoCode(){\n var lim=tracer.history.length;\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if(type===0)\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(\"defineLabel\");\n    toPFR(word);\n    toPFR(\"_\");\n    toPFR(\"\\n\");\n   }else{\n    opStk.push(word);\n   }\n  if(type===5){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(opStk.pop());\n   toPFR(\"STACK\");\n   opStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(opStk.pop());\n   tetradNumber++;\n   toPFR(\"<\" + tetradNumber + \">\");\n   toPFR(\"\\n\");\n   toPFR(word);\n   toPFR(opStk.pop());\n   opStk.push(\"<\" + tetradNumber + \">\");\n   toPFR(opStk.pop());\n   opStk.push(\"<\" + tetradNumber + \">\");\n  }\n  if(type===20){\n   expr=false;\n   if(label===false){\n    toPFR(\"\\n\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(opStk.pop());\n   toPFR(opStk.pop());\n  }\n  if(type==40){\n   if(label===false){\n    toPFR(\"\\n\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(opStk.pop());\n   toPFR(\"_\");\n   expr=false;\n  }\n  if(type==41){\n    if(label===false){\n     toPFR(\"\\n\");\n    }else\n     label=false;\n    toPFR(word);\n    toPFR(opStk.pop());\n    toPFR(\"<\" + tetradNumber + \">\");\n    expr=false;\n   }\n }\n}\n\nfunction getType(w) {\n  switch (w) {\n    case \"+\":\n    case \"-\":\n    case \"/\":\n    case \"*\":\n      return 10; //знак арифметической операции\n    case \"==\":\n    case \"||\":\n    case \">\":\n    case \"<\":\n    case \">=\":\n    case \"<=\":\n      return 11; //знак операции сравнения\n    case \"<-\":\n      return 20; //знак операции присваивания\n    case \"defVar\":\n      return 30; //знак операции объявления переменной\n    case \"Jmp\":\n      return 40; //знак операции безусловной передачи управления\n    case \"JmpOnFalse\":\n      return 41; //знак операции передачи управления по условию\n    case \"Return\":\n      return 50; //знак операции значения управления из функции\n  }\n  return 0;\n}\n"}}},
{"FIO":"???","Collection":"tester",{"_id": {"$oid": "61f90a8ee166f33c85004684"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-2", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "61fb6ba3e166f33c8500472d"}, "rules": "MyRules", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "{1,6}"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "EndExpr", "rPart": ["(", "sign", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}], "extension": ""}}},
{"FIO":"Данилова З.Д.","Collection":"354221435",{"_id": {"$oid": "67bc6469af563521c9d58efc"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bc8470af563521c9d58fbf"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstBinary", "rPart": ["[@]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "constDouble", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/%]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "bothOperator", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cfb4c4af563521c9d5d626"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstBinary", "rPart": ["[@]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "constDouble", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", ")", "*", "[\"]", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/%]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "bothOperator", "rPart": ["[-]"]}, {"lPart": "assignment", "rPart": ["[:]", "[=]"]}, {"lPart": "braces", "rPart": ["[(]", "|", "[)]", "|", "[{]", "|", "[}]"]}, {"lPart": "spliter", "rPart": ["[;,]"]}, {"lPart": "functionSign", "rPart": ["[=]", "[>]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e441574635a960233ae56e"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstBinary", "rPart": ["[@]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "constDouble", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", ")", "|", "(", "[\\\\]", "[\"]", ")", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/%]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "bothOperator", "rPart": ["[-]"]}, {"lPart": "Operator", "rPart": ["AssignOperator", "|", "CycleOperator", "|", "ConditionalOperator", "|", "SwitchOperator"]}, {"lPart": "Const", "rPart": ["(", "constDecimal", "|", "сonstBinary", "|", "constOctal", "|", "constDouble", "|", "constChar", "|", "constString", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "unaryOperator", "|", "bothOperator", ")", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "|", "bothOperator", ")", "Expr"]}, {"lPart": "AssignOperator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "ConditionalOperator", "rPart": ["\"when\"", "Expr", "(", "(", "\"{\"", "(", "Operator", "\";\"", ")", "+", "\"}\"", ")", "|", "(", "Operator", "\";\"", ")", ")", "(", "\"other\"", "(", "(", "\"{\"", "(", "Operator", "\";\"", ")", "+", "\"}\"", ")", "|", "(", "Operator", "\";\"", ")", ")", ")", "?"]}, {"lPart": "CycleOperator", "rPart": ["\"cycle\"", "\"(\"", "AssignOperator", "\";\"", "Expr", "\";\"", "AssignOperator", "\")\"", "(", "(", "\"{\"", "(", "Operator", "\";\"", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "\"}\"", ")", "|", "(", "Operator", "\";\"", "(", "\"quit\"", "\";\"", ")", "?", ")", ")"]}, {"lPart": "SwitchOperator", "rPart": ["\"select\"", "Expr", "\"case\"", "\"(\"", "Const", "\")\"", "(", "(", "\"{\"", "(", "Operator", "\";\"", "\"break\"", "\";\"", ")", "+", "\"}\"", ")", "|", "(", "Operator", "\";\"", "\"break\"", "\";\"", ")", ")", "\"case\"", "\"(\"", "\"false\"", "\")\"", "(", "(", "\"{\"", "(", "Operator", "\";\"", "\"break\"", "\";\"", ")", "+", "\"}\"", ")", "|", "(", "Operator", "\";\"", "\"break\"", "\";\"", ")", ")", "\"end\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f39aa58558742cb433338d"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "Args", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["(", "AssignOperator", "\";\"", ")", "|", "(", "CycleOperator", ")", "|", "(", "ConditionalOperator", ")", "|", "(", "SwitchOperator", ")", "|", "(", "\"quit\"", "\";\"", ")", "|", "(", "\"break\"", "\";\"", ")", "|", "(", "\"return\"", "Expr", "?", "\";\"", ")"]}, {"lPart": "AssignOperator", "rPart": ["id", "\":=\"", "(", "Type", ")", "?", "Expr"]}, {"lPart": "CycleOperator", "rPart": ["\"cycle\"", "\"(\"", "AssignOperator", "?", "\";\"", "Expr", "?", "\";\"", "AssignOperator", "?", "\")\"", "OB"]}, {"lPart": "ConditionalOperator", "rPart": ["\"when\"", "Expr", "OB", "PartOther"]}, {"lPart": "SwitchOperator", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "Const", "|", "\"false\"", "\")\"", "OB", "*", ")", "+", "\"end\""]}, {"lPart": "Expr", "rPart": ["UnaryOperator", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OB", "rPart": ["Operator", "|", "(", "\"{\"", "(", "Operator", ")", "+", "\"}\"", ")"]}, {"lPart": "PartOther", "rPart": ["\"other\"", "OB"]}, {"lPart": "PartOther", "rPart": ["~", "\"other\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "(", "Expr", ")", "(", "\",\"", "(", "Expr", ")", ")", "*", ")", "?", "\")\"", ")", "?", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "Const", "rPart": ["constDecimal", "|", "сonstBinary", "|", "constOctal", "|", "constDouble", "|", "constChar", "|", "constString"]}, {"lPart": "UnaryOperator", "rPart": ["unaryOperator", "|", "bothOperator"]}, {"lPart": "EndExpr", "rPart": ["BinaryOperation", "Expr"]}, {"lPart": "BinaryOperation", "rPart": ["binaryOperator", "|", "bothOperator"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstBinary", "rPart": ["[@]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "constDouble", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[[a-fA-F0-9]", ")", ")", "|", "(", "[\\\\]", "[\"]", ")", "*", "[\"]"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "bothOperator", "rPart": ["[-]"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/%]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Тинников В.А.","Collection":"515323433",{"_id": {"$oid": "67bef7c4af563521c9d599e5"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bef7e8af563521c9d599ea"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constnum", "rPart": ["[-+]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "keywords", "rPart": ["(", "[p]", "[u]", "[t]", ")", "|", "(", "[t]", "[o]", ")", "|", "(", "[i]", "[n]", ")", "|", "(", "[t]", "[h]", "[e]", "[n]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67d051d7af563521c9d5da73"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "keyops", "rPart": ["[;(),{}?:]", "|", "(", "[?]", "[:]", ")"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[+]", "[+]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "keywords", "rPart": ["(", "[p]", "[u]", "[t]", ")", "|", "(", "[t]", "[h]", "[e]", "[n]", ")", "|", "(", "[n]", "[o]", "[t]", ")", "|", "(", "[c]", "[y]", "[c]", "[l]", "[e]", ")", "|", "(", "[q]", "[u]", "[i]", "[t]", ")", "|", "(", "[s]", "[w]", "[i]", "[t]", "[c]", "[h]", ")", "|", "(", "[l]", "[e]", "[a]", "[v]", "[e]", ")", "|", "(", "[a]", "[n]", "[y]", "[d]", "[o]", ")"]}, {"lPart": "arithmeticOperator", "rPart": ["(", "[-+*/%^]", ")"]}, {"lPart": "type", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")", "|", "(", "[f]", "[l]", "[o]", "[a]", "[t]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e45d9b4635a960233ae647"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "specialops", "rPart": ["[-+]"]}, {"lPart": "unops", "rPart": ["[!~]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "binops", "rPart": ["[*/^%]"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "Const", "rPart": ["constchar", "|", "constnum"]}, {"lPart": "ProgramText", "rPart": ["(", "FunctionDeclaration", ")", "*"]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "Statement", "rPart": ["FunctionDeclaration", "|", "Assignment", "|", "Condition", "|", "Loop", "|", "Switch", "|", "ExprStatement", "|", "LeaveStatement"]}, {"lPart": "FunctionDeclaration", "rPart": ["\"func\"", "id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ParamList", "?", "\")\"", "Block"]}, {"lPart": "Expr", "rPart": ["LogicalOrExpr"]}, {"lPart": "LogicalOrExpr", "rPart": ["LogicalAndExpr", "(", "\"||\"", "LogicalAndExpr", ")", "*"]}, {"lPart": "LogicalAndExpr", "rPart": ["EqualityExpr", "(", "\"&&\"", "EqualityExpr", ")", "*"]}, {"lPart": "EqualityExpr", "rPart": ["RelationalExpr", "(", "(", "\"==\"", "|", "\"!=\"", ")", "RelationalExpr", ")", "*"]}, {"lPart": "RelationalExpr", "rPart": ["AdditiveExpr", "(", "(", "\"<=\"", "|", "\">=\"", "|", "\"<\"", "|", "\">\"", ")", "AdditiveExpr", ")", "*"]}, {"lPart": "AdditiveExpr", "rPart": ["MultiplicativeExpr", "(", "(", "specialops", ")", "MultiplicativeExpr", ")", "*"]}, {"lPart": "MultiplicativeExpr", "rPart": ["UnaryExpr", "(", "(", "binops", ")", "UnaryExpr", ")", "*"]}, {"lPart": "UnaryExpr", "rPart": ["(", "unops", ")", "?", "Primary"]}, {"lPart": "Primary", "rPart": ["id", "(", "\"(\"", "ArgList", "?", "\")\"", ")", "?", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Condition", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Block", "(", "\"not\"", "Block", ")", "?"]}, {"lPart": "Loop", "rPart": ["\"cycle\"", "\"(\"", "(", "Assignment", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "Assignment", ")", "?", "\")\"", "Block", "(", "\"quit;\"", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "CaseExpr", "*", "DefaultCaseExpr", "?", "\"}\""]}, {"lPart": "CaseExpr", "rPart": ["\"by\"", "Const", "\"do\"", "Block"]}, {"lPart": "DefaultCaseExpr", "rPart": ["\"any\"", "\"do\"", "Block"]}, {"lPart": "ExprStatement", "rPart": ["Expr", "\";\""]}, {"lPart": "Const", "rPart": ["constchar", "|", "constnum"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "ExprList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "ParamList", "rPart": ["id", "\":\"", "type", "(", "\",\"", "id", "\":\"", "type", ")", "*"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "LeaveStatement", "rPart": ["\"leave\"", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f682c88558742cb4334a97"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comparisons", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "specialops", "rPart": ["[-+]"]}, {"lPart": "unops", "rPart": ["[!~]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "binops", "rPart": ["[*/^%]"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "Const", "rPart": ["constchar", "|", "constnum"]}, {"lPart": "ProgramText", "rPart": ["(", "FnBlock", ")", "*"]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "Statement", "rPart": ["IfStatement", "|", "PutStatement", "|", "ExprStatement", "|", "Block", "|", "PrintFn", "|", "LoopStatement", "|", "CaseStatement", "|", "delim", "|", "(", "\"leave\"", "Expr", "?", "\";\"", ")"]}, {"lPart": "PutStatement", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "ExprStatement", "rPart": ["Expr", "delim"]}, {"lPart": "IfStatement", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "NotStatement"]}, {"lPart": "LoopStatement", "rPart": ["\"cycle\"", "\"(\"", "(", "Expr", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "Expr", ")", "?", "\")\"", "Statement", "QuitStatement"]}, {"lPart": "CaseStatement", "rPart": ["\"switch\"", "\"(\"", "Expr", "\")\"", "\"{\"", "(", "\"by\"", "Const", "\"do\"", "Statement", "*", ")", "*", "(", "\"any\"", "\"do\"", "Statement", "*", ")", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["BeginExpr", "ExprOperation"]}, {"lPart": "BeginExpr", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "(", "(", "unops", "|", "specialops", ")", "?", "(", "ExprId", "|", "Const", ")", ")"]}, {"lPart": "ExprOperation", "rPart": ["(", "(", "binops", "|", "logicalops", "|", "specialops", "|", "comparisons", ")", "Expr", ")", "?"]}, {"lPart": "FnBlock", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block"]}, {"lPart": "PrintFn", "rPart": ["\"print\"", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "delim"]}, {"lPart": "NotStatement", "rPart": ["\"not\"", "Statement"]}, {"lPart": "NotStatement", "rPart": ["~", "\"not\""]}, {"lPart": "QuitStatement", "rPart": ["\"quit\"", "delim"]}, {"lPart": "QuitStatement", "rPart": ["~", "\"quit\""]}, {"lPart": "ExprId", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680226ef8558742cb43376c4"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comparisons", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "specialops", "rPart": ["[-+]"]}, {"lPart": "unops", "rPart": ["[!~]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "binops", "rPart": ["[*/^%]"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["constchar", "|", "constnum"]}, {"lPart": "ProgramText", "rPart": ["(", "FnBlock", ")", "*"]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "Statement", "rPart": ["IfStatement", "|", "PutStatement", "|", "ExprStatement", "|", "Block", "|", "PrintFn", "|", "LoopStatement", "|", "CaseStatement", "|", "delim", "|", "(", "\"exit\"", "Expr", "?", "\";\"", ")", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"quit\"", "\";\"", ")"]}, {"lPart": "PutStatement", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "ExprStatement", "rPart": ["Expr", "delim"]}, {"lPart": "IfStatement", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "NotStatement"]}, {"lPart": "LoopStatement", "rPart": ["\"cycle\"", "\"(\"", "(", "PutStatement", ")", "?", "(", "Expr", ")", "?", "\";\"", "(", "\"put\"", "Expr", "\"to\"", "id", ")", "?", "\")\"", "Statement"]}, {"lPart": "CaseStatement", "rPart": ["\"switch\"", "\"(\"", "Expr", "\")\"", "\"{\"", "(", "\"by\"", "Const", "\"do\"", "Statement", "*", ")", "*", "(", "\"any\"", "\"do\"", "Statement", "*", ")", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["BeginExpr", "ExprOperation"]}, {"lPart": "BeginExpr", "rPart": ["(", "unops", "|", "specialops", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")", "|", "(", "ExprId", "|", "Const", ")"]}, {"lPart": "ExprOperation", "rPart": ["(", "(", "binops", "|", "logicalops", "|", "specialops", "|", "comparisons", ")", "Expr", ")", "?"]}, {"lPart": "FnBlock", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Block"]}, {"lPart": "NotStatement", "rPart": ["\"not\"", "Statement"]}, {"lPart": "NotStatement", "rPart": ["~", "\"not\""]}, {"lPart": "ExprId", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "PrintFn", "rPart": ["\"print\"", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Паршин Н.С.","Collection":"325231421",{"_id": {"$oid": "67bdf5e2af563521c9d594b0"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67fb804b8558742cb4335ee2"}, "rules": "Лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signsOfOperation", "rPart": ["[-+/*<>]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb804f8558742cb4335ee5"}, "rules": "Лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signsOfOperation", "rPart": ["[-+/*<>]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "assignment", "rPart": ["\"put\"", "(", "constInt", "|", "constDouble", "|", "constStr", ")", "\"to\"", "id"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb80548558742cb4335ee8"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "simpleOperators", "rPart": ["[-+]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "arithmeticOperators", "rPart": ["(", "[%/*^]", ")", "|", "(", "[^%/*-+]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "binaryOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "binaryCompOperators", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "unaryOperators", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "AssignmentOperation", "rPart": ["\"put\"", "Expression", "\"to\"", "id"]}, {"lPart": "constBoolean", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "constInt", "|", "constDouble", "|", "constStr", "|", "constChar", "|", "constBoolean", "|", "constNull", ")"]}, {"lPart": "UnaryOperation", "rPart": ["(", "simpleOperators", "|", "unaryOperators", ")", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "binaryCompOperators", "\"other\"", "Expression", "block", "(", "\"else\"", "block", ")", "?"]}, {"lPart": "Loop", "rPart": ["\"while\"", "BinaryOperation", "\"do\"", "block"]}, {"lPart": "Statement", "rPart": ["Loop", "|", "Conditional", "|", "SwitchCase", "|", "(", "(", "AssignmentOperation", "|", "UnaryOperation", "|", "FunctionCall", "|", "BinaryOperation", "|", "ArithmeticOperation", "|", "return", "|", "TypesDeclarations", ")", "delimiter", ")"]}, {"lPart": "block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"select\"", "id", "\"{\"", "(", "\"case\"", "Const", "block", ")", "+", "\"}\""]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"bool\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "Function", "rPart": ["\"func\"", "id", "\"=>\"", "\"as\"", "types", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "TypesDeclarations", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "ArithmeticOperation", "rPart": ["Expression", "arithmeticOperators", "Expression", "(", "arithmeticOperators", "Expression", ")", "*"]}, {"lPart": "BinaryOperation", "rPart": ["\"(\"", "Expression", "(", "binaryOperators", "|", "binaryCompOperators", ")", "Expression", "\")\""]}, {"lPart": "Expression", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fba8178558742cb43360cb"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "simpleOperators", "rPart": ["[-+]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "arithmeticOperators", "rPart": ["(", "[%/*^]", ")", "|", "(", "[^%/*-+]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "binaryOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "binaryCompOperators", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "unaryOperators", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "AssignmentOperation", "rPart": ["\"put\"", "Expression", "\"to\"", "id"]}, {"lPart": "constBoolean", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "constInt", "|", "constDouble", "|", "constStr", "|", "constChar", "|", "constBoolean", "|", "constNull", ")"]}, {"lPart": "UnaryOperation", "rPart": ["(", "simpleOperators", "|", "unaryOperators", ")", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "binaryCompOperators", "\"other\"", "Expression", "block", "(", "\"else\"", "block", ")", "?"]}, {"lPart": "Loop", "rPart": ["\"while\"", "BinaryOperation", "\"do\"", "block"]}, {"lPart": "Statement", "rPart": ["Loop", "|", "Conditional", "|", "SwitchCase", "|", "(", "(", "AssignmentOperation", "|", "UnaryOperation", "|", "FunctionCall", "|", "BinaryOperation", "|", "ArithmeticOperation", "|", "return", "|", "TypesDeclarations", ")", "delimiter", ")"]}, {"lPart": "block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"select\"", "id", "\"{\"", "(", "\"case\"", "Const", "block", ")", "+", "\"end\"", "delimiter", "\"}\""]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"bool\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "Function", "rPart": ["\"func\"", "id", "\"=>\"", "\"as\"", "types", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "TypesDeclarations", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "ArithmeticOperation", "rPart": ["Expression", "arithmeticOperators", "Expression", "(", "arithmeticOperators", "Expression", ")", "*"]}, {"lPart": "BinaryOperation", "rPart": ["\"(\"", "Expression", "(", "binaryOperators", "|", "binaryCompOperators", ")", "Expression", "\")\""]}, {"lPart": "Expression", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe751b8558742cb4336e66"}, "rules": "Лаб5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "simpleOperators", "rPart": ["[-+]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "arithmeticOperators", "rPart": ["(", "[%/*^]", ")", "|", "(", "[^%/*-+]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "binaryOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "binaryCompOperators", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "unaryOperators", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "AssignmentOperation", "rPart": ["\"put\"", "Expression", "\"to\"", "id"]}, {"lPart": "constBoolean", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "constInt", "|", "constDouble", "|", "constStr", "|", "constChar", "|", "constBoolean", "|", "constNull", ")"]}, {"lPart": "UnaryOperation", "rPart": ["(", "simpleOperators", "|", "unaryOperators", ")", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "binaryCompOperators", "\"other\"", "Expression", "block", "(", "\"else\"", "block", ")", "?"]}, {"lPart": "Loop", "rPart": ["\"while\"", "BinaryOperation", "\"do\"", "block"]}, {"lPart": "Statement", "rPart": ["Loop", "|", "Conditional", "|", "SwitchCase", "|", "(", "(", "AssignmentOperation", "|", "UnaryOperation", "|", "FunctionCall", "|", "BinaryOperation", "|", "ArithmeticOperation", "|", "return", "|", "TypesDeclarations", ")", "delimiter", ")"]}, {"lPart": "block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"select\"", "id", "\"{\"", "(", "\"case\"", "Const", "block", ")", "+", "\"end\"", "delimiter", "\"}\""]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"bool\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "Function", "rPart": ["\"func\"", "id", "\"=>\"", "\"as\"", "types", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "TypesDeclarations", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "ArithmeticOperation", "rPart": ["Expression", "arithmeticOperators", "Expression", "(", "arithmeticOperators", "Expression", ")", "*"]}, {"lPart": "BinaryOperation", "rPart": ["\"(\"", "Expression", "(", "binaryOperators", "|", "binaryCompOperators", ")", "Expression", "\")\""]}, {"lPart": "Expression", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ffcfc58558742cb433729c"}, "rules": "Лаб6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constDouble", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "simpleOperators", "rPart": ["[-+]"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "arithmeticOperators", "rPart": ["(", "[%/*^]", ")", "|", "(", "[^%/*-+]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "binaryOperators", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "binaryCompOperators", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "unaryOperators", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "AssignmentOperation", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "{ PutToPFR(CurrentLexem); PutToPFR(\"=\"); }"]}, {"lPart": "constBoolean", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "constInt", "|", "constDouble", "|", "constStr", "|", "constChar", "|", "constBoolean", "|", "constNull", ")"]}, {"lPart": "UnaryOperation", "rPart": ["(", "simpleOperators", "|", "unaryOperators", ")", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "binaryCompOperators", "\"other\"", "Expression", "{PutToPFR(\"LabelElse\" # ++IfCount); PutToPFR(\"JmpF\"); }", "block", "{ PutToPFR(\"LabelEnd\" # IfCount); PutToPFR(\"Jmp\"); PutToPFR(\"LabelElse\" # IfCount # \":\"); }", "OptionalElse", "{ PutToPFR(\"LabelEnd\" # IfCount # \":\"); }"]}, {"lPart": "Loop", "rPart": ["\"while\"", "{ Push(++WhileCount); PutToPFR(\"Label1\" # Top() # \":\"); }", "BinaryOperation", "{ PutToPFR(\"Label2\" # Top()); PutToPFR(\"JmpF\"); }", "\"do\"", "block", "{ PutToPFR(\"Label1\" # Top()); PutToPFR(\"Jmp\"); PutToPFR(\"Label2\" # Pop() # \":\"); }"]}, {"lPart": "block", "rPart": ["\"{\"", "{ PutToPFR(\"blockStart\"); }", "Statement", "\"}\"", "{ PutToPFR(\"blockEnd\"); }"]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"bool\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "Function", "rPart": ["\"func\"", "id", "\"=>\"", "\"as\"", "types", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "TypesDeclarations", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "ArithmeticOperation", "rPart": ["Expression", "arithmeticOperators", "Expression", "(", "arithmeticOperators", "Expression", ")", "*"]}, {"lPart": "BinaryOperation", "rPart": ["\"(\"", "Expression", "(", "binaryOperators", "|", "binaryCompOperators", ")", "Expression", "\")\""]}, {"lPart": "Expression", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}, {"lPart": "Statement", "rPart": ["Loop", "|", "Conditional", "|", "SwitchCase", "|", "SimpleStatement"]}, {"lPart": "SimpleStatement", "rPart": ["(", "AssignmentOperation", "|", "UnaryOperation", "|", "FunctionCall", "|", "BinaryOperation", "|", "ArithmeticOperation", "|", "\"return\"", "|", "TypesDeclarations", ")", "delimiter", "{ PutToPFR(\"stmt\"); }"]}, {"lPart": "OptionalElse", "rPart": ["\"else\"", "block"]}, {"lPart": "SwitchCase", "rPart": ["\"select\"", "id", "{ PutToPFR(CurrentLexem); Push(++SwitchCount); }", "\"{\"", "Case", "+", "\"end\"", "delimiter", "{ PutToPFR(\"LabelEnd\" # Pop() # \":\"); }", "\"}\""]}, {"lPart": "Case", "rPart": ["\"case\"", "Const", "{PutToPFR(CurrentLexem); PutToPFR(\"cmpEq\"); PutToPFR(\"LabelNext\" # ++CaseCount); PutToPFR(\"JmpF\"); }", "block", "{PutToPFR(\"Jmp\"); PutToPFR(\"LabelNext\" # CaseCount # \":\");}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Киселёв Е.С.","Collection":"454424155",{"_id": {"$oid": "67b6c643ce6dd03692d08744"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67b6cc90ce6dd03692d08768"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67b6d374ce6dd03692d08788"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b6d87bce6dd03692d087a6"}, "rules": "noName", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "const2", "rPart": ["[1]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[1]", "[0-3]", "*"]}, {"lPart": "const10", "rPart": ["[1]", "[0-9]", "*"]}, {"lPart": "Float", "rPart": ["[0–9]", "+", "(", "[.]", "[0–9]", "*", ")", "?"]}, {"lPart": "String", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Sym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "Space", "rPart": ["[ ]", "+"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+"]}], "extension": ""}}{"_id": {"$oid": "67b6df1bce6dd03692d087d1"}, "rules": "lab1", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "const2", "rPart": ["[@]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[$]", "[0-3]", "*"]}, {"lPart": "const10", "rPart": ["[&]", "[0-9]", "*"]}, {"lPart": "Float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Sym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/=%><]"]}, {"lPart": "Space", "rPart": ["[ ]", "+"]}, {"lPart": "WordForFormatting", "rPart": ["[\\r\\n\\t]", "+"]}, {"lPart": "ConstGlav", "rPart": ["const2", "|", "const4", "|", "const10", "|", "Float"]}, {"lPart": "Operand", "rPart": ["Ident", "|", "ConstGlav"]}, {"lPart": "Term", "rPart": ["Factor", "|", "Term", "\"*\"", "Factor", "|", "Term", "\"/\"", "Factor"]}, {"lPart": "Expr", "rPart": ["Term", "|", "Expr", "\"+\"", "Term", "|", "Expr", "\"-\"", "Term"]}, {"lPart": "Assign", "rPart": ["Ident", "\":=\"", "Expr", "\";\""]}, {"lPart": "KeywordAt", "rPart": ["\"at\""]}, {"lPart": "KeywordDo", "rPart": ["\"do\""]}, {"lPart": "IfStatement", "rPart": ["KeywordAt", "Expr", "KeywordDo", "Statement", "[ \"or\" KeywordDo Statement ]", ""]}, {"lPart": "Factor", "rPart": ["Operand", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "ne", "rPart": ["veno"]}, {"lPart": "Statement", "rPart": ["Ident", "\":=\"", "Expr", "\";\"", "|", "IfStatement", "|", "CycleStatement"]}, {"lPart": "KeywordCycle", "rPart": ["\"cycle\""]}, {"lPart": "KeywordQuit", "rPart": ["\"quit\""]}, {"lPart": "SymLeftBracket", "rPart": ["\"[\""]}, {"lPart": "SymRightBracket", "rPart": ["\"]\""]}, {"lPart": "Semicolon", "rPart": ["\";\""]}, {"lPart": "CycleStatement", "rPart": ["KeywordCycle", "SymLeftBracket", "ParamList", "SymRightBracket", "Semicolon", "SymLeftBracket", "Condition", "SymRightBracket", "Semicolon", "SymLeftBracket", "Step", "SymRightBracket", "Statement", "[ KeywordQuit Semicolon ]", ""]}, {"lPart": "ParamList", "rPart": ["Ident", "\"=\"", "ConstGlav"]}, {"lPart": "Condition", "rPart": ["Ident", "\"<\"", "ConstGlav"]}, {"lPart": "Step", "rPart": ["Ident", "\"++\"", "|", "Ident", "\"--\""]}], "extension": ""}}{"_id": {"$oid": "67cea988af563521c9d5d14f"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Ident", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const2", "rPart": ["[@]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[$]", "[0-3]", "*"]}, {"lPart": "const10", "rPart": ["[&]", "[0-9]", "*"]}, {"lPart": "Float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Sym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/=%><]"]}, {"lPart": "Space", "rPart": ["[ ]", "+"]}, {"lPart": "WordForFormatting", "rPart": ["[\\r\\n\\t]", "+"]}, {"lPart": "SimpleExpr", "rPart": ["(", "Ident", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "Expr", ")", "+"]}, {"lPart": "AssignStatement", "rPart": ["Ident", "SignOfOperationAssign1", "Expr", "SignOfOperationAssign2"]}, {"lPart": "Expr", "rPart": ["Ident", "|", "const2", "|", "const4", "|", "const10", "|", "Float"]}, {"lPart": "SignOfOperationAssign1", "rPart": ["\":=\""]}, {"lPart": "SignOfOperationAssign2", "rPart": ["\";\""]}, {"lPart": "KeywordAt", "rPart": ["\"at\""]}, {"lPart": "KeywordDo", "rPart": ["\"do\""]}, {"lPart": "Main", "rPart": ["AssignStatement", "|", "IfStatement", "|", "CycleStatement"]}, {"lPart": "IfStatement", "rPart": ["KeywordAt", "Expr", "KeywordDo", "Main", "\"[\"", "\"or\"", "\"\"", "KeywordDo", "\" \"", "Main", "\" ]\""]}, {"lPart": "KeywordCycle", "rPart": ["\"cycle\""]}, {"lPart": "KeywordQuit", "rPart": ["\"quit\""]}, {"lPart": "SymLeftBracket", "rPart": ["\"[\""]}, {"lPart": "SymRightBracket", "rPart": ["\"]\""]}, {"lPart": "CycleStatement", "rPart": ["KeywordCycle", "SymLeftBracket", "ParamList", "SymRightBracket", "SignOfOperationAssign2", "\";\"", "SymLeftBracket", "Condition", "SymRightBracket", "SignOfOperationAssign2", "\";\"", "SymLeftBracket", "Step", "SymRightBracket", "Main", "\"[ \"", "KeywordQuit", "\" \"", "SignOfOperationAssign2", "\" ]\""]}, {"lPart": "ParamList", "rPart": ["Ident", "\"=\"", "ConstGlav"]}, {"lPart": "Condition", "rPart": ["Ident", "\"<\"", "ConstGlav"]}, {"lPart": "Step", "rPart": ["Ident", "(", "\"++\"", "|", "\"--\"", ")"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67d28c21e0b22203e7cbf350"}, "rules": "Lab2Per", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "const2", "rPart": ["[@]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[$]", "[0-3]", "*"]}, {"lPart": "const10", "rPart": ["[№]", "[0-9]", "*"]}, {"lPart": "Float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Sym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/=%]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constTF", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["const2", "|", "const4", "|", "const10", "|", "Float", "|", "constTF"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["Assign", "|", "CondOp", "|", "CycleOp", "|", "SwitchOp", "|", "FunDec", "|", "\"quit\"", "\";\""]}, {"lPart": "CondOp", "rPart": ["\"at\"", "expression", "\"do\"", "block", "(", "\"or\"", "\"do\"", "block", ")", "?"]}, {"lPart": "CycleOp", "rPart": ["\"cycle\"", "\"(\"", "Assign", "\";\"", "expression", "\";\"", "Assign", "\")\"", "block"]}, {"lPart": "SwitchOp", "rPart": ["\"??\"", "expression", "\"{\"", "(", "\"?=\"", "const", "\":\"", "block", ")", "*", "(", "\"?~:\"", "block", ")", "?", "\"}\""]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["\"(\"", "expression", "\")\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "FunDec", "rPart": ["type", "Ident", "\"(\"", "(", "Ident", "(", "\",\"", "Ident", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "Assign", "rPart": ["Ident", "\":=\"", "expression", "\";\""]}], "extension": ""}}{"_id": {"$oid": "6804ec458558742cb4337e55"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "const2", "rPart": ["[@]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[$]", "[0-3]", "*"]}, {"lPart": "const10", "rPart": ["[№]", "[0-9]", "*"]}, {"lPart": "Float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Sym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/=%]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constTF", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["const2", "|", "const4", "|", "const10", "|", "Float", "|", "constTF"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["Assign", "|", "CondOp", "|", "CycleOp", "|", "SwitchOp", "|", "FunDec", "|", "\"quit\"", "\";\""]}, {"lPart": "CondOp", "rPart": ["\"at\"", "expression", "\"do\"", "block", "(", "\"or\"", "\"do\"", "block", ")", "?"]}, {"lPart": "CycleOp", "rPart": ["\"cycle\"", "\"(\"", "Assign", "\";\"", "expression", "\";\"", "Assign", "\")\"", "block"]}, {"lPart": "SwitchOp", "rPart": ["\"??\"", "expression", "\"{\"", "(", "\"?=\"", "const", "\":\"", "block", ")", "*", "(", "\"?~:\"", "block", ")", "?", "\"}\""]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["\"(\"", "expression", "\")\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "FunDec", "rPart": ["type", "Ident", "\"(\"", "(", "Ident", "(", "\",\"", "Ident", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "Assign", "rPart": ["Ident", "\":=\"", "expression", "\";\""]}], "extension": ""}}{"_id": {"$oid": "680602858558742cb4337f72"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "const2", "rPart": ["[@]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[$]", "[0-3]", "*"]}, {"lPart": "const10", "rPart": ["[№]", "[0-9]", "*"]}, {"lPart": "Float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "Sym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/=%]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constTF", "rPart": ["(", "\"true\"", ")", "|", "(", "\"false\"", ")"]}, {"lPart": "const", "rPart": ["const2", "|", "const4", "|", "const10", "|", "Float", "|", "constTF"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["Assign", "|", "CondOp", "|", "CycleOp", "|", "SwitchOp", "|", "FunDec", "|", "\"quit\"", "\";\""]}, {"lPart": "CondOp", "rPart": ["\"at\"", "expression", "\"do\"", "block", "(", "\"or\"", "\"do\"", "block", ")", "?"]}, {"lPart": "CycleOp", "rPart": ["\"cycle\"", "\"(\"", "Assign", "\";\"", "expression", "\";\"", "Assign", "\")\"", "block"]}, {"lPart": "SwitchOp", "rPart": ["\"??\"", "expression", "\"{\"", "(", "\"?=\"", "const", "\":\"", "block", ")", "*", "(", "\"?~:\"", "block", ")", "?", "\"}\""]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "logicOp", "|", "compOp"]}, {"lPart": "expression", "rPart": ["operand", "(", "operation", "expression", ")", "?"]}, {"lPart": "expr", "rPart": ["\"(\"", "expression", "\")\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "FunDec", "rPart": ["type", "Ident", "\"(\"", "(", "Ident", "(", "\",\"", "Ident", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "operand", "rPart": ["const", "|", "Ident"]}, {"lPart": "Assign", "rPart": ["Ident", "\":=\"", "expression", "\";\""]}], "extension": ""}}},
{"FIO":"Ковалинская Е.Е.","Collection":"332243255",{"_id": {"$oid": "6817cb978558742cb433b540"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "6817ceb48558742cb433b542"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z]", "?", "[0-9]", "?", ")", "+"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[16]", "[x]", "(", "[0-9A-F]", ")", "+", ")"]}, {"lPart": "constfloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "conststr", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "constsym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}},
{"FIO":"Булавкин С.С.","Collection":"334114434",{"_id": {"$oid": "67fe042e8558742cb4336cd0"}, "rules": "L1V3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[xX]", "[0-9A-Fa-f]", "+", ")", "|", "(", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[']", "[a-zA-Z0-9\\nrt]", "[']", ")", "|", "(", "[\"]", "[a-zA-Z0-9\\nrt]", "*", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[+-*/]"]}, {"lPart": "assign", "rPart": ["[=]"]}, {"lPart": "comments", "rPart": []}, {"lPart": "operation1", "rPart": []}, {"lPart": "operation12", "rPart": []}, {"lPart": "Start", "rPart": []}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67fe05478558742cb4336cde"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "68076ab68558742cb43381f0"}, "rules": "L2V3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[xX]", "[0-9A-Fa-f]", "+", ")", "|", "(", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[']", "[a-zA-Z0-9\\nrt]", "[']", ")", "|", "(", "[\"]", "[a-zA-Z0-9\\nrt]", "*", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation2", "rPart": ["(", "[+*/><]", ")", "|", "(", "[!><=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comments", "rPart": ["[\\] [\\] []", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operation1", "rPart": ["[!]"]}, {"lPart": "operation12", "rPart": ["[-]"]}, {"lPart": "Start", "rPart": ["id", "assign", "const"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Фогельман Я.А.","Collection":"512353134",{"_id": {"$oid": "67c07ce8af563521c9d5a4b0"}, "rules": "zip", "data": {"rList": [{"lPart": "constnull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9+]", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operationUnoOrBin", "rPart": ["[-]"]}, {"lPart": "operationLog", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationCom", "rPart": ["(", "[<>!]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "operationBin", "rPart": ["[*/]"]}, {"lPart": "semi", "rPart": ["(", "[;]", ")"]}, {"lPart": "coma", "rPart": ["(", "[,]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "openPar", "rPart": ["[(]"]}, {"lPart": "closePar", "rPart": ["[)]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c07fabaf563521c9d5a4e3"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67d254f0e0b22203e7cbf1b4"}, "rules": "lab2", "data": {"rList": [{"lPart": "expr", "rPart": ["(", "id", "|", "const", "|", "functionCall", "|", "unoOperation", "|", "binOperation", "|", "openPar", "expr", "closePar", ")"]}, {"lPart": "const", "rPart": ["constChar", "|", "constNum", "|", "constNull", "|", "constBool"]}, {"lPart": "unoOperation", "rPart": ["(", "operatorUno", "|", "operatorUnoOrBin", ")", "expr"]}, {"lPart": "binOperation", "rPart": ["expr", "(", "operatorBin", "|", "operatorUnoOrBin", ")", "expr"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "openPar", "rPart": ["[(]"]}, {"lPart": "closePar", "rPart": ["[)]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9+]", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operatorUno", "rPart": ["(", "[!~]", ")"]}, {"lPart": "operatorUnoOrBin", "rPart": ["[-]"]}, {"lPart": "operatorBin", "rPart": ["[*/+%$&|]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operatorLog", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operatorCom", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "semi", "rPart": ["(", "[;]", ")"]}, {"lPart": "coma", "rPart": ["(", "[,]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "functionCall", "rPart": ["id", "openPar", "(", "(", "expr", ")", "(", "coma", "expr", ")", "*", ")", "?", "closePar"]}, {"lPart": "type", "rPart": ["(", "\"int\"", ")", "|", "(", "\"float\"", ")", "|", "(", "\"char\"", ")"]}, {"lPart": "functionHead", "rPart": ["type", "id", "openPar", "(", "(", "expr", ")", "(", "coma", "expr", ")", "*", ")", "?", "closePar"]}, {"lPart": "functionDeclaration", "rPart": ["functionHead", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "construct", "+", "\"}\""]}, {"lPart": "expr", "rPart": ["openPar", "type", "closePar", "expr"]}, {"lPart": "assig", "rPart": ["id", "\"<-\"", "expr", "semi"]}, {"lPart": "construct", "rPart": ["assig", "|", "condition", "|", "cycle", "|", "switch", "|", "functionCall", "|", "(", "\"return\"", "expr", "semi", ")"]}, {"lPart": "condition", "rPart": ["\"in\"", "openPar", "expr", "closePar", "\"then\"", "block", "|", "expr", "(", "\"not\"", "block", "|", "expr", ")", "?"]}, {"lPart": "cycle", "rPart": ["\"loop\"", "block", "|", "expr", "\"until\"", "openPar", "expr", "closePar", "(", "\"retire\"", "semi", ")", "?"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "\"by\"", "const", "\"do\"", "switchBody", "(", "\"by\"", "const", "\"any\"", "\"do\"", "(", "construct", "*", "|", "block", "*", ")", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["(", "construct", "*", "|", "block", "*", ")", "(", "\"leave\"", "semi", ")", "?"]}, {"lPart": "program", "rPart": ["functionDeclaration", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6b2bb8558742cb4334cfa"}, "rules": "lab22", "data": {"rList": [{"lPart": "const", "rPart": ["constChar", "|", "constNum"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9+]", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "arithUnoOrBin", "rPart": ["[-+]"]}, {"lPart": "arithBin", "rPart": ["[*/%]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "logBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operatorCom", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "operatorUno", "rPart": ["arithUnoOrBin", "|", "logUno"]}, {"lPart": "operatorBin", "rPart": ["arithUnoOrBin", "|", "arithBin", "|", "logBin", "|", "operatorCom"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "functionCall", "rPart": ["id", "\"(\"", "(", "operand", "(", "\",\"", "operand", ")", "*", ")", "?", "\")\""]}, {"lPart": "type", "rPart": ["(", "\"int\"", ")", "|", "(", "\"float\"", ")", "|", "(", "\"char\"", ")"]}, {"lPart": "functionDeclaration", "rPart": ["type", "id", "\"(\"", "(", "(", "expr", ")", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "construct", "+", "\"}\""]}, {"lPart": "assig", "rPart": ["id", "\"<-\"", "expr", "\";\""]}, {"lPart": "construct", "rPart": ["assig", "|", "condition", "|", "cycle", "|", "switch", "|", "block", "|", "(", "\"return\"", "expr", "\";\"", ")", "|", "\"retire\"", "\";\""]}, {"lPart": "condition", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "construct", "partNot"]}, {"lPart": "cycle", "rPart": ["\"loop\"", "construct", "\"until\"", "\"(\"", "expr", "\")\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "\"by\"", "const", "\"do\"", "switchBody", "(", "\"by\"", "const", "\"any\"", "\"do\"", "(", "construct", "*", ")", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["(", "construct", "*", ")", "(", "\"leave\"", "\";\"", ")", "?"]}, {"lPart": "operand", "rPart": ["(", "id", "functionCall", "?", ")", "|", "const"]}, {"lPart": "exprStart", "rPart": ["operand"]}, {"lPart": "exprStart", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "expr", "rPart": ["exprStart", "(", "operatorBin", "expr", ")", "?"]}, {"lPart": "logUno", "rPart": ["[!]"]}, {"lPart": "expr", "rPart": ["operatorUno", "expr"]}, {"lPart": "partNot", "rPart": ["\"not\"", "construct"]}, {"lPart": "partNot", "rPart": ["~", "\"not\""]}, {"lPart": "program", "rPart": ["functionDeclaration", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6b7038558742cb4334d5e"}, "rules": "lab222", "data": {"rList": [{"lPart": "const", "rPart": ["constChar", "|", "constNum", "|", "constNull", "|", "constBool"]}, {"lPart": "unoOperation", "rPart": ["(", "operatorUno", "|", "operatorUnoOrBin", ")", "expr"]}, {"lPart": "binOperation", "rPart": ["expr", "(", "operatorBin", "|", "operatorUnoOrBin", ")", "expr"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "openPar", "rPart": ["[(]"]}, {"lPart": "closePar", "rPart": ["[)]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9+]", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operatorUno", "rPart": ["(", "[!~]", ")"]}, {"lPart": "operatorUnoOrBin", "rPart": ["[-]"]}, {"lPart": "operatorBin", "rPart": ["[*/+%$&|]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operatorLog", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operatorCom", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "semi", "rPart": ["(", "[;]", ")"]}, {"lPart": "coma", "rPart": ["(", "[,]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "functionCall", "rPart": ["id", "openPar", "(", "(", "expr", ")", "(", "coma", "expr", ")", "*", ")", "?", "closePar"]}, {"lPart": "type", "rPart": ["(", "\"int\"", ")", "|", "(", "\"float\"", ")", "|", "(", "\"char\"", ")"]}, {"lPart": "functionHead", "rPart": ["type", "id", "openPar", "(", "(", "expr", ")", "(", "coma", "expr", ")", "*", ")", "?", "closePar"]}, {"lPart": "functionDeclaration", "rPart": ["functionHead", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "construct", "+", "\"}\""]}, {"lPart": "expr", "rPart": ["openPar", "type", "closePar", "expr"]}, {"lPart": "assig", "rPart": ["id", "\"<-\"", "expr", "semi"]}, {"lPart": "construct", "rPart": ["assig", "|", "condition", "|", "cycle", "|", "switch", "|", "functionCall", "|", "(", "\"return\"", "expr", "semi", ")"]}, {"lPart": "condition", "rPart": ["\"in\"", "openPar", "expr", "closePar", "\"then\"", "block", "|", "expr", "(", "\"not\"", "block", "|", "expr", ")", "?"]}, {"lPart": "cycle", "rPart": ["\"loop\"", "block", "|", "expr", "\"until\"", "openPar", "expr", "closePar", "(", "\"retire\"", "semi", ")", "?"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "\"by\"", "const", "\"do\"", "switchBody", "(", "\"by\"", "const", "\"any\"", "\"do\"", "(", "construct", "*", "|", "block", "*", ")", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["(", "construct", "*", "|", "block", "*", ")", "(", "\"leave\"", "semi", ")", "?"]}, {"lPart": "program", "rPart": ["functionDeclaration", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fcce448558742cb4336848"}, "rules": "laba", "data": {"rList": [{"lPart": "const", "rPart": ["constChar", "|", "constNum"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "arithUnoOrBin", "rPart": ["[-+]"]}, {"lPart": "arithBin", "rPart": ["[*/%]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "logBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operatorCom", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "operatorUno", "rPart": ["arithUnoOrBin", "|", "logUno"]}, {"lPart": "operatorBin", "rPart": ["arithUnoOrBin", "|", "arithBin", "|", "logBin", "|", "operatorCom"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "functionCall", "rPart": ["\"(\"", "(", "operand", "(", "\",\"", "operand", ")", "*", ")", "?", "\")\""]}, {"lPart": "type", "rPart": ["(", "\"int\"", ")", "|", "(", "\"float\"", ")", "|", "(", "\"char\"", ")"]}, {"lPart": "functionDeclaration", "rPart": ["type", "id", "\"(\"", "(", "(", "expr", ")", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "construct", "+", "\"}\""]}, {"lPart": "assig", "rPart": ["id", "\"<-\"", "expr", "\";\""]}, {"lPart": "construct", "rPart": ["assig", "|", "condition", "|", "cycle", "|", "switch", "|", "block", "|", "(", "\"return\"", "expr", "\";\"", ")", "|", "\"retire\"", "\";\""]}, {"lPart": "condition", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "construct", "partNot"]}, {"lPart": "cycle", "rPart": ["\"loop\"", "construct", "\"until\"", "\"(\"", "expr", "\")\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "\"by\"", "const", "\"do\"", "switchBody", "(", "\"by\"", "const", "\"any\"", "\"do\"", "(", "construct", "*", ")", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["(", "construct", "*", ")", "(", "\"leave\"", "\";\"", ")", "?"]}, {"lPart": "operand", "rPart": ["(", "id", "functionCall", "?", ")", "|", "const"]}, {"lPart": "exprStart", "rPart": ["operand"]}, {"lPart": "exprStart", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "expr", "rPart": ["exprStart", "(", "operatorBin", "expr", ")", "?"]}, {"lPart": "logUno", "rPart": ["[!]"]}, {"lPart": "expr", "rPart": ["operatorUno", "expr"]}, {"lPart": "partNot", "rPart": ["\"not\"", "construct"]}, {"lPart": "partNot", "rPart": ["~", "\"not\""]}, {"lPart": "program", "rPart": ["functionDeclaration", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Потапов А.А.","Collection":"313451341",{"_id": {"$oid": "67b6a08bce6dd03692d086b4"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0–9]", "+", "(", "[.]", "[0–9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b6a090ce6dd03692d086b6"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constNum", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "constLetter", "rPart": ["[']", "[!-~ \\r\\n\\t]", "[']"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}], "extension": "var ignoreLastWord;\n//'a' '~' 111 22.22 .333 444. 55.55e55 "}}{"_id": {"$oid": "67b6a0fbce6dd03692d086b9"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 0, "assist": 1}}},
{"FIO":"Раскоп Т.В.","Collection":"214224453",{"_id": {"$oid": "67c05481af563521c9d5a342"}, "rules": "Laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constE", "rPart": ["[-+]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+"]}, {"lPart": "binaryOperation", "rPart": ["(", "[–+*/]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67c0576eaf563521c9d5a371"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}},
{"FIO":"Яньков П.А.","Collection":"114544434",{"_id": {"$oid": "67befb69af563521c9d59a32"}, "rules": "laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-z A-Z]", "+"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "exp", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[*+-/]"]}, {"lPart": "logic", "rPart": ["(", "[\\!]", "[\\=]", ")", "|", "(", "[>]", "{1}", "[=]", "{1}", "[<]", "{1}", ")", "|", "(", "[\\<]", "?", "[\\>]", "?", "[\\|]", "?", "[\\=]", "?", "[&]", "?", ")"]}, {"lPart": "symbol", "rPart": ["(", "[']", "[ ]", "?", "[']", ")", "|", "(", "[']", "[\\!\\@\\#\\$\\%\\^\\(\\)]", "[']", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67befde7af563521c9d59a71"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67d0ef60af563521c9d5dd92"}, "rules": "laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-z A-Z]", "+"]}, {"lPart": "digit", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[']", "[\\\\]", "?", "[]", "[']", ")", "|", "(", "[']", "[\\\\]", "[0-9]", "+", "[']", ")", "|", "(", "[']", "[\\\\]", "[t]", "[']", ")", "|", "(", "[']", "[\\\\]", "[r]", "[']", ")", "|", "(", "[']", "[\\\\]", "[n]", "[']", ")", "|", "(", "[@#$%^(){}]", ")"]}, {"lPart": "sign", "rPart": ["[*+/-]"]}, {"lPart": "logic", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[><]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "sepsymbol", "rPart": ["[,;]"]}, {"lPart": "function", "rPart": ["(", "[=]", "[>]", ")", "|", "(", "[a]", "[s]", ")"]}, {"lPart": "switch", "rPart": ["(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[q]", "[u]", "[i]", "[t]", ")", "|", "(", "[?]", "[~]", ")"]}, {"lPart": "assignment", "rPart": ["[:]", "[=]"]}, {"lPart": "cycle", "rPart": ["(", "[f]", "[o]", "[r]", "[e]", "[a]", "[c]", "[h]", ")", "|", "(", "[i]", "[n]", ")", "|", "(", "[s]", "[t]", "[o]", "[p]", ")"]}, {"lPart": "condition", "rPart": ["(", "[?]", ")", "|", "(", "[?]", "[:]", ")", "|", "(", "[:]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e42c124635a960233ae3fa"}, "rules": "laba3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "intD", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "charSym", "rPart": ["(", "[']", "[\\\\]", "?", "[]", "[']", ")", "|", "(", "[']", "[\\\\]", "[x]", "[0-9]", "+", "[']", ")"]}, {"lPart": "sign", "rPart": ["[-*+/]"]}, {"lPart": "logic", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "endline", "rPart": ["[;]"]}, {"lPart": "floatD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "cycleIn", "rPart": ["\"in\""]}, {"lPart": "cycleStop", "rPart": ["\"stop\"", "endline"]}, {"lPart": "cycle", "rPart": ["\"foreach\""]}, {"lPart": "functionArrow", "rPart": ["\"=>\""]}, {"lPart": "functionAs", "rPart": ["\"as\""]}, {"lPart": "switch", "rPart": ["\"??\""]}, {"lPart": "switchCase", "rPart": ["\"?=\""]}, {"lPart": "switchDefault", "rPart": ["\"?~\""]}, {"lPart": "switchQuit", "rPart": ["\"quit\"", "endline"]}, {"lPart": "if", "rPart": ["\"?\""]}, {"lPart": "elseIf", "rPart": ["\"?:\""]}, {"lPart": "else", "rPart": ["\":\""]}, {"lPart": "assignment", "rPart": ["\":=\""]}, {"lPart": "Function", "rPart": ["(", "id", "functionArrow", "functionAs", "?", "Type", "\"(\"", "Arguments", "?", "\")\"", "\"{\"", "Body", "+", "\"}\"", ")", "*"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "Arguments", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Body", "rPart": ["Assign", "|", "IFblock", "|", "WhileBlock", "|", "SwitchBlock", "|", "Print"]}, {"lPart": "Assign", "rPart": ["id", "assignment", "(", "id", "|", "intD", "|", "floatD", ")", "(", "sign", "(", "id", "|", "intD", "|", "floatD", ")", ")", "*", "endline"]}, {"lPart": "IFblock", "rPart": ["IF", "ElseIf", "*", "Else", "?"]}, {"lPart": "IF", "rPart": ["if", "\"(\"", "id", "logic", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "\")\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "ElseIf", "rPart": ["elseIf", "\"(\"", "id", "logic", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "\")\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "Else", "rPart": ["else", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "WhileBlock", "rPart": ["cycle", "\"(\"", "id", "(", "cycleIn", ")", "(", "intD", "|", "id", ")", "\")\"", "\"{\"", "(", "Body", "(", "cycleStop", ")", "?", ")", "+", "\"}\""]}, {"lPart": "SwitchBlock", "rPart": ["switch", "id", "\"{\"", "swCase", "+", "swDefault", "?", "\"}\""]}, {"lPart": "swCase", "rPart": ["switchCase", "(", "intD", "|", "floatD", "|", "charSym", ")", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "swDefault", "rPart": ["switchDefault", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "Print", "rPart": ["\"print\"", "\"(\"", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "(", "\",\"", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", ")", "*", "\")\"", "endline"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e44be94635a960233ae5a2"}, "rules": "test", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "intD", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "charSym", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "sign", "rPart": ["[-*+/]"]}, {"lPart": "logic", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "endline", "rPart": ["[;]"]}, {"lPart": "floatD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "cycleStop", "rPart": ["\"stop\"", "endline"]}, {"lPart": "switchQuit", "rPart": ["\"quit\"", "endline"]}, {"lPart": "Function", "rPart": ["(", "id", "\"=>\"", "\"(\"", "Arguments", "?", "\")\"", "\"{\"", "Body", "+", "\"}\"", ")", "*"]}, {"lPart": "Arguments", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Assign", "rPart": ["id", "\":=\"", "Expr", "(", "sign", "Expr", ")", "*", "endline"]}, {"lPart": "IFblock", "rPart": ["IF", "ElseIf", "*", "Else", "?"]}, {"lPart": "IF", "rPart": ["\"?\"", "\"(\"", "Expr", "(", "logic", "Expr", ")", "*", "\")\"", "Body", "*", "(", "cycleStop", ")", "?"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "Expr", "(", "logic", "Expr", ")", "*", "\")\"", "Body", "*", "(", "cycleStop", ")", "?"]}, {"lPart": "Else", "rPart": ["\":\"", "Body", "*", "(", "cycleStop", ")", "?"]}, {"lPart": "WhileBlock", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "intD", "\":\"", "intD", "\")\"", "\"{\"", "(", "Body", "(", "cycleStop", ")", "?", ")", "+", "\"}\""]}, {"lPart": "SwitchBlock", "rPart": ["\"??\"", "id", "\"{\"", "swCase", "+", "swDefault", "?", "\"}\""]}, {"lPart": "swCase", "rPart": ["\"?=\"", "Expr", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "swDefault", "rPart": ["\"?~\"", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "Print", "rPart": ["\"print\"", "\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\"", "endline"]}, {"lPart": "Expr", "rPart": ["id", "|", "intD", "|", "floatD", "|", "charSym"]}, {"lPart": "return", "rPart": ["\"return\"", "(", "id", "|", "intD", ")", "endline"]}, {"lPart": "Body", "rPart": ["Assign", "|", "IFblock", "|", "WhileBlock", "|", "SwitchBlock", "|", "Print", "|", "return"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f67b4d8558742cb4334a30"}, "rules": "laba4", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "intD", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "charSym", "rPart": ["(", "[']", "[\\\\]", "?", "[]", "[']", ")", "|", "(", "[']", "[\\\\]", "[x]", "[0-9]", "+", "[']", ")"]}, {"lPart": "sign", "rPart": ["[-*+/]"]}, {"lPart": "logic", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "endline", "rPart": ["[;]"]}, {"lPart": "floatD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "cycleIn", "rPart": ["\"in\""]}, {"lPart": "cycleStop", "rPart": ["\"stop\"", "endline"]}, {"lPart": "cycle", "rPart": ["\"foreach\""]}, {"lPart": "functionArrow", "rPart": ["\"=>\""]}, {"lPart": "functionAs", "rPart": ["\"as\""]}, {"lPart": "switch", "rPart": ["\"??\""]}, {"lPart": "switchCase", "rPart": ["\"?=\""]}, {"lPart": "switchDefault", "rPart": ["\"?~\""]}, {"lPart": "switchQuit", "rPart": ["\"quit\"", "endline"]}, {"lPart": "if", "rPart": ["\"?\""]}, {"lPart": "elseIf", "rPart": ["\"?:\""]}, {"lPart": "else", "rPart": ["\":\""]}, {"lPart": "assignment", "rPart": ["\":=\""]}, {"lPart": "Function", "rPart": ["(", "id", "functionArrow", "functionAs", "?", "Type", "\"(\"", "Arguments", "?", "\")\"", "\"{\"", "Body", "+", "\"}\"", ")", "*"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "Arguments", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Body", "rPart": ["Assign", "|", "IFblock", "|", "WhileBlock", "|", "SwitchBlock", "|", "Print", "|", "return", "|", "Transform"]}, {"lPart": "Assign", "rPart": ["id", "assignment", "Expr"]}, {"lPart": "IFblock", "rPart": ["IF", "ElseIf", "*", "Else", "?"]}, {"lPart": "IF", "rPart": ["if", "\"(\"", "ExprLogic", "(", "logic", "ExprLogic", ")", "*", "\")\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "ElseIf", "rPart": ["elseIf", "\"(\"", "ExprLogic", "(", "logic", "ExprLogic", ")", "*", "\")\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "Else", "rPart": ["else", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "WhileBlock", "rPart": ["cycle", "\"(\"", "id", "(", "cycleIn", ")", "(", "intD", "|", "id", ")", "\")\"", "\"{\"", "(", "Body", "(", "cycleStop", ")", "?", ")", "+", "\"}\""]}, {"lPart": "SwitchBlock", "rPart": ["switch", "id", "\"{\"", "swCase", "+", "swDefault", "?", "\"}\""]}, {"lPart": "swCase", "rPart": ["switchCase", "(", "intD", "|", "floatD", "|", "charSym", ")", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "swDefault", "rPart": ["switchDefault", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "Print", "rPart": ["\"print\"", "\"(\"", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "(", "\",\"", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", ")", "*", "\")\"", "endline"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "intD", "|", "floatD", ")", "(", "sign", "(", "id", "|", "intD", "|", "floatD", ")", ")", "*", "endline"]}, {"lPart": "ExprLogic", "rPart": ["(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "logic", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")"]}, {"lPart": "return", "rPart": ["\"return\"", "(", "id", "|", "intD", ")", "endline"]}, {"lPart": "Transform", "rPart": ["\"(\"", "Type", "\")\"", "id", "endline"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6808ee7b8558742cb4338b52"}, "rules": "laba5", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "intD", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "charSym", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "sign", "rPart": ["[-*+/]"]}, {"lPart": "logic", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "endline", "rPart": ["[;]"]}, {"lPart": "floatD", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "cycleStop", "rPart": ["\"stop\"", "endline"]}, {"lPart": "switchQuit", "rPart": ["\"quit\"", "endline"]}, {"lPart": "Function", "rPart": ["(", "id", "\"=>\"", "\"as\"", "?", "\"(\"", "Arguments", "?", "\")\"", "\"{\"", "Body", "+", "\"}\"", ")", "*"]}, {"lPart": "Arguments", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Assign", "rPart": ["id", "\":=\"", "Expr"]}, {"lPart": "IFblock", "rPart": ["IF", "ElseIf", "*", "Else", "?"]}, {"lPart": "IF", "rPart": ["\"?\"", "\"(\"", "ExprLogic", "(", "logic", "ExprLogic", ")", "*", "\")\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "ExprLogic", "(", "logic", "ExprLogic", ")", "*", "\")\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "Else", "rPart": ["\":\"", "\"{\"", "Body", "*", "(", "cycleStop", ")", "?", "\"}\""]}, {"lPart": "WhileBlock", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "intD", "\":\"", "intD", "\")\"", "\"{\"", "(", "Body", "(", "cycleStop", ")", "?", ")", "+", "\"}\""]}, {"lPart": "SwitchBlock", "rPart": ["\"??\"", "id", "\"{\"", "swCase", "+", "swDefault", "?", "\"}\""]}, {"lPart": "swCase", "rPart": ["\"?=\"", "(", "intD", "|", "floatD", "|", "charSym", ")", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "swDefault", "rPart": ["\"?~\"", "\"->\"", "\"{\"", "(", "Body", "switchQuit", "?", ")", "+", "\"}\""]}, {"lPart": "Print", "rPart": ["\"print\"", "\"(\"", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "(", "\",\"", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", ")", "*", "\")\"", "endline"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "intD", "|", "floatD", ")", "(", "sign", "(", "id", "|", "intD", "|", "floatD", ")", ")", "*", "endline"]}, {"lPart": "ExprLogic", "rPart": ["(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")", "logic", "(", "id", "|", "intD", "|", "floatD", "|", "charSym", ")"]}, {"lPart": "return", "rPart": ["\"return\"", "(", "id", "|", "intD", ")", "endline"]}, {"lPart": "Body", "rPart": ["Assign", "|", "IFblock", "|", "WhileBlock", "|", "SwitchBlock", "|", "Print", "|", "return"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Ринчинов Б.В.","Collection":"453541244",{"_id": {"$oid": "67beebebaf563521c9d59917"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bef41eaf563521c9d599b0"}, "rules": "Rule1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constFour", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "sign", "rPart": ["[+*/<>=!]"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{2}", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "end", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d1757caf563521c9d5e1b4"}, "rules": "Rule2", "data": {"rList": [{"lPart": "Prog", "rPart": ["Operators", "+"]}, {"lPart": "Operators", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorFor", "|", "OperatorSelect", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "(", "term2", ")", "\",\"", "id", "\")\"", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"?\"", "\"(\"", "(", "term1", ")", "\")\"", "\"{\"", "(", "Operators", ")", "*", "\"}\"", ")"]}, {"lPart": "OperatorFor", "rPart": ["\"foreach\"", "\"(\"", "term2", "\"in\"", "const", "\":\"", "const", "\")\"", "\"{\"", "(", "Operators", ")", "\"}\""]}, {"lPart": "OperatorSelect", "rPart": ["\"select\"", "term2", "\"case\"", "\"(\"", "const", "\")\"", "\"{\"", "(", "Operators", ")", "*", "\"}\""]}, {"lPart": "term2", "rPart": ["(", "id", "|", "const", ")"]}, {"lPart": "term1", "rPart": ["(", "id", "|", "const", ")", "logic", "(", "id", "|", "const", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{1,2}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "logic", "rPart": ["(", "[<>]", ")", "|", "(", "[<>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "constComm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e563964635a960233aee61"}, "rules": "Rule31", "data": {"rList": [{"lPart": "Prog", "rPart": ["Operators", "+"]}, {"lPart": "Operators", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorFor", "|", "OperatorSelect", "|", "OperatorFunc", "|", "OperatorSign", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "(", "Type", "term2", ")", "\",\"", "id", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"?:\"", "\"(\"", "(", "term1", ")", "\")\"", "\"{\"", "(", "Operators", ")", "+", "\"}\"", "(", "\":\"", "\"{\"", "(", "Operators", ")", "+", "\"}\"", ")", "?", ")"]}, {"lPart": "OperatorFor", "rPart": ["\"foreach\"", "\"(\"", "Type", "id", "\"in\"", "(", "constnum", "|", "id", ")", "\":\"", "(", "constnum", "|", "id", ")", "\")\"", "\"{\"", "(", "Operators", ")", "+", "\"}\""]}, {"lPart": "OperatorSelect", "rPart": ["\"select\"", "term2", "\"case\"", "\"(\"", "constnum", "\")\"", "\"{\"", "(", "Operators", ")", "+", "(", "\"break\"", "end", ")", "?", "\"}\""]}, {"lPart": "OperatorFunc", "rPart": ["id", "\"(\"", "(", "Type", "id", ")", "*", "\")\"", "\"ret\"", "Type", "\"{\"", "(", "Operators", ")", "+", "(", "\"return\"", "(", "id", "|", "constnum", ")", "end", ")", "?", "\"}\""]}, {"lPart": "OperatorSign", "rPart": ["constnum", "sign", "constnum", "end"]}, {"lPart": "term2", "rPart": ["conststring", "|", "constchar", "|", "(", "constnum", "(", "sign", "(", "id", "|", "constnum", ")", ")", "?", ")", "|", "(", "id", "(", "sign", "(", "id", "|", "constnum", ")", ")", "?", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\""]}, {"lPart": "term1", "rPart": ["(", "id", "logic", "(", "constnum", "|", "id", ")", ")", "|", "(", "constnum", "logic", "(", "id", "|", "constnum", ")", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[+*/%]"]}, {"lPart": "conststring", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{1,2}", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "logic", "rPart": ["(", "[<>]", ")", "|", "(", "[<>]", "[=]", ")"]}, {"lPart": "constbin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constquad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constComm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "end", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e573e94635a960233aef0e"}, "rules": "Rule3", "data": {"rList": [{"lPart": "Prog", "rPart": ["Operators", "+"]}, {"lPart": "Operators", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorFor", "|", "OperatorSelect", "|", "OperatorFunc", "|", "OperatorSign", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "(", "Type", "term2", ")", "\",\"", "id", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["(", "\"?:\"", "\"(\"", "(", "term1", ")", "\")\"", "\"{\"", "(", "Operators", ")", "+", "\"}\"", "(", "\":\"", "\"{\"", "(", "Operators", ")", "+", "\"}\"", ")", "?", ")"]}, {"lPart": "OperatorFor", "rPart": ["\"foreach\"", "\"(\"", "Type", "id", "\"in\"", "(", "constnum", "|", "id", ")", "\":\"", "(", "constnum", "|", "id", ")", "\")\"", "\"{\"", "(", "Operators", ")", "+", "\"}\""]}, {"lPart": "OperatorSelect", "rPart": ["\"select\"", "term2", "\"case\"", "\"(\"", "constnum", "\")\"", "\"{\"", "(", "(", "Operators", ")", "+", "(", "\"break\"", "end", ")", "?", ")", "?", "\"}\""]}, {"lPart": "OperatorFunc", "rPart": ["id", "\"(\"", "(", "Type", "id", ")", "*", "\")\"", "\"ret\"", "Type", "\"{\"", "(", "Operators", ")", "+", "(", "\"return\"", "(", "id", "|", "constnum", ")", "end", ")", "?", "\"}\""]}, {"lPart": "OperatorSign", "rPart": ["constnum", "sign", "constnum", "end"]}, {"lPart": "term2", "rPart": ["conststring", "|", "constchar", "|", "(", "constnum", "(", "sign", "(", "id", "|", "constnum", ")", ")", "?", ")", "|", "(", "id", "(", "sign", "(", "id", "|", "constnum", ")", ")", "?", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\""]}, {"lPart": "term1", "rPart": ["(", "id", "logic", "(", "constnum", "|", "id", ")", ")", "|", "(", "constnum", "logic", "(", "id", "|", "constnum", ")", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[+*/%]"]}, {"lPart": "conststring", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{2}", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "logic", "rPart": ["(", "[<>]", ")", "|", "(", "[<>]", "[=]", ")"]}, {"lPart": "constbin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constquad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constComm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Minus", "rPart": ["[-]"]}, {"lPart": "end", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f351f98558742cb4333300"}, "rules": "Rule4", "data": {"rList": [{"lPart": "Prog", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"ret\"", "Type", "\"{\"", "(", "Operators", ")", "*", "\"}\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\""]}, {"lPart": "Operators", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorFor", "|", "OperatorSelect", "|", "Var", "|", "OperatorStop", "|", "OperatorCallFunc", "|", "OperatorReturn", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "(", "Term", ")", "\",\"", "id", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["\"?:\"", "\"(\"", "(", "Term", ")", "\")\"", "OB", "Else"]}, {"lPart": "OperatorFor", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "(", "constnum", ")", "\":\"", "(", "constnum", ")", "\")\"", "OB"]}, {"lPart": "OperatorSelect", "rPart": ["\"select\"", "Term", "(", "(", "\"case\"", "\"(\"", "(", "constnum", "|", "\"false\"", ")", "\")\"", "PO", ")", ")", "+", "\"end\""]}, {"lPart": "Var", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "end"]}, {"lPart": "OperatorStop", "rPart": ["\"stop\"", "end"]}, {"lPart": "OperatorCallFunc", "rPart": ["id", "(", "\"(\"", "(", "Term", "(", "\",\"", "Term", ")", "*", ")", "?", "\")\"", ")"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operators", "+", "\"}\"", ")", "|", "(", "Operators", ")"]}, {"lPart": "Else", "rPart": ["\":\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "Term", "rPart": ["(", "unarSign", "|", "minus", ")", "?", "(", "id", "|", "ConstTerm", ")", "(", "(", "sign", "|", "minus", ")", "(", "id", "|", "ConstTerm", ")", ")", "*"]}, {"lPart": "PO", "rPart": ["OB", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+"]}, {"lPart": "conststring", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{2}", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "sign", "rPart": ["[+*/%<>|&=]", "|", "(", "[<>]", "[=]", ")"]}, {"lPart": "constbin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constquad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constComm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "OperatorReturn", "rPart": ["\"return\"", "id", "end"]}, {"lPart": "unarSign", "rPart": ["[!]"]}, {"lPart": "ConstTerm", "rPart": ["constnum", "|", "conststring", "|", "constchar", "|", "constbin", "|", "constquad"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680a005a8558742cb4339319"}, "rules": "Rule5", "data": {"rList": [{"lPart": "Prog", "rPart": ["OperatorFunc", "+"]}, {"lPart": "OperatorFunc", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"ret\"", "Type", "\"{\"", "(", "Operators", ")", "*", "\"}\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "Operators", "rPart": ["(", "OperatorSet", "|", "OperatorCond", "|", "OperatorFor", "|", "OperatorSelect", "|", "Var", "|", "OperatorStop", "|", "OperatorReturn", "|", "OperatorBreak", ")"]}, {"lPart": "OperatorSet", "rPart": ["(", "\"set\"", "\"(\"", "(", "Term", ")", "\",\"", "id", "\")\"", "end", ")"]}, {"lPart": "OperatorCond", "rPart": ["\"?\"", "\"(\"", "(", "Term", ")", "\")\"", "OB", "(", "\"?:\"", "\"(\"", "Term", "\")\"", "OB", ")", "*", "Else"]}, {"lPart": "OperatorFor", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "(", "constnum", ")", "\":\"", "(", "constnum", ")", "\")\"", "OB"]}, {"lPart": "OperatorSelect", "rPart": ["\"select\"", "Term", "(", "(", "\"case\"", "\"(\"", "(", "constnum", "|", "\"false\"", ")", "\")\"", "PO", ")", ")", "+", "\"end\""]}, {"lPart": "Var", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "end"]}, {"lPart": "OperatorStop", "rPart": ["\"stop\"", "end"]}, {"lPart": "OperatorReturn", "rPart": ["\"return\"", "id", "end"]}, {"lPart": "OperatorBreak", "rPart": ["\"break\"", "end"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operators", "+", "\"}\"", ")", "|", "(", "Operators", ")"]}, {"lPart": "Else", "rPart": ["\":\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "Term", "rPart": ["(", "unarSign", "|", "minus", ")", "?", "(", "id", "(", "\"(\"", "(", "Term", "(", "\",\"", "Term", ")", "*", ")", "?", "\")\"", ")", "?", "|", "ConstTerm", ")", "(", "(", "sign", "|", "minus", ")", "(", "id", "(", "\"(\"", "(", "Term", "(", "\",\"", "Term", ")", "*", ")", "?", "\")\"", ")", "?", "|", "ConstTerm", ")", ")", "*"]}, {"lPart": "ConstTerm", "rPart": ["constnum", "|", "conststring", "|", "constchar", "|", "constbin", "|", "constquad"]}, {"lPart": "PO", "rPart": ["OB", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+"]}, {"lPart": "unarSign", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "conststring", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{2}", "[']"]}, {"lPart": "constchar", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "constbin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constquad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "sign", "rPart": ["[+*/%<>|&=]", "|", "(", "[<>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constComm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Сидоршина А.А.","Collection":"352424142",{"_id": {"$oid": "67db8f81e0b22203e7cc1b90"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67db91c4e0b22203e7cc1b98"}, "rules": "noName", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const2", "rPart": ["[b]", "[i]", "[n]", "[0-1]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[a-z]", "+", "[0-9a-zA-Z]", "*"]}], "extension": ""}}{"_id": {"$oid": "67db9cc9e0b22203e7cc1bd8"}, "rules": "лаба1", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const2", "rPart": ["[b]", "[i]", "[n]", "[0-1]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}], "extension": ""}}{"_id": {"$oid": "67ed5522a600182c7517afca"}, "rules": "лаба2", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const2", "rPart": ["[b]", "[i]", "[n]", "[0-1]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "delimiter", "rPart": ["[:;,]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "z", "rPart": []}, {"lPart": "comment", "rPart": ["[/]", "[]", "*", "[*]", "[/]"]}, {"lPart": "lbrace", "rPart": ["[{]"]}, {"lPart": "rbrace", "rPart": ["[}]"]}, {"lPart": "operator", "rPart": ["[<]", "[-]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Comma", "rPart": ["[,]"]}, {"lPart": "t", "rPart": []}], "extension": ""}}{"_id": {"$oid": "680073ec8558742cb43374c3"}, "rules": "лаба3", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[t]", "[e]", "[t]", "[r]", "[0-3]", "+"]}, {"lPart": "const2", "rPart": ["[b]", "[i]", "[n]", "[0-1]", "+"]}, {"lPart": "constSymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "constChar", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "delimiter", "rPart": ["[:;,]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[]", "*", "[*]", "[/]"]}, {"lPart": "lbrace", "rPart": ["[{]"]}, {"lPart": "rbrace", "rPart": ["[}]"]}, {"lPart": "operator", "rPart": ["[<]", "[-]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Comma", "rPart": ["[,]"]}, {"lPart": "Operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "unaryPrefix", "|", "universal", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binary", "|", "universal", ")", "Expr", ")", "?"]}, {"lPart": "binary", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "universal", "rPart": ["\"-\""]}, {"lPart": "unaryPrefix", "rPart": ["\"!\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "id", "\"<-\"", "Expr", "\";\"", "Expr", "\";\"", "id", "\"<-\"", "Expr", "\")\"", "Operator", "*", "\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"at\"", "Expr", "\"do\"", "Operator", "\"or do\"", "Operator"]}, {"lPart": "file", "rPart": ["Operator", "+"]}], "extension": ""}}},
{"FIO":"Коровин А.С.","Collection":"525525542",{"_id": {"$oid": "67d2ef34e0b22203e7cbf5c4"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 300, "assist": 1}}{"_id": {"$oid": "67d2ef59e0b22203e7cbf5d0"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "|", "(", "[0-3]", "+", ")", "|", "(", "[0-7]", "+", ")", "|", "(", "[\\']", "[1-0]", "?", "[\\']", ")", "|", "(", "[\\\"]", "[0-1]", "*", "[\\\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2f1cde0b22203e7cbf605"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["[1-3]", "[0-3]", "*"]}, {"lPart": "const", "rPart": ["[1-7]", "[0-7]", "*"]}, {"lPart": "const", "rPart": ["[\\']", "[]", "?", "[\\']"]}, {"lPart": "const", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operationSign", "rPart": ["(", "[-+<>*/]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<>]", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2f291e0b22203e7cbf61f"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Галич С.В.","Collection":"323343123",{"_id": {"$oid": "65e015f64b5d9e0496a75e44"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "65e01c3c4b5d9e0496a75e68"}, "tune": {"language": "cpp", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+1", "deltat": 0, "assist": 1}}},
{"FIO":"Лысак А.Д.","Collection":"315433335",{"_id": {"$oid": "67bcdb33af563521c9d590a8"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bce469af563521c9d590b0"}, "rules": "LR1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[Ee]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", "[0-9a-zA-Z]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d0a482af563521c9d5dc91"}, "rules": "LR2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[Ee]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constSym", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "LogicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}, {"lPart": "CompareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[\\\\]", "[\\\\]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "sym", "rPart": ["[(]", "|", "[)]", "|", "[{]", "|", "[}]", "|", "[,]", "|", "[;]"]}, {"lPart": "SOFUn", "rPart": ["[-]", "|", "[%]", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d220b3e0b22203e7cbf05e"}, "rules": "LR3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[Ee]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constSym", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "LogicOp", "|", "CompareOp", "|", "UnSOF", "|", "UnLO"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "loop", "|", "switch", "|", "function", "|", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "{2,}", "\"}\"", "|", "operator"]}, {"lPart": "if", "rPart": ["\"at\"", "expr", "\"do\"", "block", "elif", "?"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "(", "LogicOp", "|", "CompareOp", ")", "?", "expr", "\")\"", "\"do\"", "block"]}, {"lPart": "LogicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "block", "*", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "anyswith", "?", "\"}\""]}, {"lPart": "const", "rPart": ["constNum", "|", "constSym"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "function", "rPart": ["type", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "*", "\")\"", "block"]}, {"lPart": "comment", "rPart": ["[\\\\]", "[\\\\]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "UnSOF", "rPart": ["[-]"]}, {"lPart": "UnLO", "rPart": ["[!]"]}, {"lPart": "Prog", "rPart": ["block", "+"]}, {"lPart": "elif", "rPart": ["\"or\"", "\"do\"", "block"]}, {"lPart": "anyswith", "rPart": ["\"any\"", "\"do\"", "block", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3bb184635a960233adf4d"}, "rules": "LR4", "data": {"rList": [{"lPart": "Prog", "rPart": ["function", "+"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "*", "\"}\"", "|", "operator"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "loop", "|", "switch", "|", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"at\"", "expr", "\"do\"", "block", "elif"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "(", "LogicOp", "|", "CompareOp", ")", "?", "expr", "\")\"", "\"do\"", "block"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "block", "*", ")", "+", "anyswith", "?", "\"}\""]}, {"lPart": "function", "rPart": ["type", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "*", "\")\"", "block"]}, {"lPart": "expr", "rPart": ["(", "UnSOF", "|", "UnLO", ")", "?", "operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "elif", "rPart": ["\"or\"", "\"do\"", "block"]}, {"lPart": "const", "rPart": ["constNum", "|", "constSym"]}, {"lPart": "anyswith", "rPart": ["\"any\"", "\"do\"", "block", "*"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "LogicOp", "|", "CompareOp", "|", "UnSOF", "|", "UnLO"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "LogicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[Ee]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constSym", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "UnSOF", "rPart": ["[-]"]}, {"lPart": "UnLO", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[\\\\]", "[\\\\]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "elif", "rPart": ["~", "\"or\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68076dca8558742cb4338204"}, "rules": "LR5", "data": {"rList": [{"lPart": "Prog", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["\"put\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "*", "\")\"", "\"{\"", "block", "*", "\"}\"", "\"to\"", "id", "\";\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "*", "\"}\"", "|", "operator"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "loop", "|", "switch", "|", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"at\"", "expr", "\"do\"", "block", "elif"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "block"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "block", "*", ")", "+", "anyswith", "?", "\"}\""]}, {"lPart": "expr", "rPart": ["(", "UnSOF", "|", "UnLO", ")", "?", "operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "elif", "rPart": ["\"or\"", "\"do\"", "block"]}, {"lPart": "elif", "rPart": ["~", "\"or\""]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "const", "rPart": ["constNum", "|", "constSym"]}, {"lPart": "anyswith", "rPart": ["\"any\"", "\"do\"", "block", "*"]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "LogicOp", "|", "CompareOp", "|", "UnSOF"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "UnSOF", "rPart": ["[-]"]}, {"lPart": "UnLO", "rPart": ["[!]"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[Ee]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constSym", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "LogicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[\\\\]", "[\\\\]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681650f28558742cb433aff1"}, "rules": "LR6", "data": {"rList": [{"lPart": "Prog", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["\"put\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "block", "*", "\"}\"", "\"to\"", "id", "\";\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "*", "\"}\"", "|", "operator"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "loop", "|", "switch", "|", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"at\"", "expr", "\"do\"", "block", "elif"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "block"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "block", "*", ")", "+", "anyswith", "?", "\"}\""]}, {"lPart": "expr", "rPart": ["(", "UnSOF", "|", "UnLO", ")", "?", "operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "elif", "rPart": ["\"or\"", "\"do\"", "block"]}, {"lPart": "elif", "rPart": ["~", "\"or\""]}, {"lPart": "operand", "rPart": ["const", "|", "id", "(", "\"(\"", "(", "expr", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "const", "rPart": ["constNum", "|", "constSym"]}, {"lPart": "anyswith", "rPart": ["\"any\"", "\"do\"", "block", "*"]}, {"lPart": "operation", "rPart": ["SignOfOperation", "|", "LogicOp", "|", "CompareOp", "|", "UnSOF"]}, {"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "UnSOF", "rPart": ["[-]"]}, {"lPart": "UnLO", "rPart": ["[!]"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[Ee]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constSym", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "LogicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "CompareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[\\\\]", "[\\\\]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Шайдуллин И.Р.","Collection":"554243334",{"_id": {"$oid": "67c88584af563521c9d5c1cc"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67c885e4af563521c9d5c1da"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c885ecaf563521c9d5c1dd"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]", "|", "[a-z]", "+"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[1]", "[x]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c88b75af563521c9d5c1f7"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-1", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67db3509e0b22203e7cc1a6d"}, "rules": "lab2n", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]", "|", "[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryop", "rPart": ["(", "[+*/]", "[=]", "?", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "somebinaryop", "rPart": ["[-]"]}, {"lPart": "unaryop", "rPart": ["[!]"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "keyword", "rPart": ["(", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[=]", "[>]", ")", "|", "(", "[;]", ")", "|", "(", "[:]", ")", ")", "|", "(", "[a-z]", "+", ")"]}, {"lPart": "keyword", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "+"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67db3c88e0b22203e7cc1a7f"}, "rules": "lab2aaa", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]", "|", "[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[1]", "[x]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-7]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryop", "rPart": ["(", "[+*/]", "[=]", "?", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "somebinaryop", "rPart": ["[-]"]}, {"lPart": "unaryop", "rPart": ["[!]"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed3472a600182c7517ae98"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]", "|", "[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[1]", "[x]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-7]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryop", "rPart": ["(", "[+*/]", "[=]", "?", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "somebinaryop", "rPart": ["[-]"]}, {"lPart": "unaryop", "rPart": ["[!]"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["Id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "somebinaryop", "|", "unaryop", ")", "?", "(", "BeginExpr", ")", "(", "EndExpr", ")", "*"]}, {"lPart": "BeginExpr", "rPart": ["const", "|", "FuncCallOrId", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "unaryop", "|", "binaryop", "|", "somebinaryop", "|", "logic", ")", "BeginExpr"]}, {"lPart": "FuncCallOrId", "rPart": ["Id", "(", "\"(\"", "(", "(", "Expr", ")", "(", "\",\"", "(", "Expr", ")", ")", "+", ")", "?", "\")\"", ")", "?"]}, {"lPart": "When", "rPart": ["\"when\"", "Expr", "BlockorOperator", "Else"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Else", "rPart": ["\"other\"", "BlockorOperator"]}, {"lPart": "Foreach", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Id", "\":\"", "Id", "\")\"", "BlockorOperator", "Stop"]}, {"lPart": "Stop", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Assign", "|", "When", "|", "Foreach", "|", "Break"]}, {"lPart": "BlockorOperator", "rPart": ["\"{\"", "Operator", "*", "\"}\"", "|", "Operator"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Break", "rPart": ["\"leave\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6810d6df8558742cb433a8bf"}, "rules": "lab34", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]", "|", "[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[1]", "[x]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-7]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryop", "rPart": ["(", "[+*/]", "[=]", "?", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "somebinaryop", "rPart": ["[-]"]}, {"lPart": "unaryop", "rPart": ["[!]"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "somebinaryop", "|", "unaryop", ")", "?", "(", "BeginExpr", ")", "(", "EndExpr", ")", "*"]}, {"lPart": "BeginExpr", "rPart": ["const", "|", "FuncCallOrId", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "unaryop", "|", "binaryop", "|", "somebinaryop", "|", "logic", ")", "BeginExpr"]}, {"lPart": "FuncCallOrId", "rPart": ["id", "(", "\"(\"", "(", "(", "Expr", ")", "(", "\",\"", "(", "Expr", ")", ")", "+", ")", "?", "\")\"", ")", "?"]}, {"lPart": "When", "rPart": ["\"when\"", "Expr", "BlockorOperator", "Else"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Else", "rPart": ["\"other\"", "BlockorOperator"]}, {"lPart": "Foreach", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "id", "\":\"", "id", "\")\"", "BlockorOperator", "Stop"]}, {"lPart": "Stop", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Assign", "|", "When", "|", "Foreach", "|", "Break"]}, {"lPart": "BlockorOperator", "rPart": ["\"{\"", "Operator", "*", "\"}\"", "|", "Operator"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Break", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Select", "rPart": [":", "\"select\"", "Expr", "(", "(", "\"case\"", "\"(\"", "const", "?", "\")\"", "BlockOrOpFSelect", "+", ")", ")", "+", "\"end\""]}, {"lPart": "OperatorForSelect", "rPart": [":", "Assign", "|", "If", "|", "While", "|", "BreakForSelect", "|", "Select"]}, {"lPart": "BlockOrOpFSelect", "rPart": ["OperatorForSelect", "|", "(", "\"{\"", "OperatorForSelect", "*", "\"}\"", ")"]}, {"lPart": "BreakForSelect", "rPart": [":", "\"break\"", "\";\""]}, {"lPart": "Function", "rPart": [":", "id", "\"=>\"", "(", "\"as\"", "type", "\"(\"", "id", "\")\"", ")", "(", "(", "\",\"", ")", "(", "type", "\"(\"", "id", "\")\"", ")", ")", "*", "(", "BlockOrOpFFunction", ")"]}, {"lPart": "OperatorForFunction", "rPart": [":", "Assign", "|", "If", "|", "While", "|", "Select"]}, {"lPart": "type", "rPart": ["[a-z]", "{3,8}"]}, {"lPart": "BlockOrOpFFunction", "rPart": [":", "(", "\"{\"", "OperatorForFunction", "*", "\"}\"", ")", "|", "OperatorForFunction"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "If", "rPart": ["\"at\"", "Expr", "\"do\"", "BlockOperator", "Else"]}, {"lPart": "BlockOperator", "rPart": ["\"{\"", "Operator", "*", "\")\"", "|", "Operator"]}, {"lPart": "While", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "BlockOperator", "Else"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Быкова А.В.","Collection":"113223145",{"_id": {"$oid": "67d2e68ee0b22203e7cbf573"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 1000, "assist": 1}}{"_id": {"$oid": "67d2eefae0b22203e7cbf5bb"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[\\']", "[]", "?", "[\\']"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["(", "[-+<>*/]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<>]", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2efb6e0b22203e7cbf5ea"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67d2f475e0b22203e7cbf64b"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}},
{"FIO":"Андреев Н.Р.","Collection":"351133531",{"_id": {"$oid": "67d68bdfe0b22203e7cbfc8b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d68c14e0b22203e7cbfc90"}, "tune": {"language": "cpp", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-3", "deltat": 0, "assist": 1}}},
{"FIO":"Замащиков М.А.","Collection":"354435232",{"_id": {"$oid": "681727108558742cb433b0f9"}, "rules": "laba1", "data": {"rList": [{"lPart": "id", "rPart": [":", "[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDecimal", "rPart": [":", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constBinary", "rPart": ["[!]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[*]", "[0-3]", "+"]}, {"lPart": "constDouble", "rPart": [":", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "constString", "rPart": [":", "[\"]", "[]", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "comparisonOperator", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")"]}, {"lPart": "arithmeticOperator", "rPart": [":", "[+-*/%]"]}, {"lPart": "logicalOperator", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")", "|", "[!]"]}], "extension": ""}}{"_id": {"$oid": "681727778558742cb433b105"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}},
{"FIO":"Сухов А.А.","Collection":"415155315",{"_id": {"$oid": "67c45961af563521c9d5b20b"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67c46477af563521c9d5b31b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "*", ")", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", ")", "+", "(", "[.]", "[0-9]", "*", ")", "+", "(", "[eE]", "+", "(", "[0-9]", ")", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[\\]? + [a-z]"]}, {"lPart": "const", "rPart": ["(", "[0-3]", "*", ")", "|", "(", "[0-9]", "*", ")", "|", "(", "[0-9a-fA-F]", "*", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67c473e2af563521c9d5b435"}, "rules": "лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["(", "[1-9]", "[0-9]", "*", ")", "|", "[0-9]"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")", "(", "[eE]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb96f68558742cb433601c"}, "rules": "лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")", "(", "[eE]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "dotcommand", "rPart": ["[;:,]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+"]}, {"lPart": "binary", "rPart": ["(", "[+*/%><]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;\n\nfunction put(x, y) {\n return y = x;\n}"}}{"_id": {"$oid": "680db7f58558742cb4339d46"}, "rules": "лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")", "(", "[eE]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "dotcommand", "rPart": ["[;:,]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "Oper", "rPart": ["\"set\"", "\"(\"", "(", "Expression", ")", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expression", "rPart": ["Unary", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "Unary", "|", "binary", ")", "Expression", ")", "?"]}, {"lPart": "Unary", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["const10", "|", "сonstReal", "|", "constExp", "|", "constChar"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArifm", "|", "binaryCheck", "|", "mixed"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binaryArifm", "rPart": ["[+*/]"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", ")"]}], "extension": "var ignoreLastWord;\n\nfunction put(x, y) {\n return y = x;\n}"}}},
{"FIO":"Рубе И.В.","Collection":"515134425",{"_id": {"$oid": "6808dc068558742cb4338a37"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "680b86f28558742cb4339846"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")"]}, {"lPart": "сonst", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680f2ef08558742cb433a5fb"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]", "|", "[a-z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "(", "[Ee]", ")", "(", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-7]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "сonst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "symbol", "rPart": ["[=]", "[>]"]}, {"lPart": "somebinaryop", "rPart": ["[-]"]}, {"lPart": "binaryop", "rPart": ["(", "[+*/]", "[=]", "?", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "unaryop", "rPart": ["[!]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "switchOp", "rPart": ["[?]", "[?=~]"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Плахотич Д.М.","Collection":"123142431",{"_id": {"$oid": "67f678db8558742cb4334a07"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f68eb08558742cb4334b49"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67f6ac4f8558742cb4334cbc"}, "rules": "LR1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[1]", "[x]", "[0-9]", "+"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimter", "rPart": ["[,;:]"]}, {"lPart": "keywords", "rPart": ["[a-zA-Z]", "*"]}], "extension": ""}}{"_id": {"$oid": "67f6ae158558742cb4334cc7"}, "rules": "LR2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "const4", "rPart": ["[4]", "[#]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>|&^/%+-]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimetr", "rPart": ["[,;:]"]}, {"lPart": "Keywords", "rPart": ["[a-zA-Z]", "*"]}, {"lPart": "brekets", "rPart": ["[(){}]"]}], "extension": ""}}{"_id": {"$oid": "6808e1168558742cb4338a5a"}, "rules": "LR3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "const4", "rPart": ["[4]", "[#]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>|&^/%+-]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimetr", "rPart": ["[,;:]"]}, {"lPart": "Keywords", "rPart": ["[a-zA-Z]", "*"]}, {"lPart": "brekets", "rPart": ["[(){}]"]}], "extension": ""}}},
{"FIO":"Еремеева Д.И.","Collection":"512213554",{"_id": {"$oid": "67bc6469af563521c9d58efe"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-1", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bc86beaf563521c9d58feb"}, "rules": "Mylab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constdecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constsymbol", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[a-fA-F0-9]", ")", ")", "[']"]}, {"lPart": "signbin", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "signboth", "rPart": ["[-]"]}, {"lPart": "signun", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c070b2af563521c9d5a44e"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constdecimal", "rPart": ["[+-]", "?", "[0-9]", "+"]}, {"lPart": "constfloat", "rPart": ["[+-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constexp", "rPart": ["[+-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constsymbol", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cfb521af563521c9d5d631"}, "rules": "Mylab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constdecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constsymbol", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[a-fA-F0-9]", ")", ")", "[']"]}, {"lPart": "signbin", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "signboth", "rPart": ["[-]"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "assignment", "rPart": ["[<]", "[-]"]}, {"lPart": "bracket", "rPart": ["[(]", "|", "[)]", "|", "[{]", "|", "[}]"]}, {"lPart": "words", "rPart": ["(", "[w]", "[h]", "[e]", "[n]", ")", "|", "(", "[e]", "[x]", "[e]", "[c]", ")", "|", "(", "[f]", "[r]", "[o]", "[m]", ")", "|", "(", "[w]", "[i]", "[t]", "[h]", ")", "|", "(", "[t]", "[h]", "[e]", "[n]", ")", "|", "(", "[e]", "[x]", "[i]", "[t]", ")", "|", "(", "[s]", "[t]", "[e]", "[p]", ")", "|", "(", "[s]", "[w]", "[i]", "[t]", "[c]", "[h]", ")", "|", "(", "[l]", "[e]", "[a]", "[v]", "[e]", ")", "|", "(", "[a]", "[n]", "[y]", ")", "|", "(", "[o]", "[t]", "[h]", "[e]", "[r]", ")", "|", "(", "[f]", "[u]", "[n]", "[c]", "[t]", "[i]", "[o]", "[n]", ")"]}, {"lPart": "spsymbol", "rPart": ["[;,]"]}, {"lPart": "function", "rPart": ["[-]", "[>]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e548dd4635a960233aecf1"}, "rules": "Mylab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constdecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constsymbol", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[a-fA-F0-9]", ")", ")", "[']"]}, {"lPart": "signbin", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "signboth", "rPart": ["[-]"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "operator", "rPart": ["(", "assignOperator", "|", "cycleOperator", "|", "switchOperator", "|", "conditionalOperator", ")"]}, {"lPart": "assignOperator", "rPart": ["(", "id", "\"<-\"", "statement", "\";\"", ")"]}, {"lPart": "conditionalOperator", "rPart": ["\"when\"", "statement", "(", "(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator", ")", "(", "\"other\"", "(", "(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator", ")", ")", "?"]}, {"lPart": "cycleOperator", "rPart": ["\"exec\"", "(", "(", "\"{\"", "(", "operator", "\";\"", ")", "+", "\"}\"", ")", "|", "operator", ")", "\"with\"", "(", "assignOperator", ")", "\"from\"", "(", "constdecimal", ")", "\"to\"", "(", "constdecimal", ")", "\"step\"", "(", "constdecimal", ")", "\"exit\""]}, {"lPart": "switchOperator", "rPart": ["\"switch\"", "statement", "\"{\"", "(", "\"by\"", "(", "const", "|", "statement", ")", "\"do\"", "\"{\"", "(", "operator", "\";\"", ")", "+", "\"}\"", ")", "+", "(", "\"any do\"", "\"{\"", "(", "operator", "\";\"", ")", "+", "\"}\"", ")", "\"}\""]}, {"lPart": "statement", "rPart": ["(", "unary", "?", "beginStatement", "endStatement", ")"]}, {"lPart": "unary", "rPart": ["signboth", "|", "signun"]}, {"lPart": "beginStatement", "rPart": ["id", "|", "constdecimal", "|", "constfloat", "|", "constexp", "|", "constsymbol", "|", "\"(\"", "statement", "\")\""]}, {"lPart": "endStatement", "rPart": ["signbin", "|", "signboth", "statement"]}, {"lPart": "const", "rPart": ["constdecimal", "|", "constfloat", "|", "constexp", "|", "constsymbol"]}, {"lPart": "word", "rPart": ["[p]", "[r]", "[i]", "[n]", "[t]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f399a58558742cb4333374"}, "rules": "Mylab4", "data": {"rList": [{"lPart": "prog", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "argS", "?", "\")\"", "\"{\"", "operator", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "argS", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["(", "assignOperator", "\";\"", ")", "|", "cycleOperator", "|", "switchOperator", "|", "conditionalOperator", "|", "blockReturn", "|", "(", "\"exit\"", "\";\"", ")"]}, {"lPart": "cycleOperator", "rPart": ["\"exec\"", "(", "oBlock", ")", "\"with\"", "(", "id", ")", "\"from\"", "(", "constdecimal", ")", "\"to\"", "(", "constdecimal", ")", "\"step\"", "(", "constdecimal", ")"]}, {"lPart": "switchOperator", "rPart": ["\"switch\"", "statement", "\"{\"", "(", "\"by\"", "(", "const", ")", "\"do\"", "oBlock", "*", ")", "+", "(", "\"any\"", "\"do\"", "oBlock", "*", ")", "\"}\""]}, {"lPart": "conditionalOperator", "rPart": ["\"when\"", "statement", "(", "oBlock", ")", "other"]}, {"lPart": "assignOperator", "rPart": ["(", "id", "\"<-\"", "statement", ")"]}, {"lPart": "statement", "rPart": ["(", "unary", "?", "beginStatement", "endStatement", "?", ")"]}, {"lPart": "other", "rPart": ["\"other\"", "oBlock"]}, {"lPart": "other", "rPart": ["~", "\"other\""]}, {"lPart": "oBlock", "rPart": ["(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator"]}, {"lPart": "beginStatement", "rPart": ["id", "|", "const", "|", "\"(\"", "statement", "\")\""]}, {"lPart": "const", "rPart": ["constdecimal", "|", "constfloat", "|", "constexp", "|", "constsymbol"]}, {"lPart": "unary", "rPart": ["signboth", "|", "signun"]}, {"lPart": "endStatement", "rPart": ["(", "signbin", "|", "signboth", ")", "statement"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constdecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constsymbol", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[a-fA-F0-9]", ")", ")", "[']"]}, {"lPart": "signboth", "rPart": ["[-]"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signbin", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "word", "rPart": ["[p]", "[r]", "[i]", "[n]", "[t]"]}, {"lPart": "blockReturn", "rPart": ["\"return\"", "\";\""]}, {"lPart": "callFunction", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a265c8558742cb43394c3"}, "rules": "Mylab5", "data": {"rList": [{"lPart": "prog", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "argS", "?", "\")\"", "\"{\"", "operator", "*", "\"}\"", "\"->\"", "id"]}, {"lPart": "argS", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["(", "assignOperator", "\";\"", ")", "|", "cycleOperator", "|", "switchOperator", "|", "conditionalOperator", "|", "blockReturn", "|", "(", "\"exit\"", "\";\"", ")"]}, {"lPart": "cycleOperator", "rPart": ["\"exec\"", "(", "oBlock", ")", "\"with\"", "(", "id", ")", "\"from\"", "(", "constdecimal", ")", "\"to\"", "(", "constdecimal", ")", "(", "\"step\"", "(", "constdecimal", ")", ")", "?"]}, {"lPart": "switchOperator", "rPart": ["\"switch\"", "statement", "\"{\"", "(", "\"by\"", "(", "const", ")", "\"do\"", "oBlock", "*", ")", "+", "(", "\"any\"", "\"do\"", "oBlock", "*", ")", "?", "\"}\""]}, {"lPart": "conditionalOperator", "rPart": ["\"when\"", "statement", "(", "oBlock", ")", "other"]}, {"lPart": "blockReturn", "rPart": ["\"return\"", "\";\""]}, {"lPart": "assignOperator", "rPart": ["(", "id", "\"<-\"", "statement", ")"]}, {"lPart": "statement", "rPart": ["(", "unary", "?", "beginStatement", "endStatement", "?", ")"]}, {"lPart": "other", "rPart": ["\"other\"", "oBlock"]}, {"lPart": "other", "rPart": ["~", "\"other\""]}, {"lPart": "oBlock", "rPart": ["(", "\"{\"", "operator", "+", "\"}\"", ")", "|", "operator"]}, {"lPart": "beginStatement", "rPart": ["id", "(", "\"(\"", "(", "(", "statement", ")", "(", "\",\"", "(", "statement", ")", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", "|", "\"(\"", "statement", "\")\""]}, {"lPart": "const", "rPart": ["constdecimal", "|", "constfloat", "|", "constexp", "|", "constsymbol"]}, {"lPart": "unary", "rPart": ["signboth", "|", "signun"]}, {"lPart": "endStatement", "rPart": ["(", "signbin", "|", "signboth", ")", "statement"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constdecimal", "rPart": ["[0-9]", "+"]}, {"lPart": "constfloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constsymbol", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[a-fA-F0-9]", "[a-fA-F0-9]", ")", ")", "[']"]}, {"lPart": "signboth", "rPart": ["[-]"]}, {"lPart": "signun", "rPart": ["[!]"]}, {"lPart": "signbin", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "word", "rPart": ["[p]", "[r]", "[i]", "[n]", "[t]"]}, {"lPart": "callFunction", "rPart": ["id", "\"(\"", "(", "(", "const", "|", "id", ")", "(", "\",\"", "(", "const", "|", "id", ")", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Мальцев А.И.","Collection":"213512224",{"_id": {"$oid": "67b9bbb2ce6dd03692d0912b"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 1000, "assist": 1}}{"_id": {"$oid": "67fd24ee8558742cb4336ae8"}, "rules": "Lab8", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comparisons", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "specialops", "rPart": ["[-+]"]}, {"lPart": "unops", "rPart": ["[!~]"]}, {"lPart": "binops", "rPart": ["[*/^%]"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "linecomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "Const", "rPart": ["constchar", "|", "constnum"]}, {"lPart": "ProgramText", "rPart": ["{label_count = 0;}", "(", "FnBlock", ")", "*", "{to_pseudocode();run();}"]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "Statement", "rPart": ["IfStatement", "|", "DeclareExpr", "|", "SetStatement", "|", "ExprStatement", "|", "RetStatement", "|", "Block", "|", "PrintFn", "|", "LoopStatement", "|", "CaseStatement", "|", "\"exit\"", "delim", "{check_exit();}", "|", "delim"]}, {"lPart": "DeclareExpr", "rPart": ["\"declare\"", "{op_stack.push(this.currentLexem[1]);}", "type", "{to_pfr(this.currentLexem[1]); to_pfr(op_stack.pop()); to_pfr(\"declare\");}", "id", "delim"]}, {"lPart": "SetStatement", "rPart": ["\"set\"", "{save_pos();}", "\"(\"", "Expr", "{while (op_stack.length > 0) if (peek(op_stack) == \"(\") op_stack.pop(); else to_pfr(op_stack.pop());}", "\",\"", "{insert_pos(this.currentLexem[1]);}", "id", "\")\"", "{to_pfr(\"=\");}", "delim"]}, {"lPart": "ExprStatement", "rPart": ["Expr", "delim"]}, {"lPart": "RetStatement", "rPart": ["\"ret\"", "RetExpr"]}, {"lPart": "RetExpr", "rPart": ["Expr", "{to_pfr(\"return_val\");}", "delim"]}, {"lPart": "RetExpr", "rPart": ["{to_pfr(\"return\");}", "delim"]}, {"lPart": "IfStatement", "rPart": ["{begin_if();}", "IfBlock", "ElseIfBlock", "ElseBlock", "{finish_if();}"]}, {"lPart": "LoopStatement", "rPart": ["{begin_while();}", "\"exec\"", "Statement", "LoopFooter", "delim"]}, {"lPart": "CaseStatement", "rPart": ["{begin_case();}", "\"case\"", "\"(\"", "Expr", "{to_pfr(\"=\");}", "\")\"", "{save_pos();}", "\"{\"", "CaseExpr", "*", "DefaultCaseExpr", "?", "\"}\"", "{finish_case();}"]}, {"lPart": "Expr", "rPart": ["BeginExpr", "ExprOperation"]}, {"lPart": "BeginExpr", "rPart": ["{unops_count=0;}", "(", "{unops_count++;unops_stack.push(this.currentLexem[1]);}", "(", "unops", "|", "specialops", ")", ")", "*", "{unops_count_stack.push(unops_count);}", "(", "(", "{to_pfr(this.currentLexem[1]);}", "(", "ExprId", "|", "Const", ")", ")", "|", "(", "{op_stack.push(\"(\");}", "\"(\"", "Expr", "{if (op_stack.length > 0 && peek(op_stack) == \"(\") op_stack.pop();}", "\")\"", ")", ")", "{check_begin_expr();}"]}, {"lPart": "ExprOperation", "rPart": ["(", "{if (op_stack.length > 0 && get_priority(peek(op_stack)) >= get_priority(this.currentLexem[1])) to_pfr(op_stack.pop()); op_stack.push(this.currentLexem[1]); }", "(", "binops", "|", "logicalops", "|", "specialops", "|", "comparisons", ")", "Expr", "{if (op_stack.length > 0) if (peek(op_stack) == \"(\") op_stack.pop(); else to_pfr(op_stack.pop());}", ")", "?"]}, {"lPart": "FnBlock", "rPart": ["{to_pfr(this.currentLexem[1]);to_pfr(\"define_function\");}", "id", "\"(\"", "(", "FnArgument", "(", "\",\"", "FnArgument", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "{to_pfr(this.currentLexem[1]);to_pfr(\"set_ret_type\");}", "type", ")", "?", "{to_pfr(\"start_fn\");}", "Block", "{to_pfr(\"end_fn\");}"]}, {"lPart": "ExprId", "rPart": ["id", "(", "\"(\"", "{arg_stack.push(0);}", "(", "Expr", "{inc_arg_count();}", "(", "\",\"", "Expr", "{inc_arg_count();}", ")", "*", ")", "?", "{to_pfr(arg_stack.pop()+\"\");to_pfr(\"call\");}", "\")\"", ")", "?"]}, {"lPart": "PrintFn", "rPart": ["\"print\"", "\"(\"", "{arg_stack.push(0);}", "(", "Expr", "{inc_arg_count();}", "(", "\",\"", "Expr", "{inc_arg_count();}", ")", "*", ")", "?", "{to_pfr(arg_stack.pop()+\"\");to_pfr(\"print\");}", "\")\"", "delim"]}, {"lPart": "FnArgument", "rPart": ["(", "{arg_stack.push(this.currentLexem[1]);}", "type", ")", "?", "{to_pfr(this.currentLexem[1]); check_arg_def();}", "id"]}, {"lPart": "IfBlock", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "{save_pos();}", "Statement", "{finish_if_stmt();}"]}, {"lPart": "ElseIfBlock", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "{save_pos();}", "Statement", "{finish_if_stmt();}", "ElseIfBlock"]}, {"lPart": "ElseIfBlock", "rPart": ["~", "\"?:\""]}, {"lPart": "ElseBlock", "rPart": ["\":\"", "Statement"]}, {"lPart": "ElseBlock", "rPart": ["~", "\":\""]}, {"lPart": "LoopFooter", "rPart": ["\"with\"", "{while_step = 1;while_id = this.currentLexem[1]; insert_pos_soft(while_id);}", "id", "\"from\"", "{insert_pos_soft(this.currentLexem[1]);insert_pos(\"=\");}", "constnum", "\"to\"", "{while_to=this.currentLexem[1];}", "constnum", "(", "\"step\"", "{while_step = this.currentLexem[1];}", "constnum", ")", "?", "{finish_while();}"]}, {"lPart": "CaseExpr", "rPart": ["\"when\"", "{check_case(this.currentLexem[1]);}", "Const", "\"then\"", "Statement", "*"]}, {"lPart": "DefaultCaseExpr", "rPart": ["{default_case_stmt = \"CaseStmt_\"+label_count;to_pfr(\"CaseStmt_\"+label_count+++\":\");}", "\"otherwise\"", "Statement", "*"]}], "extension": "var ignoreLastWord;\n\ndelete _G.Tracer;\n_G.Tracer = class {\n    constructor() {\n        this.pos_history = [];\n        this.history = [];\n    }\n    put(l) {\n        this.history.push(l);\n    }\n    getAll() {\n        var res = \"\";\n        this.history.forEach(v => {\n            if (v.endsWith(\":\")) {\n                res += \"\\n\" + v + \"\\n\";\n            } else {\n                res += \" \" + v;\n            }\n        });\n        if (this.code) {\n            res += \"\\n\\nРезультат компиляции:\\n\"\n            res += this.code;\n        }\n        if (this.stdout) {\n            res += \"\\n\\nРезультат выполнения:\\n\"\n            res += this.stdout;\n        }\n        return res;\n    }\n    clear() {\n        this.pos_history = [];\n        this.history = [];\n    }\n    save_pos() {\n        this.pos_history.push(this.history.length);\n    }\n    insert_pos(l) {\n        var pos = this.pos_history.pop();\n        this.history.splice(pos, 0, l);\n    }\n    insert_pos_soft(l) {\n        var pos = this.pos_history[this.pos_history.length - 1];\n        this.history.splice(pos, 0, l);\n        this.pos_history[this.pos_history.length - 1]++;\n    }\n    to_pseudocode() {\n        var compiler = new _G.Compiler();\n        var code = compiler.compile(this.history);\n        if (typeof code === \"string\") {\n            this.code = code;\n        } else {\n            this.code = compiler.display(code);\n            this.comp_code = code;\n        }\n    }\n    run() {\n        var runner = new _G.Executor();\n        this.stdout = runner.execute(this.comp_code);\n    }\n}\n\ndelete _G.Compiler;\n_G.Compiler = class {\n    constructor() {\n        this.stack = [];\n        this.functions = new Map();\n    }\n    compile(pfr) {\n        this.len = pfr.length;\n        this.i = 0;\n        for (; this.i < this.len; this.i++) {\n            var word = pfr[this.i];\n            switch (word) {\n                case \"define_function\":\n                    var fn = this.compile_function(pfr,this.functions);\n                    if (fn.error) return fn.error + \" \" + JSON.stringify(fn);\n                    this.functions.set(fn.name,fn);\n                    break;\n                default:\n                    this.stack.push(word);\n            }\n        }\n        return this.monomorphise(this.functions);\n    }\n    compile_function(pfr, fns) {\n        var fn = {args: [], code: [], name: this.stack.pop()};\n        for (; this.i < this.len; this.i++) {\n            var word = pfr[this.i];\n            switch (word) {\n                case \"declare_typed_arg\":\n                    var type = this.stack.pop();\n                    var name = this.stack.pop();\n                    fn.args.push({type: this.check_ret_type(type), name: name});\n                    break;\n                case \"declare_arg\":\n                    var name = this.stack.pop();\n                    fn.args.push({name: name});\n                    break;\n                case \"set_ret_type\":\n                    fn.ret_type = this.stack.pop();\n                    break;\n                case \"start_fn\":\n                    var is_main = fn.name == \"m1\";\n                    fn.code = this.compile_code(pfr, fn, is_main, fns);\n                    if (fn.code.error) return {name: fn.name, ctx: fn.code.ctx, error: fn.code.error};\n                    return fn;\n                default:\n                    this.stack.push(word);\n            }\n        }\n        return fn;\n    }\n    compile_code(pfr, fn, is_main, fns) {\n        var args = fn.args;\n        var ret_type = fn.ret_type;\n        var self_name = fn.name;\n        var code = [];\n        var declared_vars = args.slice();\n        var type_stack = [];\n        var labels = [];\n        if (!is_main) code.push({instr:\"POP\", arg1: \"RET_ADDR\"});\n        args.forEach(a => {\n            code.push({instr:\"POP\", arg1: a.name});\n        });\n        for (; this.i < this.len; this.i++) {\n            var word = pfr[this.i];\n            if (word == \"end_fn\") break;\n            if (word.endsWith(\":\")) {\n                labels.push({name: word.replace(':', ''), rel_addr: code.length});\n                continue;\n            }\n            switch (word) {\n                case \"=\":\n                    var arg2 = this.stack.pop();\n                    var arg2_type = this.get_type(arg2, declared_vars, type_stack);\n                    var arg1 = this.stack.pop();\n                    var is_declared = false;\n                    var err;\n                    declared_vars.forEach(v => {\n                       if (v.name == arg1) {\n                            is_declared = true;\n                            if (v.type && v.type != arg2_type) {\n                               err = {ctx: code, error: \"Тип аргумента не совпадает с типом переменной \"+v.name+\"(\"+v.type+\"), \"+arg2+\"(\"+arg2_type+\")\"};\n                            }\n                        } \n                    });\n                    if (err) return err;\n                    if (!is_declared) {\n                        declared_vars.push({name: arg1, type: arg2_type});\n                    }\n                    code.push({instr:\"MOV\", arg1: arg1, arg2: arg2});\n                    break;\n                case \"declare\":\n                    var type = this.check_ret_type(this.stack.pop());\n                    var arg = this.stack.pop();\n                    if (this.check_declaration(arg, \"VAR\", declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg2+\" уже определена\"};\n                    declared_vars.push({name: arg1, type: type});\n                    break;\n                case \"==\":\n                case \"!=\":\n                case \"<=\":\n                case \"<\":\n                case \">=\":\n                case \">\":\n                case \"+\":\n                case \"-\":\n                case \"%\":\n                case \"/\":\n                case \"*\":\n                case \"&&\":\n                case \"&\":\n                case \"||\":\n                case \"|\":\n                case \"^\":\n                    var arg2 = this.stack.pop();\n                    var arg2_type = this.get_type(arg2, declared_vars, type_stack);\n                    var arg1 = this.stack.pop();\n                    var arg1_type = this.get_type(arg1, declared_vars, type_stack);\n                    if (!this.check_declaration(arg1, arg1_type, declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg1+\" не определена\"};\n                    if (!this.check_declaration(arg2, arg2_type, declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg2+\" не определена\"};\n                    if (!this.check_casting(arg1_type, arg2_type))\n                        return {ctx: code, error: \"Аргументы разных типов\"};\n                    var it = \"\";\n                    if (arg1_type == \"FLOAT\")\n                        it = \"F\";\n                    switch (word) {\n                        case \"==\":\n                            code.push({instr:\"CMP_EQ\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"!=\":\n                            code.push({instr:\"CMP_NEQ\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"<=\":\n                            code.push({instr:\"CMP_LE\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"<\":\n                            code.push({instr:\"CMP_L\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \">=\":\n                            code.push({instr:\"CMP_GE\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \">\":\n                            code.push({instr:\"CMP_G\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"&&\":\n                            code.push({instr:\"AND\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"&\":\n                            code.push({instr:\"BAND\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"||\":\n                            code.push({instr:\"OR\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"|\":\n                            code.push({instr:\"BOR\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"^\":\n                            code.push({instr:\"XOR\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"+\":\n                            code.push({instr:it+\"ADD\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"-\":\n                            code.push({instr:it+\"SUB\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"%\":\n                            code.push({instr:it+\"MOD\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"/\":\n                            code.push({instr:it+\"DIV\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"*\":\n                            code.push({instr:it+\"MUL\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                    }\n                    this.stack.push(\"STACK\");\n                    break;\n                case \"@-\":\n                case \"@+\":\n                case \"!\":\n                case \"~\":\n                    var arg1 = this.stack.pop();\n                    var arg1_type = this.get_type(arg1, declared_vars, type_stack);\n                    if (!this.check_declaration(arg1, arg1_type, declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg1+\" не определена\"};\n                    if (!this.check_casting(arg1_type, \"INT\"))\n                        return {ctx: code, error: \"Аргументы разных типов\"};\n                    switch (word) {\n                        case \"@-\":\n                            code.push({instr:\"NEG\", arg1: arg1});\n                            break;\n                        case \"@+\":\n                            code.push({instr:\"POS\", arg1: arg1});\n                            break;\n                        case \"!\":\n                            code.push({instr:\"NOT\", arg1: arg1});\n                            break;\n                        case \"~\":\n                            code.push({instr:\"BNOT\", arg1: arg1});\n                            break;\n                    }\n                    this.stack.push(\"STACK\");\n                    type_stack.push(\"INT\");\n                    break;\n                case \"jump_false\":\n                    var label = this.stack.pop();\n                    code.push({instr:\"FJMP\", arg1: label});\n                    break;\n                case \"jump_true\":\n                    var label = this.stack.pop();\n                    code.push({instr:\"TJMP\", arg1: label});\n                    break;\n                case \"jump\":\n                    var label = this.stack.pop();\n                    code.push({instr:\"JMP\", arg1: label});\n                    break;\n                case \"return_val\":\n                    if (!ret_type)\n                        return {ctx: code, error: \"Функция не возвращает значение\"};\n                    var arg1 = this.stack.pop();\n                    var arg1_type = this.get_type(arg1, declared_vars, type_stack);\n                    code.push({instr: \"PUSH\", arg1: arg1});\n                    if (!this.check_casting(arg1_type, this.check_ret_type(ret_type)))\n                        return {ctx: code, error: \"Неправильный возвращаемый тип\"};\n                    if (!is_main) code.push({instr:\"PUSH\", arg1: \"RET_ADDR\"}); \n                    code.push({instr:\"RET\"});\n                    break;\n                case \"return\":\n                    if (ret_type)\n                        return {ctx: code, error: \"Функция должна возвращать значение\"};\n                    if (!is_main) code.push({instr:\"PUSH\", arg1: \"RET_ADDR\"});\n                    else code.push({instr:\"FIN\"});\n                    code.push({instr:\"RET\"});\n                    break;\n                case \"call\":\n                    var arg_count = this.stack.pop();\n                    var arg_stack = [];\n                    for (var i = 0; i < arg_count; i++) {\n                        var arg = this.stack.pop();\n                        if (arg == \"STACK\") {\n                            code.push({instr: \"POP\", arg1: \"tmp\"+i});\n                            arg_stack.push({arg: \"tmp\"+i, type: type_stack.pop()});\n                            type = type_stack.pop();\n                        } else {\n                            arg_stack.push({arg: arg, type: this.get_type(arg, declared_vars, type_stack)});\n                        }\n                    }\n                    \n                    var fn_name = this.stack.pop();\n                    var local_fn = fn;\n                    if (fn_name != self_name)\n                        local_fn = fns.get(fn_name);\n                    if (!local_fn)\n                        return {ctx: code, error: \"Функция \"+fn_name+\" не определена\"};\n                    if (local_fn.args.length != arg_count)\n                        return {ctx: code, error: \"Функция \"+fn_name+\": неправильное кол-во аргументов\"};\n                    arg_stack.reverse();\n                    for (var i = 0; arg_stack.length != 0; i++) {\n                        var arg = arg_stack.pop();\n                        code.push({instr:\"PUSH\", arg1: arg.arg});\n                        if (!this.check_casting(arg.type, local_fn.args[arg_count - i]))\n                            return {ctx: code, error: \"Неправильный тип аргумента\"};\n                    }\n                    code.push({instr:\"CALL\", arg1: fn_name});\n                    if (local_fn.ret_type) {\n                        this.stack.push(\"STACK\");\n                        type_stack.push(this.check_ret_type(local_fn.ret_type))\n                    }\n                    break;\n                case \"print\":\n                    var arg_count = this.stack.pop();\n                    for (var i = 0; i < arg_count; i++) {\n                        var arg = this.stack.pop();\n                        code.push({instr:\"PUSH\", arg1: arg}); \n                    }\n                    code.push({instr:\"PRINT\", arg1: arg_count+\"\"});\n                    break;\n                default:\n                    this.stack.push(word);\n            }\n        }\n        if (ret_type && code[code.length - 1].instr != \"RET\")\n            return {ctx: code, error: \"Функция должна возвращать значение, но нет ret\"};\n        else if (!is_main && !ret_type && code[code.length - 1].instr != \"RET\") {\n            code.push({instr:\"PUSH\", arg1: \"RET_ADDR\"}); \n            code.push({instr:\"RET\"});\n        } else if (is_main) {\n            code.push({instr:\"FIN\"});\n        }\n        var ready_code = [];\n        for (var i = 0; i < code.length; i++) {\n            var stmt = code[i];\n            switch (stmt.instr) {\n                case \"FJMP\":\n                case \"TJMP\":\n                case \"JMP\":\n                    var idx;\n                    labels.forEach(l => {\n                        if (l.name == stmt.arg1) idx = l.rel_addr;\n                    })\n                    if (!idx) return {ctx: code, error: \"Неопределённая метка\"}\n                    var off = (idx - i)+\"\";\n                    stmt.arg1 = off;\n                default:\n                    ready_code.push(stmt);\n            }\n        }\n        return ready_code;\n    }\n    monomorphise(code) {\n        var ready_code = [];\n        var labels = [];\n        var main_off;\n        for (var [k,v] of code) {\n            labels.push({name: v.name, addr: ready_code.length});\n            for (const instr of v.code) {\n                if (instr.instr == \"CALL\") {\n                    var idx;\n                    labels.forEach(l => {\n                        if (l.name == instr.arg1) idx = l.addr;\n                    })\n                    var off = (idx - ready_code.length)+\"\";\n                    instr.arg1 = off;\n                }\n                ready_code.push(instr);\n            }\n        }\n        labels.forEach(l => {\n            if (l.name == \"m1\") main_off = l.addr;\n        })\n        if (!main_off) return {ctx: code, error: \"Неопределена функция m1\"}\n        ready_code.splice(0, 0, {instr:\"JMP\", arg1: (main_off+1)+\"\"});\n        return ready_code;\n    }\n    get_type(arg, declared_vars, type_stack) {\n        var arg_type = this.check_type(arg);\n        if (arg_type == \"STACK\") arg_type = type_stack.pop();\n        if (arg_type != \"VAR\") return arg_type;\n        var type;\n        declared_vars.forEach(v => {\n            if (v.name == arg) type = v.type;\n        });\n        return type;\n    }\n    check_declaration(v_in, type, declared_vars) {\n        var is_declared = false;\n        if (type == \"VAR\")\n            declared_vars.forEach(v => {if (v.name == v_in) is_declared = true;});\n        else is_declared = true;\n        return is_declared;\n    }\n    check_casting(v1, v2) {\n        if (v1 == v2) return true;\n        if (v1 == \"CHAR\" || v2 == \"CHAR\") return false;\n        return true;\n    }\n    check_type(v) {\n        if (v == \"STACK\") return \"STACK\";\n        else if (v.endsWith(\"'\")) return \"CHAR\";\n        else if (parseInt(v)+\"\" == v) return \"INT\";\n        else if (v.includes(\".\")) return \"FLOAT\";\n        else return \"VAR\";\n    }\n    check_ret_type(t) {\n        if (t == \"int\") return \"INT\";\n        else if (t == \"float\") return \"FLOAT\";\n        else if (t == \"char\") return \"CHAR\";\n        else return t;\n    }\n    display(code) {\n        if (code.error) return code.error + \" \" + JSON.stringify(code);\n        var ret_repr = \"\";\n        for (const instr of code) {\n            ret_repr += instr.instr;\n            if (instr.arg1) ret_repr += \" \" + instr.arg1;\n            if (instr.arg2) ret_repr += \" \" + instr.arg2;\n            ret_repr += \"\\n\";\n        }\n        return ret_repr;\n    }\n}\n\ndelete _G.Executor;\n_G.Executor = class {\n    constructor() {\n        this.stack = [];\n        this.scope_stack = [];\n        this.scope = [];\n        this.output = \"\";\n    }\n        execute(code) {\n        var ip = 0;\n        var calls = 0;\n        while (1) {\n            if (ip >= code.length) return \"Выход за границы!\";\n            var instr = code[ip++];\n            if (calls > 2000000) return \"OVERFLOW\";\n            calls++;\n            switch (instr.instr) {\n                case \"FIN\":\n                    console.log(this.stack, this.scope);\n                    console.log(\"Calls:\", calls);\n                    return this.output;\n                case \"MOV\":\n                    if (this.check_type(instr.arg1) != \"VAR\") {\n                        return \"Первый аргумент MOV не переменная\";\n                    }\n                    this.scope[instr.arg1] = this.parse_type(instr.arg2);\n                    break;\n                case \"PUSH\":\n                    this.stack.push(this.parse_type(instr.arg1));\n                    break;\n                case \"POP\":\n                    this.scope[instr.arg1] = this.stack.pop();\n                    break;\n                case \"JMP\":\n                    ip += parseInt(instr.arg1) - 1;\n                    break;\n                case \"TJMP\":\n                    if (this.stack.pop() == true) {\n                        ip += parseInt(instr.arg1) - 1;\n                    }\n                    break;\n                case \"FJMP\":\n                    if (this.stack.pop() == false) {\n                        ip += parseInt(instr.arg1) - 1;\n                    }\n                    break;\n                case \"PRINT\":\n                    var count = parseInt(instr.arg1);\n                    var v_stack = [];\n                    while (count--)\n                        v_stack.push(this.stack.pop());\n                    v_stack.reverse();\n                    while (v_stack.length) {\n                        var v = v_stack.pop();\n                        this.output += v + \" \";\n                    }\n                    this.output += \"\\n\";\n                    break;\n                case \"CMP_EQ\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1==arg2);\n                    break;\n                case \"CMP_NEQ\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1!=arg2);\n                    break;\n                case \"CMP_LE\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1<=arg2);\n                    break;\n                case \"CMP_L\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1<arg2);\n                    break;\n                case \"CMP_GE\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1>=arg2);\n                    break;\n                case \"CMP_G\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1>arg2);\n                    break;\n                case \"AND\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1&&arg2);\n                    break;\n                case \"BAND\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1&arg2);\n                    break;\n                case \"OR\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1||arg2);\n                    break;\n                case \"BOR\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1|arg2);\n                    break;\n                case \"XOR\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1^arg2);\n                    break;\n                case \"ADD\":\n                case \"FADD\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1+arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"SUB\":\n                case \"FSUB\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1-arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"MUL\":\n                case \"FMUL\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1*arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"DIV\":\n                case \"FDIV\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1/arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"MOD\":\n                case \"FMOD\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1%arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"NOT\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(!arg1);\n                    break;\n                case \"BNOT\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(~arg1);\n                    break;\n                case \"NEG\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(-arg1);\n                    break;\n                case \"POS\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(+arg1);\n                    break;\n                case \"CALL\":\n                    this.scope_stack.push(this.scope);\n                    this.scope = [];\n                    this.stack.push(ip);\n                    ip += parseInt(instr.arg1) - 1;\n                    break;\n                case \"RET\":\n                    ip = this.stack.pop();\n                    this.scope = this.scope_stack.pop();\n                    break;\n                default:\n                    console.log(\"Unknown op:\", instr.instr);\n                    return \"Unknown op:\"+instr.instr;\n            }\n        }\n    }\n    parse_type(v) {\n        switch (this.check_type(v)) {\n            case \"STACK\": \n                return this.stack.pop();\n            case \"INT\":\n                return parseInt(v);\n            case \"FLOAT\":\n                return parseFloat(v);\n            case \"CHAR\":\n                return unescapeString(v.replaceAll(\"'\", \"\"));\n            case \"VAR\":\n                return this.scope[v];\n        }\n    }\n    check_type(v) {\n        if (v == \"STACK\") return \"STACK\";\n        else if (v.endsWith(\"'\")) return \"CHAR\";\n        else if (parseInt(v)+\"\" == v) return \"INT\";\n        else if (v.includes(\".\")) return \"FLOAT\";\n        else return \"VAR\";\n    }\n}\n\nvar tracer = new _G.Tracer();\n\nvar unops_stack = [];\nvar unops_count_stack = [];\nvar unops_count = 0;\nvar op_stack = [];\nvar control_stack = [];\nvar if_control_stack = [];\nvar arg_stack = [];\nvar label_count = 0;\nvar while_step = \"1\";\nvar while_id = \"\";\nvar while_to = \"0\";\nvar label_type_stack = [];\nvar default_case_stmt = \"\";\n\nfunction to_pfr(v) {\n    tracer.put(v);\n}\n\nfunction save_pos() {\n    tracer.save_pos();\n}\n\nfunction insert_pos(v) {\n    tracer.insert_pos(v);\n}\nfunction insert_pos_soft(v) {\n    tracer.insert_pos_soft(v);\n}\n\nfunction inc_arg_count() {\n    arg_stack[arg_stack.length - 1]++;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction get_priority(s) {\n    switch (s) {\n        case \"(\":\n            return 0;\n        case \"||\":\n            return 1;\n        case \"&&\":\n            return 2;\n        case \"|\":\n            return 3;\n        case \"^\":\n            return 4;\n        case \"&\":\n            return 5;\n        case \"==\":\n        case \"!=\":\n            return 6;\n        case \"<\":\n        case \"<=\":\n        case \">\":\n        case \">=\":\n            return 7;\n        case \"+\":\n        case \"-\":\n            return 8;\n        case \"*\":\n        case \"/\":\n        case \"%\":\n            return 9;\n        case \"!\":\n        case \"~\":\n            return 10;\n    }\n    return 0;\n}\n\nfunction check_begin_expr() {\n    var len = unops_count_stack.pop();\n    while (len--) {\n        to_pfr(to_unary(unops_stack.pop()));\n    }\n}\n\nfunction to_unary(s) {\n    switch (s) {\n        case \"+\":\n            return \"@+\";\n        case \"-\":\n            return \"@-\";\n        case \"!\":\n        case \"~\":\n        default:\n            return s;\n    }\n}\n\nfunction begin_while() {\n    save_pos();\n    control_stack.push(label_count++);\n    label_type_stack.push(\"Loop\");\n    to_pfr(\"LoopBegin_\" + peek(control_stack) +\":\");\n}\n\nfunction finish_while() {\n    to_pfr(while_id);\n    to_pfr(while_id);\n    to_pfr(while_step);\n    to_pfr(\"+\");\n    to_pfr(\"=\");\n    to_pfr(while_id);\n    to_pfr(while_to);\n    to_pfr(\">=\");\n    to_pfr(\"LoopEnd_\"+peek(control_stack));\n    to_pfr(\"jump_true\");\n    to_pfr(\"LoopBegin_\"+peek(control_stack));\n    to_pfr(\"jump\");\n    to_pfr(\"LoopEnd_\"+control_stack.pop()+\":\");\n    label_type_stack.pop();\n}\n\nfunction begin_case() {\n    control_stack.push(label_count++);\n    label_type_stack.push(\"Case\");\n    to_pfr(\"case_expr_\"+peek(control_stack));\n}\n\nfunction check_case(l) {\n    insert_pos_soft(\"case_expr_\"+peek(control_stack));\n    insert_pos_soft(l);\n    insert_pos_soft(\"==\");\n    insert_pos_soft(\"CaseStmt_\" + label_count);\n    insert_pos_soft(\"jump_true\");\n    to_pfr(\"CaseStmt_\" + label_count++ + \":\");\n}\n\nfunction finish_case() {\n    if (default_case_stmt != \"\") {\n        insert_pos_soft(default_case_stmt);\n        insert_pos(\"jump\");\n        default_case_stmt = \"\";\n    } else {\n        insert_pos_soft(\"CaseEnd_\"+peek(control_stack));\n        insert_pos(\"jump\");\n    }\n    to_pfr(\"CaseEnd_\"+control_stack.pop()+\":\");\n    label_type_stack.pop();\n}\n\nfunction begin_if() {\n    if_control_stack.push(label_count++);\n}\n\nfunction finish_if_stmt() {\n    to_pfr(\"IfEnd_\"+peek(if_control_stack));\n    to_pfr(\"jump\");\n    insert_pos_soft(\"IfStmt_\" + label_count);\n    insert_pos(\"jump_false\");\n    to_pfr(\"IfStmt_\" + label_count++ + \":\");\n}\n\nfunction finish_if() {\n    to_pfr(\"IfEnd_\"+if_control_stack.pop()+\":\");\n}\n\nfunction check_exit() {\n    if (control_stack.length) {\n        to_pfr(peek(label_type_stack)+\"End_\" + peek(control_stack));\n        to_pfr(\"jump\");\n    }\n}\n\nfunction check_arg_def() {\n    if (arg_stack.length) {\n        to_pfr(arg_stack.pop());\n        to_pfr(\"declare_typed_arg\");\n    } else {\n        to_pfr(\"declare_arg\");\n    }\n}\n\nfunction unescapeString(str) {\n  return str.replace(/\\\\(?:x([0-9a-fA-F]+)|([abfnrtv\\\\'\"?]))/g, (match, hexDigits, simpleChar) => {\n    if (hexDigits !== undefined) {\n      return String.fromCharCode(parseInt(hexDigits, 16));\n    }\n    switch (simpleChar) {\n      case 'a': return '\\x07';\n      case 'b': return '\\b';\n      case 'f': return '\\f';\n      case 'n': return '\\n';\n      case 'r': return '\\r';\n      case 't': return '\\t';\n      case 'v': return '\\v';\n      case '\\\\': return '\\\\';\n      case \"'\": return \"'\";\n      case '\"': return '\"';\n      case '?': return '?';\n      default:\n        return simpleChar;\n    }\n  });\n}\n\nfunction to_pseudocode() {\n    tracer.to_pseudocode();\n}\nfunction run() {\n    tracer.run();\n}"}}{"_id": {"$oid": "68024ce28558742cb433771a"}, "rules": "rgz", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[0-9]", "+", ")", "?"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comparisons", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "specialops", "rPart": ["[-+]"]}, {"lPart": "unops", "rPart": ["[!~]"]}, {"lPart": "binops", "rPart": ["[*/^%]"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "linecomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "Const", "rPart": ["constchar", "|", "constnum"]}, {"lPart": "ProgramText", "rPart": ["{label_count = 0;}", "(", "FnBlock", ")", "*", "{to_pseudocode();run();}"]}, {"lPart": "Block", "rPart": ["{to_pfr(\"begin_scope\");}", "\"{\"", "Statement", "*", "\"}\"", "{to_pfr(\"end_scope\");}"]}, {"lPart": "Statement", "rPart": ["IfStatement", "|", "DeclareExpr", "|", "SetStatement", "|", "ExprStatement", "|", "RetStatement", "|", "Block", "|", "PrintFn", "|", "LoopStatement", "|", "CaseStatement", "|", "\"exit\"", "delim", "{check_exit();}", "|", "delim"]}, {"lPart": "DeclareExpr", "rPart": ["\"declare\"", "{op_stack.push(this.currentLexem[1]);}", "type", "{to_pfr(this.currentLexem[1]); to_pfr(op_stack.pop()); to_pfr(\"declare\");}", "id", "delim"]}, {"lPart": "SetStatement", "rPart": ["\"set\"", "{save_pos();}", "\"(\"", "Expr", "{while (op_stack.length > 0) if (peek(op_stack) == \"(\") op_stack.pop(); else to_pfr(op_stack.pop());}", "\",\"", "{insert_pos(this.currentLexem[1]);}", "id", "\")\"", "{to_pfr(\"=\");}", "delim"]}, {"lPart": "ExprStatement", "rPart": ["Expr", "delim"]}, {"lPart": "RetStatement", "rPart": ["\"ret\"", "RetExpr"]}, {"lPart": "RetExpr", "rPart": ["Expr", "{to_pfr(\"return_val\");}", "delim"]}, {"lPart": "RetExpr", "rPart": ["{to_pfr(\"return\");}", "delim"]}, {"lPart": "IfStatement", "rPart": ["{begin_if();}", "IfBlock", "ElseIfBlock", "ElseBlock", "{finish_if();}"]}, {"lPart": "LoopStatement", "rPart": ["{begin_while();}", "\"exec\"", "Statement", "LoopFooter", "delim"]}, {"lPart": "CaseStatement", "rPart": ["{begin_case();}", "\"case\"", "\"(\"", "Expr", "{to_pfr(\"=\");}", "\")\"", "{save_pos();}", "\"{\"", "CaseExpr", "*", "DefaultCaseExpr", "?", "\"}\"", "{finish_case();}"]}, {"lPart": "Expr", "rPart": ["BeginExpr", "ExprOperation"]}, {"lPart": "BeginExpr", "rPart": ["{unops_count=0;}", "(", "{unops_count++;unops_stack.push(this.currentLexem[1]);}", "(", "unops", "|", "specialops", ")", ")", "*", "{unops_count_stack.push(unops_count);}", "(", "(", "{to_pfr(this.currentLexem[1]);}", "(", "ExprId", "|", "Const", ")", ")", "|", "(", "{op_stack.push(\"(\");}", "\"(\"", "Expr", "{if (op_stack.length > 0 && peek(op_stack) == \"(\") op_stack.pop();}", "\")\"", ")", ")", "{check_begin_expr();}"]}, {"lPart": "ExprOperation", "rPart": ["(", "{if (op_stack.length > 0 && get_priority(peek(op_stack)) >= get_priority(this.currentLexem[1])) to_pfr(op_stack.pop()); op_stack.push(this.currentLexem[1]); }", "(", "binops", "|", "logicalops", "|", "specialops", "|", "comparisons", ")", "Expr", "{if (op_stack.length > 0) if (peek(op_stack) == \"(\") op_stack.pop(); else to_pfr(op_stack.pop());}", ")", "?"]}, {"lPart": "FnBlock", "rPart": ["{to_pfr(this.currentLexem[1]);to_pfr(\"define_function\");}", "id", "\"(\"", "(", "FnArgument", "(", "\",\"", "FnArgument", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "{to_pfr(this.currentLexem[1]);to_pfr(\"set_ret_type\");}", "type", ")", "?", "{to_pfr(\"start_fn\");}", "Block", "{to_pfr(\"end_fn\");}"]}, {"lPart": "ExprId", "rPart": ["id", "(", "\"(\"", "{arg_stack.push(0);}", "(", "Expr", "{inc_arg_count();}", "(", "\",\"", "Expr", "{inc_arg_count();}", ")", "*", ")", "?", "{to_pfr(arg_stack.pop()+\"\");to_pfr(\"call\");}", "\")\"", ")", "?"]}, {"lPart": "PrintFn", "rPart": ["\"print\"", "\"(\"", "{arg_stack.push(0);}", "(", "Expr", "{inc_arg_count();}", "(", "\",\"", "Expr", "{inc_arg_count();}", ")", "*", ")", "?", "{to_pfr(arg_stack.pop()+\"\");to_pfr(\"print\");}", "\")\"", "delim"]}, {"lPart": "FnArgument", "rPart": ["(", "{arg_stack.push(this.currentLexem[1]);}", "type", ")", "?", "{to_pfr(this.currentLexem[1]); check_arg_def();}", "id"]}, {"lPart": "IfBlock", "rPart": ["\"?\"", "\"(\"", "Expr", "{check_if_expr();}", "\")\"", "{save_pos();}", "Statement", "{finish_if_stmt();}"]}, {"lPart": "ElseIfBlock", "rPart": ["\"?:\"", "\"(\"", "Expr", "{check_if_expr();}", "\")\"", "{save_pos();}", "Statement", "{finish_if_stmt();}", "ElseIfBlock"]}, {"lPart": "ElseIfBlock", "rPart": ["~", "\"?:\""]}, {"lPart": "ElseBlock", "rPart": ["\":\"", "Statement"]}, {"lPart": "ElseBlock", "rPart": ["~", "\":\""]}, {"lPart": "LoopFooter", "rPart": ["\"with\"", "{while_step = 1;while_id = this.currentLexem[1]; insert_pos_soft(while_id);}", "id", "\"from\"", "{insert_pos_soft(this.currentLexem[1]);insert_pos(\"=\");}", "constnum", "\"to\"", "{while_to=this.currentLexem[1];}", "constnum", "(", "\"step\"", "{while_step = this.currentLexem[1];}", "constnum", ")", "?", "{finish_while();}"]}, {"lPart": "CaseExpr", "rPart": ["\"when\"", "{check_case(this.currentLexem[1]);}", "Const", "\"then\"", "Statement", "*"]}, {"lPart": "DefaultCaseExpr", "rPart": ["{default_case_stmt = \"CaseStmt_\"+label_count;to_pfr(\"CaseStmt_\"+label_count+++\":\");}", "\"otherwise\"", "Statement", "*"]}], "extension": "var ignoreLastWord;\n\ndelete _G.Tracer;\n_G.Tracer = class {\n    constructor() {\n        this.pos_history = [];\n        this.history = [];\n    }\n    put(l) {\n        this.history.push(l);\n    }\n    getAll() {\n        var res = \"\";\n        this.history.forEach(v => {\n            res += \" \" + v;\n        });\n        if (this.code) {\n            res += \"\\n\\nРезультат компиляции:\\n\"\n            res += this.code;\n        }\n        if (this.stdout) {\n            res += \"\\n\\nРезультат выполнения:\\n\"\n            res += this.stdout;\n        }\n        return res;\n    }\n    clear() {\n        this.pos_history = [];\n        this.history = [];\n    }\n    save_pos() {\n        this.pos_history.push(this.history.length);\n    }\n    insert_pos(l) {\n        var pos = this.pos_history.pop();\n        this.history.splice(pos, 0, l);\n    }\n    insert_pos_soft(l) {\n        var pos = this.pos_history[this.pos_history.length - 1];\n        this.history.splice(pos, 0, l);\n        this.pos_history[this.pos_history.length - 1]++;\n    }\n    to_pseudocode() {\n        var compiler = new _G.Compiler();\n        this.code = undefined;\n        this.comp_code = undefined;\n        this.stdout = undefined;\n        var code = compiler.compile(this.history);\n        if (typeof code === \"string\") {\n            this.code = code;\n        } else if (code.error) {\n            this.code = code.error;\n        } else {\n            this.code = compiler.display(code);\n            this.comp_code = code;\n        }\n    }\n    run() {\n        var runner = new _G.Executor();\n        if (this.comp_code)\n            this.stdout = runner.execute(this.comp_code);\n    }\n}\n\ndelete _G.Compiler;\n_G.Compiler = class {\n    constructor() {\n        this.stack = [];\n        this.functions = new Map();\n    }\n    compile(pfr) {\n        this.len = pfr.length;\n        this.i = 0;\n        for (; this.i < this.len; this.i++) {\n            var word = pfr[this.i];\n            switch (word) {\n                case \"define_function\":\n                    var fn = this.compile_function(pfr,this.functions);\n                    if (fn.error) return \"Ошибка: \" + fn.name + \": \" + fn.error;\n                    this.functions.set(fn.name,fn);\n                    break;\n                default:\n                    this.stack.push(word);\n            }\n        }\n        return this.monomorphise(this.functions);\n    }\n    compile_function(pfr, fns) {\n        var fn = {args: [], code: [], name: this.stack.pop()};\n        for (; this.i < this.len; this.i++) {\n            var word = pfr[this.i];\n            switch (word) {\n                case \"declare_typed_arg\":\n                    var type = this.stack.pop();\n                    var name = this.stack.pop();\n                    fn.args.push({type: this.check_ret_type(type), name: name});\n                    break;\n                case \"declare_arg\":\n                    var name = this.stack.pop();\n                    fn.args.push({name: name});\n                    break;\n                case \"set_ret_type\":\n                    fn.ret_type = this.stack.pop();\n                    break;\n                case \"start_fn\":\n                    var is_main = fn.name == \"m1\";\n                    fn.code = this.compile_code(pfr, fn, is_main, fns);\n                    if (fn.code.error) return {name: fn.name, error: fn.code.error};\n                    return fn;\n                default:\n                    this.stack.push(word);\n            }\n        }\n        return fn;\n    }\n    compile_code(pfr, fn, is_main, fns) {\n        var args = fn.args;\n        var ret_type = fn.ret_type;\n        var self_name = fn.name;\n        var code = [];\n        var declared_vars = args.slice();\n        var declared_vars_stack = [];\n        var type_stack = [];\n        var labels = [];\n        if (!is_main) code.push({instr:\"POP\", arg1: \"RET_ADDR\"});\n        args.forEach(a => {\n            code.push({instr:\"POP\", arg1: a.name});\n        });\n        for (; this.i < this.len; this.i++) {\n            var word = pfr[this.i];\n            if (word == \"end_fn\") break;\n            if (word.endsWith(\":\")) {\n                labels.push({name: word.replace(':', ''), rel_addr: code.length});\n                continue;\n            }\n            switch (word) {\n                case \"begin_scope\":\n                    declared_vars_stack.push(declared_vars.slice());\n                    break;\n                case \"end_scope\":\n                    declared_vars = declared_vars_stack.pop();\n                    break;\n                case \"=\":\n                    var arg2 = this.stack.pop();\n                    var arg2_type = this.get_type(arg2, declared_vars, type_stack);\n                    var arg1 = this.stack.pop();\n                    var is_declared = false;\n                    var err;\n                    declared_vars.forEach(v => {\n                       if (v.name == arg1) {\n                            is_declared = true;\n                            if (v.type && v.type != arg2_type) {\n                               err = {ctx: code, error: \"Тип аргумента не совпадает с типом переменной \"+v.name+\"(\"+v.type+\"), \"+arg2+\"(\"+arg2_type+\")\"};\n                            }\n                        } \n                    });\n                    if (err) return err;\n                    if (!is_declared) {\n                        declared_vars.push({name: arg1, type: arg2_type});\n                    }\n                    code.push({instr:\"MOV\", arg1: arg1, arg2: arg2});\n                    break;\n                case \"declare\":\n                    var type = this.check_ret_type(this.stack.pop());\n                    var arg = this.stack.pop();\n                    if (this.check_declaration(arg, \"VAR\", declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg2+\" уже определена\"};\n                    declared_vars.push({name: arg1, type: type});\n                    break;\n                case \"==\":\n                case \"!=\":\n                case \"<=\":\n                case \"<\":\n                case \">=\":\n                case \">\":\n                case \"+\":\n                case \"-\":\n                case \"%\":\n                case \"/\":\n                case \"*\":\n                case \"&&\":\n                case \"&\":\n                case \"||\":\n                case \"|\":\n                case \"^\":\n                    var arg2 = this.stack.pop();\n                    var arg2_type = this.get_type(arg2, declared_vars, type_stack);\n                    var arg1 = this.stack.pop();\n                    var arg1_type = this.get_type(arg1, declared_vars, type_stack);\n                    if (!this.check_declaration(arg1, arg1_type, declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg1+\" не определена\"};\n                    if (!this.check_declaration(arg2, arg2_type, declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg2+\" не определена\"};\n                    if (!this.check_casting(arg1_type, arg2_type))\n                        return {ctx: code, error: \"Аргументы разных типов\"};\n                    var it = \"\";\n                    if (arg1_type == \"CHAR\" || arg2_type == \"CHAR\")\n                        return {ctx: code, error: \"Математические операции не определены над строковыми константами\"};\n                    if (arg1_type == \"FLOAT\")\n                        it = \"F\";\n                    switch (word) {\n                        case \"==\":\n                            code.push({instr:\"CMP_EQ\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"!=\":\n                            code.push({instr:\"CMP_NEQ\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"<=\":\n                            code.push({instr:\"CMP_LE\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"<\":\n                            code.push({instr:\"CMP_L\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \">=\":\n                            code.push({instr:\"CMP_GE\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \">\":\n                            code.push({instr:\"CMP_G\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"&&\":\n                            code.push({instr:\"AND\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"&\":\n                            code.push({instr:\"BAND\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"||\":\n                            code.push({instr:\"OR\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"|\":\n                            code.push({instr:\"BOR\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"^\":\n                            code.push({instr:\"XOR\", arg1: arg1, arg2: arg2});\n                            type_stack.push(\"INT\");\n                            break;\n                        case \"+\":\n                            code.push({instr:it+\"ADD\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"-\":\n                            code.push({instr:it+\"SUB\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"%\":\n                            code.push({instr:it+\"MOD\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"/\":\n                            code.push({instr:it+\"DIV\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                        case \"*\":\n                            code.push({instr:it+\"MUL\", arg1: arg1, arg2: arg2});\n                            type_stack.push(arg1_type);\n                            break;\n                    }\n                    this.stack.push(\"STACK\");\n                    break;\n                case \"@-\":\n                case \"@+\":\n                case \"!\":\n                case \"~\":\n                    var arg1 = this.stack.pop();\n                    var arg1_type = this.get_type(arg1, declared_vars, type_stack);\n                    if (!this.check_declaration(arg1, arg1_type, declared_vars))\n                        return {ctx: code, error: \"Переменная \"+arg1+\" не определена\"};\n                    if (!this.check_casting(arg1_type, \"INT\"))\n                        return {ctx: code, error: \"Аргументы разных типов\"};\n                    switch (word) {\n                        case \"@-\":\n                            code.push({instr:\"NEG\", arg1: arg1});\n                            break;\n                        case \"@+\":\n                            code.push({instr:\"POS\", arg1: arg1});\n                            break;\n                        case \"!\":\n                            code.push({instr:\"NOT\", arg1: arg1});\n                            break;\n                        case \"~\":\n                            code.push({instr:\"BNOT\", arg1: arg1});\n                            break;\n                    }\n                    this.stack.push(\"STACK\");\n                    type_stack.push(\"INT\");\n                    break;\n                case \"jump_false\":\n                    var label = this.stack.pop();\n                    code.push({instr:\"FJMP\", arg1: label});\n                    break;\n                case \"jump_true\":\n                    var label = this.stack.pop();\n                    code.push({instr:\"TJMP\", arg1: label});\n                    break;\n                case \"jump\":\n                    var label = this.stack.pop();\n                    code.push({instr:\"JMP\", arg1: label});\n                    break;\n                case \"return_val\":\n                    if (!ret_type)\n                        return {ctx: code, error: \"Функция не возвращает значение\"};\n                    var arg1 = this.stack.pop();\n                    var arg1_type = this.get_type(arg1, declared_vars, type_stack);\n                    code.push({instr: \"PUSH\", arg1: arg1});\n                    if (!this.check_casting(arg1_type, this.check_ret_type(ret_type)))\n                        return {ctx: code, error: \"Неправильный возвращаемый тип\"};\n                    if (!is_main) code.push({instr:\"PUSH\", arg1: \"RET_ADDR\"}); \n                    code.push({instr:\"RET\"});\n                    break;\n                case \"return\":\n                    if (ret_type)\n                        return {ctx: code, error: \"Функция должна возвращать значение\"};\n                    if (!is_main) code.push({instr:\"PUSH\", arg1: \"RET_ADDR\"});\n                    else code.push({instr:\"FIN\"});\n                    code.push({instr:\"RET\"});\n                    break;\n                case \"call\":\n                    var arg_count = this.stack.pop();\n                    var arg_stack = [];\n                    for (var i = 0; i < arg_count; i++) {\n                        var arg = this.stack.pop();\n                        if (arg == \"STACK\") {\n                            code.push({instr: \"POP\", arg1: \"tmp\"+i});\n                            arg_stack.push({arg: \"tmp\"+i, type: type_stack.pop()});\n                            type = type_stack.pop();\n                        } else {\n                            arg_stack.push({arg: arg, type: this.get_type(arg, declared_vars, type_stack)});\n                        }\n                    }\n                    \n                    var fn_name = this.stack.pop();\n                    var local_fn = fn;\n                    if (fn_name != self_name)\n                        local_fn = fns.get(fn_name);\n                    if (!local_fn)\n                        return {ctx: code, error: \"Функция \"+fn_name+\" не определена\"};\n                    if (local_fn.args.length != arg_count)\n                        return {ctx: code, error: \"Функция \"+fn_name+\": неправильное кол-во аргументов\"};\n                    arg_stack.reverse();\n                    for (var i = 0; arg_stack.length != 0; i++) {\n                        var arg = arg_stack.pop();\n                        code.push({instr:\"PUSH\", arg1: arg.arg});\n                        if (!this.check_declaration(arg.arg, arg.type, declared_vars))\n                            return {ctx: code, error: \"Переменная \"+arg.arg+\" не определена\"};\n                        if (!this.check_casting(arg.type, local_fn.args[arg_count - i]))\n                            return {ctx: code, error: \"Неправильный тип аргумента\"};\n                    }\n                    code.push({instr:\"CALL\", arg1: fn_name});\n                    if (local_fn.ret_type) {\n                        this.stack.push(\"STACK\");\n                        type_stack.push(this.check_ret_type(local_fn.ret_type))\n                    }\n                    break;\n                case \"print\":\n                    var arg_count = this.stack.pop();\n                    var arg_stack = [];\n                    for (var i = 0; i < arg_count; i++) {\n                        var arg = this.stack.pop();\n                        if (arg == \"STACK\") {\n                            code.push({instr: \"POP\", arg1: \"tmp\"+i});\n                            arg_stack.push({arg: \"tmp\"+i, type: type_stack.pop()});\n                            type = type_stack.pop();\n                        } else {\n                            arg_stack.push({arg: arg, type: this.get_type(arg, declared_vars, type_stack)});\n                        }\n                    }\n                    \n                    arg_stack.reverse();\n                    for (var i = 0; arg_stack.length != 0; i++) {\n                        var arg = arg_stack.pop();\n                        code.push({instr:\"PUSH\", arg1: arg.arg});\n                        if (!this.check_declaration(arg.arg, arg.type, declared_vars))\n                            return {ctx: code, error: \"Переменная \"+arg.arg+\" не определена\"};\n                    }\n                    code.push({instr:\"PRINT\", arg1: arg_count+\"\"});\n                    break;\n                default:\n                    this.stack.push(word);\n            }\n        }\n        if (ret_type && code[code.length - 1].instr != \"RET\")\n            return {ctx: code, error: \"Функция должна возвращать значение, но нет ret\"};\n        else if (!is_main && !ret_type && code[code.length - 1].instr != \"RET\") {\n            code.push({instr:\"PUSH\", arg1: \"RET_ADDR\"}); \n            code.push({instr:\"RET\"});\n        } else if (is_main) {\n            code.push({instr:\"FIN\"});\n        }\n        this.optimize(code, labels);\n        var ready_code = [];\n        for (var i = 0; i < code.length; i++) {\n            var stmt = code[i];\n            switch (stmt.instr) {\n                case \"FJMP\":\n                case \"TJMP\":\n                case \"JMP\":\n                    var idx;\n                    labels.forEach(l => {\n                        if (l.name == stmt.arg1) idx = l.rel_addr;\n                    })\n                    if (!idx) return {ctx: code, error: \"Неопределённая метка\"}\n                    var off = (idx - i)+\"\";\n                    stmt.arg1 = off;\n                default:\n                    ready_code.push(stmt);\n            }\n        }\n        return ready_code;\n    }\n    optimize(code, labels) {\n        this.remove_dead_code(code, labels);\n        this.remove_unreachable(code, labels);\n    }\n    remove_instr(code, i, labels) {\n        code.splice(i, 1);\n        labels.forEach(l => {\n            if (l.rel_addr > i) l.rel_addr--;\n        }); \n    }\n    remove_dead_code(code, labels) {\n        var has_changes = true;\n        while (has_changes) {\n            has_changes = false;\n            for (var i = 0; i < code.length; i++) {\n                var stmt = code[i];\n                switch (stmt.instr) {\n                    case \"FJMP\":\n                    case \"TJMP\":\n                    case \"JMP\":\n                        var idx = 0;\n                        labels.forEach(l => {\n                            if (l.name == stmt.arg1) idx = l.rel_addr;\n                        });\n                        if (idx == i + 1) {\n                            has_changes = true;\n                            this.remove_instr(code, i--, labels);\n                        }\n                        break;\n                    case \"POP\":\n                        var next = code[i + 1];\n                        if (next.instr == \"PUSH\" && stmt.arg1 == next.arg1) {\n                            has_changes = true;\n                            this.remove_instr(code, i + 1, labels);\n                            this.remove_instr(code, i--, labels);\n                        }\n                    default:\n                }\n            }\n        }\n    }\n    remove_unreachable(code, labels) {\n        var jmp_stack = [0];\n        var is_reachable = [];\n        while (jmp_stack.length) {\n            for (var i = jmp_stack.pop(); i < code.length; i++) {\n                if (is_reachable[i]) break;\n                var stmt = code[i];\n                is_reachable[i] = true;\n                switch (stmt.instr) {\n                    case \"FJMP\":\n                    case \"TJMP\":\n                    case \"JMP\":\n                        var idx;\n                        labels.forEach(l => {\n                            if (l.name == stmt.arg1) idx = l.rel_addr;\n                        });\n                        if (idx) {\n                            jmp_stack.push(idx);\n                            if (stmt.instr == \"JMP\") i = jmp_stack.pop() - 1;\n                        }\n                        break;\n                    default:\n                }\n            }\n        }\n        var removed = 0;\n        for (var i = 0; i < code.length; i++) {\n            var stmt = code[i];\n            if (!is_reachable[i+removed]) {\n                removed++;\n                this.remove_instr(code, i--, labels);\n            }\n        }\n    }\n    monomorphise(code) {\n        var calls = [];\n        calls[\"m1\"] = true;\n        for (var [k, v] of code) {\n            var name = v.name;\n            for (const instr of v.code)\n                if (instr.instr == \"CALL\")\n                    if (name != instr.arg1)\n                        calls[instr.arg1] = true;\n        }\n        for (var [k, v] of code) {\n            if (!calls[v.name])\n                code.delete(k);\n        }\n        \n        var ready_code = [];\n        var labels = [];\n        var main_off;\n        for (var [k,v] of code) {\n            labels.push({name: v.name, addr: ready_code.length});\n            for (const instr of v.code) {\n                if (instr.instr == \"CALL\") {\n                    var idx;\n                    labels.forEach(l => {\n                        if (l.name == instr.arg1) idx = l.addr;\n                    })\n                    var off = (idx - ready_code.length)+\"\";\n                    instr.arg1 = off;\n                }\n                ready_code.push(instr);\n            }\n        }\n        labels.forEach(l => {\n            if (l.name == \"m1\") main_off = l.addr;\n        })\n        if (!main_off) return {ctx: code, error: \"Неопределена функция m1\"}\n        ready_code.splice(0, 0, {instr:\"JMP\", arg1: (main_off+1)+\"\"});\n        return ready_code;\n    }\n    get_type(arg, declared_vars, type_stack) {\n        var arg_type = this.check_type(arg);\n        if (arg_type == \"STACK\") arg_type = type_stack.pop();\n        if (arg_type != \"VAR\") return arg_type;\n        var type;\n        declared_vars.forEach(v => {\n            if (v.name == arg) type = v.type;\n        });\n        return type;\n    }\n    check_declaration(v_in, type, declared_vars) {\n        var is_declared = false;\n        if (!type) return false;\n        if (type == \"VAR\")\n            declared_vars.forEach(v => {if (v.name == v_in) is_declared = true;});\n        else is_declared = true;\n        return is_declared;\n    }\n    check_casting(v1, v2) {\n        if (v1 == v2) return true;\n        if (v1 == \"CHAR\" || v2 == \"CHAR\") return false;\n        return true;\n    }\n    check_type(v) {\n        if (v == \"STACK\") return \"STACK\";\n        else if (v.endsWith(\"'\")) return \"CHAR\";\n        else if (parseInt(v)+\"\" == v && v == parseFloat(v)+\"\") return \"INT\";\n        else if (v.includes(\".\")) return \"FLOAT\";\n        else if (!isNaN(v)) return \"FLOAT\";\n        else return \"VAR\";\n    }\n    check_ret_type(t) {\n        if (t == \"int\") return \"INT\";\n        else if (t == \"float\") return \"FLOAT\";\n        else if (t == \"char\") return \"CHAR\";\n        else return t;\n    }\n    display(code) {\n        if (code.error) return code.error + \" \" + JSON.stringify(code);\n        var ret_repr = \"\";\n        for (const instr of code) {\n            ret_repr += instr.instr;\n            if (instr.arg1) ret_repr += \" \" + instr.arg1;\n            if (instr.arg2) ret_repr += \", \" + instr.arg2;\n            ret_repr += \"\\n\";\n        }\n        return ret_repr;\n    }\n}\n\ndelete _G.Executor;\n_G.Executor = class {\n    constructor() {\n        this.stack = [];\n        this.scope_stack = [];\n        this.scope = [];\n        this.output = \"\";\n    }\n    execute(code) {\n        var ip = 0;\n        var calls = 0;\n        while (1) {\n            if (ip >= code.length) return \"Выход за границы!\";\n            var instr = code[ip++];\n            if (calls > 2000000) return \"OVERFLOW\";\n            calls++;\n            switch (instr.instr) {\n                case \"FIN\":\n                    console.log(this.stack, this.scope);\n                    console.log(\"Calls:\", calls);\n                    return this.output;\n                case \"MOV\":\n                    if (this.check_type(instr.arg1) != \"VAR\") {\n                        return \"Первый аргумент MOV не переменная\";\n                    }\n                    this.scope[instr.arg1] = this.parse_type(instr.arg2);\n                    break;\n                case \"PUSH\":\n                    this.stack.push(this.parse_type(instr.arg1));\n                    break;\n                case \"POP\":\n                    this.scope[instr.arg1] = this.stack.pop();\n                    break;\n                case \"JMP\":\n                    ip += parseInt(instr.arg1) - 1;\n                    break;\n                case \"TJMP\":\n                    if (this.stack.pop() == true) {\n                        ip += parseInt(instr.arg1) - 1;\n                    }\n                    break;\n                case \"FJMP\":\n                    if (this.stack.pop() == false) {\n                        ip += parseInt(instr.arg1) - 1;\n                    }\n                    break;\n                case \"PRINT\":\n                    var count = parseInt(instr.arg1);\n                    var v_stack = [];\n                    while (count--)\n                        v_stack.push(this.stack.pop());\n                    v_stack.reverse();\n                    while (v_stack.length) {\n                        var v = v_stack.pop();\n                        this.output += v + \" \";\n                    }\n                    this.output += \"\\n\";\n                    break;\n                case \"CMP_EQ\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1==arg2);\n                    break;\n                case \"CMP_NEQ\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1!=arg2);\n                    break;\n                case \"CMP_LE\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1<=arg2);\n                    break;\n                case \"CMP_L\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1<arg2);\n                    break;\n                case \"CMP_GE\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1>=arg2);\n                    break;\n                case \"CMP_G\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1>arg2);\n                    break;\n                case \"AND\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1&&arg2);\n                    break;\n                case \"BAND\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1&arg2);\n                    break;\n                case \"OR\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1||arg2);\n                    break;\n                case \"BOR\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1|arg2);\n                    break;\n                case \"XOR\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(arg1^arg2);\n                    break;\n                case \"ADD\":\n                case \"FADD\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1+arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"SUB\":\n                case \"FSUB\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1-arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"MUL\":\n                case \"FMUL\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1*arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"DIV\":\n                case \"FDIV\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1/arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"MOD\":\n                case \"FMOD\":\n                    var arg2 = this.parse_type(instr.arg2);\n                    var arg1 = this.parse_type(instr.arg1);\n                    var val = arg1%arg2;\n                    if (instr.instr[0] == \"F\")\n                        this.stack.push(val);\n                    else\n                        this.stack.push(Math.trunc(val));\n                    break;\n                case \"NOT\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(!arg1);\n                    break;\n                case \"BNOT\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(~arg1);\n                    break;\n                case \"NEG\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(-arg1);\n                    break;\n                case \"POS\":\n                    var arg1 = this.parse_type(instr.arg1);\n                    this.stack.push(+arg1);\n                    break;\n                case \"CALL\":\n                    this.scope_stack.push(this.scope);\n                    this.scope = [];\n                    this.stack.push(ip);\n                    ip += parseInt(instr.arg1) - 1;\n                    break;\n                case \"RET\":\n                    ip = this.stack.pop();\n                    this.scope = this.scope_stack.pop();\n                    break;\n                default:\n                    console.log(\"Unknown op:\", instr.instr);\n                    return \"Unknown op:\"+instr.instr;\n            }\n        }\n    }\n    parse_type(v) {\n        switch (this.check_type(v)) {\n            case \"STACK\": \n                return this.stack.pop();\n            case \"INT\":\n                return parseInt(v);\n            case \"FLOAT\":\n                return parseFloat(v);\n            case \"CHAR\":\n                return unescapeString(v.replaceAll(\"'\", \"\"));\n            case \"VAR\":\n                return this.scope[v];\n        }\n    }\n    check_type(v) {\n        if (v == \"STACK\") return \"STACK\";\n        else if (v.endsWith(\"'\")) return \"CHAR\";\n        else if (parseInt(v)+\"\" == v && v == parseFloat(v)+\"\") return \"INT\";\n        else if (v.includes(\".\")) return \"FLOAT\";\n        else if (!isNaN(v)) return \"FLOAT\";\n        else return \"VAR\";\n    }\n}\n\nvar tracer = new _G.Tracer();\n\nvar unops_stack = [];\nvar unops_count_stack = [];\nvar unops_count = 0;\nvar op_stack = [];\nvar control_stack = [];\nvar if_control_stack = [];\nvar arg_stack = [];\nvar label_count = 0;\nvar while_step = \"1\";\nvar while_id = \"\";\nvar while_to = \"0\";\nvar label_type_stack = [];\nvar default_case_stmt = \"\";\n\nfunction to_pfr(v) {\n    tracer.put(v);\n}\n\nfunction save_pos() {\n    tracer.save_pos();\n}\n\nfunction insert_pos(v) {\n    tracer.insert_pos(v);\n}\nfunction insert_pos_soft(v) {\n    tracer.insert_pos_soft(v);\n}\n\nfunction inc_arg_count() {\n    arg_stack[arg_stack.length - 1]++;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction get_priority(s) {\n    switch (s) {\n        case \"(\":\n            return 0;\n        case \"||\":\n            return 1;\n        case \"&&\":\n            return 2;\n        case \"|\":\n            return 3;\n        case \"^\":\n            return 4;\n        case \"&\":\n            return 5;\n        case \"==\":\n        case \"!=\":\n            return 6;\n        case \"<\":\n        case \"<=\":\n        case \">\":\n        case \">=\":\n            return 7;\n        case \"+\":\n        case \"-\":\n            return 8;\n        case \"*\":\n        case \"/\":\n        case \"%\":\n            return 9;\n        case \"!\":\n        case \"~\":\n            return 10;\n    }\n    return 0;\n}\n\nfunction check_begin_expr() {\n    var len = unops_count_stack.pop();\n    while (len--) {\n        to_pfr(to_unary(unops_stack.pop()));\n    }\n}\n\nfunction to_unary(s) {\n    switch (s) {\n        case \"+\":\n            return \"@+\";\n        case \"-\":\n            return \"@-\";\n        case \"!\":\n        case \"~\":\n        default:\n            return s;\n    }\n}\n\nfunction begin_while() {\n    to_pfr(\"begin_scope\");\n    save_pos();\n    control_stack.push(label_count++);\n    label_type_stack.push(\"Loop\");\n    to_pfr(\"LoopBegin_\" + peek(control_stack) +\":\");\n}\n\nfunction finish_while() {\n    to_pfr(while_id);\n    to_pfr(while_id);\n    to_pfr(while_step);\n    to_pfr(\"+\");\n    to_pfr(\"=\");\n    to_pfr(while_id);\n    to_pfr(while_to);\n    to_pfr(\">=\");\n    to_pfr(\"LoopEnd_\"+peek(control_stack));\n    to_pfr(\"jump_true\");\n    to_pfr(\"LoopBegin_\"+peek(control_stack));\n    to_pfr(\"jump\");\n    to_pfr(\"LoopEnd_\"+control_stack.pop()+\":\");\n    to_pfr(\"end_scope\");\n    label_type_stack.pop();\n}\n\nfunction begin_case() {\n    to_pfr(\"begin_scope\");\n    control_stack.push(label_count++);\n    label_type_stack.push(\"Case\");\n    to_pfr(\"case_expr_\"+peek(control_stack));\n}\n\nfunction check_case(l) {\n    insert_pos_soft(\"case_expr_\"+peek(control_stack));\n    insert_pos_soft(l);\n    insert_pos_soft(\"==\");\n    insert_pos_soft(\"CaseStmt_\" + label_count);\n    insert_pos_soft(\"jump_true\");\n    to_pfr(\"CaseStmt_\" + label_count++ + \":\");\n}\n\nfunction finish_case() {\n    if (default_case_stmt != \"\") {\n        insert_pos_soft(default_case_stmt);\n        insert_pos(\"jump\");\n        default_case_stmt = \"\";\n    } else {\n        insert_pos_soft(\"CaseEnd_\"+peek(control_stack));\n        insert_pos(\"jump\");\n    }\n    to_pfr(\"CaseEnd_\"+control_stack.pop()+\":\");\n    to_pfr(\"end_scope\");\n    label_type_stack.pop();\n}\n\nfunction begin_if() {\n    to_pfr(\"begin_scope\");\n    if_control_stack.push(label_count++);\n}\n\nfunction finish_if_stmt() {\n    to_pfr(\"IfEnd_\"+peek(if_control_stack));\n    to_pfr(\"jump\");\n    insert_pos_soft(\"IfStmt_\" + label_count);\n    insert_pos(\"jump_false\");\n    to_pfr(\"IfStmt_\" + label_count++ + \":\");\n    to_pfr(\"end_scope\");\n    to_pfr(\"begin_scope\");\n}\n\nfunction finish_if() {\n    to_pfr(\"IfEnd_\"+if_control_stack.pop()+\":\");\n    to_pfr(\"end_scope\");\n}\n\nfunction check_exit() {\n    if (control_stack.length) {\n        to_pfr(peek(label_type_stack)+\"End_\" + peek(control_stack));\n        to_pfr(\"jump\");\n    }\n}\n\nfunction check_arg_def() {\n    if (arg_stack.length) {\n        to_pfr(arg_stack.pop());\n        to_pfr(\"declare_typed_arg\");\n    } else {\n        to_pfr(\"declare_arg\");\n    }\n}\n\nfunction check_if_expr() {\n    var on_stack = peek(tracer.history);\n    switch (on_stack) {\n        case \"==\":\n        case \"<=\":\n        case \"<\":\n        case \">=\":\n        case \">\":\n        case \"+\":\n        case \"-\":\n        case \"%\":\n        case \"/\":\n        case \"*\":\n        case \"&&\":\n        case \"&\":\n        case \"||\":\n        case \"|\":\n        case \"^\":\n            break;\n        default:\n            to_pfr(\"0\");\n            to_pfr(\"!=\");\n            break;\n    }\n}\n\nfunction unescapeString(str) {\n  return str.replace(/\\\\(?:x([0-9a-fA-F]+)|([abfnrtv\\\\'\"?]))/g, (match, hexDigits, simpleChar) => {\n    if (hexDigits !== undefined) {\n      return String.fromCharCode(parseInt(hexDigits, 16));\n    }\n    switch (simpleChar) {\n      case 'a': return '\\x07';\n      case 'b': return '\\b';\n      case 'f': return '\\f';\n      case 'n': return '\\n';\n      case 'r': return '\\r';\n      case 't': return '\\t';\n      case 'v': return '\\v';\n      case '\\\\': return '\\\\';\n      case \"'\": return \"'\";\n      case '\"': return '\"';\n      case '?': return '?';\n      default:\n        return simpleChar;\n    }\n  });\n}\n\nfunction to_pseudocode() {\n    tracer.to_pseudocode();\n}\nfunction run() {\n    tracer.run();\n}"}}},
{"FIO":"Абижанова А.С.","Collection":"241345523",{"_id": {"$oid": "67c43906af563521c9d5b05a"}, "rules": "Абижанова", "data": {"rList": [{"lPart": "ignore", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c439cbaf563521c9d5b065"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67d89c4ae0b22203e7cc0eb3"}, "rules": "Абижанова2", "data": {"rList": [{"lPart": "ignore", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "prog", "rPart": ["operators", "+"]}, {"lPart": "operators", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "comp", ")"]}, {"lPart": "assign", "rPart": ["(", "\"let\"", "id", "\"on\"", "statement", "\";\"", ")"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "statement", "\")\"", "\"then\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", "(", "\"not\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?"]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "\":\"", "\")\"", "\"{\"", "(", "operators", ")", "*", "(", "\"stop;\"", ")", "?", "\"}\""]}, {"lPart": "statement", "rPart": ["(", "id", "|", "const", ")", "(", "logicSign", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "comp", "rPart": ["\"choice\"", "statement", "\"{\"", "(", "\"option\"", "const", "\":\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "+", "(", "\"nooption\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?", "\"}\"", "\"end\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ecb834a600182c7517ab98"}, "rules": "Абижанова3", "data": {"rList": [{"lPart": "ignore", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "type", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[b]", "[o]", "[o]", "[l]", ")", "|", "(", "[s]", "[t]", "[r]", "[i]", "[n]", "[g]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "prog", "rPart": ["(", "func", ")", "+"]}, {"lPart": "operators", "rPart": ["assign", "|", "cond", "|", "loop", "|", "comp"]}, {"lPart": "assign", "rPart": ["(", "\"let\"", "id", "\"on\"", "statement", "\";\"", ")"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "statement", "\")\"", "\"then\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", "(", "\"not\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?"]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "\":\"", "\")\"", "\"{\"", "(", "operators", ")", "*", "(", "\"stop;\"", ")", "?", "\"}\""]}, {"lPart": "statement", "rPart": ["(", "id", "|", "const", ")", "(", "logicSign", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "comp", "rPart": ["\"choice\"", "statement", "\"{\"", "(", "\"option\"", "const", "\":\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "+", "(", "\"nooption\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "funct", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "\")\"", "\"{\"", "(", "operators", "+", ")", "?", "\"}\""]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "(", "(", "type", "id", ")", "(", "\",\"", "(", "type", "id", ")", ")", "?", ")", "?", "\")\"", "\"{\"", "(", "operators", "+", ")", "?", "\"}\"", "\"->\"", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fd547b8558742cb4336bc4"}, "rules": "Абижанова4", "data": {"rList": [{"lPart": "ignore", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "type", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[b]", "[o]", "[o]", "[l]", ")", "|", "(", "[s]", "[t]", "[r]", "[i]", "[n]", "[g]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "prog", "rPart": ["(", "def", ")", "+"]}, {"lPart": "def", "rPart": ["(", "\"let\"", "id", "\";\"", ")", "|", "func"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "*", "(", "\"stop;\"", ")", "?", "\"}\""]}, {"lPart": "operators", "rPart": ["assign", "|", "cond", "|", "loop", "|", "comp"]}, {"lPart": "assign", "rPart": ["(", "\"let\"", "id", "\"on\"", "statement", "\";\"", ")"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "statement", "\")\"", "\"then\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", "(", "\"not\"", "block", ")", "?"]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "\":\"", "\")\"", "\"{\"", "(", "operators", ")", "*", "(", "\"stop;\"", ")", "?", "\"}\""]}, {"lPart": "statement", "rPart": ["(", "id", "|", "const", ")", "(", "logicSign", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "comp", "rPart": ["\"choice\"", "statement", "(", "\"option\"", "const", "\":\"", "block", ")", "+", "(", "\"nooption\"", "block", ")", "?", "\"end\""]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "(", "(", "type", "id", ")", "(", "\",\"", "(", "type", "id", ")", ")", "?", ")", "?", "\")\"", "block", "\"->\"", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680dd1e78558742cb4339d59"}, "rules": "Абижанова5", "data": {"rList": [{"lPart": "Programm", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "type", "?", "id", "(", "\",\"", "type", "?", "id", ")", "?", ")", "?", "\")\"", "\"{\"", "BlockOperator", "*", "\"}\"", "\"on\"", "id", "\";\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "(", "\"{\"", "BlockOperator", "*", "\"}\"", ")"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"real\"", "|", "\"bool\""]}, {"lPart": "Operator", "rPart": ["DefineOperator", "|", "AssignOperator", "|", "IfOperator", "|", "ForOperator", "|", "SwitchOperator", "|", "SpecWord"]}, {"lPart": "DefineOperator", "rPart": ["type", "?", "id", "\"on\"", "Expr", "(", "\",\"", "id", "\"on\"", "Expr", ")", "*", "\";\""]}, {"lPart": "AssignOperator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "IfOperator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "BlockOperator", "ElsePart"]}, {"lPart": "ForOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constInt", "\":\"", "constInt", "\")\"", "BlockOperator"]}, {"lPart": "SwitchOperator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "BlockOperator", "*", ")", "+", "(", "\"nooption\"", "BlockOperator", "*", ")", "?", "\"end\""]}, {"lPart": "SpecWord", "rPart": ["(", "\"stop\"", "|", "\"fin\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "universalSign", "|", "binarySign", ")", "Term", ")", "*"]}, {"lPart": "ElsePart", "rPart": ["\"not\"", "BlockOperator"]}, {"lPart": "ElsePart", "rPart": ["~", "\"not\""]}, {"lPart": "Term", "rPart": ["(", "universalSign", "|", "unarySign", ")", "?", "Factor"]}, {"lPart": "Const", "rPart": ["constBin", "|", "constOctal", "|", "constInt", "|", "constReal", "|", "constStr", "|", "constChar"]}, {"lPart": "Factor", "rPart": ["(", "\"(\"", "Expr", "\")\"", ")", "|", "Const"]}, {"lPart": "Factor", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "(", "[\\\\]", "(", "(", "[\"'ntr]", ")", "|", "(", "[d]", "[0-9]", "[0-9]", "[0-9]", "[0-9]", ")", ")", ")", "|", "[]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[\"'ntr]", ")", "|", "[]", ")", "[']"]}, {"lPart": "universalSign", "rPart": ["[-+]"]}, {"lPart": "unarySign", "rPart": ["[!]"]}, {"lPart": "binarySign", "rPart": ["[*/%<>]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Ведерников Н.В.","Collection":"215334153",{"_id": {"$oid": "67b69ac1ce6dd03692d086af"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c6b0c0af563521c9d5ba03"}, "rules": "Пример1", "data": {"rList": [{"lPart": "StatementOrBlock", "rPart": ["Statement", "|", "(", "\"{\"", "Statement", "*", "\"}\"", ")"]}, {"lPart": "Statement", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Statement", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "StatementOrBlock", "ElsePart"]}, {"lPart": "Statement", "rPart": ["\"while(\"", "Expr", "\")\"", "\"do\"", "StatementOrBlock"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "ElsePart", "rPart": ["\"not\"", "StatementOrBlock"]}, {"lPart": "ElsePart", "rPart": ["~", "\"not\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "\"(\"", "Expr", "\")\"", "|", "(", "unaryOperator", "|", "\"-\"", ")", "BegExpr"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "unaryOperator", "rPart": ["\"not\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"and\"", "|", "\"or\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", "[0-9]", "?", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "keyword", "rPart": ["[a-z]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["\"??\"", "Expr", "\"{\"", "CaseOp", "+", "DefaultOp", "?", "\"}\""]}, {"lPart": "Quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "CaseOp", "rPart": ["\"?=\"", "const", "\":\"", "StatementOrBlock", "Quit"]}, {"lPart": "DefaultOp", "rPart": ["\"?~\"", "\":\"", "StatementOrBlock", "Quit"]}, {"lPart": "FuncDef", "rPart": ["type", "id", "\"(\"", "type", "id", "(", "(", "\",\"", "type", "id", ")", "+", ")", "?", "\")\"", "\"{\"", "Statement", "*", "Return", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c6b402af563521c9d5ba32"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", "[0-9]", "?", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d94778e0b22203e7cc1042"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", "[0-9]", "?", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"and\"", "|", "\"or\""]}, {"lPart": "delim", "rPart": ["\";\""]}, {"lPart": "assignPut", "rPart": ["\"put\""]}, {"lPart": "assignTo", "rPart": ["\"to\""]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "binaryOperator", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "assignSyntax", "rPart": ["assignPut", "expr", "assignTo", "id", "delim"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed4d8fa600182c7517af3f"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", "[0-9]", "?", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "logicBinaryOperator"]}, {"lPart": "logicBinaryOperator", "rPart": ["\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"and\"", "|", "\"or\""]}, {"lPart": "unaryOperator", "rPart": ["\"not\""]}, {"lPart": "begExpr", "rPart": ["(", "id", "|", "const", "|", "unaryOperator", "?", "\"(\"", "expr", "\")\"", ")"]}, {"lPart": "expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "operator", "rPart": ["(", "assignSyntax", "|", "condition", "|", "whileLoop", ")"]}, {"lPart": "endExpr", "rPart": ["(", "binaryOperator", "expr", ")", "?"]}, {"lPart": "assignSyntax", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "condition", "rPart": ["\"in\"", "expr", "\"then\"", "\"{\"", "operator", "+", "\"}\"", "condElse", "?"]}, {"lPart": "condElse", "rPart": ["\"not\"", "\"{\"", "operator", "+", "\"}\""]}, {"lPart": "whileLoop", "rPart": ["\"while\"", "\"(\"", "begExpr", "logicBinaryOperator", "expr", "\")\"", "\"do\"", "\"{\"", "operator", "+", "(", "\"leave;\"", ")", "?", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ffe1698558742cb4337333"}, "rules": "lab4", "data": {"rList": [{"lPart": "Prog", "rPart": ["(", "FuncDef", ")", "+"]}, {"lPart": "StatementOrBlock", "rPart": ["Statement", "|", "(", "\"{\"", "Statement", "*", "\"}\"", ")"]}, {"lPart": "Statement", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Statement", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "StatementOrBlock", "ElsePart"]}, {"lPart": "Statement", "rPart": ["\"while(\"", "Expr", "\")\"", "\"do\"", "StatementOrBlock"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "ElsePart", "rPart": ["\"not\"", "StatementOrBlock"]}, {"lPart": "ElsePart", "rPart": ["~", "\"not\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "FuncCallArgs", "?", "\")\"", ")", "?", "|", "const", "|", "\"(\"", "Expr", "\")\"", "|", "(", "unaryOperator", "|", "\"-\"", ")", "BegExpr"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "unaryOperator", "rPart": ["\"not\""]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"and\"", "|", "\"or\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "keyword", "rPart": ["[a-z]", "+"]}, {"lPart": "space", "rPart": ["[ \\n\\r\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["\"??\"", "Expr", "\"{\"", "CaseOp", "+", "DefaultOp", "?", "\"}\""]}, {"lPart": "Quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "CaseOp", "rPart": ["\"?=\"", "const", "\":\"", "StatementOrBlock", "Quit"]}, {"lPart": "DefaultOp", "rPart": ["\"?~\"", "\":\"", "StatementOrBlock", "Quit"]}, {"lPart": "FuncDef", "rPart": ["type", "id", "(", "\"(\"", "FuncArgs", "?", "\")\"", ")", "\"{\"", "Statement", "+", "Return", "\"}\""]}, {"lPart": "FuncArgs", "rPart": ["type", "id", "(", "(", "\",\"", "type", "id", ")", "*", ")"]}, {"lPart": "FuncCallArgs", "rPart": ["const", "(", "(", "\",\"", "const", ")", "*", ")"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Рассоха А.Д.","Collection":"145235211",{"_id": {"$oid": "67beea3caf563521c9d598f5"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c989e0af563521c9d5c42e"}, "rules": "Lr1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "FloatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "StrCharConst", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cef018af563521c9d5d497"}, "rules": "lr2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "FloatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "StrCharConst", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[/n/r]", "{ignoreLastWord=true;}"]}, {"lPart": "logc", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comp", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logNo", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e157144635a960233ad2fa"}, "rules": "lr3", "data": {"rList": [{"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "Expr", "rPart": ["(", "logNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "sign", "|", "minus", "|", "logc", "|", "comp", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["Const", "|", "FloatConst", "|", "StrCharConst"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "FloatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "StrCharConst", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "logc", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comp", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[/n/r]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "operators", "|", "operator", ")", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["Expr", "\",\""]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "switch", "?", "\"end\""]}, {"lPart": "switch", "rPart": ["\"nooption\"", "operators", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f66fad8558742cb4334929"}, "rules": "lr4", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "operators", "|", "operator", ")", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "switch", "?", "\"end\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "arglist", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "operators"]}, {"lPart": "Expr", "rPart": ["(", "logNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "sign", "|", "minus", "|", "logc", "|", "comp", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["Const", "|", "FloatConst", "|", "StrCharConst"]}, {"lPart": "switch", "rPart": ["\"nooption\"", "operators", "+"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"eight\"", "|", "\"two\"", "|", "\"int\"", "|", "\"char\"", "|", "\"str\"", "|", "\"float\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "FloatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "StrCharConst", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logc", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comp", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[/n/r]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808c9c98558742cb433892b"}, "rules": "lr5", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "operators", "|", "operator", ")", "(", "\"leave\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "switch", "?", "\"end\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "arglist", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "operators"]}, {"lPart": "Expr", "rPart": ["(", "logNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "sign", "|", "minus", "|", "logc", "|", "comp", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["Const", "|", "FloatConst", "|", "StrCharConst"]}, {"lPart": "switch", "rPart": ["\"nooption\"", "operators", "+"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"eight\"", "|", "\"two\"", "|", "\"int\"", "|", "\"char\"", "|", "\"str\"", "|", "\"float\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "FloatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "StrCharConst", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logc", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comp", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[/n/r]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808ea388558742cb4338acc"}, "rules": "lr6", "data": {"rList": [{"lPart": "program", "rPart": ["{whileCnt=0;}", "(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["\"put\"", "Expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "id", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\" +peek(ctlStk)); toPFR(\"JumpOnFalse\");}", "\")\"", "\"do\"", "(", "operators", "|", "operator", ")", "{toPFR(\"Label0_\" +peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "operators", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "switch", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "operator", "rPart": ["(", "\"leave\"", "\";\"", ")"]}, {"lPart": "function", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"(\"", "arglist", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "operators"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "logNo", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "sign", "|", "minus", "|", "logc", "|", "comp", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "const", "rPart": ["Const", "|", "FloatConst", "|", "StrCharConst"]}, {"lPart": "switch", "rPart": ["\"nooption\"", "operators", "+"]}, {"lPart": "arglist", "rPart": ["type", "{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "type", "{toPFR(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"eight\"", "|", "\"two\"", "|", "\"int\"", "|", "\"char\"", "|", "\"str\"", "|", "\"float\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "logNo", "rPart": ["[!]"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "FloatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "StrCharConst", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "sign", "rPart": ["[+*/]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logc", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comp", "rPart": ["(", "[=!<>]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[/n/r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord = false;\nvar whileCnt = 0;\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\n\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n\n return 0;\n}\n"}}},
{"FIO":"Бермешев Б.А.","Collection":"313413122",{"_id": {"$oid": "67bc8376af563521c9d58fb8"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bc840faf563521c9d58fbb"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t \\n \\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "oper", "rPart": ["[-+*/]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "+", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bc8582af563521c9d58fd3"}, "rules": "LR1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t \\n \\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "oper", "rPart": ["[-+*/]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "comment", "rPart": ["[//]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const10", "rPart": ["[#]", "[0-9]", "+"]}, {"lPart": "Exp", "rPart": ["[0-9]", "+", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d11a64af563521c9d5de53"}, "rules": "LR2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t \\n \\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>|&^/%+-]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "delimetr", "rPart": ["[,;:]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "keywords", "rPart": ["[A-Z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f538a28558742cb4333c21"}, "rules": "LR3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t \\n \\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[-<>|&^/%+]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Cond", "rPart": ["Condif", "CondElse"]}, {"lPart": "Condif", "rPart": ["\"at\"", "Expr", "\"do\"", "Stmt"]}, {"lPart": "CondElse", "rPart": ["\"or\"", "\"do\"", "Stmt"]}, {"lPart": "Expr", "rPart": ["Unary", "?", "ExprVariant", "(", "EndExpr", ")", "?"]}, {"lPart": "Unary", "rPart": ["[~!]"]}, {"lPart": "ExprVariant", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "ExprVariant", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "ExprVariant", "rPart": ["id", "|", "char", "|", "Exp"]}, {"lPart": "EndExpr", "rPart": ["operation", "Expr"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"string\""]}, {"lPart": "Stmt", "rPart": ["oper", "|", "(", "\"{\"", "oper", "+", "\"}\"", ")"]}, {"lPart": "asign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Type", "?", "id", "\")\"", "\";\""]}, {"lPart": "oper", "rPart": ["asign", "|", "Cond", "|", "Loop", "|", "exit", "|", "switch", "|", "return"]}, {"lPart": "Loop", "rPart": ["\"exec\"", "Stmt", "\"with\"", "Type", "?", "id", "\"from\"", "ExprVariant", "\"to\"", "ExprVariant"]}, {"lPart": "step", "rPart": ["\"step\"", "ExprVariant"]}, {"lPart": "step", "rPart": ["~", "\"step\""]}, {"lPart": "exit", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "ExprVariant", "\"do\"", "(", "Stmt", ")", "?", ")", "+", "(", "\"any\"", "\"do\"", "(", "Stmt", ")", "?", ")", "?", "\"}\"", "\"leave\"", "\";\""]}, {"lPart": "prog", "rPart": ["oper", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "fun", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Stmt"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7350f8558742cb433511d"}, "rules": "LR4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t \\n \\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[-<>|&^/%+]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Cond", "rPart": ["Condif", "CondElse"]}, {"lPart": "Condif", "rPart": ["\"at\"", "Expr", "\"do\"", "Stmt"]}, {"lPart": "CondElse", "rPart": ["\"or\"", "\"do\"", "Stmt"]}, {"lPart": "Expr", "rPart": ["Unary", "?", "ExprVariant", "(", "EndExpr", ")", "?"]}, {"lPart": "Unary", "rPart": ["[~!]"]}, {"lPart": "ExprVariant", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "ExprVariant", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "ExprVariant", "rPart": ["id", "|", "char", "|", "Exp"]}, {"lPart": "EndExpr", "rPart": ["operation", "Expr"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"string\""]}, {"lPart": "Stmt", "rPart": ["oper", "|", "(", "\"{\"", "oper", "+", "\"}\"", ")"]}, {"lPart": "asign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Type", "?", "id", "\")\"", "\";\""]}, {"lPart": "oper", "rPart": ["asign", "|", "Cond", "|", "Loop", "|", "exit", "|", "switch", "|", "return"]}, {"lPart": "Loop", "rPart": ["\"exec\"", "Stmt", "\"with\"", "Type", "?", "id", "\"from\"", "ExprVariant", "\"to\"", "ExprVariant"]}, {"lPart": "step", "rPart": ["\"step\"", "ExprVariant"]}, {"lPart": "step", "rPart": ["~", "\"step\""]}, {"lPart": "exit", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "case", "+", "def", "?", "\"}\""]}, {"lPart": "case", "rPart": ["\"by\"", "ExprVariant", "\"do\"", "Stmt", "+", "(", "\"leave\"", "\";\"", ")", "?"]}, {"lPart": "def", "rPart": ["\"any\"", "\"do\"", "Stmt", "+"]}, {"lPart": "prog", "rPart": ["oper", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "fun", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Stmt"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680928788558742cb4338dcc"}, "rules": "LR5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t \\n \\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "operation", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[-<>|&^/%+]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Cond", "rPart": ["Condif", "CondElse"]}, {"lPart": "Condif", "rPart": ["\"at\"", "Expr", "\"do\"", "Stmt"]}, {"lPart": "CondElse", "rPart": ["\"or\"", "\"do\"", "Stmt"]}, {"lPart": "Expr", "rPart": ["Unary", "?", "ExprVariant", "(", "EndExpr", ")", "?"]}, {"lPart": "Unary", "rPart": ["[~!]"]}, {"lPart": "ExprVariant", "rPart": ["Type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "ExprVariant", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "ExprVariant", "rPart": ["id", "|", "char", "|", "Exp"]}, {"lPart": "EndExpr", "rPart": ["operation", "Expr"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"string\""]}, {"lPart": "Stmt", "rPart": ["oper", "|", "(", "\"{\"", "oper", "+", "\"}\"", ")"]}, {"lPart": "asign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Type", "?", "id", "\")\"", "\";\""]}, {"lPart": "oper", "rPart": ["asign", "|", "Cond", "|", "Loop", "|", "exit", "|", "switch", "|", "return"]}, {"lPart": "Loop", "rPart": ["\"exec\"", "Stmt", "\"with\"", "Type", "?", "id", "\"from\"", "ExprVariant", "\"to\"", "ExprVariant"]}, {"lPart": "step", "rPart": ["\"step\"", "ExprVariant"]}, {"lPart": "step", "rPart": ["~", "\"step\""]}, {"lPart": "exit", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "case", "+", "def", "?", "\"}\""]}, {"lPart": "case", "rPart": ["\"by\"", "ExprVariant", "\"do\"", "Stmt", "+", "(", "\"leave\"", "\";\"", ")", "?"]}, {"lPart": "def", "rPart": ["\"any\"", "\"do\"", "Stmt", "+"]}, {"lPart": "prog", "rPart": ["oper", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "fun", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Stmt", "+", "\"}\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Стельмах К.А.","Collection":"223333133",{"_id": {"$oid": "67beef25af563521c9d59974"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "quad", "rPart": ["[&]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "eight", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "realnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signs", "rPart": ["[+-/<>=.,]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67beef5eaf563521c9d59989"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67beff7baf563521c9d59a8d"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "quad", "rPart": ["[&]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "eight", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "realnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "logic", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "delimeter"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["quad", "|", "eight", "|", "realnum", "|", "str", "|", "char"]}, {"lPart": "sign", "rPart": ["[-+*/!,]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logicexpr", "\")\"", "\"then\"", "block", "(", "condElse", ")", "?"]}, {"lPart": "logicexpr", "rPart": ["(", "id", "|", "const", ")", "logic", "(", "id", "|", "const", ")"]}, {"lPart": "condElse", "rPart": ["\"not\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while \"", "\"(\"", "logicexpr", "\")\"", "\"do\"", "loopblock"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchbody", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "loopblock", "rPart": ["(", "block", ")", "(", "\"leave\"", "delimeter", ")", "?", "(", "loopblock", ")", "?"]}, {"lPart": "switchbody", "rPart": ["\"by\"", "const", "\"do\"", "block", "(", "\"leave\"", "delimeter", ")", "?", "(", "switchbody", ")", "?"]}, {"lPart": "function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "arglist", ")", "?", "\")\"", "block"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "type", "rPart": ["\"quad\"", "|", "\"eight\"", "|", "\"realnum\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["assign", "|", "switch", "|", "loop", "|", "cond", "|", "function"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[];\n"}}{"_id": {"$oid": "67e3bd954635a960233adf77"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "quad", "rPart": ["[&]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "eight", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "realnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "logic", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!]", ")"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "delimeter"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["quad", "|", "eight", "|", "realnum", "|", "str", "|", "char"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logicexpr", "\")\"", "\"then\"", "block", "(", "condElse", ")", "?"]}, {"lPart": "logicexpr", "rPart": ["(", "id", "|", "const", ")", "logic", "(", "id", "|", "const", ")"]}, {"lPart": "condElse", "rPart": ["\"not\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while \"", "\"(\"", "logicexpr", "\")\"", "\"do\"", "\"{\"", "loopblock", "\"}\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchbody", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "loopblock", "rPart": ["(", "block", ")", "(", "\"leave\"", "delimeter", ")", "?"]}, {"lPart": "switchbody", "rPart": ["\"by\"", "const", "\"do\"", "block", "(", "\"leave\"", "delimeter", ")", "?", "(", "switchbody", ")", "?"]}, {"lPart": "function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "arglist", ")", "?", "\")\"", "block"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "type", "rPart": ["\"quad\"", "|", "\"eight\"", "|", "\"realnum\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "comment", "rPart": ["[#]", "[#]", "[]", "*", "[]", "[\\n]"]}, {"lPart": "Operator", "rPart": ["assign", "|", "switch", "|", "loop", "|", "cond", "|", "function"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[];\n"}}{"_id": {"$oid": "67f661b58558742cb4334767"}, "rules": "Лаба4", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "quad", "rPart": ["[&]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "eight", "rPart": ["[#]", "[0-7]", "+"]}, {"lPart": "realnum", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "logic", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[!]", ")"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "delimeter"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["quad", "|", "eight", "|", "realnum", "|", "str", "|", "char"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logicexpr", "\")\"", "\"then\"", "block", "(", "condElse", ")", "?"]}, {"lPart": "logicexpr", "rPart": ["(", "id", "|", "const", ")", "logic", "(", "id", "|", "const", ")"]}, {"lPart": "condElse", "rPart": ["\"not\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while \"", "\"(\"", "logicexpr", "\")\"", "\"do\"", "\"{\"", "loopblock", "\"}\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchbody", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "loopblock", "rPart": ["(", "block", ")", "(", "\"leave\"", "delimeter", ")", "?"]}, {"lPart": "switchbody", "rPart": ["\"by\"", "const", "\"do\"", "block", "(", "\"leave\"", "delimeter", ")", "?", "(", "switchbody", ")", "?"]}, {"lPart": "function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "arglist", ")", "?", "\")\"", "block"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "arglist", ")", "?"]}, {"lPart": "type", "rPart": ["\"quad\"", "|", "\"eight\"", "|", "\"realnum\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "comment", "rPart": ["[#]", "[#]", "[]", "*", "[]", "[\\n]"]}, {"lPart": "Operator", "rPart": ["assign", "|", "switch", "|", "loop", "|", "cond", "|", "function"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[];\n"}}},
{"FIO":"Фатеев М.Н.","Collection":"145514425",{"_id": {"$oid": "67c4535aaf563521c9d5b1b4"}, "rules": "лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBIn", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[`]", "(", "[]", "|", "[//]", "[trnbv]", ")", "[`]"]}, {"lPart": "constString", "rPart": ["[']", "(", "[]", "|", "[//]", "[trnbv]", ")", "+", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "braket", "rPart": ["[(){}]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c4649aaf563521c9d5b321"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67d6baade0b22203e7cbff85"}, "rules": "лаб2", "data": {"rList": [{"lPart": "operator", "rPart": ["cond", "|", "oper", "|", "cycle", "|", "switch"]}, {"lPart": "oper", "rPart": ["\"put\"", "expression", "\"to\"", "id", "\";\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "\"{\"", "oper", "+", "\"}\"", "\"with\"", "id", "\"from\"", "constraint", "\"to\"", "constraint", "\"step\"", "constraint", "quit", "?"]}, {"lPart": "switch", "rPart": ["\"??\"", "\"(\"", "(", "expression", ")", "\")\"", "\"{\"", "(", "\"?=\"", "constraint", "\":\"", "\"{\"", "(", "\"{\"", "oper", "*", "\"}\"", "\";\"", "\"quit\"", "\";\"", ")", "\"}\"", ")", "+", "\"}\"", "(", "\"?~\"", "\"{\"", "oper", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "(", "expression", ")", "\")\"", "\"{\"", "oper", "*", "\"}\"", "(", "\"?:\"", "\"(\"", "(", "expression", ")", "\")\"", "\"{\"", "oper", "*", "\"}\"", ")", "*", "(", "\":\"", "\"{\"", "oper", "*", "\"}\"", ")", "?"]}, {"lPart": "expression", "rPart": ["unarny", "?", "(", "id", "|", "constraint", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "mixed", "|", "binarn", ")", "expression", ")", "?"]}, {"lPart": "constraint", "rPart": ["constInt", "|", "constBIn", "|", "constOct", "|", "constFloat", "|", "constChar", "|", "constString"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "binarn", "rPart": ["binary", "|", "binOperationL", "|", "binOperationS"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constBIn", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "+", "[\"]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "binary", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binOperationL", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binOperationS", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fc05bf8558742cb43364e1"}, "rules": "лаб4", "data": {"rList": [{"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["cond", "|", "oper", "|", "cycle", "|", "switch"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "(", "expression", ")", "\")\"", "\"{\"", "oper", "*", "\"}\"", "(", "\"?:\"", "\"(\"", "(", "expression", ")", "\")\"", "\"{\"", "oper", "*", "\"}\"", ")", "*", "(", "\":\"", "\"{\"", "oper", "*", "\"}\"", ")", "?"]}, {"lPart": "oper", "rPart": ["\"put\"", "expression", "\"to\"", "id", "\";\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "(", "(", "\"{\"", "oper", "*", "\"}\"", ")", "|", "oper", ")", "\"with\"", "id", "\"from\"", "constraint", "\"to\"", "constraint", "\"step\"", "constraint", "exit"]}, {"lPart": "switch", "rPart": ["\"??\"", "\"(\"", "(", "expression", ")", "\")\"", "\"{\"", "(", "\"?=\"", "constraint", "\":\"", "\"{\"", "(", "\"{\"", "operator", "*", "\"}\"", "\";\"", "quit", ")", "\"}\"", ")", "+", "\"}\"", "(", "\"?~\"", "\"{\"", "operator", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "expression", "rPart": ["unarny", "?", "(", "id", "|", "constraint", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "mixed", "|", "binarn", ")", "expression", ")", "?"]}, {"lPart": "constraint", "rPart": ["constInt", "|", "constBIn", "|", "constOct", "|", "constFloat", "|", "constChar", "|", "constString"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "exit", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "binarn", "rPart": ["binary", "|", "binOperationL", "|", "binOperationS"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constBIn", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "+", "[\"]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "binary", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binOperationL", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binOperationS", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Ибрахим Т.","Collection":"314142234",{"_id": {"$oid": "67b21f05ce6dd03692d07f69"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "StringConst", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -!#-~]", "[']", ")", "|", "(", "[']", "[\\\\]", "[nrtbfv0\"'\\\\]", "[']", ")"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Formatting", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b22475ce6dd03692d07f6f"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67cc8c22af563521c9d5c925"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "StringConst", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")", "|", "(", "[']", "[\\\\]", "[nrtbfv0\"'\\\\]", "[']", ")"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*=/><]"]}, {"lPart": "LogicalOp", "rPart": ["[:]", "|", "[=]", "[=]", "|", "[!]", "[=]", "|", "[>]", "[=]", "|", "[<]", "[=]", "|", "[&]", "[&]", "|", "[|]", "[|]"]}, {"lPart": "Separator", "rPart": ["[;,()\\[\\]{}]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Formatting", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67de8d0b4635a960233ac3a8"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Program", "rPart": ["Operators"]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["\":=\""]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Separator", "rPart": ["[,]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]", "|", "[:]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["Id", "|", "IntConst", "|", "FloatConst", "|", "ExpoConst", "|", "String", "|", "Char", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["Id", "Assign", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operators", "\"}\"", "PartElse", "?"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "\":\"", "Expr", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "PartElse", "rPart": ["\"else\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenPart", "+", "OtherwisePart", "?", "\"}\""]}, {"lPart": "WhenPart", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f21784a600182c7517b88c"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Operators"]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]", "|", "[:]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Unary", "MultPart"]}, {"lPart": "Unary", "rPart": ["(", "\"++\"", "|", "\"--\"", "|", "\"-\"", "|", "\"+\"", "|", "\"!\"", ")", "?", "Postfix"]}, {"lPart": "Postfix", "rPart": ["Term", "(", "\"++\"", "|", "\"--\"", ")", "?"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["Id", "|", "IntConst", "|", "FloatConst", "|", "ExpoConst", "|", "String", "|", "Char", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["IdOperator"]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operators", "\"}\"", "PartElse", "?"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "PartElse", "rPart": ["\"else\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenPart", "+", "OtherwisePart", "?", "\"}\""]}, {"lPart": "WhenPart", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "IdOperator", "rPart": ["Id", "IdTail"]}, {"lPart": "IdTail", "rPart": ["\":=\"", "Assignment", "|", "Function"]}, {"lPart": "Function", "rPart": ["\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"long\""]}, {"lPart": "Arg", "rPart": ["Type", "Id"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Assignment", "rPart": ["Expr", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68029d5a8558742cb4337756"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Id"]}, {"lPart": "Operator", "rPart": ["IdOperator"]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")", "PartElse"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "IdOperator", "rPart": ["Id", "IdTail"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenPart", "+", "OtherwisePart", "?", "\"}\""]}, {"lPart": "IdTail", "rPart": ["\":=\"", "Assignment"]}, {"lPart": "BegExpr", "rPart": ["Unary", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "Assignment", "rPart": ["Expr", "\";\""]}, {"lPart": "Unary", "rPart": ["(", "\"++\"", "|", "\"--\"", ")", "?", "Term"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "WhenPart", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Term", "rPart": ["Id", "|", "IntConst", "|", "FloatConst", "|", "ExpoConst", "|", "String", "|", "Char", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6807d01c8558742cb433854b"}, "rules": "Lab51", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Id"]}, {"lPart": "Operator", "rPart": ["IdOperator"]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")", "PartElse"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "IdOperator", "rPart": ["Id", "IdTail"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenPart", "+", "OtherwisePart", "?", "\"}\""]}, {"lPart": "IdTail", "rPart": ["\":=\"", "Assignment"]}, {"lPart": "BegExpr", "rPart": ["Unary", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "Assignment", "rPart": ["Expr", "\";\""]}, {"lPart": "Unary", "rPart": ["(", "\"++\"", "|", "\"--\"", ")", "?", "Term"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "WhenPart", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Term", "rPart": ["Id", "|", "IntConst", "|", "FloatConst", "|", "ExpoConst", "|", "String", "|", "Char", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]"]}, {"lPart": "Operator", "rPart": ["FunctionCall"]}, {"lPart": "FunctionCall", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6815b3a08558742cb433aed5"}, "rules": "Lab52", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Id"]}, {"lPart": "Operator", "rPart": ["IdOperator"]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")", "PartElse"]}, {"lPart": "Operator", "rPart": ["Operator", "{ ctlStk.push(++operatorCnt); toPFR(\"LForBegin\" + peek(ctlStk) + \":\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"defVar\"); }", "\"foreach\"", "\"(\"", "Id", "{ toPFR(this.currentLexem[1]); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\":=\"); }", "\"in\"", "Expr", "{ toPFR(\"exprFrom\" + peek(ctlStk)); toPFR(\":=\"); }", "\":\"", "Expr", "{ toPFR(\"exprTo\" + peek(ctlStk)); toPFR(\":=\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"exprTo\" + peek(ctlStk)); toPFR(\">\"); toPFR(\"LForExit\" + peek(ctlStk)); toPFR(\"jmpOnFalse\"); }", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "{ toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"1\"); toPFR(\"+\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\":=\"); toPFR(\"LForBegin\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LForExit\" + ctlStk.pop() + \":\"); }"]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "IdOperator", "rPart": ["Id", "IdTail"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenFirst", "(", "WhenAdditional", ")", "*", "OtherwisePart", "?", "\"}\""]}, {"lPart": "IdTail", "rPart": ["\":=\"", "Assignment"]}, {"lPart": "BegExpr", "rPart": ["Unary", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "WhenFirst", "rPart": ["WhenClause"]}, {"lPart": "Assignment", "rPart": ["Expr", "\";\""]}, {"lPart": "Unary", "rPart": ["(", "UnaryOp", ")", "*", "Term"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "Unary", ")", "?"]}, {"lPart": "WhenClause", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators", "(", "BreakOperator", ")", "?"]}, {"lPart": "WhenAdditional", "rPart": ["WhenClause"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Term", "rPart": ["Id", "|", "IntConst", "|", "FloatConst", "|", "ExpoConst", "|", "String", "|", "Char", "|", "\"(\"", "{ opStk.push(\"(\"); }", "Expr", "{ if (peek(opStk) == \"(\") opStk.pop(); }", "\")\""]}, {"lPart": "UnaryOp", "rPart": ["\"++\"", "|", "\"--\"", "|", "\"-\"", "|", "\"!\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar operatorCnt=0;\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "68189d058558742cb433ba86"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operators", "rPart": ["{operatorCnt=0;}", "Operator", "+"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Id"]}, {"lPart": "Operator", "rPart": ["IdOperator"]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")", "PartElse"]}, {"lPart": "Operator", "rPart": ["Operator", "{ ctlStk.push(++operatorCnt); toPFR(\"LForBegin\" + peek(ctlStk) + \":\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"defVar\"); }", "\"foreach\"", "\"(\"", "Id", "{ toPFR(this.currentLexem[1]); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\":=\"); }", "\"in\"", "Expr", "{ toPFR(\"exprFrom\" + peek(ctlStk)); toPFR(\":=\"); }", "\":\"", "Expr", "{ toPFR(\"exprTo\" + peek(ctlStk)); toPFR(\":=\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"exprTo\" + peek(ctlStk)); toPFR(\">\"); toPFR(\"LForExit\" + peek(ctlStk)); toPFR(\"jmpOnFalse\"); }", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "{ toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"1\"); toPFR(\"+\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\":=\"); toPFR(\"LForBegin\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LForExit\" + ctlStk.pop() + \":\"); }"]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "IdOperator", "rPart": ["{toPFR(this.currentLexem[1]);}", "Id", "IdTail"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenFirst", "(", "WhenAdditional", ")", "*", "OtherwisePart", "?", "\"}\""]}, {"lPart": "IdTail", "rPart": ["\":=\"", "Assignment"]}, {"lPart": "BegExpr", "rPart": ["Unary", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "WhenFirst", "rPart": ["WhenClause"]}, {"lPart": "Assignment", "rPart": ["Expr", "\";\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Unary", "rPart": ["(", "UnaryOp", ")", "*", "Term"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "Unary", ")", "?"]}, {"lPart": "WhenClause", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators", "(", "BreakOperator", ")", "?"]}, {"lPart": "WhenAdditional", "rPart": ["WhenClause"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Term", "rPart": ["Id", "|", "IntConst", "|", "FloatConst", "|", "ExpoConst", "|", "String", "|", "Char", "|", "\"(\"", "{ opStk.push(\"(\"); }", "Expr", "{ if (peek(opStk) == \"(\") opStk.pop(); }", "\")\""]}, {"lPart": "UnaryOp", "rPart": ["\"++\"", "|", "\"--\"", "|", "\"-\"", "|", "\"!\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar operatorCnt=0;\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "681b104f8558742cb433ca75"}, "rules": "Lab67", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Operators", "rPart": ["{operatorCnt=0;}", "Operator", "+"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Id"]}, {"lPart": "Operator", "rPart": ["IdOperator"]}, {"lPart": "Operator", "rPart": ["BreakOperator"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operators", "\"}\"", ")", "PartElse"]}, {"lPart": "Operator", "rPart": ["{ ctlStk.push(++operatorCnt); toPFR(\"LForBegin\" + peek(ctlStk) + \":\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"defVar\"); }", "\"foreach\"", "\"(\"", "Id", "{ toPFR(\"push \" + currentWord); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\":=\"); }", "\"in\"", "Expr", "{ toPFR(\"exprFrom\" + peek(ctlStk)); toPFR(\":=\"); }", "\":\"", "Expr", "{ toPFR(\"exprTo\" + peek(ctlStk)); toPFR(\":=\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"exprTo\" + peek(ctlStk)); toPFR(\">\"); toPFR(\"LForExit\" + peek(ctlStk)); toPFR(\"jmpOnFalse\"); }", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "{ toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\"1\"); toPFR(\"+\"); toPFR(\"exprFor\" + peek(ctlStk)); toPFR(\":=\"); toPFR(\"LForBegin\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LForExit\" + ctlStk.pop() + \":\"); }"]}, {"lPart": "Operator", "rPart": ["CaseOperator"]}, {"lPart": "IdOperator", "rPart": ["{ toPFR(\"push \" + currentWord); }", "Id", "IdTail"]}, {"lPart": "BreakOperator", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart", "{while(opStk.length > 0) toPFR(opStk.pop());}"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "(", "Operator", "|", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "CaseOperator", "rPart": ["\"case\"", "Expr", "\"{\"", "WhenFirst", "(", "WhenAdditional", ")", "*", "OtherwisePart", "?", "\"}\""]}, {"lPart": "IdTail", "rPart": ["\":=\"", "Assignment"]}, {"lPart": "BegExpr", "rPart": ["Unary", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "{ opStk.push(\"+\"); }", "|", "\"-\"", "{ opStk.push(\"-\"); }", "|", "\">\"", "{ opStk.push(\">\"); }", "|", "\"<\"", "{ opStk.push(\"<\"); }", "|", "\"<=\"", "{ opStk.push(\"<=\"); }", "|", "\">=\"", "{ opStk.push(\">=\"); }", "|", "\"!=\"", "{ opStk.push(\"!=\"); }", "|", "\"==\"", "{ opStk.push(\"==\"); }", ")", "Expr", ")", "?"]}, {"lPart": "WhenFirst", "rPart": ["WhenClause"]}, {"lPart": "Assignment", "rPart": ["Expr", "\";\"", "{ toPFR(\"store \" + currentVar); }"]}, {"lPart": "Unary", "rPart": ["(", "UnaryOp", ")", "*", "Term"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "{ opStk.push(\"*\"); }", "|", "\"/\"", "{ opStk.push(\"/\"); }", ")", "Unary", ")", "?"]}, {"lPart": "WhenClause", "rPart": ["\"when\"", "Expr", "\"then\"", "Operators", "(", "BreakOperator", ")", "?"]}, {"lPart": "WhenAdditional", "rPart": ["WhenClause"]}, {"lPart": "OtherwisePart", "rPart": ["\"otherwise\"", "Operators"]}, {"lPart": "Term", "rPart": ["Id", "{ toPFR(\"push \" + currentWord); }", "|", "IntConst", "{ toPFR(\"Integer \" + currentWord); }", "|", "FloatConst", "{ toPFR(\"Float \" + currentWord); }", "|", "ExpoConst", "{ toPFR(\"Expo \" + currentWord); }", "|", "String", "|", "Char", "|", "\"(\"", "{ opStk.push(\"(\"); }", "Expr", "{ opStk.pop(); }", "\")\""]}, {"lPart": "UnaryOp", "rPart": ["\"++\"", "|", "\"--\"", "|", "\"-\"", "|", "\"!\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "{0,9}"]}, {"lPart": "IntConst", "rPart": ["[0-9]", "+"]}, {"lPart": "FloatConst", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ExpoConst", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'nrt\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "ArithmeticOp", "rPart": ["[+]", "|", "[-]", "|", "[*]", "|", "[/]"]}, {"lPart": "ComparisonOp", "rPart": ["[==]", "|", "[!=]", "|", "[<]", "|", "[>]", "|", "[<=]", "|", "[>=]"]}, {"lPart": "LogicalOp", "rPart": ["[&&]", "|", "[||]", "|", "[!]"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar currentVar=0;\nvar operatorCnt=0;\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Томбасов Д.С.","Collection":"123351132",{"_id": {"$oid": "67acaf92ce6dd03692d078b7"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67baf06cce6dd03692d09452"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d04eabaf563521c9d5da41"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/><]"]}, {"lPart": "commandeer", "rPart": ["\"set\"", "\"(\"", "(", "id", "|", "const4", "|", "const8", "|", "const", "|", "float", "|", "string", "|", "char", ")", "\",\"", "id", "\")\""]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "dotCommand", "rPart": ["[;,]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2b31a4635a960233ad975"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operationUnar", "rPart": ["[-]"]}, {"lPart": "operationBinar", "rPart": ["[+*/]"]}, {"lPart": "operationUnarLogic", "rPart": ["[!]"]}, {"lPart": "operationBinarLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationCompare", "rPart": ["(", "[<]", ")", "|", "(", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unary", "rPart": ["operationUnar", "|", "operationUnarLogic"]}, {"lPart": "binary", "rPart": ["operationBinar", "|", "operationBinarLogic", "|", "operationCompare"]}, {"lPart": "constants", "rPart": ["const4", "|", "const8", "|", "const", "|", "float", "|", "string", "|", "char"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "return", "rPart": ["\"return\""]}, {"lPart": "break", "rPart": ["\"break\""]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "|", "constants", "|", "callFunction", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "unary", "|", "binary", ")", "expression", ")", "?"]}, {"lPart": "commandeer", "rPart": ["\"set\"", "\"(\"", "expression", "\",\"", "id", "\")\""]}, {"lPart": "conditional", "rPart": ["\"in\"", "\"(\"", "(", "expression", ")", "\")\"", "\"then\"", "(", "operator", "|", "operators", ")", "(", "\"not\"", "(", "operator", "|", "operators", ")", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "(", "operator", "|", "operators", ")", "\"until\"", "(", "expression", ")", "retire", "?"]}, {"lPart": "select", "rPart": ["\"select\"", "expression", "(", "\"case\"", "\"(\"", "constants", "\")\"", "(", "operator", "|", "operators", ")", "*", "break", "?", ")", "+", "(", "\"case\"", "\"(\"", "\"false\"", "\")\"", "(", "operator", "|", "operators", ")", "*", ")", "?", "\"end\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "expression", ")", "*", "\")\"", "operators"]}, {"lPart": "callFunction", "rPart": ["id", "\"(\"", "id", "*", "\")\""]}, {"lPart": "operator", "rPart": ["(", "commandeer", "|", "conditional", "|", "return", "|", "loop", "|", "callFunction", "|", "comment", ")", "?", "\";\""]}, {"lPart": "operator", "rPart": ["function", "|", "select"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "program", "rPart": ["function", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2f4bd4635a960233adc4a"}, "rules": "prob", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operationUnar", "rPart": ["[-]"]}, {"lPart": "operationBinar", "rPart": ["[+*/]"]}, {"lPart": "operationUnarLogic", "rPart": ["[!]"]}, {"lPart": "operationBinarLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationCompare", "rPart": ["(", "[<]", ")", "|", "(", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unary", "rPart": ["operationUnar", "|", "operationUnarLogic"]}, {"lPart": "binary", "rPart": ["operationBinar", "|", "operationBinarLogic", "|", "operationCompare"]}, {"lPart": "constants", "rPart": ["const4", "|", "const8", "|", "const", "|", "float", "|", "string", "|", "char"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "return", "rPart": ["\"return\""]}, {"lPart": "break", "rPart": ["\"break\""]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "unary", "|", "binary", ")", "expression", ")", "?"]}, {"lPart": "commandeer", "rPart": ["\"set(\"", "expression", "\",\"", "id", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f524708558742cb433399e"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operationUnar", "rPart": ["[-]"]}, {"lPart": "operationBinar", "rPart": ["[+*/]"]}, {"lPart": "operationUnarLogic", "rPart": ["[!]"]}, {"lPart": "operationBinarLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationCompare", "rPart": ["(", "[<]", ")", "|", "(", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unary", "rPart": ["operationUnar", "|", "operationUnarLogic"]}, {"lPart": "binary", "rPart": ["operationBinar", "|", "operationBinarLogic", "|", "operationCompare"]}, {"lPart": "constants", "rPart": ["const4", "|", "const8", "|", "const", "|", "float", "|", "string", "|", "char", "|", "\"false\""]}, {"lPart": "expression", "rPart": ["unary", "?", "(", "id", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", "(", "(", "operationUnar", "|", "binary", ")", "expression", ")", "?"]}, {"lPart": "commandeer", "rPart": ["\"set\"", "\"(\"", "expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "conditional", "rPart": ["\"in\"", "\"(\"", "expression", "\")\"", "\"then\"", "operator", "elseCond"]}, {"lPart": "elseCond", "rPart": ["\"not\"", "operator"]}, {"lPart": "loop", "rPart": ["\"loop\"", "operator", "\"until\"", "\"(\"", "expression", "\")\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "operator", "rPart": ["commandeer", "|", "conditional", "|", "loop", "|", "select"]}, {"lPart": "select", "rPart": ["\"setect\"", "expression", "usualCase", "+", "\"end\""]}, {"lPart": "usualCase", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "operator"]}, {"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "elseCond", "rPart": ["~", "\"not\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6807b79e8558742cb43384f6"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operationUnar", "rPart": ["[-]"]}, {"lPart": "operationBinar", "rPart": ["[+*/%]"]}, {"lPart": "operationUnarLogic", "rPart": ["[!]"]}, {"lPart": "operationBinarLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationCompare", "rPart": ["(", "[<]", ")", "|", "(", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unary", "rPart": ["operationUnar", "|", "operationUnarLogic"]}, {"lPart": "binary", "rPart": ["operationBinar", "|", "operationBinarLogic", "|", "operationCompare"]}, {"lPart": "constants", "rPart": ["const4", "|", "const8", "|", "const", "|", "float", "|", "string", "|", "char", "|", "\"false\""]}, {"lPart": "expression", "rPart": ["(", "unary", "?", "(", "id", "parametrs", "?", "|", "constants", "|", "\"(\"", "expression", "\")\"", ")", ")", "(", "(", "operationUnar", "|", "binary", ")", "expression", ")", "?"]}, {"lPart": "commandeer", "rPart": ["\"set\"", "\"(\"", "expression", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "conditional", "rPart": ["\"in\"", "\"(\"", "expression", "\")\"", "\"then\"", "operator", "elseCond"]}, {"lPart": "elseCond", "rPart": ["\"not\"", "operator"]}, {"lPart": "loop", "rPart": ["\"loop\"", "operator", "\"until\"", "\"(\"", "expression", "\")\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "operator", "rPart": ["commandeer", "|", "conditional", "|", "loop", "|", "Select", "|", "(", "id", "parametrs", ")"]}, {"lPart": "Select", "rPart": ["\"select\"", "expression", "usualCase", "+", "\"end\""]}, {"lPart": "usualCase", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "operator", "*"]}, {"lPart": "program", "rPart": ["function", "+"]}, {"lPart": "elseCond", "rPart": ["~", "\"not\""]}, {"lPart": "parametrs", "rPart": ["\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "declaration", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "declaration", "?", "\")\"", "\"{\"", "operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681a0eff8558742cb433c1ed"}, "rules": "Lab6", "data": {"rList": [{"lPart": "program", "rPart": ["{reboot();}", "function", "+"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "declaration", "?", "\")\"", "\"{\"", "operator", "*", "\"}\""]}, {"lPart": "declaration", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "operator", "rPart": ["commandeer", "|", "conditional", "|", "loop", "|", "Select", "|", "(", "id", "parametrs", ")"]}, {"lPart": "commandeer", "rPart": ["\"set\"", "\"(\"", "expression", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"=\");}", "\")\"", "\";\""]}, {"lPart": "conditional", "rPart": ["\"in\"", "\"(\"", "expression", "\")\"", "\"then\"", "operator", "elseCond"]}, {"lPart": "loop", "rPart": ["{loopStack.push(++loopCnt);}", "\"loop\"", "{toPFR(\"LoopBegin_\"+look(loopStack)+\":\"); toPFR(\"LoopBody_\"+look(loopStack)+\":\"); }", "operator", "{toPFR(\"LookCommander_\"+look(loopStack)); toPFR(\"Jmp\"); toPFR(\"LoopEnd_\"+look(loopStack)+\":\")}", "\"until\"", "\"(\"", "expression", "{toPFR(\"LoopEnd_\"+look(loopStack)); toPFR(\"JmpOnFalse\");}", "\")\""]}, {"lPart": "Select", "rPart": ["\"select\"", "expression", "usualCase", "+", "\"end\""]}, {"lPart": "expression", "rPart": ["{unarStack.push(this.currentLexem[1]);}", "unary", "expressionBegin", "{toPFR(\"unary\"+unarStack.pop());}", "expressionEnd"]}, {"lPart": "expression", "rPart": ["expressionBegin", "expressionEnd"]}, {"lPart": "elseCond", "rPart": ["\"not\"", "operator"]}, {"lPart": "elseCond", "rPart": ["~", "\"not\""]}, {"lPart": "parametrs", "rPart": ["\"(\"", "(", "expression", "(", "\",\"", "expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "unary", "rPart": ["operationUnar", "|", "operationUnarLogic"]}, {"lPart": "expressionBegin", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "parametrs", "?"]}, {"lPart": "expressionBegin", "rPart": ["{toPFR(this.currentLexem[1]);}", "constants"]}, {"lPart": "expressionBegin", "rPart": ["{operStack.push(\"(\");}", "\"(\"", "expression", "\")\"", "{operStack.pop();}"]}, {"lPart": "expressionEnd", "rPart": ["(", "{if((operStack.length > 0) && (getPrecedence(look(operStack)) >= getPrecedence(this.currentLexem[1]))) toPFR(operStack.pop()); operStack.push(this.currentLexem[1]);}", "(", "operationUnar", "|", "binary", ")", "expression", "{if (operStack.length >0) toPFR(operStack.pop());}", ")"]}, {"lPart": "expressionEnd", "rPart": []}, {"lPart": "usualCase", "rPart": ["\"case\"", "\"(\"", "constants", "\")\"", "operator", "*"]}, {"lPart": "constants", "rPart": ["const4", "|", "const8", "|", "const", "|", "float", "|", "string", "|", "char", "|", "\"false\""]}, {"lPart": "binary", "rPart": ["operationBinar", "|", "operationBinarLogic", "|", "operationCompare"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "operationUnar", "rPart": ["[-]"]}, {"lPart": "operationUnarLogic", "rPart": ["[!]"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "operationBinar", "rPart": ["[+*/%]"]}, {"lPart": "operationBinarLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "operationCompare", "rPart": ["(", "[<]", ")", "|", "(", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n   this.history = [];\n};\n\nTracer.prototype = {\n   put: function(b){\n      this.history.push(b);\n   },\n\n   getAll: function(){\n      var r = \"\";\n      for(var i = 0; i < this.history.length; i++)\n      r += \" \" + this.history[i];\n      return r;\n   },\n\n   clear: function(){\n      this.history = [];\n   }\n};\n\nvar tracer = new Tracer();\n\nvar unarStack, operStack, loopStack, loopCnt;\n\nfunction reboot(){\n   unarStack = [];\n   operStack = [];\n   loopStack = [];\n   loopCnt = 0;\n}\n\nfunction toPFR(x){\n   tracer.put(x);\n}\n\nfunction look(v){\n   return v[v.length - 1];\n}\n\nfunction getPrecedence(s){\n   switch (s) {\n      case \"(\":\n         return 0;\n      case \"+\":\n      case \"-\":\n      case \"<\":\n      case \">\":\n      case \"==\":\n      case \"!=\":\n      case \"<=\":\n      case \">=\":\n      case \"||\":\n         return 1;\n      case \"*\":\n      case \"/\":\n      case \"&&\":\n         return 2;\n   }\n}"}}},
{"FIO":"Ковальский Р.А.","Collection":"542525334",{"_id": {"$oid": "67bc3669ce6dd03692d0975d"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Чубак Д.Р.","Collection":"215143323",{"_id": {"$oid": "67c4999aaf563521c9d5b537"}, "rules": "Пример1", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-\\+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;,:]"]}, {"lPart": "comm", "rPart": ["[//]", "[//]", "+", "{ ignoreLastWord=true; }"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "(", "[0-9]", ")", "?"]}, {"lPart": "to", "rPart": ["[to]"]}, {"lPart": "put", "rPart": ["[put]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c59c23af563521c9d5b7ce"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c5b676af563521c9d5b7fe"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "(", "[0-9]", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6b0dee0b22203e7cbfedf"}, "rules": "lab2", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-\\+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[:]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "(", "[0-9]", ")", "?"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "brackets", "rPart": ["(", "[(]", "[]", "+", "[)]", ")"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "lbrace", "rPart": ["[{]"]}, {"lPart": "rbrace", "rPart": ["[}]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea74e54635a960233b018f"}, "rules": "lab3", "data": {"rList": [{"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-\\+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "(", "[0-9]", ")", "?"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}, {"lPart": "Prog", "rPart": ["(", "CmpOp", "|", "AssignOp", "|", "CycleOp", ")", "+"]}, {"lPart": "CmpOp", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"else\"", "\"{\"", "Prog", "\"}\"", ")", "?"]}, {"lPart": "AssignOp", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "CycleOp", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"stop\"", "\";\"", ")", "?"]}, {"lPart": "Expr", "rPart": ["unary", "*", "BExpr", "EExpr", "?"]}, {"lPart": "BExpr", "rPart": ["id", "|", "const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "operation", "Expr", ")", "|", "(", "compare", "Expr", ")", "|", "(", "logic", "Expr", ")"]}, {"lPart": "unary", "rPart": ["\"!\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe65d28558742cb4336dc6"}, "rules": "lab4", "data": {"rList": [{"lPart": "Prog", "rPart": ["(", "\"put\"", "Fun", "\"to\"", ")", "+"]}, {"lPart": "Entering", "rPart": ["CmpOp", "|", "DeclareOp", "|", "CycleOp", "|", "SwitchOp", "|", "AssignOp"]}, {"lPart": "CmpOp", "rPart": ["\"by\"", "Expr", "OoB", "Else"]}, {"lPart": "DeclareOp", "rPart": ["id", "\"=\"", "T", "?", "(", "(", "\"put\"", "Expr", ")", "?", "\";\"", "|", "Fun", ")"]}, {"lPart": "CycleOp", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "OoB"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "By", "+", "Default", "?", "\"}\""]}, {"lPart": "AssignOp", "rPart": ["T", "?", "\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["unary", "*", "BExpr", "EExpr", "?"]}, {"lPart": "OoB", "rPart": ["(", "Entering", ")", "|", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "Else", "rPart": ["\"else\"", "OoB"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "BExpr", "rPart": ["T", "?", "id", "(", "\"(\"", "Args", "?", "\")\"", ")", "?", "|", "const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "Fun", "rPart": ["\"(\"", "Args", "?", "\")\"", "\"{\"", "Entering", "+", "(", "Return", ")", "?", "\"}\"", "(", "\";\"", ")", "?"]}, {"lPart": "By", "rPart": ["\"by\"", "const", "\"do\"", "OoB", "Leave"]}, {"lPart": "Default", "rPart": ["\"any do\"", "Entering", "+", "Leave"]}, {"lPart": "EExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Binary", "rPart": ["bin", "|", "logic", "|", "dual"]}, {"lPart": "Args", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "(", "[0-9]", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "bin", "rPart": ["[*/]"]}, {"lPart": "logic", "rPart": ["[I]", "[I]", "|", "[&]", "[&]"]}, {"lPart": "dual", "rPart": ["[-+]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Логачев А.И.","Collection":"522245532",{"_id": {"$oid": "67bf2652af563521c9d59cff"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bf28ffaf563521c9d59d2e"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["['']", "[]", "*", "['']"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cf1ffaaf563521c9d5d5aa"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["['']", "[]", "*", "['']"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[ <]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "(", "id", "|", "const10", "|", "const8", "|", "const4", "|", "constChar", ")", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2a20c4635a960233ad8dd"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["['']", "[]", "*", "['']"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[ <]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logicno", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "minus", "|", "compare", "|", "opSign", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constChar", "|", "constStr", "|", "const4", "|", "const8", "|", "const10"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicno", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f547518558742cb4333e50"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "consts", "\":\"", "consts", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "consts", "\":\"", "operators", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "operators", ")", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "operators", "\"->\"", "id"]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logicno", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "consts", "rPart": ["const", "|", "constChar", "|", "constStr", "|", "const4", "|", "const8", "|", "const10"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "minus", "|", "compare", "|", "opSign", ")", "Expr", ")", "?"]}, {"lPart": "arglist", "rPart": ["id", "(", "\",\"", "id", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["['']", "[]", "*", "['']"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicno", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[ <]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808dd868558742cb4338a3e"}, "rules": "lab5", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "Expr", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "consts", "\":\"", "consts", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "consts", "\":\"", "operators", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "operators", ")", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "arglist", "?", "\")\"", "operators", "\"->\"", "id"]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logicno", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"other\""]}, {"lPart": "endPart", "rPart": ["\"other\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "consts", "rPart": ["const", "|", "constChar", "|", "constStr", "|", "const4", "|", "const8", "|", "const10"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "minus", "|", "compare", "|", "opSign", ")", "Expr", ")", "?"]}, {"lPart": "arglist", "rPart": ["id", "(", "\",\"", "id", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["['']", "[]", "*", "['']"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicno", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[ <]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Антропов Г.С.","Collection":"143425243",{"_id": {"$oid": "67bf4548af563521c9d59e7f"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bf4c64af563521c9d59ec8"}, "rules": "noName", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bf627aaf563521c9d59f74"}, "rules": "Laba1", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d15466af563521c9d5dfd6"}, "rules": "Laba2", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opComp", "rPart": ["(", "[>]", "|", "[<]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "opLogic", "rPart": ["[!]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "*", "|", "[*]", "*", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2daace0b22203e7cbf50b"}, "rules": "Laba3", "data": {"rList": [{"lPart": "opBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "opBlock", "|", "operator", ")", "endPart"]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logicNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "minus", "|", "opLogic", "|", "opComp", "|", "opSign", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["constChar", "|", "constStr", "|", "const", "|", "constReal"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicNo", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opComp", "rPart": ["(", "[>]", "|", "[<]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "*", "|", "[*]", "*", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "opBlock", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"end\""]}, {"lPart": "other", "rPart": ["\"nooption\"", "opBlock", "+"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f657738558742cb4334605"}, "rules": "Laba4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "arglist", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "opBlock"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "opBlock", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "opBlock", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "opBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logicNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "?"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"str\"", "|", "\"int\"", "|", "\"float\"", "|", "\"two\"", "|", "\"eight\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "minus", "|", "opLogic", "|", "opComp", "|", "opSign", ")", "Expr", ")", "?"]}, {"lPart": "other", "rPart": ["\"nooption\"", "opBlock", "+"]}, {"lPart": "consts", "rPart": ["constChar", "|", "constStr", "|", "const", "|", "constReal"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicNo", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opComp", "rPart": ["(", "[>]", "|", "[<]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "*", "|", "[*]", "*", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808e76b8558742cb4338aa7"}, "rules": "Laba5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "arglist", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "opBlock"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "opBlock", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "opBlock", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "opBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "minus", "|", "logicNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "?"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"str\"", "|", "\"int\"", "|", "\"float\"", "|", "\"two\"", "|", "\"eight\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "minus", "|", "opLogic", "|", "opComp", "|", "opSign", ")", "Expr", ")", "?"]}, {"lPart": "other", "rPart": ["\"nooption\"", "opBlock", "+"]}, {"lPart": "consts", "rPart": ["constChar", "|", "constStr", "|", "const", "|", "constReal"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicNo", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opComp", "rPart": ["(", "[>]", "|", "[<]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "*", "|", "[*]", "*", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e2ebd8558742cb4339e5a"}, "rules": "Laba6", "data": {"rList": [{"lPart": "prog", "rPart": ["{whileCnt=0;}", "(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["{toPFR(\"func\");toPFR(this.currentLexem[1]);}", "id", "\"(\"", "arglist", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "opBlock"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "\")\"", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "operator", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "opBlock", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++opCnt);}", "\"cycle\"", "\"(\"", "{toPFR(\"_cycle_\");}", "operator", "{toPFR(\"CycleDo_\"+peek(ctlStk));}", "Expr", "{toPFR(\"_cycle_\");}", "\";\"", "operator", "{toPFR(\"CycleExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\"); }", "{toPFR(\"_cycle_\");}", "\")\"", "(", "opBlock", "|", "operator", ")", "{toPFR(\"CycleDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"CycleExit_\" +peek(ctlStk)+\":\");}"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "opBlock", "+", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["(", "{toPFR(\"labelLoopFalse\"+peek(ctlStk)); toPFR(\"JumpFalse\");}", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "opBlock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", "|", "logicNo", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "opBlock", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "arglist", "rPart": ["type", "{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "type", "{toPFR(this.currentLexem[1]);}", "id", ")", "?"]}, {"lPart": "type", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "\"char\"", "|", "\"str\"", "|", "\"int\"", "|", "\"float\"", "|", "\"two\"", "|", "\"eight\"", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "consts"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "minus", "|", "opLogic", "|", "opComp", "|", "opSign", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "other", "rPart": ["\"nooption\"", "opBlock", "+"]}, {"lPart": "consts", "rPart": ["constChar", "|", "constStr", "|", "const", "|", "constReal"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicNo", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opComp", "rPart": ["(", "[>]", "|", "[<]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "*", "|", "[*]", "*", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar userSignStk = []; //стек имен функций как знаков операций, объявляемых пользователем\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n"}}},
{"FIO":"Филиппов Д.Д.","Collection":"122345322",{"_id": {"$oid": "67bc60b1af563521c9d58eec"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67cecc2daf563521c9d5d411"}, "rules": "Лабораторная1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "delimeter", "rPart": ["[,;]"]}, {"lPart": "math", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[-+*/]", "[=]", "?", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "[a-zA-Z0-9]", "*", "[*]", "[/]"]}, {"lPart": "brackets", "rPart": ["(", "[{]", "[]", "*", "[}]", ")", "|", "(", "[(]", "[]", "*", "[)]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e522d44635a960233aeb84"}, "rules": "Лабораторная2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "+", "[\"]"]}, {"lPart": "math", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[+*/]", "[=]", "?", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "[a-zA-Z0-9а-яА-Я ]", "*", "[*]", "[/]"]}, {"lPart": "brackets", "rPart": ["(", "[{]", "[]", "*", "[}]", ")", "|", "(", "[(]", "[]", "*", "[)]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680660768558742cb43380e5"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "[']"]}, {"lPart": "operation2", "rPart": ["[+*/><]", "|", "(", "[!><=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "+", "[\"]"]}, {"lPart": "operation1", "rPart": ["[!]"]}, {"lPart": "operation12", "rPart": ["[-]"]}, {"lPart": "comments", "rPart": ["[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680666428558742cb4338129"}, "rules": "Лабораторная311", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "+", "[\"]"]}, {"lPart": "math", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[-+*/]", "[=]", "?", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "[a-zA-Z0-9а-яА-Я ]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "delimeter2", "rPart": ["[,]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "exclam", "rPart": ["[!]"]}, {"lPart": "prog", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["assign", "|", "condition"]}, {"lPart": "assign", "rPart": ["id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "condition", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "operator", "*", "\"}\"", "(", "\"not\"", "\"{\"", "operator", "*", "\"}\"", ")", "?"]}, {"lPart": "constAll", "rPart": ["const", "|", "const4", "|", "const8"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "Expr", ")", "?"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680a3e758558742cb4339551"}, "rules": "Лабораторная3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "+", "[\"]"]}, {"lPart": "math", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[-+*/]", "[=]", "?", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "[a-zA-Z0-9а-яА-Я ]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "delimeter2", "rPart": ["[,]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "exclam", "rPart": ["[!]"]}, {"lPart": "prog", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["assign", "|", "condition"]}, {"lPart": "assign", "rPart": ["id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "condition", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "operator", "*", "\"}\"", "(", "\"not\"", "\"{\"", "operator", "*", "\"}\"", ")", "?"]}, {"lPart": "constAll", "rPart": ["const", "|", "const4", "|", "const8"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "Expr", ")", "?"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Нестеренко М.К.","Collection":"545242223",{"_id": {"$oid": "67bf2cc0af563521c9d59d6c"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bf2eb0af563521c9d59d92"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67d70ddde0b22203e7cc06b5"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Z]", "(", "[0-9]", "{0,3}", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonst", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "operationSigns", "rPart": ["[-+*/<>]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["\"put\"", "const", "\"to\"", "id"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "words", "rPart": ["[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "split", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb4d038558742cb4335a68"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonst", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["\"put\"", "Const", "\"to\"", "id"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "simpleOpers", "rPart": ["[+-*%/&]"]}, {"lPart": "unaryOpers", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "binaryOpers", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "bool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "null", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "const", "|", "bool", "|", "null", ")"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "\"(\"", "Binary", "\")\"", "block", "(", "\"else\"", "block", ")", "?"]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "expr", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "Unary", "rPart": ["unaryOpers", "expr"]}, {"lPart": "Binary", "rPart": ["expr", "binaryOpers", "expr"]}, {"lPart": "return", "rPart": ["\"return\"", "expr"]}, {"lPart": "block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "traverse", "rPart": ["[:]"]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "traverse", "const", "\")\"", "block"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "block", ")", "+", "\"}\""]}, {"lPart": "functionHead", "rPart": ["\"function\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "\"ret\"", "types"]}, {"lPart": "Function", "rPart": ["functionHead", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "Statement", "rPart": ["Loop", "|", "SwitchCase", "|", "Conditional", "|", "Function", "|", "(", "(", "Assign", "|", "id", "|", "Const", "|", "return", "|", "Unary", "|", "FunctionCall", "|", "TypeDecl", ")", "delimiter", ")"]}, {"lPart": "TypeDecl", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fc45ef8558742cb4336585"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonst", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["\"put\"", "Const", "\"to\"", "id"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "simpleOpers", "rPart": ["[+-*%/&]"]}, {"lPart": "unaryOpers", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "binaryOpers", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "bool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "null", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "const", "|", "bool", "|", "null", ")"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "\"(\"", "Binary", "\")\"", "block", "(", "\"else\"", "block", ")", "?"]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "expr", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "Unary", "rPart": ["unaryOpers", "expr"]}, {"lPart": "Binary", "rPart": ["expr", "binaryOpers", "expr"]}, {"lPart": "return", "rPart": ["\"return\"", "expr"]}, {"lPart": "block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "traverse", "rPart": ["[:]"]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "traverse", "const", "\")\"", "block"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "block", ")", "+", "\"}\""]}, {"lPart": "functionHead", "rPart": ["\"function\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "\"ret\"", "types"]}, {"lPart": "Function", "rPart": ["functionHead", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "Statement", "rPart": ["Loop", "|", "SwitchCase", "|", "Conditional", "|", "Function", "|", "(", "(", "Assign", "|", "id", "|", "Const", "|", "return", "|", "Unary", "|", "FunctionCall", "|", "TypeDecl", ")", "delimiter", ")"]}, {"lPart": "TypeDecl", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe8e198558742cb4336f08"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "сonst", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["\"put\"", "Const", "\"to\"", "id"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "simpleOpers", "rPart": ["[+-*%/&]"]}, {"lPart": "unaryOpers", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "(", "[!~]", ")"]}, {"lPart": "binaryOpers", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "bool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "null", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["(", "const", "|", "bool", "|", "null", ")"]}, {"lPart": "Conditional", "rPart": ["\"when\"", "\"(\"", "Binary", "\")\"", "block", "(", "\"else\"", "block", ")", "?"]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", ")"]}, {"lPart": "expr", "rPart": ["(", "id", "|", "Const", ")"]}, {"lPart": "Unary", "rPart": ["unaryOpers", "expr"]}, {"lPart": "Binary", "rPart": ["expr", "binaryOpers", "expr"]}, {"lPart": "return", "rPart": ["\"return\"", "expr"]}, {"lPart": "block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "traverse", "rPart": ["[:]"]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "traverse", "const", "\")\"", "block"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "block", ")", "+", "\"}\""]}, {"lPart": "functionHead", "rPart": ["\"function\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "\"ret\"", "types"]}, {"lPart": "Function", "rPart": ["functionHead", "block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "id", "(", "comma", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "Statement", "rPart": ["Loop", "|", "SwitchCase", "|", "Conditional", "|", "Function", "|", "(", "(", "Assign", "|", "id", "|", "Const", "|", "return", "|", "Unary", "|", "FunctionCall", "|", "TypeDecl", ")", "delimiter", ")"]}, {"lPart": "TypeDecl", "rPart": ["types", "id", "(", "comma", "id", ")", "*"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Соловов М.А.","Collection":"325255314",{"_id": {"$oid": "67bc3b09ce6dd03692d09786"}, "rules": "lab1", "data": {"rList": [{"lPart": "bukvi", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "pravilo2", "rPart": ["[0]", "[c]", "[0-3]", "+"]}, {"lPart": "pravilo2", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "probels", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "pravilo2", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "pravilo2", "rPart": ["[']", "[]", "[']"]}, {"lPart": "pravilo2", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "pravilo2", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "pravilomath", "rPart": ["[-+=/*%><]", "|", "[-+]", "[=]", "|", "[><]", "[=]", "|", "[m]", "[o]", "[d]"]}, {"lPart": "comms", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Numbers", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}], "extension": ""}}{"_id": {"$oid": "67bc3b17ce6dd03692d09789"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "-3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67cbfe82af563521c9d5c718"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67cc0a5caf563521c9d5c741"}, "rules": "lab2", "data": {"rList": [{"lPart": "bukvi", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "quad", "rPart": ["[0]", "[c]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "probels", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "pravilo2", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "pravilomath", "rPart": ["[-+=/*%><]", "|", "[-+]", "[=]", "|", "[><]", "[=]", "|", "[m]", "[o]", "[d]"]}, {"lPart": "comms", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Numbers", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["Numbers", "|", "quad", "|", "hex", "|", "float", "|", "char", "|", "string"]}, {"lPart": "operand", "rPart": ["const", "|", "bukvi"]}, {"lPart": "express", "rPart": ["operand", "(", "operation", "express", ")", "?"]}, {"lPart": "operation", "rPart": ["pravilomath"]}, {"lPart": "assign", "rPart": ["\"Put\"", "express", "\"To\"", "bukvi", "\";\""]}, {"lPart": "expr", "rPart": ["\"(\"", "express", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"retire;\""]}, {"lPart": "if", "rPart": ["\"When\"", "expr", "block", "other", "?"]}, {"lPart": "other", "rPart": ["\"Other\"", "block"]}, {"lPart": "asd", "rPart": ["[;,:]"]}, {"lPart": "cycle", "rPart": ["\"Loop\"", "(", "operator", "|", "block", ")", "\"Until\"", "\"[\"", "express", "\")\"", "\";\""]}, {"lPart": "switch", "rPart": ["\"Choice\"", "expr", "(", "\"Option\"", "const", "\":\"", "\"{\"", "operator", "*", "\"fin;\"", "\"}\"", ")", "+", "(", "\"Nooption\"", "operator", "*", ")", "?", "\"End\""]}, {"lPart": "type", "rPart": ["\"Bool\"", "|", "\"Numbers\"", "|", "\"Char\"", "|", "\"String\""]}, {"lPart": "func", "rPart": ["bukvi", "\"==\"", "type", "\"(\"", "(", "bukvi", "(", "\",\"", "bukvi", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}], "extension": ""}}{"_id": {"$oid": "67e0dffa4635a960233ace53"}, "rules": "lab3", "data": {"rList": [{"lPart": "bukvi", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "quad", "rPart": ["[0]", "[c]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "probels", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "pravilo2", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "pravilomath", "rPart": ["[-+=/*%><]", "|", "[-+]", "[=]", "|", "[><]", "[=]", "|", "[m]", "[o]", "[d]"]}, {"lPart": "comms", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Numbers", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["Numbers", "|", "quad", "|", "hex", "|", "float", "|", "char", "|", "string"]}, {"lPart": "operand", "rPart": ["const", "|", "bukvi"]}, {"lPart": "express", "rPart": ["operand", "(", "operation", "express", ")", "?"]}, {"lPart": "operation", "rPart": ["pravilomath"]}, {"lPart": "assign", "rPart": ["\"Put\"", "express", "\"To\"", "bukvi", "\";\""]}, {"lPart": "expr", "rPart": ["\"(\"", "express", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"retire;\""]}, {"lPart": "if", "rPart": ["\"When\"", "expr", "block", "other", "?"]}, {"lPart": "other", "rPart": ["\"Other\"", "block"]}, {"lPart": "asd", "rPart": ["[;,:]"]}, {"lPart": "cycle", "rPart": ["\"Loop\"", "(", "operator", "|", "block", ")", "\"Until\"", "\"[\"", "express", "\")\"", "\";\""]}, {"lPart": "switch", "rPart": ["\"Choice\"", "expr", "(", "\"Option\"", "const", "\":\"", "\"{\"", "operator", "*", "\"fin;\"", "\"}\"", ")", "+", "(", "\"Nooption\"", "operator", "*", ")", "?", "\"End\""]}, {"lPart": "type", "rPart": ["\"Bool\"", "|", "\"Numbers\"", "|", "\"Char\"", "|", "\"String\""]}, {"lPart": "func", "rPart": ["bukvi", "\"==\"", "type", "\"(\"", "(", "bukvi", "(", "\",\"", "bukvi", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "statement", "rPart": ["operator", "|", "func"]}, {"lPart": "main", "rPart": ["statement", "+"]}], "extension": ""}}{"_id": {"$oid": "67f38d238558742cb4333333"}, "rules": "lab4", "data": {"rList": [{"lPart": "bukvi", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "quad", "rPart": ["[0]", "[c]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "probels", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "pravilo2", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "pravilomath", "rPart": ["[-+=/*%><]", "|", "[-+]", "[=]", "|", "[><]", "[=]", "|", "[m]", "[o]", "[d]"]}, {"lPart": "comms", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Numbers", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["Numbers", "|", "quad", "|", "hex", "|", "float", "|", "char", "|", "string"]}, {"lPart": "operand", "rPart": ["const", "|", "bukvi"]}, {"lPart": "express", "rPart": ["operand", "(", "operation", "express", ")", "?"]}, {"lPart": "operation", "rPart": ["pravilomath"]}, {"lPart": "assign", "rPart": ["\"Put\"", "express", "\"To\"", "bukvi", "\";\""]}, {"lPart": "expr", "rPart": ["\"(\"", "express", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"retire;\""]}, {"lPart": "if", "rPart": ["\"When\"", "expr", "block", "other", "?"]}, {"lPart": "other", "rPart": ["\"Other\"", "block"]}, {"lPart": "asd", "rPart": ["[;,:]"]}, {"lPart": "cycle", "rPart": ["\"Loop\"", "(", "operator", "|", "block", ")", "\"Until\"", "\"[\"", "express", "\")\"", "\";\""]}, {"lPart": "switch", "rPart": ["\"Choice\"", "expr", "(", "\"Option\"", "const", "\":\"", "\"{\"", "operator", "*", "\"fin;\"", "\"}\"", ")", "+", "(", "\"Nooption\"", "operator", "*", ")", "?", "\"End\""]}, {"lPart": "type", "rPart": ["\"Bool\"", "|", "\"Numbers\"", "|", "\"Char\"", "|", "\"String\""]}, {"lPart": "func", "rPart": ["bukvi", "\"==\"", "type", "\"(\"", "(", "bukvi", "(", "\",\"", "bukvi", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "statement", "rPart": ["operator", "|", "func"]}, {"lPart": "main", "rPart": ["statement", "+"]}], "extension": ""}}{"_id": {"$oid": "6805dc1d8558742cb4337f47"}, "rules": "lab5", "data": {"rList": [{"lPart": "bukvi", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "quad", "rPart": ["[0]", "[c]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "probels", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "pravilo2", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "pravilomath", "rPart": ["[-+=/*%><]", "|", "[-+]", "[=]", "|", "[><]", "[=]", "|", "[m]", "[o]", "[d]"]}, {"lPart": "comms", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Numbers", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["Numbers", "|", "quad", "|", "hex", "|", "float", "|", "char", "|", "string"]}, {"lPart": "operand", "rPart": ["const", "|", "bukvi"]}, {"lPart": "express", "rPart": ["operand", "(", "operation", "express", ")", "?"]}, {"lPart": "operation", "rPart": ["pravilomath"]}, {"lPart": "assign", "rPart": ["\"Put\"", "{rollStk.push(tracer.history.length)}", "Expr1", "\"To\"", "{var tmp = rollback(); rollStk.pop(); toPFR(this.currentLexem[1]);}", "bukvi", "\";\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); tracer.history=tracer.history.concat(tmp);toPFR(\"Put\");}"]}, {"lPart": "expr", "rPart": ["\"(\"", "express", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"retire;\""]}, {"lPart": "if", "rPart": ["\"When\"", "expr", "block", "other", "?"]}, {"lPart": "other", "rPart": ["\"Other\"", "block"]}, {"lPart": "asd", "rPart": ["[;,:]"]}, {"lPart": "cycle", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"Loop\"", "operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"Until\"", "Expr1", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}"]}, {"lPart": "switch", "rPart": ["\"Choice\"", "expr", "(", "\"Option\"", "const", "\":\"", "\"{\"", "operator", "*", "\"fin;\"", "\"}\"", ")", "+", "(", "\"Nooption\"", "operator", "*", ")", "?", "\"End\""]}, {"lPart": "type", "rPart": ["\"Bool\"", "|", "\"Numbers\"", "|", "\"Char\"", "|", "\"String\""]}, {"lPart": "func", "rPart": ["bukvi", "\"==\"", "type", "\"(\"", "(", "bukvi", "(", "\",\"", "bukvi", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "statement", "rPart": ["operator", "|", "func"]}, {"lPart": "main", "rPart": ["statement", "+"]}, {"lPart": "Expr1", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "bukvi"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Numbers"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr1", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "pravilomath", "Expr1", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "operator", ")", "+"]}, {"lPart": "EndExpr", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar rollStk = [];\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n\nfunction rollback() {\n  var arr = []\n  var len = tracer.history.length\n  for (var i = peek(rollStk); i < len; i++)\n    arr.push(tracer.history[i])\n  for (var i = peek(rollStk); i < len; i++)\n    tracer.history.pop()\n  return arr\n}\n\n"}}{"_id": {"$oid": "68186a618558742cb433b7b8"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "681887d18558742cb433b979"}, "rules": "lab6", "data": {"rList": [{"lPart": "bukvi", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "quad", "rPart": ["[0]", "[c]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[0-7]", "+"]}, {"lPart": "probels", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "pravilo2", "rPart": ["[']", "[\\\\]", "[ntr]", "[']"]}, {"lPart": "pravilomath", "rPart": ["[-+=/*%><]", "|", "[-+]", "[=]", "|", "[><]", "[=]", "|", "[m]", "[o]", "[d]"]}, {"lPart": "comms", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Numbers", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["Numbers", "|", "quad", "|", "hex", "|", "float", "|", "char", "|", "string"]}, {"lPart": "operand", "rPart": ["const", "|", "bukvi"]}, {"lPart": "express", "rPart": ["operand", "(", "operation", "express", ")", "?"]}, {"lPart": "operation", "rPart": ["pravilomath"]}, {"lPart": "assign", "rPart": ["\"Put\"", "{rollStk.push(tracer.history.length)}", "Expr1", "\"To\"", "{var tmp = rollback(); rollStk.pop(); toPFR(this.currentLexem[1]);}", "bukvi", "\";\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); tracer.history=tracer.history.concat(tmp);toPFR(\"Put\");}"]}, {"lPart": "expr", "rPart": ["\"(\"", "express", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch", "|", "\"retire;\""]}, {"lPart": "if", "rPart": ["\"When\"", "expr", "block", "other", "?"]}, {"lPart": "other", "rPart": ["\"Other\"", "block"]}, {"lPart": "asd", "rPart": ["[;,:]"]}, {"lPart": "cycle", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"Loop\"", "operator", "\"Until\"", "Expr1", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "switch", "rPart": ["\"Choice\"", "expr", "(", "\"Option\"", "const", "\":\"", "\"{\"", "operator", "*", "\"fin;\"", "\"}\"", ")", "+", "(", "\"Nooption\"", "operator", "*", ")", "?", "\"End\""]}, {"lPart": "type", "rPart": ["\"Bool\"", "|", "\"Numbers\"", "|", "\"Char\"", "|", "\"String\""]}, {"lPart": "func", "rPart": ["bukvi", "\"==\"", "type", "\"(\"", "(", "bukvi", "(", "\",\"", "bukvi", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "statement", "rPart": ["operator", "|", "func"]}, {"lPart": "main", "rPart": ["statement", "+"]}, {"lPart": "Expr1", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "bukvi"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Numbers"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr1", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "pravilomath", "Expr1", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "operator", ")", "+"]}, {"lPart": "EndExpr", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar rollStk = [];\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n\nfunction rollback() {\n  var arr = []\n  var len = tracer.history.length\n  for (var i = peek(rollStk); i < len; i++)\n    arr.push(tracer.history[i])\n  for (var i = peek(rollStk); i < len; i++)\n    tracer.history.pop()\n  return arr\n}\n\n"}}},
{"FIO":"Жданов М.А.","Collection":"221255424",{"_id": {"$oid": "67c557f6af563521c9d5b67c"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c55812af563521c9d5b67f"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": []}], "extension": ""}}{"_id": {"$oid": "67c5586caf563521c9d5b681"}, "rules": "Lab1", "data": {"rList": [{"lPart": "Id", "rPart": ["(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", ")", "|", "(", "[a-zA-Z]", ")"]}, {"lPart": "Const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "OperationSign", "rPart": ["[-+*/]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Const", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "Const", "rPart": ["[-]", "?", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["[-]", "?", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": ""}}{"_id": {"$oid": "67e502dc4635a960233ae9eb"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", ")", "|", "(", "[a-zA-Z]", ")"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "OperationSign", "rPart": ["[-+*/]"]}, {"lPart": "Delimiter", "rPart": ["[;:]"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "(", "[!-~]", "*", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "[\"]", ")", "|", "(", "[']", "(", "[ \\t\\r\\n]", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", "[']", ")"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Brackets", "rPart": ["[(]", "[]", "+", "[)]"]}, {"lPart": "FunctionDefinition", "rPart": ["[=]", "[>]"]}], "extension": ""}}{"_id": {"$oid": "67eb92e3a600182c7517a802"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Id", "rPart": ["(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", ")", "|", "(", "[a-zA-Z]", ")"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "OperationSign", "rPart": ["[-+*/]"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "(", "[!-~]", "*", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "[\"]", ")", "|", "(", "[']", "(", "[ \\t\\r\\n]", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", "[']", ")"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "FunctionDefinition", "rPart": ["[=]", "[>]"]}, {"lPart": "BExpr", "rPart": ["Id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "(", "Compare", "|", "Logic", "|", "UnarOperator", "|", "OperationSign", ")", "BExpr", ")", "?"]}, {"lPart": "UnarOperator", "rPart": ["[!]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"char\"", "|", "\"boolean\"", "|", "\"float\""]}, {"lPart": "Assign", "rPart": ["\"let\"", "Type", "?", "Id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr"]}, {"lPart": "Operator", "rPart": ["(", "Assign", "|", "when", "|", "loop", ")"]}, {"lPart": "when", "rPart": ["\"when\"", "Expr", "\"{\"", "Operator", "+", "\"}\"", "(", "\"other\"", "\"{\"", "Operator", "+", "\"}\"", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "Operator", "+", "\"}\"", "\"until\"", "\"(\"", "Expr", "(", "\"retire;\"", ")", "?", "\")\""]}, {"lPart": "prog", "rPart": ["Operator", "+"]}], "extension": ""}}{"_id": {"$oid": "67fce78e8558742cb43369cf"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Id", "rPart": ["(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", ")", "|", "(", "[a-zA-Z]", ")"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "OperationSign", "rPart": ["[-+*/]"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "(", "[!-~]", "*", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "[\"]", ")", "|", "(", "[']", "(", "[ \\t\\r\\n]", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", "[']", ")"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "FunctionDefinition", "rPart": ["[=]", "[>]"]}, {"lPart": "BExpr", "rPart": ["Id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "(", "Compare", "|", "Logic", "|", "UnarOperator", "|", "BinarOperator", "|", "OperationSign", ")", "BExpr", ")", "?"]}, {"lPart": "UnarOperator", "rPart": ["[!]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"char\"", "|", "\"boolean\"", "|", "\"float\""]}, {"lPart": "Assign", "rPart": ["\"let\"", "Type", "?", "Id", "(", "\"on\"", "Expr", ")", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr"]}, {"lPart": "Operator", "rPart": ["(", "Assign", "|", "when", "|", "loop", "|", "break", "|", "choice", "|", "function", ")"]}, {"lPart": "when", "rPart": ["\"when\"", "Expr", "BlockOperator", "else"]}, {"lPart": "loop", "rPart": ["\"loop\"", "BlockOperator", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "BinarOperator", "rPart": ["[-]"]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "break", "rPart": ["\"retire;\"", "|", "\"fin;\""]}, {"lPart": "function", "rPart": ["Id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "?", "Id", "(", "\",\"", ")", "?", ")", "*", "\")\"", "\"{\"", "BlockOperator", "\"}\""]}, {"lPart": "else", "rPart": ["\"other\"", "BlockOperator"]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "BlockOperator", "*", ")", "+", "NoOption", "\"end\""]}, {"lPart": "NoOption", "rPart": ["\"nooption\"", "BlockOperator", "*"]}, {"lPart": "NoOption", "rPart": ["~", "\"nooption\""]}], "extension": ""}}{"_id": {"$oid": "6819f8538558742cb433c0c7"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Id", "rPart": ["(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", ")", "|", "(", "[a-zA-Z]", ")"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "OperationSign", "rPart": ["[-+*/]"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "(", "[!-~]", "*", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "[\"]", ")", "|", "(", "[']", "(", "[ \\t\\r\\n]", ")", "|", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", "[']", ")"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "FunctionDefinition", "rPart": ["[=]", "[>]"]}, {"lPart": "BExpr", "rPart": ["Id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "(", "Compare", "|", "Logic", "|", "UnarOperator", "|", "BinarOperator", "|", "OperationSign", ")", "BExpr", ")", "?"]}, {"lPart": "UnarOperator", "rPart": ["[!]"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"char\"", "|", "\"boolean\"", "|", "\"float\""]}, {"lPart": "Assign", "rPart": ["\"let\"", "Type", "?", "Id", "(", "\"on\"", "Expr", ")", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr"]}, {"lPart": "Operator", "rPart": ["(", "Assign", "|", "when", "|", "loop", "|", "break", "|", "choice", "|", "function", ")"]}, {"lPart": "when", "rPart": ["\"when\"", "Expr", "BlockOperator", "else"]}, {"lPart": "loop", "rPart": ["\"loop\"", "BlockOperator", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "BinarOperator", "rPart": ["[-]"]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "break", "rPart": ["\"retire;\"", "|", "\"fin;\""]}, {"lPart": "function", "rPart": ["Id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "?", "Id", "(", "\",\"", ")", "?", ")", "*", "\")\"", "\"{\"", "BlockOperator", "\"}\""]}, {"lPart": "else", "rPart": ["\"other\"", "BlockOperator"]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Const", "\":\"", "BlockOperator", "*", ")", "+", "NoOption", "\"end\""]}, {"lPart": "NoOption", "rPart": ["\"nooption\"", "BlockOperator", "*"]}, {"lPart": "NoOption", "rPart": ["~", "\"nooption\""]}], "extension": ""}}},
{"FIO":"Штейнбах А.Д.","Collection":"214215532",{"_id": {"$oid": "67b2a110ce6dd03692d07f86"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+1", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c30afaaf563521c9d5ab4b"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d54931e0b22203e7cbfa5a"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/><=]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "separator", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[{}()]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7abd34635a960233af180"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/><=]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "separator", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[{}()]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"==\"", "|", "\"!=\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "\"{\"", "Operator", "+", "\"}\"", ")", "(", "\"other\"", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Expr", "\":\"", "Operator", "*", ")", "+", "\"nooption\"", "Operator", "+", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "delimiter"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fa2d0b8558742cb433573a"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "separator", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[{}()]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "EndExpr", "rPart": ["(", "sign", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "BlockOrOperator", "PartOther"]}, {"lPart": "PartOther", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "PartOther", "rPart": ["~", "\"other\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Expr", "\":\"", "Operator", "*", ")", "+", "\"nooption\"", "Operator", "+", "\"end\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"fin\"", "delimiter"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\":=\"", "id", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680ca27a8558742cb4339923"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "separator", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[{}()]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "EndExpr", "rPart": ["(", "sign", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "BlockOrOperator", "PartOther"]}, {"lPart": "PartOther", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "PartOther", "rPart": ["~", "\"other\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Expr", "\":\"", "Operator", "*", ")", "+", "\"nooption\"", "Operator", "+", "\"end\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"fin\"", "delimiter"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\":=\"", "id", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cc14d8558742cb4339a72"}, "rules": "lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", "[e]", "[-]", "?", "[0-9]", "+", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "separator", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["[a-z]", "[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[{}()]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1];)}", "constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if ((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1];)}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "BlockOrOperator", "PartOther"]}, {"lPart": "PartOther", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "PartOther", "rPart": ["~", "\"other\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Expr", "\":\"", "Operator", "*", ")", "+", "\"nooption\"", "Operator", "+", "\"end\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"fin\"", "delimiter"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "(", "id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\":=\"", "id", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Фомченков И.А.","Collection":"144354222",{"_id": {"$oid": "6817c1f58558742cb433b522"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-z]", "+"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constfloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "conststr", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "constsym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6817c2248558742cb433b524"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "681b04d28558742cb433ca20"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-z]", "+"]}, {"lPart": "const", "rPart": ["(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constfloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "conststr", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "constsym", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}},
{"FIO":"Козлов М.К.","Collection":"244511452",{"_id": {"$oid": "67ac56f5ce6dd03692d0786f"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67adb1fece6dd03692d07a2b"}, "rules": "LabTask1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67cc20b2af563521c9d5c786"}, "rules": "LabTask2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/><]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "LeftBr1", "rPart": ["[(]"]}, {"lPart": "LeftBr2", "rPart": ["[{]"]}, {"lPart": "RightBr1", "rPart": ["[)]"]}, {"lPart": "RightBr2", "rPart": ["[}]"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "id", "|", "const", "|", "float", "|", "strconst", "|", "charconst", ")", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67d11afaaf563521c9d5de65"}, "rules": "LabTask3", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operators", ")", "(", "\"?:\"", "\"(\"", "Expression", "\")\"", "Operators", ")", "?", "(", "\":\"", "Operators", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exec\"", "Operators", "\"with\"", "id", "\"from\"", "Constants", "\"to\"", "Constants", "(", "\"step\"", "Constants", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "Operators", ")", "+", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Operator", "rPart": ["comm"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Constants", "rPart": ["const", "|", "float", "|", "strconst", "|", "charconst", "|", "\"false\""]}, {"lPart": "BeginExpression", "rPart": ["(", "unOperationMath", "|", "unOperationLogic", ")", "?", "(", "id", "|", "Constants", ")"]}, {"lPart": "BeginExpression", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "EndExpression", "rPart": ["(", "(", "binOperation", "|", "unOperationMath", ")", "Expression", ")", "?"]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "binOperationMath", "rPart": ["[*/]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>=]", ")", "|", "(", "[<=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67ebc0e9a600182c7517a974"}, "rules": "LabTask4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operator", ")", "(", "OperatorElse1", ")", "(", "OperatorElse2", ")"]}, {"lPart": "Operator", "rPart": ["\"exec\"", "Operator", "\"with\"", "id", "\"from\"", "NumConstants", "\"to\"", "NumConstants", "(", "\"step\"", "NumConstants", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "Operator", ")", "+", "\"end\""]}, {"lPart": "OperatorElse1", "rPart": ["\"?:\"", "Operator"]}, {"lPart": "OperatorElse1", "rPart": ["~", "\"?:\""]}, {"lPart": "OperatorElse2", "rPart": ["\":\"", "Operator"]}, {"lPart": "OperatorElse2", "rPart": ["~", "\":\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "NumConstants", "rPart": ["float", "|", "const"]}, {"lPart": "Constants", "rPart": ["const", "|", "float", "|", "strconst", "|", "charconst", "|", "\"false\""]}, {"lPart": "BeginExpression", "rPart": ["(", "unOperationMath", "|", "unOperationLogic", ")", "?", "(", "id", "|", "Constants", ")"]}, {"lPart": "BeginExpression", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "EndExpression", "rPart": ["(", "(", "binOperation", "|", "unOperationMath", ")", "Expression", ")", "?"]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "binOperationMath", "rPart": ["[*/]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>=]", ")", "|", "(", "[<=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f60b1c8558742cb43342e3"}, "rules": "LabTask5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\":=\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operator", ")", "(", "OperatorElse1", ")", "(", "OperatorElse2", ")"]}, {"lPart": "Operator", "rPart": ["\"exec\"", "Operator", "\"with\"", "id", "\"from\"", "NumConstants", "\"to\"", "NumConstants", "(", "\"step\"", "NumConstants", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "Operator", "*", ")", "+", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"call\"", "id", "FunctionCall", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "NumConstants", "rPart": ["float", "|", "const"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "BeginExpression", "rPart": ["(", "unOperationMath", "|", "unOperationLogic", ")", "?", "(", "id", "(", "FunctionCall", ")", "?", "|", "Constants", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "binOperation", "|", "unOperationMath", ")", "Expression", ")", "?"]}, {"lPart": "OperatorElse1", "rPart": ["\"?:\"", "Operator"]}, {"lPart": "OperatorElse1", "rPart": ["~", "\"?:\""]}, {"lPart": "OperatorElse2", "rPart": ["\":\"", "Operator"]}, {"lPart": "OperatorElse2", "rPart": ["~", "\":\""]}, {"lPart": "Constants", "rPart": ["const", "|", "float", "|", "strconst", "|", "charconst", "|", "\"false\""]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "binOperationMath", "rPart": ["[*/]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>=]", ")", "|", "(", "[<=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68174a438558742cb433b1d3"}, "rules": "LabTask6", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expression", "{toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "Operator", ")", "(", "OperatorElse1", ")", "(", "OperatorElse2", ")"]}, {"lPart": "Operator", "rPart": ["{execStack.push(++execCnt);}", "\"exec\"", "{toPFR(\"EXEC_INITIALIZE_\"+peek(execStack)); toPFR(\"Jump\"); toPFR(\"EXEC_BODY_\"+peek(execStack)+\":\");}", "Operator", "{toPFR(\"EXEC_STEPCHANGE_\"+peek(execStack)); toPFR(\"Jump\"); toPFR(\"EXEC_INITIALIZE_\"+peek(execStack)+\":\");}", "\"with\"", "{execIdStack.push(this.currentLexem[1]);}", "id", "\"from\"", "{toPFR(peek(execIdStack)); toPFR(this.currentLexem[1]); toPFR(\"=\");}", "NumConstants", "{toPFR(\"EXEC_CONDITION_\"+peek(execStack)+\":\");}", "\"to\"", "{toPFR(peek(execIdStack)); toPFR(this.currentLexem[1]); toPFR(\"<=\");}", "NumConstants", "{toPFR(\"EXEC_FINISH_\"+peek(execStack)); toPFR(\"JumpOnFalse\");}", "{toPFR(\"EXEC_BODY_\"+peek(execStack)); toPFR(\"Jump\");}", "{toPFR(\"EXEC_STEPCHANGE_\"+peek(execStack)+\":\");}", "Step", "{toPFR(\"EXEC_CONDITION_\"+peek(execStack));toPFR(\"Jump\"); toPFR(\"EXEC_FINISH_\"+execStack.pop()+\":\");}"]}, {"lPart": "Step", "rPart": ["\"step\"", "{toPFR(peek(execIdStack)); toPFR(execIdStack.pop()); toPFR(this.currentLexem[1]); toPFR(\"+\"); toPFR(\"=\");}", "NumConstants"]}, {"lPart": "Step", "rPart": ["{toPFR(peek(execIdStack)); toPFR(execIdStack.pop()); toPFR(\"1\"); toPFR(\"+\"); toPFR(\"=\");}"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "Operator", "*", ")", "+", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"call\"", "id", "FunctionCall", "\";\""]}, {"lPart": "Expression", "rPart": ["{unStack.push(this.currentLexem[1]);}", "unOperation", "BeginExpression", "{toPFR(\"unOperation\"+unStack.pop());}", "EndExpression"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "NumConstants", "rPart": ["float", "|", "const"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "FunctionCall", "?"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constants"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "binOperation", "|", "unOperationMath", ")", "Expression", "{if(opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "EndExpression", "rPart": []}, {"lPart": "OperatorElse1", "rPart": ["\"?:\"", "Operator"]}, {"lPart": "OperatorElse1", "rPart": ["~", "\"?:\""]}, {"lPart": "OperatorElse2", "rPart": ["\":\"", "Operator"]}, {"lPart": "OperatorElse2", "rPart": ["~", "\":\""]}, {"lPart": "Constants", "rPart": ["const", "|", "float", "|", "strconst", "|", "charconst", "|", "\"false\""]}, {"lPart": "unOperation", "rPart": ["unOperationMath", "|", "unOperationLogic"]}, {"lPart": "binOperation", "rPart": ["binOperationMath", "|", "binOperationLogic", "|", "compOperation"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "float", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unOperationMath", "rPart": ["[-+]"]}, {"lPart": "unOperationLogic", "rPart": ["[!]"]}, {"lPart": "binOperationMath", "rPart": ["[*/]"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "compOperation", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>=]", ")", "|", "(", "[<=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\n//var opStk = [];\n//var ctlStk=[];\n//var whileCnt=0;\n\nvar unStack, opStack, execIdStack, execStack, execCnt;\nfunction reboot() {\n execCnt = 0;\n unStack = [];\n opStack = [];\n execIdStack = [];\n execStack = [];\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \">\") return 10;\n if(s == \">=\") return 10;\n if(s == \"<\") return 10;\n if(s == \"<=\") return 10;\n if(s == \"==\") return 10;\n if(s == \"!=\") return 10;\n if(s == \"||\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n if(s == \"&&\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Мишаков Р.П.","Collection":"541324551",{"_id": {"$oid": "67c0129eaf563521c9d5a0fd"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[e]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c01d4baf563521c9d5a12a"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 500, "assist": 1}}{"_id": {"$oid": "67d17241af563521c9d5e184"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[e]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/><]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Bracket", "rPart": ["[(){}]"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["[l]", "[e]", "[t]", "[ ]"]}, {"lPart": "Assign", "rPart": ["[o]", "[n]", "[ ]"]}, {"lPart": "KeyWord", "rPart": ["(", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7a3be4635a960233af124"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,3}", "[a-zA-Z]"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[e]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/><]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "KeyWord", "rPart": ["(", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "OperatorPr", ")", "?", "Delimiter", "(", "Expr", ")", "?", "Delimiter", "(", "OperatorPr", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "Delimiter"]}, {"lPart": "Operator", "rPart": ["OperatorPr", "Delimiter"]}, {"lPart": "OperatorPr", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fa2d468558742cb4335741"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,3}", "[a-zA-Z]"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[e]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Sign", "rPart": ["[-+*/><]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "KeyWord", "rPart": ["(", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operators", "rPart": ["Function", "+"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "OperatorPr", ")", "?", "Delimiter", "(", "Expr", ")", "?", "Delimiter", "(", "OperatorPr", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "Delimiter"]}, {"lPart": "Operator", "rPart": ["OperatorPr", "Delimiter"]}, {"lPart": "OperatorPr", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["id", "\"on\"", "Expr"]}, {"lPart": "Term", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680ca4fc8558742cb4339948"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,3}", "[a-zA-Z]"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[e]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Sign", "rPart": ["[-+*/><]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "KeyWord", "rPart": ["(", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operators", "rPart": ["Function", "+"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "OperatorPr", ")", "?", "Delimiter", "(", "Expr", ")", "?", "Delimiter", "(", "OperatorPr", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "Delimiter"]}, {"lPart": "Operator", "rPart": ["OperatorPr", "Delimiter"]}, {"lPart": "OperatorPr", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["id", "\"on\"", "Expr"]}, {"lPart": "Term", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cb5cd8558742cb43399bd"}, "rules": "Lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,3}", "[a-zA-Z]"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[e]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Sign", "rPart": ["[-+*/><]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "KeyWord", "rPart": ["(", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[=]", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operators", "rPart": ["Function", "+"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"cycle\"", "\"(\"", "(", "OperatorPr", ")", "?", "Delimiter", "(", "Expr", ")", "?", "Delimiter", "(", "OperatorPr", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "Delimiter"]}, {"lPart": "Operator", "rPart": ["OperatorPr", "Delimiter"]}, {"lPart": "OperatorPr", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["id", "\"on\"", "Expr"]}, {"lPart": "Term", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Сбитнев Д.С.","Collection":"324553142",{"_id": {"$oid": "67dad45fe0b22203e7cc1776"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67dad523e0b22203e7cc1794"}, "rules": "LR1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[#]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "oper", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67daedb9e0b22203e7cc1926"}, "rules": "LR2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[#]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "oper", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "unary", "rPart": ["[~!-]"]}, {"lPart": "delimetr", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f538428558742cb4333bf7"}, "rules": "LR3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[#]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "oper", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "unary", "rPart": ["[~!-]"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["unary", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "char", "|", "string", "|", "const4", "|", "const8"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["oper", "Expr"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "assignment", "rPart": ["assign", "Expr", "delimetr"]}, {"lPart": "condition", "rPart": ["\"?\"", "Expr", "OperBlock", "CondState", "CondEnd"]}, {"lPart": "CondState", "rPart": ["\"?\"", "\":\"", "Expr", "OperBlock"]}, {"lPart": "CondState", "rPart": ["~", "\"?\""]}, {"lPart": "CondEnd", "rPart": ["\":\"", "OperBlock"]}, {"lPart": "CondEnd", "rPart": ["~", "\":\""]}, {"lPart": "cycle", "rPart": ["\"loop\"", "OperBlock", "\"until\"", "Expr"]}, {"lPart": "retire", "rPart": ["\"retire\"", "delimetr"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "case", "+", "def", "?", "\"}\""]}, {"lPart": "case", "rPart": ["\"by\"", "BegExpr", "\"do\"", "OperBlock", "(", "\"leave\"", "delimetr", ")", "?"]}, {"lPart": "def", "rPart": ["\"any\"", "\"do\"", "OperBlock"]}, {"lPart": "Oper", "rPart": ["condition", "|", "cycle", "|", "retire", "|", "switch", "|", "declare"]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "program", "rPart": ["Oper", "+"]}, {"lPart": "function", "rPart": ["\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "OperBlock"]}, {"lPart": "declare", "rPart": ["type", "id", "(", "assignment", "|", "function", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f65f1e8558742cb43346a7"}, "rules": "LR4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[nrt\\\\]", "?", "[]", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "(", "[\"nrt\\\\]", "?", "[]", "*", ")", "|", "(", "[uU]", "[0-9a-fA-F]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", ")", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[#]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[#]", "[0-7]", "+"]}, {"lPart": "oper", "rPart": ["[+*/%^><]", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "unary", "rPart": ["[~!-]"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bool\"", "|", "\"str\""]}, {"lPart": "Expr", "rPart": ["unary", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["type", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "char", "|", "string", "|", "const4", "|", "const8"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["oper", "Expr"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "assignment", "rPart": ["assign", "Expr", "delimetr"]}, {"lPart": "condition", "rPart": ["\"?\"", "Expr", "OperBlock", "CondState", "CondEnd"]}, {"lPart": "CondState", "rPart": ["\"?\"", "\":\"", "Expr", "OperBlock"]}, {"lPart": "CondState", "rPart": ["~", "\"?\""]}, {"lPart": "CondEnd", "rPart": ["\":\"", "OperBlock"]}, {"lPart": "CondEnd", "rPart": ["~", "\":\""]}, {"lPart": "cycle", "rPart": ["\"loop\"", "OperBlock", "\"until\"", "Expr"]}, {"lPart": "retire", "rPart": ["\"retire\"", "delimetr"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "case", "+", "def", "?", "\"}\""]}, {"lPart": "case", "rPart": ["\"by\"", "BegExpr", "\"do\"", "OperBlock", "(", "\"leave\"", "delimetr", ")", "?"]}, {"lPart": "def", "rPart": ["\"any\"", "\"do\"", "OperBlock"]}, {"lPart": "Oper", "rPart": ["condition", "|", "cycle", "|", "retire", "|", "switch", "|", "declare"]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "program", "rPart": ["Oper", "+"]}, {"lPart": "function", "rPart": ["\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "OperBlock"]}, {"lPart": "declare", "rPart": ["type", "id", "(", "assignment", "|", "function", ")"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Шмидт Э.Ю.","Collection":"211112511",{"_id": {"$oid": "67af331ece6dd03692d07cba"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67b168f0ce6dd03692d07e01"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "arithm", "rPart": ["[-+*/]"]}, {"lPart": "comp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c68801af563521c9d5b93b"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "{2,15}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67da5f57e0b22203e7cc13a1"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["const", "|", "id"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["(", "unOp", "|", "unBinOp", ")", "Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binOp", "|", "unBinOp", ")", "Expr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "Step"]}, {"lPart": "Step", "rPart": ["\"step\"", "const"]}, {"lPart": "Step", "rPart": ["~", "\"step\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ee1a23a600182c7517b3a3"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["(", "unOp", "|", "unBinOp", ")", "Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binOp", "|", "unBinOp", ")", "Expr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "Step"]}, {"lPart": "Step", "rPart": ["\"step\"", "const"]}, {"lPart": "Step", "rPart": ["~", "\"step\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Type", "rPart": ["\"void\"", "|", "\"char\"", "|", "\"int\"", "|", "\"float\"", "|", "\"double\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "\")\"", "\"{\"", "Start", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Term", "\";\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68007d5a8558742cb433752d"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["(", "unOp", "|", "unBinOp", ")", "Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binOp", "|", "unBinOp", ")", "Expr", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "Step"]}, {"lPart": "Step", "rPart": ["\"step\"", "const"]}, {"lPart": "Step", "rPart": ["~", "\"step\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Type", "rPart": ["\"void\"", "|", "\"char\"", "|", "\"int\"", "|", "\"float\"", "|", "\"double\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "\")\"", "\"{\"", "Start", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Term", "\";\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681344298558742cb433ab6b"}, "rules": "Lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "\"let\"", "id", "\"on\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"let\"); toPFR(\"on\");}", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if(this.currentLexem[1] === \"-\") var cur = \"~\"; else var cur = this.currentLexem[1]; while((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(cur))) toPFR(opStk.pop()); opStk.push(cur);}", "(", "unOp", "|", "unBinOp", ")", "Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binOp", "|", "unBinOp", ")", "Expr", ")", "?", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "Step"]}, {"lPart": "Step", "rPart": ["\"step\"", "const"]}, {"lPart": "Step", "rPart": ["~", "\"step\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Type", "rPart": ["\"void\"", "|", "\"char\"", "|", "\"int\"", "|", "\"float\"", "|", "\"double\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "\")\"", "\"{\"", "Start", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Term", "\";\""]}, {"lPart": "Program", "rPart": ["{whileCnt=0;}", "Function", "+"]}, {"lPart": "Term", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"||\") return 30;\n if(s == \"&&\") return 40;\n if(s == \"==\") return 50;\n if(s == \"!=\") return 50;\n if(s == \">=\") return 60;\n if(s == \"<=\") return 60;\n if(s == \">\") return 60;\n if(s == \"<\") return 60;\n if(s == \"+\") return 70;\n if(s == \"-\") return 70;\n if(s == \"*\") return 80;\n if(s == \"/\") return 80;\n if(s == \"!\") return 90;\n if(s == \"~\") return 90; // унарный минус\n return 0;\n}\n"}}{"_id": {"$oid": "68145f618558742cb433acbf"}, "rules": "Lab61", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"let\"); toPFR(\"on\");}", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "Term", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if(this.currentLexem[1] === \"-\") var cur = \"~\"; else var cur = this.currentLexem[1]; if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(cur))) toPFR(opStk.pop()); opStk.push(cur);}", "(", "unOp", "|", "unBinOp", ")", "Term", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": ["(", "{while((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "binOp", "|", "unBinOp", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label1_\"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "Step"]}, {"lPart": "Step", "rPart": ["\"step\"", "const"]}, {"lPart": "Step", "rPart": ["~", "\"step\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Type", "rPart": ["\"void\"", "|", "\"char\"", "|", "\"int\"", "|", "\"float\"", "|", "\"double\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "\")\"", "\"{\"", "Start", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Term", "\";\""]}, {"lPart": "Program", "rPart": ["{whileCnt=0; opStk = []}", "Function", "+"]}, {"lPart": "Term", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n if(s == \"%\") return 20;\n if(s == \"!\") return 30;\n if(s == \"~\") return 30;\n if(s == \"0-\") return 30;\n if(s == \"<\") return 5;\n if(s == \">\") return 5;\n if(s == \"!=\") return 4;\n if(s == \"==\") return 4;\n if(s == \"&&\") return 3;\n if(s == \"||\") return 2;\n}"}}{"_id": {"$oid": "681593fc8558742cb433ae8e"}, "rules": "Lab62", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"let\"); toPFR(\"on\");}", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "Term", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if(this.currentLexem[1] === \"-\") var cur = \"~\"; else var cur = this.currentLexem[1]; if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(cur))) toPFR(opStk.pop()); opStk.push(cur);}", "(", "unOp", "|", "unBinOp", ")", "Term", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": ["(", "{while((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "binOp", "|", "unBinOp", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label1_\"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "\"with\"", "{toPFR(this.currentLexem[1]);}", "id", "\"from\"", "const", "\"to\"", "{toPFR(this.currentLexem[1]);}", "const", "Step", "{toPFR(\"to\");}", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}"]}, {"lPart": "Step", "rPart": ["\"step\"", "const"]}, {"lPart": "Step", "rPart": ["~", "\"step\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Type", "rPart": ["\"void\"", "|", "\"char\"", "|", "\"int\"", "|", "\"float\"", "|", "\"double\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "\")\"", "\"{\"", "Start", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Term", "\";\""]}, {"lPart": "Program", "rPart": ["{whileCnt=0; opStk = []}", "Function", "+"]}, {"lPart": "Term", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n if(s == \"%\") return 20;\n if(s == \"!\") return 30;\n if(s == \"~\") return 30;\n if(s == \"0-\") return 30;\n if(s == \"<\") return 5;\n if(s == \">\") return 5;\n if(s == \"!=\") return 4;\n if(s == \"==\") return 4;\n if(s == \"&&\") return 3;\n if(s == \"||\") return 2;\n}"}}{"_id": {"$oid": "68162c318558742cb433afd5"}, "rules": "Lab63", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "{0,3}", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr0\\\\]", "|", "(", "[xX]", "[0-9a-fA-F]", "[0-9a-fA-F]", "?", ")", ")", ")", ")", "[']", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[ntr0\"\\\\]", ")", ")", "+", "[\"]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "unOp", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[~!]"]}, {"lPart": "binOp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[+/%]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", ")"]}, {"lPart": "unBinOp", "rPart": ["[-&*]"]}, {"lPart": "Start", "rPart": ["(", "Operator", "|", "OperatorBlock", ")", "+"]}, {"lPart": "OperatorBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"on\");}", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "Term", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "Term", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if(this.currentLexem[1] === \"-\") var cur = \"~\"; else var cur = this.currentLexem[1]; if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(cur))) toPFR(opStk.pop()); opStk.push(cur);}", "(", "unOp", "|", "unBinOp", ")", "Term", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": ["(", "{while((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "binOp", "|", "unBinOp", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "OperatorBlock", ")", "Else"]}, {"lPart": "Else", "rPart": ["\"else\"", "(", "Operator", "|", "OperatorBlock", ")"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["{execStk.push(++whileCnt);toPFR(\"Label1_\"+peek(execStk)+\":\");}", "\"exec\"", "(", "Operator", "|", "OperatorBlock", ")", "\"with\"", "{curID=this.currentLexem[1]; toPFR(curID);}", "id", "\"from\"", "{toPFR(this.currentLexem[1]); toPFR(\">=\");}", "const", "\"to\"", "{ toPFR(curID); toPFR(this.currentLexem[1]); toPFR(\"<=\"); toPFR(\"&&\"); toPFR(\"endExec_\"+peek(execStk)); toPFR(\"JmpOnFalse\");}", "const", "Step", "{toPFR(\"Label1_\"+peek(execStk));toPFR(\"Jmp\"); toPFR(\"endExec_\"+execStk.pop()+\":\");}"]}, {"lPart": "Step", "rPart": ["\"step\"", "{toPFR(curID); toPFR(curID); toPFR(this.currentLexem[1]); toPFR(\"+\"); toPFR(\"on\");}", "const"]}, {"lPart": "Step", "rPart": ["{toPFR(curID); toPFR(curID); toPFR(\"1\"); toPFR(\"+\"); toPFR(\"on\");}"]}, {"lPart": "Operator", "rPart": ["{toPFR(\"endExec_\"+peek(execStk)); toPFR(\"Jmp\");}", "\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseSeq", "+", "Otherwise", "\"}\""]}, {"lPart": "CaseSeq", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["\"otherwise\"", "\"{\"", "Start", "\"}\""]}, {"lPart": "Otherwise", "rPart": ["~", "\"otherwise\""]}, {"lPart": "Type", "rPart": ["\"void\"", "|", "\"char\"", "|", "\"int\"", "|", "\"float\"", "|", "\"double\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "\")\"", "\"{\"", "Start", "\"}\"", "\"->\"", "id"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Term", "\";\""]}, {"lPart": "Program", "rPart": ["{whileCnt=0; opStk = []; execStk = [];}", "Function", "+"]}, {"lPart": "Term", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n if(s == \"%\") return 20;\n if(s == \"++\") return 30;\n if(s == \"--\") return 30;\n if(s == \"!\") return 30;\n if(s == \"~\") return 30;\n if(s == \"<\") return 5;\n if(s == \">\") return 5;\n if(s == \"<=\") return 5;\n if(s == \">=\") return 5;\n if(s == \"!=\") return 4;\n if(s == \"==\") return 4;\n if(s == \"&&\") return 3;\n if(s == \"||\") return 2;\n}"}}},
{"FIO":"Карстен В.Д.","Collection":"315232444",{"_id": {"$oid": "67bf0e7daf563521c9d59b62"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67bf2248af563521c9d59cc1"}, "rules": "LR1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "arithmeticBi", "rPart": ["[*/]"]}, {"lPart": "arithmeticUnBi", "rPart": ["[-+]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ ignoreLastWord=true; }"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ ignoreLastWord=true; }"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{2,4}", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d1ba47e0b22203e7cbeef2"}, "rules": "LR2", "data": {"rList": [{"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ ignoreLastWord=true; }"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ ignoreLastWord=true; }"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constInt", "|", "constFloat"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Operand", "rPart": ["id", "|", "Const", "|", "FunctionCall"]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "\";\""]}, {"lPart": "Condition", "rPart": ["\"when\"", "Expression", "Block", "(", "\"other\"", "Block", ")", "?"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Block"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "Block", "?", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "Block", "?", ")", "?", "\"}\""]}, {"lPart": "Сonstruction", "rPart": ["Assignment", "|", "Condition", "|", "Cycle", "|", "Switch", "|", "VariableDeclaration", "|", "FunctionCall", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")"]}, {"lPart": "Block", "rPart": ["\"{\"", "Сonstruction", "+", "\"}\""]}, {"lPart": "FunctionDeclaration", "rPart": ["id", "\"=>\"", "(", "\"as\"", "Type", ")", "?", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Block"]}, {"lPart": "FunctionCall", "rPart": ["\"call\"", "id", "\"(\"", "(", "Operand", "(", "\",\"", "Operand", ")", "*", ")", "?", "\")\""]}, {"lPart": "VariableDeclaration", "rPart": ["\"var\"", "id", "Type", "\";\""]}, {"lPart": "Program", "rPart": ["FunctionDeclaration", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d1ba58e0b22203e7cbeef9"}, "rules": "LR3", "data": {"rList": [{"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ ignoreLastWord=true; }"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ ignoreLastWord=true; }"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constInt", "|", "constFloat"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Operand", "rPart": ["(", "id", "FunctionCall", "?", ")", "|", "Const"]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "\";\""]}, {"lPart": "Condition", "rPart": ["\"when\"", "Expression", "Block", "(", "\"other\"", "Block", ")", "?"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Block"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "Block", "?", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "Block", "?", ")", "?", "\"}\""]}, {"lPart": "Сonstruction", "rPart": ["Assignment", "|", "Condition", "|", "Cycle", "|", "Switch", "|", "VariableDeclaration", "|", "FunctionCall", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")"]}, {"lPart": "Block", "rPart": ["\"{\"", "Сonstruction", "+", "\"}\""]}, {"lPart": "FunctionDeclaration", "rPart": ["id", "\"=>\"", "(", "\"as\"", "Type", ")", "?", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Block"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Operand", "(", "\",\"", "Operand", ")", "*", ")", "?", "\")\""]}, {"lPart": "VariableDeclaration", "rPart": ["\"var\"", "id", "Type", "\";\""]}, {"lPart": "Program", "rPart": ["FunctionDeclaration", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f5ddb58558742cb433417f"}, "rules": "LR4", "data": {"rList": [{"lPart": "Program", "rPart": ["FunctionDeclaration", "+"]}, {"lPart": "FunctionDeclaration", "rPart": ["id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Block"]}, {"lPart": "Block", "rPart": ["\"{\"", "Сonstruction", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "Сonstruction", "rPart": ["Assignment", "|", "Condition", "|", "Cycle", "|", "Switch", "|", "VariableDeclaration", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")", "|", "Block"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "\";\""]}, {"lPart": "Condition", "rPart": ["IfPart", "ElsePart"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Сonstruction"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "Сonstruction", "*", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "Сonstruction", "*", ")", "?", "\"}\""]}, {"lPart": "VariableDeclaration", "rPart": ["\"var\"", "id", "(", "\",\"", "id", ")", "*", "Type", "\";\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "IfPart", "rPart": ["\"if\"", "Expression", "Сonstruction"]}, {"lPart": "ElsePart", "rPart": ["\"other\"", "Сonstruction"]}, {"lPart": "ElsePart", "rPart": ["~", "\"other\""]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constInt", "|", "constFloat"]}, {"lPart": "Operand", "rPart": ["(", "id", "FunctionCall", "?", ")", "|", "Const"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ ignoreLastWord=true; }"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ ignoreLastWord=true; }"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6805f04f8558742cb4337f56"}, "rules": "LR5", "data": {"rList": [{"lPart": "Program", "rPart": ["FunctionDeclaration", "+"]}, {"lPart": "FunctionDeclaration", "rPart": ["id", "\"=>\"", "\"as\"", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Block"]}, {"lPart": "Block", "rPart": ["\"{\"", "Сonstruction", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "Сonstruction", "rPart": ["Assignment", "|", "Condition", "|", "Cycle", "|", "Switch", "|", "VariableDeclaration", "|", "(", "\"leave\"", "\";\"", ")", "|", "(", "\"return\"", "Expression", "\";\"", ")", "|", "Block"]}, {"lPart": "Assignment", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "\";\""]}, {"lPart": "Condition", "rPart": ["IfPart", "ElsePart"]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expression", "\")\"", "\"do\"", "Сonstruction"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expression", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "Сonstruction", "*", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "\"otherwise\"", "Сonstruction", "*", ")", "?", "\"}\""]}, {"lPart": "VariableDeclaration", "rPart": ["\"var\"", "id", "(", "\",\"", "id", ")", "*", "Type", "\";\""]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "(", "OperatorBin", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["OperatorUn", "Expression"]}, {"lPart": "IfPart", "rPart": ["\"if\"", "Expression", "Сonstruction"]}, {"lPart": "ElsePart", "rPart": ["\"other\"", "Сonstruction"]}, {"lPart": "ElsePart", "rPart": ["~", "\"other\""]}, {"lPart": "ExpressionStart", "rPart": ["Operand"]}, {"lPart": "ExpressionStart", "rPart": ["\"(\"", "Expression", "\")\""]}, {"lPart": "OperatorUn", "rPart": ["arithmeticUnBin", "|", "logicUn"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constInt", "|", "constFloat"]}, {"lPart": "Operand", "rPart": ["(", "id", "FunctionCall", "?", ")", "|", "Const"]}, {"lPart": "OperatorBin", "rPart": ["arithmeticUnBin", "|", "arithmeticBin", "|", "logicBin", "|", "comparison"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "arithmeticUnBin", "rPart": ["[-+]"]}, {"lPart": "logicUn", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "?", "[]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[u]", "[0-9a-fA-F]", "{1,4}", "[']"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "arithmeticBin", "rPart": ["[*/%]"]}, {"lPart": "logicBin", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ ignoreLastWord=true; }"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ ignoreLastWord=true; }"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Байконыров Д.Б.","Collection":"231124135",{"_id": {"$oid": "68089caf8558742cb433872b"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+-/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68089d138558742cb4338731"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "6808a0298558742cb433873e"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Oper", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680caecf8558742cb4339988"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Oper", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OperBlock", "PartElse"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cb9978558742cb4339a08"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Oper", "+"]}, {"lPart": "Oper", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OperBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "OperBlock", "(", "\"gout\"", "\";\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "OperBlock", ")", "?", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"cycle\"", "\"(\"", "Let", "?", "\";\"", "Expr", "?", "\";\"", "Let", "?", "\")\"", "OperBlock"]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "Let", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cc66f8558742cb4339ac1"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Func", "rPart": ["id", "Args", "\"{\"", "OperBlock", "*", "\"}\""]}, {"lPart": "Args", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OperBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "OperBlock", "(", "\"gout\"", "\";\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "OperBlock", ")", "?", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"cycle\"", "\"(\"", "Let", "?", "\";\"", "Expr", "?", "\";\"", "Let", "?", "\")\"", "OperBlock"]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id", "Params", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "Let", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Params", "rPart": ["\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Program", "rPart": ["Func", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6815b68b8558742cb433aede"}, "rules": "Lab7", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Func", "+", "{toPseudoCode();}"]}, {"lPart": "Func", "rPart": ["{userSignStk.push(this.currentLexem[1]);}", "id", "Args", "{toPFR(\"function\");}", "\"{\"", "OperBlock", "*", "\"}\""]}, {"lPart": "Args", "rPart": ["\"(\"", "(", "{argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "{argStk.push(this.currentLexem[1]);}", "id", ")", "*", "{toPFR(\"arg\"); }", ")", "?", "\")\""]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"let\"", "{ toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "\";\"", "{toPFR(\"let\");}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"by\"", "Expr", "{ toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "OperBlock", "{toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\" +peek(ctlStk) + \"Expr\");}", "\"??\"", "Expr", "{toPFR(\"let\");}", "\"{\"", "(", "\"?=\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1);}", "{ toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\" +peek(ctlStk) + \"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk));toPFR(\"jmpOnFalse\");}", "\":\"", "OperBlock", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmp\");}", ")", "+", "(", "\"?~\"", "\":\"", "OperBlock", ")", "?", "\"}\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\");}", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\"); ;}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"cycle\"", "\"(\"", "Let", "?", "\";\"", "{toPFR(\"CycleCondition_\"+peek(ctlStk)+\":\");}", "Expr", "?", "\";\"", "{ toPFR(\"CycleExit_\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "Let", "?", "\")\"", "OperBlock", "{toPFR(\"CycleCondition_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"CycleExit_\"+peek(ctlStk)+\":\");}"]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\"", "{ toPFR(\"Switch/Cycle\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "{isUnary =false;}", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "id", "(", "Params", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "Let", "rPart": ["\"let\"", "{ toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{toPFR(\"let\");}"]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]) ) ) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "Expr", "{toPFR(\"param\");}", "(", "\",\"", "Expr", "{toPFR(\"param\");}", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]", "{isUnary =true;}"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    isUnary = false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Код> <Операнд> <Операнд> <Результат>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {                \n                toPFR(\"\\n\");\n                toPFR(word);\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n                \n\n            } else\n                label = false;\n            //var tmp = 0;\n            toPFR(word);\n            //tmp = opStk.pop();\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            //++resCnt;\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(userSignStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10; //знак арифметической операции\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; //знак операции сравнения\n        case \"let\":\n            return 20; //знак операции присваивания\n        case \"jmp\":\n            return 40; //знак операции безусловной передачи управления\n        case \"jmpOnFalse\":\n            return 41; //знак операции передачи управления по условию\n        case \"function\":\n            return 50; // объявление функции\n        case \"return\":\n            return 51; // оператор return\n        case \"arg\":\n            return 52; // оператор arg\n        case \"param\":\n            return 53; // оператор param\n    }\n    return 0;\n}"}}{"_id": {"$oid": "6815c58d8558742cb433af50"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Func", "+"]}, {"lPart": "Func", "rPart": ["{userSignStk.push(this.currentLexem[1]);}", "id", "Args", "{toPFR(\"function\");}", "\"{\"", "OperBlock", "*", "\"}\""]}, {"lPart": "Args", "rPart": ["\"(\"", "(", "{argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "{argStk.push(this.currentLexem[1]);}", "id", ")", "*", "{toPFR(\"arg\"); }", ")", "?", "\")\""]}, {"lPart": "OperBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"let\"", "{ toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "\";\"", "{toPFR(\"let\");}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"by\"", "Expr", "{ toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "OperBlock", "{toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\" +peek(ctlStk) + \"Expr\");}", "\"??\"", "Expr", "{toPFR(\"let\");}", "\"{\"", "(", "\"?=\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1);}", "{ toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\" +peek(ctlStk) + \"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk));toPFR(\"jmpOnFalse\");}", "\":\"", "OperBlock", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmp\");}", ")", "+", "(", "\"?~\"", "\":\"", "OperBlock", ")", "?", "\"}\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\");}", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\"); ;}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"cycle\"", "\"(\"", "Let", "?", "\";\"", "{toPFR(\"CycleCondition_\"+peek(ctlStk)+\":\");}", "Expr", "?", "\";\"", "{ toPFR(\"CycleExit_\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "Let", "?", "\")\"", "OperBlock", "{toPFR(\"CycleCondition_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"CycleExit_\"+peek(ctlStk)+\":\");}"]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\"", "{ toPFR(\"Switch/Cycle\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "{isUnary =false;}", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OperBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "id", "(", "Params", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{if (isUnary) toPFR(\"-\"+this.currentLexem[1]); else toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "Let", "rPart": ["\"let\"", "{ toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{toPFR(\"let\");}"]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]) ) ) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "Expr", "{toPFR(\"param\");}", "(", "\",\"", "Expr", "{toPFR(\"param\");}", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[xX]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]", "{isUnary =true;}"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    isUnary = false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Метка> <Код> <Операнд> <Операнд> <Результат>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {                \n                toPFR(\"\\n\");\n                toPFR(word);\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n                \n\n            } else\n                label = false;\n            //var tmp = 0;\n            toPFR(word);\n            //tmp = opStk.pop();\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            //++resCnt;\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n                \n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(userSignStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10; //знак арифметической операции\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; //знак операции сравнения\n        case \"let\":\n            return 20; //знак операции присваивания\n        case \"jmp\":\n            return 40; //знак операции безусловной передачи управления\n        case \"jmpOnFalse\":\n            return 41; //знак операции передачи управления по условию\n        case \"function\":\n            return 50; // объявление функции\n        case \"return\":\n            return 51; // оператор return\n        case \"arg\":\n            return 52; // оператор arg\n        case \"param\":\n            return 53; // оператор param\n    }\n    return 0;\n}"}}},
{"FIO":"Веневский С.Д.","Collection":"354114224",{"_id": {"$oid": "67e021ae4635a960233aca94"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-1", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67e185d04635a960233ad4eb"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e185da4635a960233ad4f0"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[-]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e185e24635a960233ad4f5"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OpBlock", "PartElse"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[-]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e18c314635a960233ad524"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["OpBlock", "+"]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "Oper", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OpBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"exec\"", "OpBlock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\""]}, {"lPart": "Oper", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "OpBlock", ")", "+", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[-]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e18fb24635a960233ad53e"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["id", "\"(\"", "Args", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Type", "?", "id", "(", "\",\"", "Type", "?", "id", ")", "*"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Oper", "rPart": ["Type", "?", "id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OpBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"exec\"", "OpBlock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\""]}, {"lPart": "Oper", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "OpBlock", ")", "+", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "Params", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "Params", "rPart": ["\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\""]}, {"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[-]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e192674635a960233ad563"}, "rules": "Lab7", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Func", "+", "{toPseudoCode();}"]}, {"lPart": "Func", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"function\");}", "\"(\"", "Args", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Type", "?", "{toPFR(\"arg\"); argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "Type", "?", "{toPFR(\"arg\"); argStk.push(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Oper", "rPart": ["Type", "?", "{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expr", "{toPFR(\":=\");}", "\";\""]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"by\"", "\"(\"", "Expr", "{toPFR(\"Else\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "\")\"", "OpBlock", "{toPFR(\"Else\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{step = false;}", "{ctlStk.push(++opCnt);}", "{toPFR(\"ExecExit_\"+peek(ctlStk)); toPFR(\"jmp\");}", "\"exec\"", "{toPFR(\"ExecDo_\"+peek(ctlStk)+\":\");}", "OpBlock", "{toPFR(\"ExecCond_\"+peek(ctlStk)); toPFR(\"jmp\");toPFR(\"ExecInit_\"+peek(ctlStk)+\":\");}", "\"with\"", "id", "\"from\"", "{toPFR(\"$_exec_\"); toPFR(this.currentLexem[1]);}", "const", "{toPFR(\":=\");}", "\"to\"", "{toPFR(\"$_exec_\"); toPFR(\"ExecDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"ExecCond_\"+peek(ctlStk)+\":\"); toPFR(this.currentLexem[1]);}", "const", "{toPFR(\":=\");toPFR(\"ExecExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "(", "\"step\"", "{step = true;}", "{toPFR(\"$_exec_\");}", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"+\");}", "{toPFR(\":=\");}", ")", "?", "{if (step === false) default_step();}", "{toPFR(\"ExecDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"ExecExit_\"+peek(ctlStk)+\":\");}", "\";\""]}, {"lPart": "Oper", "rPart": ["\"exit\"", "\";\"", "{toPFR(\"ExecExit_\" + peek(ctlStk)); toPFR(\"jmp\")}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\"+peek(ctlStk)+\"Expr\");}", "\"??\"", "Expr", "{toPFR(\":\");}", "\"{\"", "(", "\"?=\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1); toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); toPFR(\"Switch\"+peek(ctlStk)+\"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmpOnFalse\");}", "\":\"", "OpBlock", ")", "+", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); toPFR(\"jmp\");}", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\"); toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\");}"]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\"", "{toPFR(\"Switch\" + peek(ctlStk) + \"Exit\"); toPFR(\"jmp\")}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "Params", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if (opStk.length > 0) if (peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "{toPFR(\"param\");}", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", "(", "\",\"", "{toPFR(\"param\");}", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[-]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; \nvar ctlStk = []; \nvar onStk = []; \nvar opCnt = 0; \nvar resCnt = 0; \nvar strRes = \"\"; \nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\nvar step = false;\nvar paramStk = [];\n\n\nfunction default_step()\n{\ntoPFR(\"$_exec_\"); \ntoPFR(\"$_exec_\"); \ntoPFR(\"1\"); \ntoPFR(\"+\");\ntoPFR(\":=\"); \n}\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    paramStk = [];\n    isUnary = false;\n    step= false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Код> <Оп> <Оп>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {\n                label = true;\n                toPFR(\"\\n\");\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            //toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(paramStk.pop());\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10;\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; \n        case \":=\":\n            return 20; \n        case \"jmp\":\n            return 40;\n        case \"jmpOnFalse\":\n            return 41; \n        case \"function\":\n            return 50; \n        case \"return\":\n            return 51; \n        case \"arg\":\n            return 52;\n        case \"param\":\n            return 53; \n    }\n    return 0;\n}"}}{"_id": {"$oid": "67e19f274635a960233ad5ae"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Func", "+"]}, {"lPart": "Func", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"function\");}", "\"(\"", "Args", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Type", "?", "{toPFR(\"arg\"); argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "Type", "?", "{toPFR(\"arg\"); argStk.push(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Oper", "rPart": ["Type", "?", "{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expr", "{toPFR(\":=\");}", "\";\""]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"by\"", "\"(\"", "Expr", "{toPFR(\"Else\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "\")\"", "OpBlock", "{toPFR(\"Else\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{step = false;}", "{ctlStk.push(++opCnt);}", "{toPFR(\"ExecExit_\"+peek(ctlStk)); toPFR(\"jmp\");}", "\"exec\"", "{toPFR(\"ExecDo_\"+peek(ctlStk)+\":\");}", "OpBlock", "{toPFR(\"ExecCond_\"+peek(ctlStk)); toPFR(\"jmp\");toPFR(\"ExecInit_\"+peek(ctlStk)+\":\");}", "\"with\"", "id", "\"from\"", "{toPFR(\"$_exec_\"); toPFR(this.currentLexem[1]);}", "const", "{toPFR(\":=\");}", "\"to\"", "{toPFR(\"$_exec_\"); toPFR(\"ExecDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"ExecCond_\"+peek(ctlStk)+\":\"); toPFR(this.currentLexem[1]);}", "const", "{toPFR(\":=\");toPFR(\"ExecExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "(", "\"step\"", "{step = true;}", "{toPFR(\"$_exec_\");}", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"+\");}", "{toPFR(\":=\");}", ")", "?", "{if (step === false) default_step();}", "{toPFR(\"ExecDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"ExecExit_\"+peek(ctlStk)+\":\");}", "\";\""]}, {"lPart": "Oper", "rPart": ["\"exit\"", "\";\"", "{toPFR(\"ExecExit_\" + peek(ctlStk)); toPFR(\"jmp\")}"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\"+peek(ctlStk)+\"Expr\");}", "\"??\"", "Expr", "{toPFR(\":\");}", "\"{\"", "(", "\"?=\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1); toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); toPFR(\"Switch\"+peek(ctlStk)+\"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmpOnFalse\");}", "\":\"", "OpBlock", ")", "+", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); toPFR(\"jmp\");}", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\"); toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\");}"]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\"", "{toPFR(\"Switch\" + peek(ctlStk) + \"Exit\"); toPFR(\"jmp\")}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "(", "\"{\"", "Oper", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "Params", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if (opStk.length > 0) if (peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "{toPFR(\"param\");}", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", "(", "\",\"", "{toPFR(\"param\");}", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[tT]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[-]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; \nvar ctlStk = []; \nvar onStk = []; \nvar opCnt = 0; \nvar resCnt = 0; \nvar strRes = \"\"; \nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\nvar step = false;\nvar paramStk = [];\n\n\nfunction default_step()\n{\ntoPFR(\"$_exec_\"); \ntoPFR(\"$_exec_\"); \ntoPFR(\"1\"); \ntoPFR(\"+\");\ntoPFR(\":=\"); \n}\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    paramStk = [];\n    isUnary = false;\n    step= false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Код> <Оп> <Оп>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {\n                label = true;\n                toPFR(\"\\n\");\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            //toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(paramStk.pop());\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10;\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; \n        case \":=\":\n            return 20; \n        case \"jmp\":\n            return 40;\n        case \"jmpOnFalse\":\n            return 41; \n        case \"function\":\n            return 50; \n        case \"return\":\n            return 51; \n        case \"arg\":\n            return 52;\n        case \"param\":\n            return 53; \n    }\n    return 0;\n}"}}},
{"FIO":"Рябцева Е.Д.","Collection":"422342224",{"_id": {"$oid": "67bf411caf563521c9d59e6a"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67bf47a9af563521c9d59e95"}, "rules": "1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/=]"]}, {"lPart": "assignSign", "rPart": ["[<]", "[-]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d0fe1aaf563521c9d5dde3"}, "rules": "2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/%&|^]", "|", "(", "[<]", "[<]", ")", "|", "(", "[>]", "[>]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "assignSign", "rPart": ["[<]", "[-]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "[!]", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "body", "(", "condElself", ")", "?", "(", "condElse", ")", "?"]}, {"lPart": "condElself", "rPart": ["\"then\"", "body"]}, {"lPart": "condElse", "rPart": ["\"not\"", "body"]}, {"lPart": "const", "rPart": ["constChar", "|", "constHex", "|", "constTetra", "|", "constString", "|", "constDec"]}, {"lPart": "body", "rPart": ["(", "expr", "|", "cond", ")", "(", "body", ")", "?"]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "signs", "rPart": ["signOfOperation", "|", "signOfLogic", "|", "signOfEquality"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"ten\"", "|", "\"eight\"", "|", "\"four\"", "|", "\"str\""]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\")\"", "\"in\"", "const", "\":\"", "const", "(", "\"stop\"", "delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "body", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "body", "(", "\"exit\"", "delimiter", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "type", "id", ")", "?", "\")\"", "(", "\"ret\"", "type", ")", "?", "body"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e39ecb4635a960233ade44"}, "rules": "3", "data": {"rList": [{"lPart": "function", "rPart": ["id", "\"(\"", "(", "type", "?", "id", "(", "\",\"", ")", "?", ")", "*", "\")\"", "(", "\"ret\"", "type", ")", "?", "body"]}, {"lPart": "body", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"ten\"", "|", "\"eight\"", "|", "\"four\"", "|", "\"str\""]}, {"lPart": "operators", "rPart": ["asign", "|", "cond", "|", "switch", "|", "loop", "|", "(", "\"stop\"", "\";\"", ")"]}, {"lPart": "asign", "rPart": ["id", "\"<-\"", "expr", "\";\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "(", "body", "|", "operators", ")", "condElse"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "body", ")", "?", "\"}\""]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "body", "|", "operators", ")"]}, {"lPart": "expr", "rPart": ["(", "binunarsign", "|", "unarsign", ")", "?", "(", "id", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"not\"", "(", "body", "|", "operators", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"not\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "body", "(", "\"exit\"", "\";\"", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constHex", "|", "constTetra", "|", "constString", "|", "constDec"]}, {"lPart": "signs", "rPart": ["signOfOperation", "|", "signOfLogic", "|", "signOfEquality", "|", "binunarsign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "binunarsign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!]"]}, {"lPart": "signOfOperation", "rPart": ["[+*/%&|^]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "start", "rPart": ["(", "function", "|", "asign", "|", "loop", "|", "cond", ")", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3c19d4635a960233adf94"}, "rules": "4", "data": {"rList": [{"lPart": "prog", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "type", "?", "id", "(", "\",\"", ")", "?", ")", "*", "\")\"", "(", "\"ret\"", "type", ")", "?", "body"]}, {"lPart": "body", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"ten\"", "|", "\"eight\"", "|", "\"four\"", "|", "\"str\""]}, {"lPart": "operators", "rPart": ["asign", "|", "cond", "|", "switch", "|", "loop", "|", "(", "\"stop\"", "\";\"", ")", "|", "return"]}, {"lPart": "asign", "rPart": ["id", "\"<-\"", "expr", "\";\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "(", "body", "|", "operators", ")", "condElse"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "body", ")", "?", "\"}\""]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "body", "|", "operators", ")"]}, {"lPart": "expr", "rPart": ["(", "binunarsign", "|", "unarsign", ")", "?", "(", "type", "?", "id", "(", "\"(\"", "(", "expr", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"not\"", "(", "body", "|", "operators", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"not\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "body", "(", "\"exit\"", "\";\"", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constHex", "|", "constTetra", "|", "constString", "|", "constDec"]}, {"lPart": "signs", "rPart": ["signOfOperation", "|", "signOfLogic", "|", "signOfEquality", "|", "binunarsign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "binunarsign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!]"]}, {"lPart": "signOfOperation", "rPart": ["[+*/%&|^]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3c71a4635a960233adfc6"}, "rules": "5", "data": {"rList": [{"lPart": "prog", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["id", "\"(\"", "(", "type", "?", "id", "(", "\",\"", ")", "?", ")", "*", "\")\"", "(", "\"ret\"", "type", ")", "?", "body"]}, {"lPart": "body", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"ten\"", "|", "\"eight\"", "|", "\"four\"", "|", "\"str\""]}, {"lPart": "operators", "rPart": ["asign", "|", "cond", "|", "switch", "|", "loop", "|", "(", "\"stop\"", "\";\"", ")", "|", "return"]}, {"lPart": "asign", "rPart": ["id", "\"<-\"", "expr", "\";\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "(", "body", "|", "operators", ")", "condElse"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "body", ")", "?", "\"}\""]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "body", "|", "operators", ")"]}, {"lPart": "expr", "rPart": ["(", "binunarsign", "|", "unarsign", ")", "?", "(", "type", "?", "id", "(", "\"(\"", "(", "expr", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", ")", "(", "signs", "expr", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"not\"", "(", "body", "|", "operators", ")"]}, {"lPart": "condElse", "rPart": ["~", "\"not\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "body", "(", "\"exit\"", "\";\"", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constHex", "|", "constTetra", "|", "constString", "|", "constDec"]}, {"lPart": "signs", "rPart": ["signOfOperation", "|", "signOfLogic", "|", "signOfEquality", "|", "binunarsign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constHex", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constTetra", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constDec", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "binunarsign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!]"]}, {"lPart": "signOfOperation", "rPart": ["[+*/%&|^]"]}, {"lPart": "signOfLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "signOfEquality", "rPart": ["[<]", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[>]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Покровский И.А.","Collection":"223342541",{"_id": {"$oid": "67e603a94635a960233aeff0"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-1", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67e604624635a960233aeff3"}, "rules": "lab1", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[0]", "[.]", "[0-9]", "*", "[1-9]", ")", "|", "(", "[1-9]", "[0-9]", "*", "[.]", "[0-9]", "*", "[1-9]", ")"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[0-1]", ")", "|", "(", "[1]", "[0-1]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*=!<>/]", "[=]", "?"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "operator", "rPart": ["[s]", "[e]", "[t]"]}, {"lPart": "operator", "rPart": ["[t]", "[h]", "[e]", "[n]"]}, {"lPart": "operator", "rPart": ["[f]", "[o]", "[r]", "[e]", "[a]", "[c]", "[h]"]}, {"lPart": "operator", "rPart": ["[s]", "[t]", "[o]", "[p]"]}, {"lPart": "operator", "rPart": ["[c]", "[a]", "[s]", "[e]"]}, {"lPart": "operator", "rPart": ["[w]", "[h]", "[e]", "[n]"]}, {"lPart": "operator", "rPart": ["[e]", "[x]", "[i]", "[t]"]}, {"lPart": "operator", "rPart": ["[o]", "[t]", "[h]", "[e]", "[r]", "[w]", "[i]", "[s]", "[e]"]}, {"lPart": "operator", "rPart": ["[f]", "[u]", "[n]", "[c]", "[t]", "[i]", "[o]", "[n]"]}, {"lPart": "brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "keyword", "rPart": ["[i]", "[n]"]}, {"lPart": "end", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680ae60e8558742cb43396e3"}, "rules": "lab2", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const10", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "def", "rPart": ["operators", "+"]}, {"lPart": "operators", "rPart": ["assign", "|", "cond", "|", "loop", "|", "\"stop;\""]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "constAll", ")", "comparison", "(", "id", "|", "constAll", ")"]}, {"lPart": "constAll", "rPart": ["const10", "|", "const4", "|", "const8", "|", "constStr", "|", "constChar"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logExpr", "\")\"", "\"then\"", "\"{\"", "operators", "*", "\"}\"", "(", "\"not\"", "\"{\"", "operators", "*", "\"}\"", ")", "*"]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constAll", "\":\"", "constAll", "\")\"", "\"{\"", "operators", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680af1a68558742cb433974f"}, "rules": "lab3", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "math", "rPart": ["[-+*/%]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "def", "rPart": ["func", "+"]}, {"lPart": "operators", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "\"stop;\"", "|", "\"exit;\""]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logExpr", "rPart": ["Expr", "comparison", "Expr"]}, {"lPart": "constAll", "rPart": ["const10", "|", "const4", "|", "const8", "|", "constStr", "|", "constChar"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logExpr", "\")\"", "\"then\"", "\"{\"", "operators", "*", "\"}\"", "(", "\"not\"", "\"{\"", "operators", "*", "\"}\"", ")", "*"]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constAll", "\":\"", "constAll", "\")\"", "\"{\"", "operators", "*", "\"}\""]}, {"lPart": "switch", "rPart": ["\"case\"", "Expr", "(", "\"when\"", "constAll", "\"{\"", "operators", "*", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "operators", "*", "\"}\"", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "argList", "?", "\")\"", "\"{\"", "operators", "*", "\"}\"", "\"->\"", "id", "\";\""]}, {"lPart": "argList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680b10b98558742cb4339801"}, "rules": "lab4", "data": {"rList": [{"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "math", "rPart": ["[-+*/%]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", ")"]}, {"lPart": "def", "rPart": ["func", "+"]}, {"lPart": "operators", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "\"stop;\"", "|", "\"exit;\""]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "math", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logExpr", "rPart": ["Expr", "comparison", "Expr"]}, {"lPart": "constAll", "rPart": ["const10", "|", "const4", "|", "const8", "|", "constStr", "|", "constChar"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logExpr", "\")\"", "\"then\"", "(", "operators", "?", "|", "(", "\"{\"", "operators", "+", "\"}\"", ")", ")", "(", "\"not\"", "(", "operators", "?", "|", "(", "\"{\"", "operators", "+", "\"}\"", ")", ")", "?", ")"]}, {"lPart": "loop", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constAll", "\":\"", "constAll", "\")\"", "\"{\"", "operators", "*", "\"}\""]}, {"lPart": "switch", "rPart": ["\"case\"", "Expr", "(", "\"when\"", "constAll", "\"{\"", "operators", "*", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "operators", "*", "\"}\"", ")", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "argList", "?", "\")\"", "\"{\"", "operators", "*", "\"}\"", "\"->\"", "id", "\";\""]}, {"lPart": "argList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Гармазов А.А.","Collection":"322453545",{"_id": {"$oid": "67b8a2f2ce6dd03692d08eba"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67c30ec9af563521c9d5ab7f"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "delimeter", "rPart": ["[;,:]"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "binary", "rPart": ["[+*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": ""}}{"_id": {"$oid": "67c3151baf563521c9d5abc7"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["(", "[']", "(", "[]", "|", "[ \\r\\n\\t]", "|", "[\\\"]", ")", "[']", ")"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "dual", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[*/+]"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "delimetr", "rPart": ["[;]"]}], "extension": ""}}{"_id": {"$oid": "67d97d58e0b22203e7cc1151"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Prog", "rPart": ["(", "CmpOp", "|", "AssignOp", "|", "CycleOp", ")", "+"]}, {"lPart": "CmpOp", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Prog", "\"}\"", ")", "*", "(", "\":\"", "\"{\"", "Prog", "\"}\"", ")", "*"]}, {"lPart": "AssignOp", "rPart": ["T", "?", "id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "CycleOp", "rPart": ["\"foreach\"", "\"(\"", "T", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"stop\"", "\";\"", ")", "?"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\""]}, {"lPart": "Const", "rPart": ["constInt", "|", "сonstReal", "|", "constStr", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "binary", "Expr", ")", "|", "(", "minus", "Expr", ")", "|", "(", "logic", "Expr", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[x]", "[01]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binary", "rPart": ["[+*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["(", "unary", "|", "minus", ")", "*", "BegExpr", "EndExpr", "?"]}], "extension": ""}}{"_id": {"$oid": "67da8a7ae0b22203e7cc1444"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Prog", "rPart": ["Entering", "+"]}, {"lPart": "Entering", "rPart": ["CmpOp", "|", "DeclareFun", "|", "CycleOp", "|", "SwitchOp", "|", "AssignOp", "|", "DeclareVar", "|", "Retire"]}, {"lPart": "CmpOp", "rPart": ["\"at\"", "Expr", "\"do\"", "OoB", "OrDo"]}, {"lPart": "DeclareFun", "rPart": ["\"function\"", "Fun", "\"->\"", "T", "id"]}, {"lPart": "CycleOp", "rPart": ["\"loop\"", "OoB", "\"until\"", "Expr"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "By", "+", "Default", "?", "\"}\""]}, {"lPart": "AssignOp", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "DeclareVar", "rPart": ["T", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "Retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OoB", "rPart": ["Entering", "|", "\"{\"", "Entering", "+", "(", "Return", ")", "?", "\"}\""]}, {"lPart": "OrDo", "rPart": ["\"or\"", "\"do\"", "OoB"]}, {"lPart": "OrDo", "rPart": ["~", "\"or\""]}, {"lPart": "Fun", "rPart": ["(", "\"(\"", "FormalArgs", "?", "\")\"", ")", "\"{\"", "Entering", "+", "(", "Return", ")", "?", "\"}\""]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "ActualArgs", "?", "\")\"", ")", "?", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "By", "rPart": ["\"by\"", "Const", "\"do\"", "OoB", "*", "Leave", "?"]}, {"lPart": "Default", "rPart": ["\"any\"", "\"do\"", "OoB", "*"]}, {"lPart": "Unary", "rPart": ["unary", "|", "minus"]}, {"lPart": "Const", "rPart": ["constInt", "|", "сonstReal", "|", "constStr", "|", "constChar"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Binary", "rPart": ["binary", "|", "logic", "|", "minus"]}, {"lPart": "FormalArgs", "rPart": ["T", "id", "(", "\",\"", "T", "id", ")", "*"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "ActualArgs", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constInt", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "binary", "rPart": ["[+*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "6804e31c8558742cb4337dc7"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Prog", "rPart": ["DeclareFun", "+"]}, {"lPart": "DeclareFun", "rPart": ["\"function\"", "Fun", "\"->\"", "T", "id"]}, {"lPart": "Fun", "rPart": ["(", "\"(\"", "FormalArgs", "?", "\")\"", ")", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "Entering", "rPart": ["CmpOp", "|", "CycleOp", "|", "SwitchOp", "|", "AssignOp", "|", "DeclareVar", "|", "Retire", "|", "Return"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "FormalArgs", "rPart": ["T", "id", "(", "\",\"", "T", "id", ")", "*"]}, {"lPart": "CmpOp", "rPart": ["\"at\"", "Expr", "\"do\"", "OoB", "OrDo"]}, {"lPart": "CycleOp", "rPart": ["\"loop\"", "OoB", "\"until\"", "Expr"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "By", "+", "Default", "?", "\"}\""]}, {"lPart": "AssignOp", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "DeclareVar", "rPart": ["T", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "Retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OoB", "rPart": ["Entering", "|", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "OrDo", "rPart": ["\"or\"", "\"do\"", "OoB"]}, {"lPart": "OrDo", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "ActualArgs", "?", "\")\"", ")", "?", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "By", "rPart": ["\"by\"", "Const", "\"do\"", "OoB", "*", "Leave", "?"]}, {"lPart": "Default", "rPart": ["\"any\"", "\"do\"", "OoB", "*"]}, {"lPart": "Unary", "rPart": ["unary", "|", "minus"]}, {"lPart": "Const", "rPart": ["constInt", "|", "сonstReal", "|", "constStr", "|", "constChar"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Binary", "rPart": ["binary", "|", "logic", "|", "minus"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "ActualArgs", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constInt", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "binary", "rPart": ["[+*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}},
{"FIO":"Ботин А.С.","Collection":"313523325",{"_id": {"$oid": "67f8fd438558742cb43356a2"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67fa6e2b8558742cb4335984"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67fa80078558742cb433598c"}, "rules": "botin", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "[A-Za-z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "costChar", "rPart": ["[']", "(", "[]", "|", "[//]", "[trn]", ")", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe70aa8558742cb4336e30"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67fe741b8558742cb4336e52"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}},
{"FIO":"???","Collection":"441445531",{"_id": {"$oid": "65cd8a8d4b5d9e0496a72a65"}, "rules": "лаб7", "data": {"rList": [{"lPart": "program", "rPart": ["(", "\"let\"", "Type", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "def", ")", "+"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "def", "rPart": ["(", "{operatorCnt = 0;}", "function", ")", "|", "defdata"]}, {"lPart": "defdata", "rPart": ["\";\"", "{toPFR(\"defVar\");}"]}, {"lPart": "function", "rPart": ["{toPFR(\"defFunc\");}", "\"(\"", "(", "argList", "|", "{toPFR(\"args0\");}", ")", "\")\"", "block", "\";\""]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "argList", "rPart": ["Type", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"getArg\");}", "(", "\",\"", "Type", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"getArg\");}", ")", "*"]}, {"lPart": "operator", "rPart": ["Assign", "|", "Cond", "|", "Switch", "|", "Loop", "|", "defdata", "|", "(", "\"endloop\"", "\";\"", ")", "|", "returnFunc"]}, {"lPart": "Assign", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"on\");}", "\";\""]}, {"lPart": "Cond", "rPart": ["headCond", "elseifCond", "elseCond"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "{ctlStk.push(++whileCnt);toPFR(\"LabelSwitch_\"+peek(ctlStk)+\"_expr:\");}", "Expr", "\"{\"", "(", "\"by\"", "{toPFR(\"LabelSwitch_\"+peek(ctlStk)+\"_expr\");toPFR(this.currentLexem[1]);toPFR(\"==\");toPFR(\"LabelSwitch_\"+peek(ctlStk)+\"_end\");toPFR(\"jmpOnFalse\");}", "const10", "\"do\"", "\":\"", "(", "operator", "+", "\"off\"", "\";\"", ")", ")", "+", "(", "\"any do\"", "\":\"", "operator", "+", ")", "?", "\"}\"", "{toPFR(\"LabelSwitch_\"+peek(ctlStk)+\"_end:\");ctlStk.pop();--whileCnt;}"]}, {"lPart": "Loop", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"LabelFor_\"+peek(ctlStk)+\"_0:\");}", "\"loop\"", "operatorOrBlock", "\"until\"", "\"(\"", "Expr", "{toPFR(\"LabelFor_\"+peek(ctlStk)+\"_1\");toPFR(\"JumpOnFalse\");toPFR(\"LabelFor_\"+peek(ctlStk)+\"_0\");toPFR(\"JumpOnFalse\");toPFR(\"LabelFor_\"+peek(ctlStk)+\"_1\");}", "\")\""]}, {"lPart": "returnFunc", "rPart": ["\"return\"", "Expr", "{toPFR(\"return\");}", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "{handleUnaryOp(this.currentLexem[1])}", "unaryOp", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "headCond", "rPart": ["{ctlStk.push(++whileCnt);}", "\"?\"", "{toPFR(\"Label0_\"+peek(ctlStk)+\"_0:\");}", "\"(\"", "Expr", "\")\"", "operatorOrBlock", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JumpOnFalse\");}"]}, {"lPart": "elseifCond", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "operatorOrBlock"]}, {"lPart": "elseifCond", "rPart": ["~", "\"?:\""]}, {"lPart": "elseCond", "rPart": ["\":\"", "operatorOrBlock"]}, {"lPart": "elseCond", "rPart": ["~", "\":\""]}, {"lPart": "operatorOrBlock", "rPart": ["operator", "|", "block"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length >0) && (peek(opStk)==\"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk))>= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "binaryOp", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "const", "rPart": ["const10", "|", "constExp"]}, {"lPart": "unaryOp", "rPart": ["\"!\"", "|", "\"-\""]}, {"lPart": "logic", "rPart": ["\"&&\"", "|", "\"||\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,4}", "[a-zA-Z]"]}, {"lPart": "sign", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constExp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*", "[eE]", "[+-]", "[0-9]", "*"]}, {"lPart": "ignore", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", "[]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "keywords", "rPart": ["[a-z]", "*"]}, {"lPart": "symbol", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[tnr\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "arithm", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"%\"", "|", "\"/\""]}, {"lPart": "binaryOp", "rPart": ["arithm", "|", "logic", "|", "sign"]}], "extension": "var ignoreLastWord;\nvar opStk = [];\nvar ctlStk=[];\nvar onStk=[];\nvar userSignStk=[];\nvar operandStk=[];\nvar whileCnt=0;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction getPriority(s) {\n if (s == \"(\") return 0;\n if (s == \"on\") return 5;\n if (s == \"||\") return 10;\n if (s == \"&&\") return 15;\n if (s == \"!=\") return 20;\n if (s == \"==\") return 20;\n if (s == \">=\") return 25;\n if (s == \">\") return 25;\n if (s == \"<=\") return 30;\n if (s == \"<\") return 30;\n if (s == \"+\") return 35;\n if (s == \"-\") return 35;\n if (s == \"*\") return 40;\n if (s == \"/\") return 40;\n if (s == \"%\") return 40;\n if (s == \"!\") return 45;\n if (s == \"++\") return 50;\n if (s == \"--\") return 50;\n return 0;\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction toPseudoCode(){\n var lim=tracer.history.length;\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignStk.indexOf(word)>=0))\n   type=5;\n  if(type===0)\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    operandStk.push(word);\n   }\n  if(type===5){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type==40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n// ...\n  }\n  return 0;\n}\n"}}},
{"FIO":"S","Collection":"Samples",{"_id": {"$oid": "61f8b754d92fa5eb272e9521"}, "name": "Samples"}{"_id": {"$oid": "61f8eb44e166f33c8500467c"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "61f9ecf3e166f33c850046c1"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "61fa5826e166f33c850046fc"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "61fb525be166f33c85004703"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "61fb529ae166f33c85004706"}, "rules": "Sample4", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "61fb529fe166f33c85004708"}, "rules": "Sample5", "data": {"rList": [{"lPart": "Expr", "rPart": ["(", "Expr", "AddSign", ")", "?", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "AddSign", "rPart": ["\"+\"", "|", "\"-\""]}, {"lPart": "EndExpr", "rPart": ["(", "EndExpr", "MultSign", ")", "?", "Term"]}, {"lPart": "Term", "rPart": ["const", "|", "id"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultSign", "rPart": ["\"*\"", "|", "\"/\""]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": []}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "622967b4daf89c101727c5b1"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "62296947daf89c101727c5b3"}, "rules": "Sample7", "data": {"rList": [{"lPart": "Function", "rPart": ["{operatorCnt=0;userSignStk.push(this.currentLexem[1]);}", "id", "\"(\"", "id", "\")\"", "\"{\"", "OperatorList", "\"}\"", "{toPseudoCode();}"]}, {"lPart": "OperatorList", "rPart": ["(", "BlockOrOperator", ")", "+"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "OperatorList", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt); toPFR(\"exprBy\"+operatorCnt);onStk.push(0); toPFR(\"defVar\");}", "\"by\"", "Expr", "{toPFR(\"exprBy\"+operatorCnt); toPFR(\"=\");}", "\"{\"", "(", "\"on\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"exprBy\"+peek(ctlStk));toPFR(\"==\"); toPFR(\"LBy\"+peek(ctlStk)+\"On\"+peek(onStk)); toPFR(\"jmpOnFalse\");}", "\":\"", "BlockOrOperator", "{toPFR(\"LBy\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LBy\"+peek(ctlStk)+\"On\"+peek(onStk)+\":\"); onStk.push(onStk.pop()+1); }", ")", "+", "\"}\"", "{toPFR(\"LBy\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ тела функции (только тела!), содержащей выражения (включая вызовы функций и знаки операций + и -), операторы присваивания и переключатели\n//и преобразования некоторых операций ПФЗ в псевдокод вида Метка Код Оп Р\n//по прежнему не полностью реализованы приоритеты знаков операций, нужно дорабатывать функцию getPriority\n//не реализованы типы операндов, объявления переменных, ...\n//слово STACK в поле имени операнда можно понимать как операцию pop() над стеком времени выполнения, а в поле имени результата - как операцию push()\n//вот возможный пример текста для тестирования:\n//f(arg){ x=arg+f(11); by x-2 { on 10: y=x-3; on 20: y = x+4; on 30: y=5;} }\n\nvar ignoreLastWord;\nvar opStk = [];\nvar ctlStk=[];\nvar onStk=[];\nvar userSignStk=[];\nvar operandStk=[];\nvar operatorCnt=0;\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction toPseudoCode(){\n var lim=tracer.history.length;\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignStk.indexOf(word)>=0))\n   type=5;\n  if(type===0)\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    operandStk.push(word);\n   }\n  if(type===5){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type==40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n// ...\n  }\n  return 0;\n}\n"}}{"_id": {"$oid": "62296afbdaf89c101727c5b5"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}},
{"FIO":"Куйдин В.В.","Collection":"341544142",{"_id": {"$oid": "67adf915ce6dd03692d07afb"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bab7a6ce6dd03692d0930a"}, "rules": "noName", "data": {"rList": [{"lPart": "афыва", "rPart": []}], "extension": ""}}{"_id": {"$oid": "67babca9ce6dd03692d09343"}, "rules": "1lab", "data": {"rList": [{"lPart": "ident", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[01]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "dasfdf", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ceaa02af563521c9d5d178"}, "rules": "2lab", "data": {"rList": [{"lPart": "ident", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[0-1]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "dasfdf", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e1679c4635a960233ad3c9"}, "rules": "3lab", "data": {"rList": [{"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"let\"", "ident", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "Endpart", "Othpart"]}, {"lPart": "Expr", "rPart": ["(", "bunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "Endpart", "rPart": ["~", "\"?:\""]}, {"lPart": "Endpart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "Othpart", "rPart": ["~", "\":\""]}, {"lPart": "Othpart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["ident"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "bin", "|", "bunar", ")", "Expr", ")", "?"]}, {"lPart": "ident", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "bunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[0-1]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "bin", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f54d128558742cb4333ec0"}, "rules": "4lab", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["type", "?", "ident", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"let\"", "ident", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "Endpart", "Othpart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "ident", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "operators", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "operators", ")", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "bunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "Endpart", "rPart": ["~", "\"?:\""]}, {"lPart": "Endpart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "Othpart", "rPart": ["~", "\":\""]}, {"lPart": "Othpart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"two\"", "|", "\"eight\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["type", "ident", "(", "\",\"", "type", "ident", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["ident", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "bin", "|", "bunar", ")", "Expr", ")", "?"]}, {"lPart": "ident", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[0-1]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "bunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "bin", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808dab78558742cb4338a2a"}, "rules": "5lab", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "func", "rPart": ["type", "?", "ident", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["\"let\"", "ident", "\"on\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "Endpart", "Othpart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "ident", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "operators", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "operators", ")", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "bunar", "|", "unar", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "Endpart", "rPart": ["~", "\"?:\""]}, {"lPart": "Endpart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "Othpart", "rPart": ["~", "\":\""]}, {"lPart": "Othpart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"two\"", "|", "\"eight\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["type", "ident", "(", "\",\"", "type", "ident", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["ident", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "bin", "|", "bunar", ")", "Expr", ")", "?"]}, {"lPart": "ident", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[0-1]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "bunar", "rPart": ["[-]"]}, {"lPart": "unar", "rPart": ["[!]"]}, {"lPart": "bin", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Додов Д.Т.","Collection":"443333225",{"_id": {"$oid": "679b6016ce6dd03692d0758a"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[-]", "?", "[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[=]", ")", "|", "(", "[<]", "[>]", ")", "|", "(", "[<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "679b60adce6dd03692d0758d"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 0, "assist": 0}}{"_id": {"$oid": "679b6a38ce6dd03692d075aa"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[=]", ")", "|", "(", "[<]", "[>]", ")", "|", "(", "[<>]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "keywords", "rPart": ["[a-z]", "[a-z]", "+"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "679f595ace6dd03692d07691"}, "rules": "lab3", "data": {"rList": [{"lPart": "Start", "rPart": ["function", "+"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Block", "rPart": ["(", "assignment", "|", "if", "|", "while", "|", "switch", "|", "function", ")"]}, {"lPart": "assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "Block", "\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "*", "\"}\"", "\":\"", "\"{\"", "Block", "*", "\"}\""]}, {"lPart": "while", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Block", "*", "\"}\"", "\"leave;\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "Block", "*", "\"}\"", "\"leave;\"", ")", "+", "\"any do\"", "\"{\"", "Block", "\"}\"", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"{\"", "Block", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["FirstExpr", "(", "LastExpr", "FirstExpr", ")", "?"]}, {"lPart": "FirstExpr", "rPart": ["id", "|", "const", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "LastExpr", "rPart": ["comparison", "|", "ariphmetic", "|", "logical", "|", "logUn"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[!<>]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "logUn", "rPart": ["(", "[!]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b51793ce6dd03692d08388"}, "rules": "lab4", "data": {"rList": [{"lPart": "Start", "rPart": ["function", "+"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Block", "rPart": ["(", "assignment", "|", "if", "|", "while", "|", "switch", "|", "function", ")"]}, {"lPart": "assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\"", "PartIfElse", "PartElse"]}, {"lPart": "while", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\"", ")", "+", "\"any do\"", "\"{\"", "Block", "\"}\"", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"{\"", "Block", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["FirstExpr", "(", "LastExpr", "FirstExpr", ")", "?"]}, {"lPart": "FirstExpr", "rPart": ["id", "|", "const", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "LastExpr", "rPart": ["comparison", "|", "ariphmetic", "|", "logical", "|", "logUn"]}, {"lPart": "PartIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartIfElse", "rPart": ["~", "\"?:\""]}, {"lPart": "PartElse", "rPart": ["\":\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\":\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[!<>]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "logUn", "rPart": ["(", "[!]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b5eaacce6dd03692d08627"}, "rules": "lab5", "data": {"rList": [{"lPart": "Start", "rPart": ["function", "+"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Block", "rPart": ["(", "assignment", "|", "if", "|", "while", "|", "switch", "|", "function", "|", "return", ")"]}, {"lPart": "assignment", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\"", "PartIfElse", "PartElse"]}, {"lPart": "while", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\"", ")", "+", "\"any do\"", "\"{\"", "Block", "\"}\"", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"{\"", "Block", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["FirstExpr", "(", "LastExpr", "FirstExpr", ")", "?"]}, {"lPart": "FirstExpr", "rPart": ["id", "|", "const", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "LastExpr", "rPart": ["comparison", "|", "ariphmetic", "|", "logical", "|", "logUn"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "PartIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartIfElse", "rPart": ["~", "\"?:\""]}, {"lPart": "PartElse", "rPart": ["\":\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\":\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[!<>]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "logUn", "rPart": ["(", "[!]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b81208ce6dd03692d08afc"}, "rules": "lab6", "data": {"rList": [{"lPart": "Start", "rPart": ["{whileCnt=0;}", "function", "+"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Block", "rPart": ["(", "assignment", "|", "if", "|", "while", "|", "switch", "|", "function", "|", "return", ")"]}, {"lPart": "assignment", "rPart": ["{toPFR(this.currentLexem[1]);}", "\"put\"", "Expr", "\"to\"", "id", "\";\"", "{toPFR(\"=\");}"]}, {"lPart": "if", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\"", "PartIfElse", "PartElse"]}, {"lPart": "while", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "\"{\"", "Block", "\"}\"", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"leave;\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\"", ")", "+", "\"any do\"", "\"{\"", "Block", "\"}\"", "\"}\""]}, {"lPart": "function", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"(\"", "(", "ArgList", ")", "*", "\")\"", "\"{\"", "Block", "*", "\"}\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}"]}, {"lPart": "Expr", "rPart": ["FirstExpr", "(", "LastExpr", ")", "?"]}, {"lPart": "FirstExpr", "rPart": ["id", "|", "const", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "FirstExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "LastExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "comparison", "|", "ariphmetic", "|", "logical", "|", "logUn", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "PartIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartIfElse", "rPart": ["~", "\"?:\""]}, {"lPart": "PartElse", "rPart": ["\":\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\":\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[!<>]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "logUn", "rPart": ["(", "[!]", ")"]}], "extension": "var ignoreLastWord;\nfunction Tracer() {\n    this.history = [];\n}\nTracer.prototype = {\n    put: function (b) {\n        this.history.push(b);\n    },\n    getAll: function () {\n        return this.history.join(\" \");\n    },\n    clear: function () {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\nvar opStk = [];   // Стек операторов\nvar ctlStk = [];  // Стек управляющих конструкций\nvar whileCnt = 0;\nvar funcCounter = 0;\nvar paramCounter = 0;\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(stack) {\n    return stack[stack.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 10;\n    if (s == \"-\") return 10;\n    if (s == \"*\") return 20;\n    if (s == \"/\") return 20;\n    return 0;\n}\n"}}{"_id": {"$oid": "67b82cd0ce6dd03692d08b2d"}, "rules": "lab7", "data": {"rList": [{"lPart": "Start", "rPart": ["{whileCnt=0;}", "function", "+", "{toPseudoCode();}"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Block", "rPart": ["(", "assignment", "|", "if", "|", "while", "|", "switch", "|", "function", "|", "return", ")"]}, {"lPart": "assignment", "rPart": ["{toPFR(this.currentLexem[1]);}", "\"put\"", "Expr", "\"to\"", "id", "\";\"", "{toPFR(\"=\");}"]}, {"lPart": "if", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\"", "PartIfElse", "PartElse"]}, {"lPart": "while", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "\"{\"", "Block", "\"}\"", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"leave;\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\"", ")", "+", "\"any do\"", "\"{\"", "Block", "\"}\"", "\"}\""]}, {"lPart": "function", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"(\"", "(", "ArgList", ")", "*", "\")\"", "\"{\"", "Block", "*", "\"}\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}"]}, {"lPart": "Expr", "rPart": ["FirstExpr", "(", "LastExpr", ")", "?"]}, {"lPart": "FirstExpr", "rPart": ["id", "|", "const", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "FirstExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "LastExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "comparison", "|", "ariphmetic", "|", "logical", "|", "logUn", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "PartIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartIfElse", "rPart": ["~", "\"?:\""]}, {"lPart": "PartElse", "rPart": ["\":\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\":\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[!<>]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "logUn", "rPart": ["(", "[!]", ")"]}], "extension": "var ignoreLastWord;\nvar onStk = [];\nvar userSignStk = [];\nvar operandStk = [];\nvar operatorCnt = 0;\nvar funcCounter = 0;\nvar isFunc = 0;\n\nfunction Tracer() {\n    this.history = [];\n};\n\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        return this.history.join(\" \");\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk = [];\nvar whileCnt = 0;\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\" || s == \"-\") return 10;\n    if (s == \"*\" || s == \"/\") return 20;\n    return 0;\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\nПсевдокод:\");\n    var label = false;\n    var expr = false;\n\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0 && userSignStk.includes(word)) {\n            type = 5;\n        }\n\n        if (type === 0) {\n            if (word.includes(\"else\")) {\n                label = true;\n                toPFR(\"\\n\" + word);\n            } else {\n                operandStk.push(word);\n            }\n        }\n\n        if (type === 5) {\n            expr = true;\n            if (!label) toPFR(\"\\n_\");\n            label = false;\n\n            toPFR(`${word} ${operandStk.pop()} STACK`);\n            operandStk.push(\"STACK\");\n        }\n\n        if (type === 10 || type === 11) {\n            expr = true;\n            if (!label) toPFR(\"\\n_\");\n            label = false;\n\n            toPFR(`move ${operandStk.pop()} STACK`);\n            toPFR(`\\n_ ${word} ${operandStk.pop()} STACK`);\n        }\n\n        if (type === 20) {\n            if (!label) toPFR(\"\\n----\");\n            label = false;\n\n            if (!expr) {\n                toPFR(`set ${operandStk.pop()} ${operandStk.pop()} Push`);\n            }\n            expr = false;\n        }\n\n        if (type === 40 || type === 41) {\n            if (!label) toPFR(\"\\n_\");\n            label = false;\n\n            toPFR(`${word} ${type === 40 ? '---' : 'STACK'} ${operandStk.pop()}`);\n            expr = false;\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\": case \"-\": return 10; // Арифметическая операция\n        case \"==\": return 11; // Операция сравнения\n        case \"=\": return 20; // Присваивание\n        case \"defVar\": return 30; // Объявление переменной\n        case \"jmp\": return 40; // Безусловный переход\n        case \"jmpOnFalse\": return 41; // Переход по условию\n    }\n    return 0;\n}\n"}}{"_id": {"$oid": "67b85eddce6dd03692d08cf5"}, "rules": "lab8", "data": {"rList": [{"lPart": "Start", "rPart": ["{whileCnt=0;}", "function", "+", "{toPseudoCode();}"]}, {"lPart": "ArgList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Block", "rPart": ["(", "assignment", "|", "if", "|", "while", "|", "switch", "|", "function", "|", "return", ")"]}, {"lPart": "assignment", "rPart": ["{toPFR(this.currentLexem[1]);}", "\"put\"", "Expr", "\"to\"", "id", "\";\"", "{toPFR(\"=\");}"]}, {"lPart": "if", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\"", "PartIfElse", "PartElse"]}, {"lPart": "while", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "\"{\"", "Block", "\"}\"", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"leave;\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "\"{\"", "Block", "\"}\"", "\"leave;\"", ")", "+", "\"any do\"", "\"{\"", "Block", "\"}\"", "\"}\""]}, {"lPart": "function", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"(\"", "(", "ArgList", ")", "*", "\")\"", "\"{\"", "Block", "*", "\"}\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}"]}, {"lPart": "Expr", "rPart": ["FirstExpr", "(", "LastExpr", ")", "?"]}, {"lPart": "FirstExpr", "rPart": ["id", "|", "const", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "FirstExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "LastExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "comparison", "|", "ariphmetic", "|", "logical", "|", "logUn", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "PartIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartIfElse", "rPart": ["~", "\"?:\""]}, {"lPart": "PartElse", "rPart": ["\":\"", "\"{\"", "Block", "\"}\""]}, {"lPart": "PartElse", "rPart": ["~", "\":\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "[eE]", "[-+]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "ariphmetic", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "args", "rPart": ["[,]"]}, {"lPart": "logical", "rPart": ["[||]", "|", "[&&]"]}, {"lPart": "comparison", "rPart": ["(", "[!<>]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "|", "(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "str", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "logUn", "rPart": ["(", "[!]", ")"]}], "extension": "var ignoreLastWord;\nvar onStk = [];\nvar userSignStk = [];\nvar operandStk = [];\nvar operatorCnt = 0;\nvar funcCounter = 0;\nvar isFunc = 0;\n\nfunction Tracer() {\n    this.history = [];\n}\n\nTracer.prototype = {\n    put: function (b) {\n        this.history.push(b);\n    },\n    getAll: function () {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++) {\n            r += \" \" + this.history[i];\n        }\n        return r;\n    },\n    clear: function () {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk = [];\nvar whileCnt = 0;\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\" || s == \"-\") return 10;\n    if (s == \"*\" || s == \"/\") return 20;\n    return 0;\n}\n\nfunction checkVarExist(name) {\n    if (!idTbl.includes(name)) {\n        throw new Error(`Ошибка: переменная '${name}' не объявлена`);\n    }\n}\n\nfunction checkDivision(divisor) {\n    if (divisor === 0) {\n        throw new Error(\"Ошибка: деление на ноль\");\n    }\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод:\\n\");\n    var label = false;\n    var expr = false;\n\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type == 0 && userSignStk.includes(word)) {\n            type = 5;\n        }\n\n        if (type === 0) {\n            if (word.includes(\"else\")) {\n                label = true;\n                toPFR(\"\\n\");\n                toPFR(word);\n            } else {\n                operandStk.push(word);\n            }\n        }\n\n        if (type === 5) {\n            expr = true;\n            if (!label) {\n                toPFR(\"\\n\");\n                toPFR(\"_\");\n            } else {\n                label = false;\n            }\n\n            toPFR(word);\n            toPFR(operandStk.pop());\n            toPFR(\"STACK\");\n\n            operandStk.push(\"STACK\");\n        }\n\n        if (type === 10 || type === 11) {\n            expr = true;\n\n            if (!label) {\n                toPFR(\"\\n\");\n                toPFR(\"_\");\n            } else {\n                label = false;\n            }\n\n            toPFR(\"move\");\n            toPFR(operandStk.pop());\n            toPFR(\"STACK\");\n\n            toPFR(\"\\n\");\n            toPFR(\"_\");\n            toPFR(word);\n            toPFR(operandStk.pop());\n            toPFR(\"STACK\");\n        }\n\n        if (type === 20) {\n            if (!label) {\n                toPFR(\"\\n\");\n                toPFR(\"----\");\n            } else {\n                label = false;\n            }\n\n            if (!expr) {\n                toPFR(\"set\");\n                toPFR(operandStk.pop());\n                toPFR(operandStk.pop());\n                toPFR(\"Push\");\n                toPFR(\"\\n\");\n            }\n\n            expr = false;\n        }\n\n        if (type === 40 || type === 41) {\n            if (!label) {\n                toPFR(\"\\n\");\n                toPFR(\"_\");\n            } else {\n                label = false;\n            }\n\n            toPFR(word);\n            toPFR(type == 40 ? \"---\" : \"STACK\");\n            toPFR(operandStk.pop());\n            expr = false;\n        }\n\n        if (word === \"if\") {\n            let labelNum = operatorCnt++;\n            toPFR(`\\n_ JmpOnFalse STACK Label${labelNum}`);\n            toPFR(`\\n---- set Label${labelNum}:`);\n        }\n\n        if (word === \"while\") {\n            let labelNum = operatorCnt++;\n            toPFR(`\\n_ Label${labelNum}_start:`);\n            toPFR(`_ JmpOnFalse STACK Label${labelNum}_end`);\n            operandStk.push(labelNum);\n        }\n\n        if (word === \"endwhile\") {\n            let labelNum = operandStk.pop();\n            toPFR(`\\n_ jmp Label${labelNum}_start`);\n            toPFR(`\\n---- set Label${labelNum}_end:`);\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n            return 10; // Арифметическая операция\n        case \"==\":\n            return 11; // Операция сравнения\n        case \"=\":\n            return 20; // Присваивание\n        case \"defVar\":\n            return 30; // Объявление переменной\n        case \"jmp\":\n            return 40; // Безусловный переход\n        case \"jmpOnFalse\":\n            return 41; // Переход по условию\n        case \"if\":\n            return 50; // Условный оператор\n        case \"while\":\n            return 51; // Цикл\n        case \"endwhile\":\n            return 52; // Конец цикла\n    }\n    return 0;\n}\n"}}},
{"FIO":"Шумская П.А.","Collection":"532551451",{"_id": {"$oid": "67bf10e4af563521c9d59b92"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bf1109af563521c9d59b9c"}, "rules": "Shumskaya", "data": {"rList": [{"lPart": "ignore", "rPart": ["[\\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const4", "rPart": ["[0f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}, {"lPart": "brackets", "rPart": ["[{} ()]"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comparison", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "keywords", "rPart": ["[a-z]"]}, {"lPart": "expr", "rPart": ["(", "id", "|", "const", ")", "(", "math", "|", "expr", ")", "?"]}, {"lPart": "const", "rPart": ["(", "string", "|", "char", "|", "const4", "|", "const10", "|", "const16", ")"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "expr", "delimiter"]}, {"lPart": "block", "rPart": ["(", "assign", "|", "expr", ")", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e8ec004635a960233af719"}, "rules": "test2", "data": {"rList": [{"lPart": "Program", "rPart": ["def", "+"]}, {"lPart": "def", "rPart": ["defFunction", "|", "defAssign"]}, {"lPart": "defFunction", "rPart": ["ID", "\"=>\"", "(", "\"as\"", "Type", ")", "?", "\"(\"", "argList", "?", "\")\"", "block"]}, {"lPart": "defAssign", "rPart": ["Type", "ID", "\";\""]}, {"lPart": "argList", "rPart": ["(", "Type", "ID", ")", "(", "\",\"", "Type", "ID", ")", "*"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "*", "(", "\"end;\"", "|", "\"break;\"", "|", "\"retire;\"", ")", "?", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"boolean\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "loop", "|", "comp"]}, {"lPart": "assign", "rPart": ["ID", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["ID", "|", "ConstAll"]}, {"lPart": "EndExpr", "rPart": ["sign", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "sign", "rPart": ["\"++\"", "|", "\"--\"", "|", "\"**\"", "|", "\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\""]}, {"lPart": "logicSign", "rPart": ["\"==\"", "|", "\"!=\"", "|", "\">=\"", "|", "\"<=\"", "|", "\">\"", "|", "\"<\""]}, {"lPart": "ConstAll", "rPart": ["const10", "|", "const4", "|", "const16", "|", "constBool", "|", "constChar", "|", "constStr"]}, {"lPart": "const10", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "constBool", "rPart": ["(", "[t]", "[r]", "[u]", "[e]", ")", "|", "(", "[f]", "[a]", "[l]", "[s]", "[e]", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "ID", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "logicExpr", "\")\"", "block", "(", "\"?:\"", "\"(\"", "logicExpr", "\")\"", "block", ")", "?", "(", "\":\"", "\"(\"", "logicExpr", "\")\"", "block", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "block", "\"until\"", "\"(\"", "logicExpr", "\")\"", "\";\""]}, {"lPart": "comp", "rPart": ["\"select\"", "\"(\"", "Expr", "\")\"", "(", "\"case\"", "\"(\"", "ConstAll", "\")\"", "block", ")", "*", "\"end;\""]}, {"lPart": "logicExpr", "rPart": ["Expr", "(", "logicSign", "Expr", ")", "?"]}], "extension": ""}}{"_id": {"$oid": "67e8ec524635a960233af71c"}, "rules": "еуые", "data": {"rList": [{"lPart": "prog", "rPart": ["operators", "+"]}, {"lPart": "operators", "rPart": ["assign", "|", "loop", "|", "cond"]}, {"lPart": "assign", "rPart": ["id", "assignOp", "statement", "\";\""]}, {"lPart": "assignOp", "rPart": ["\"<-\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "(", "operators", ")", "*", "\"retire;\"", "\"}\"", "\"until\"", "\"(\"", "statement", "\")\"", "\";\""]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", "(", "\"?:\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?", "(", "\":\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?"]}, {"lPart": "statement", "rPart": ["expr", "(", "logicSign", "expr", ")", "?"]}, {"lPart": "expr", "rPart": ["term", "(", "sign", "term", ")", "*"]}, {"lPart": "term", "rPart": ["factor"]}, {"lPart": "factor", "rPart": ["\"-\"", "factor", "|", "id", "|", "const", "|", "\"(\"", "expr", "\")\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "const", "rPart": ["[t]", "[r]", "[u]", "[e]"]}, {"lPart": "const", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67e9030d4635a960233af86c"}, "rules": "Shumskaya2", "data": {"rList": [{"lPart": "prog", "rPart": ["operators", "+"]}, {"lPart": "operators", "rPart": ["assign", "|", "loop", "|", "cond"]}, {"lPart": "assign", "rPart": ["id", "assignOp", "statement", "\";\""]}, {"lPart": "assignOp", "rPart": ["\"<-\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "(", "operators", ")", "*", "\"retire;\"", "\"}\"", "\"until\"", "\"(\"", "statement", "\")\"", "\";\""]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", "(", "\"?:\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?", "(", "\":\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?"]}, {"lPart": "statement", "rPart": ["expr", "(", "logicSign", "expr", ")", "?"]}, {"lPart": "expr", "rPart": ["term", "(", "sign", "term", ")", "*"]}, {"lPart": "term", "rPart": ["factor"]}, {"lPart": "factor", "rPart": ["\"-\"", "factor", "|", "id", "|", "const", "|", "\"(\"", "expr", "\")\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "const", "rPart": ["[t]", "[r]", "[u]", "[e]"]}, {"lPart": "const", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67e906c14635a960233af88d"}, "rules": "Shumskaya3", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", ")", "+"]}, {"lPart": "operators", "rPart": ["cond", "|", "loop", "|", "comp", "|", "assign"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "expression", "\";\""]}, {"lPart": "expression", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "(", "id", "|", "const", ")", ")", "*"]}, {"lPart": "logicalExpression", "rPart": ["expression", "(", "logicSign", "expression", ")", "?"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "logicalExpression", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", "(", "\"?:\"", "\"(\"", "logicalExpression", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?", "(", "\":\"", "\"(\"", "logicalExpression", "\")\"", "\"{\"", "(", "operators", ")", "*", "\"}\"", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "(", "operators", ")", "*", "(", "\"retire;\"", ")", "?", "\"}\"", "\"until\"", "\"(\"", "logicalExpression", "\")\"", "\";\""]}, {"lPart": "comp", "rPart": ["\"select\"", "\"(\"", "expression", "\")\"", "(", "\"case\"", "\"(\"", "const", "\")\"", "\"{\"", "(", "operators", "+", ")", "?", "\"break;\"", "?", "\"}\"", ")", "*", "\"end;\""]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "\")\"", "\"{\"", "(", "operators", "+", ")", "?", "\"}\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "const", "rPart": ["[t]", "[r]", "[u]", "[e]"]}, {"lPart": "const", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/%]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[b]", "[o]", "[o]", "[l]", "[e]", "[a]", "[n]", ")", "|", "(", "[s]", "[t]", "[r]", "[i]", "[n]", "[g]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")"]}], "extension": ""}}{"_id": {"$oid": "67e929594635a960233af96c"}, "rules": "Shumskaya33", "data": {"rList": [{"lPart": "prog", "rPart": ["assign", "+"]}, {"lPart": "func", "rPart": ["id", "funcAssign", "\"as\"", "type", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "block"]}, {"lPart": "funcAssign", "rPart": ["\"=>\""]}, {"lPart": "assign", "rPart": ["id", "assignOp", "statement", "\";\""]}, {"lPart": "assignOp", "rPart": ["\"<-\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "block", "\"retire;\"", "\"until\"", "\"(\"", "statement", "\")\"", "\";\""]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "statement", "\")\"", "block", "(", "\"?:\"", "\"(\"", "statement", "\")\"", "block", ")", "?", "(", "\":\"", "block", ")", "?"]}, {"lPart": "statement", "rPart": ["expr", "(", "logicSign", "expr", ")", "?"]}, {"lPart": "expr", "rPart": ["term", "(", "sign", "term", ")", "*"]}, {"lPart": "term", "rPart": ["factor"]}, {"lPart": "factor", "rPart": ["\"-\"", "factor", "|", "id", "|", "const", "|", "\"(\"", "expr", "\")\""]}, {"lPart": "block", "rPart": ["\"{\"", "(", "assign", "|", "loop", "|", "cond", ")", "*", "\"}\""]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "const", "rPart": ["[t]", "[r]", "[u]", "[e]"]}, {"lPart": "const", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["[i]", "[n]", "[t]", "|", "[b]", "[o]", "[o]", "[l]", "[e]", "[a]", "[n]", "|", "[s]", "[t]", "[r]", "[i]", "[n]", "[g]", "|", "[c]", "[h]", "[a]", "[r]"]}], "extension": ""}}{"_id": {"$oid": "67f9c7058558742cb43356cb"}, "rules": "Shumskaya4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", ")", "+"]}, {"lPart": "operators", "rPart": ["cond", "|", "assign", "|", "loop", "|", "comp"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "*", "(", "\"end;\"", "|", "\"break;\"", "|", "\"retire;\"", ")", "?", "\"}\""]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "expression", "\";\""]}, {"lPart": "expression", "rPart": ["(", "id", "|", "constAll", ")", "(", "sign", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logicalExpression", "rPart": ["expression", "(", "logicSign", "expression", ")", "?"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "logicalExpression", "\")\"", "block", "(", "\"?:\"", "\"(\"", "logicalExpression", "\")\"", "block", ")", "?", "(", "\":\"", "\"(\"", "logicalExpression", "\")\"", "block", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "block", "\"until\"", "\"(\"", "logicalExpression", "\")\"", "\";\""]}, {"lPart": "comp", "rPart": ["\"select\"", "\"(\"", "expression", "\")\"", "(", "\"case\"", "\"(\"", "constAll", "\")\"", "block", ")", "*"]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "\")\"", "block"]}, {"lPart": "constAll", "rPart": ["const4", "|", "const10", "|", "const16", "|", "constStr", "|", "constChar", "|", "constTrue", "|", "constFalse"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const10", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "constTrue", "rPart": ["[t]", "[r]", "[u]", "[e]"]}, {"lPart": "constFalse", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/%]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[b]", "[o]", "[o]", "[l]", "[e]", "[a]", "[n]", ")", "|", "(", "[s]", "[t]", "[r]", "[i]", "[n]", "[g]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")"]}], "extension": ""}}{"_id": {"$oid": "67fd75d48558742cb4336bed"}, "rules": "Shumskaya5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "def", ")", "+"]}, {"lPart": "def", "rPart": ["(", "id", "\";\"", ")", "|", "(", "id", "\"<-\"", "expression", "\";\"", ")", "|", "func"]}, {"lPart": "operators", "rPart": ["cond", "|", "assign", "|", "loop", "|", "comp"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "*", "(", "\"end;\"", "|", "\"break;\"", "|", "\"retire;\"", ")", "?", "\"}\""]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "expression", "\";\""]}, {"lPart": "expression", "rPart": ["(", "id", "|", "constAll", ")", "(", "sign", "(", "id", "|", "constAll", ")", ")", "*"]}, {"lPart": "logicalExpression", "rPart": ["expression", "(", "logicSign", "expression", ")", "?"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "logicalExpression", "\")\"", "block", "(", "\"?:\"", "\"(\"", "logicalExpression", "\")\"", "block", ")", "?", "(", "\":\"", "\"(\"", "logicalExpression", "\")\"", "block", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "block", "\"until\"", "\"(\"", "logicalExpression", "\")\"", "\";\""]}, {"lPart": "comp", "rPart": ["\"select\"", "\"(\"", "expression", "\")\"", "(", "\"case\"", "\"(\"", "constAll", "\")\"", "block", ")", "*"]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "?", ")", "?", "\")\"", "block"]}, {"lPart": "constAll", "rPart": ["const4", "|", "const10", "|", "const16", "|", "constStr", "|", "constChar", "|", "constTrue", "|", "constFalse"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "const10", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "constTrue", "rPart": ["[t]", "[r]", "[u]", "[e]"]}, {"lPart": "constFalse", "rPart": ["[f]", "[a]", "[l]", "[s]", "[e]"]}, {"lPart": "logicSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/%]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[b]", "[o]", "[o]", "[l]", "[e]", "[a]", "[n]", ")", "|", "(", "[s]", "[t]", "[r]", "[i]", "[n]", "[g]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")"]}], "extension": ""}}},
{"FIO":"Кучменко Ф.А.","Collection":"311242413",{"_id": {"$oid": "67c2b0b7af563521c9d5aa19"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 7000, "assist": 1}}{"_id": {"$oid": "67c8221caf563521c9d5bf1b"}, "rules": "Лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "constsymb", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-3]", "[0-9]", ")", "|", "[]", ")", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6ca3de0b22203e7cc00d7"}, "rules": "Лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", "*", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "comprasion", "rPart": ["(", "[!=]", ")", "|", "(", "[==]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "colon", "rPart": ["[:]"]}, {"lPart": "bracket", "rPart": ["[(]", "[]", "+", "[)]"]}, {"lPart": "figbracket", "rPart": ["[{]", "[]", "+", "[}]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "keywords", "rPart": ["[A-Z]", "+"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea9affa600182c7517a728"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "File", "rPart": ["(", "function", "|", "blockOperator", ")", "+"]}, {"lPart": "function", "rPart": ["id", "\"=>\"", "\"as\"", "type", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "blockOperator", "\"}\""]}, {"lPart": "caseOp", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "blockOperator", ")", "*", "(", "\"otherwise\"", "blockOperator", ")", "?", "\"}\""]}, {"lPart": "break", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "blockOperator", "rPart": ["break", "|", "anyOperator", "|", "(", "\"{\"", "(", "break", "|", "anyOperator", ")", "*", "\"}\"", ")"]}, {"lPart": "cycleOp", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "ifOp", "rPart": ["\"when\"", "Expr", "\"{\"", "anyOperator", "\"}\"", "(", "\"other\"", "\"{\"", "anyOperator", "\"}\"", ")", "?"]}, {"lPart": "initOp", "rPart": ["\"let\"", "type", "id", "(", "\"on\"", "Expr", ")", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["id", "|", "const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "endExpr", "rPart": ["(", "(", "binOperation", "|", "universalOperator", ")", "Expr", ")", "?"]}, {"lPart": "anyOperator", "rPart": ["ifOp", "|", "initOp", "|", "cycleOp", "|", "caseOp"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"int\"", "|", "\"double\"", "|", "\"string\""]}, {"lPart": "binOperation", "rPart": ["(", "[+*/%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "universalOperator", "rPart": ["[-]"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe80328558742cb4336ed7"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "File", "rPart": ["function", "+"]}, {"lPart": "caseOp", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "blockOperator", ")", "*", "(", "\"otherwise\"", "blockOperator", ")", "?", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"=>\"", "\"as\"", "type", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "blockOperator"]}, {"lPart": "anyOperator", "rPart": ["ifOp", "|", "initOp", "|", "cycleOp", "|", "caseOp", "|", "assignOp", "|", "break"]}, {"lPart": "break", "rPart": ["(", "\"stop\"", "|", "\"exit\"", ")", "\";\""]}, {"lPart": "blockOperator", "rPart": ["anyOperator", "|", "(", "\"{\"", "(", "blockOperator", ")", "*", "\"}\"", ")"]}, {"lPart": "cycleOp", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "ifOp", "rPart": ["\"when\"", "Expr", "blockOperator", "else"]}, {"lPart": "assignOp", "rPart": ["id", "\"set\"", "Expr", "\";\""]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "initOp", "rPart": ["\"let\"", "id", "(", "\"on\"", "Expr", ")", "?", "\";\""]}, {"lPart": "else", "rPart": ["\"other\"", "blockOperator"]}, {"lPart": "Expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "begExpr", "rPart": ["id", "|", "const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "endExpr", "rPart": ["(", "(", "binOperation", "|", "universalOperator", ")", "Expr", ")", "?"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"int\"", "|", "\"double\"", "|", "\"string\""]}, {"lPart": "binOperation", "rPart": ["(", "[+*/%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "universalOperator", "rPart": ["[-]"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a54628558742cb43395e0"}, "rules": "Лаб5", "data": {"rList": [{"lPart": "File", "rPart": ["function", "+"]}, {"lPart": "caseOp", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "blockOperator", ")", "*", "(", "\"otherwise\"", "blockOperator", ")", "?", "\"}\""]}, {"lPart": "function", "rPart": ["id", "\"=>\"", "\"as\"", "type", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "blockOperator"]}, {"lPart": "anyOperator", "rPart": ["ifOp", "|", "initOp", "|", "cycleOp", "|", "caseOp", "|", "assignOp", "|", "break"]}, {"lPart": "break", "rPart": ["(", "\"stop\"", "|", "\"exit\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\""]}, {"lPart": "blockOperator", "rPart": ["anyOperator", "|", "(", "\"{\"", "(", "blockOperator", ")", "*", "\"}\"", ")"]}, {"lPart": "cycleOp", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "ifOp", "rPart": ["\"when\"", "Expr", "blockOperator", "else"]}, {"lPart": "assignOp", "rPart": ["id", "\"set\"", "Expr", "\";\""]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "initOp", "rPart": ["\"let\"", "type", "id", "(", "\"on\"", "Expr", ")", "?", "\";\""]}, {"lPart": "else", "rPart": ["\"other\"", "blockOperator"]}, {"lPart": "Expr", "rPart": ["begExpr", "endExpr"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"int\"", "|", "\"double\"", "|", "\"string\""]}, {"lPart": "begExpr", "rPart": ["(", "universalOperator", "|", "unaryOperator", ")", "?", "(", "const", "|", "\"(\"", "Expr", "\")\"", "|", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", ")"]}, {"lPart": "endExpr", "rPart": ["(", "(", "binOperation", "|", "universalOperator", "|", "unaryOperator", ")", "Expr", ")", "?"]}, {"lPart": "binOperation", "rPart": ["(", "[+*/%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e]", "(", "[-]", ")", "?", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[\\\\\\\"\\'ntrbf0]", "|", "(", "[d]", "[0-9]", "[0-9]", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "universalOperator", "rPart": ["[-]"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Салчак Д.Э.","Collection":"413452514",{"_id": {"$oid": "67bf0fb7af563521c9d59b76"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bf77abaf563521c9d59f8e"}, "rules": "l1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", "|", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d1e1dae0b22203e7cbefdb"}, "rules": "I2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "decimal", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "real", "rPart": ["[-]", "?", "(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")"]}, {"lPart": "exp", "rPart": ["[-]", "?", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "[0-9]", "+", ")"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", ")"]}, {"lPart": "LogOp", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "const", "rPart": ["decimal", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "B", "rPart": ["(", "id", "|", "const", ")", "(", "op", "B", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "B", "\",\"", "id", "\")\"", "delim"]}, {"lPart": "OP", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "function", "|", "B", ")", "(", "OP", ")", "*"]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "B", "\")\"", "\"do\"", "\"{\"", "OP", "\"}\"", "(", "\"or\"", "\"do\"", "\"{\"", "OP", "\"}\"", ")", "?"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "OP", "\"}\"", "\"until\"", "\"(\"", "B", "\")\"", "(", "\"retire\"", "delim", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "B", "\"{\"", "switchblock", "(", "\"otherwise\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchblock", "rPart": ["\"when\"", "const", "\"then\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchblock", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "arglist", ")", "?", "\")\"", "\"{\"", "OP", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"decimal\"", "|", "\"real\"", "|", "\"exp\"", "|", "\"char\""]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "function"]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f6cba78558742cb4334ec6"}, "rules": "I3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "decimal", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "real", "rPart": ["[-]", "?", "(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")"]}, {"lPart": "exp", "rPart": ["[-]", "?", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "(", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", ")"]}, {"lPart": "LogOp", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "const", "rPart": ["decimal", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "B", "rPart": ["(", "id", "|", "const", ")", "(", "(", "op", "|", "comp", ")", "B", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "B", "\",\"", "id", "\")\"", "delim"]}, {"lPart": "OP", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "function", "|", "B", ")"]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "B", "\")\"", "\"do\"", "\"{\"", "OP", "\"}\"", "(", "\"or\"", "\"do\"", "\"{\"", "OP", "\"}\"", ")", "*"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "OP", "\"}\"", "\"until\"", "\"(\"", "B", "\")\"", "(", "\"retire\"", "delim", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "B", "\"{\"", "switchblock", "(", "\"otherwise\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchblock", "rPart": ["\"when\"", "const", "\"then\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchblock", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "arglist", ")", "?", "\")\"", "\"{\"", "OP", "+", "\"}\"", "\"->\"", "id", "delim"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"decimal\"", "|", "\"real\"", "|", "\"exp\"", "|", "\"char\""]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "function"]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680936c58558742cb4338dfc"}, "rules": "I4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "decimal", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "real", "rPart": ["[-]", "?", "(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")"]}, {"lPart": "exp", "rPart": ["[-]", "?", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "(", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", ")"]}, {"lPart": "LogOp", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "const", "rPart": ["decimal", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "B", "rPart": ["(", "id", "|", "const", ")", "(", "(", "op", "|", "comp", ")", "B", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "B", "\",\"", "id", "\")\"", "delim"]}, {"lPart": "OP", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "function", "|", "B", ")"]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "B", "\")\"", "\"do\"", "\"{\"", "OP", "\"}\"", "(", "\"or\"", "\"do\"", "\"{\"", "OP", "\"}\"", ")", "*"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "OP", "\"}\"", "\"until\"", "\"(\"", "B", "\")\"", "(", "\"retire\"", "delim", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "B", "\"{\"", "switchblock", "(", "\"otherwise\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchblock", "rPart": ["\"when\"", "const", "\"then\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchblock", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "arglist", ")", "?", "\")\"", "\"{\"", "OP", "+", "\"}\"", "\"->\"", "id", "delim"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"decimal\"", "|", "\"real\"", "|", "\"exp\"", "|", "\"char\""]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "function"]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": ""}}{"_id": {"$oid": "680ce27e8558742cb4339bb0"}, "rules": "I5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "decimal", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "real", "rPart": ["[-]", "?", "(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")"]}, {"lPart": "exp", "rPart": ["[-]", "?", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "(", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "comp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", ")"]}, {"lPart": "LogOp", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "const", "rPart": ["decimal", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "B", "rPart": ["(", "id", "|", "const", ")", "(", "(", "op", "|", "comp", ")", "B", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "B", "\",\"", "id", "\")\"", "delim"]}, {"lPart": "OP", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "function", "|", "B", ")"]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "B", "\")\"", "\"do\"", "\"{\"", "OP", "\"}\"", "(", "\"or\"", "\"do\"", "\"{\"", "OP", "\"}\"", ")", "*"]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "OP", "\"}\"", "\"until\"", "\"(\"", "B", "\")\"", "(", "\"retire\"", "delim", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "B", "\"{\"", "switchblock", "(", "\"otherwise\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchblock", "rPart": ["\"when\"", "const", "\"then\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchblock", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "arglist", ")", "?", "\")\"", "\"{\"", "OP", "+", "\"}\"", "\"->\"", "id", "delim"]}, {"lPart": "arglist", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "type", "rPart": ["\"decimal\"", "|", "\"real\"", "|", "\"exp\"", "|", "\"char\""]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "function"]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": ""}}{"_id": {"$oid": "680ce7858558742cb4339be5"}, "rules": "I6", "data": {"rList": [{"lPart": "program", "rPart": ["{whileCnt=0;}", "operator", "+"]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "loop", "|", "switch", "|", "function"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "B", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "\")\"", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "delim"]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "B", "\")\"", "\"do\"", "\"{\"", "OP", "\"}\"", "(", "\"or\"", "\"do\"", "\"{\"", "OP", "\"}\"", ")", "*"]}, {"lPart": "loop", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"loop\"", "\"{\"", "OP", "+", "{toPFR(\"Label0_\" +peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"}\"", "\"until\"", "\"(\"", "B", "{toPFR(\"Label1_\" +peek(ctlStk)); toPFR(\"JumpOnFalse\");}", "\")\"", "(", "{toPFR(\"labelLoopFalse\"+peek(ctlStk)); toPFR(\"JumpFalse\");}", "\"retire\"", "delim", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "B", "\"{\"", "switchblock", "(", "\"otherwise\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", ")", "?", "\"}\""]}, {"lPart": "function", "rPart": ["\"function\"", "{toPFR(\"function\");}", "\"(\"", "(", "arglist", ")", "?", "\")\"", "\"{\"", "OP", "+", "\"}\"", "\"->\"", "{toPFR(this.currentLexem[1]);}", "id", "delim"]}, {"lPart": "B", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "id", "{toPFR(opStk.pop());}", "|", "{toPFR(this.currentLexem[1]);}", "const", ")", "(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "op", "|", "comp", ")", "B", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "OP", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "function", "|", "B", ")"]}, {"lPart": "switchblock", "rPart": ["\"when\"", "const", "\"then\"", "(", "\"{\"", "OP", "\"}\"", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchblock", ")", "?"]}, {"lPart": "const", "rPart": ["decimal", "|", "real", "|", "exp", "|", "char"]}, {"lPart": "arglist", "rPart": ["type", "{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "type", "{toPFR(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "type", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "\"decimal\"", "|", "\"real\"", "|", "\"exp\"", "|", "\"char\"", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "decimal", "rPart": ["[-]", "?", "[0-9]", "+"]}, {"lPart": "real", "rPart": ["[-]", "?", "(", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", ")"]}, {"lPart": "exp", "rPart": ["[-]", "?", "(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[eE]", "[-]", "?", "(", "[0-9]", "+", ")", "?", ")"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "comp", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "LogOp", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord = false;\nvar whileCnt = 0;\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar ctlStk=[1]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\n\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n\n return 0;\n}\n"}}},
{"FIO":"Болотенко Н.А.","Collection":"451535135",{"_id": {"$oid": "67b87febce6dd03692d08d84"}, "rules": "лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z]", "*", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "WordForFormatting", "rPart": ["[\\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>=&|]", "|", "[<>!]", "[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Space", "rPart": ["[ ]", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b880a4ce6dd03692d08d89"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "-3", "deltat": 1000, "assist": 1}}{"_id": {"$oid": "67cbd20eaf563521c9d5c639"}, "rules": "лаб2", "data": {"rList": [{"lPart": "Expr", "rPart": ["(", "\"(\"", "BegExpr", "EndExpr", "?", "\")\"", "EndExpr", "?", ")", "|", "(", "BegExpr", "EndExpr", "?", ")"]}, {"lPart": "assig", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "Delimiter"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "(", "whenElse", "?", "|", "whenIfElse", "*", ")"]}, {"lPart": "BegExpr", "rPart": ["const", "|", "id"]}, {"lPart": "EndExpr", "rPart": ["SignOfOperation", "Expr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z]", "*", "[0-9]", "{0,3}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>=&|]", "|", "[<>!]", "[=]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "whenIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "whenElse", "?"]}, {"lPart": "whenElse", "rPart": ["\":\"", "\"{\"", "Operation", "+", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operation", "+", "\"end\""]}, {"lPart": "Operation", "rPart": ["loop", "|", "assig", "|", "cond", "|", "Leave", "|", "switch", "|", "fun"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "Delimiter"]}, {"lPart": "switch", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", ")", "*", "\"nooption\"", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", "\"end\""]}, {"lPart": "Main", "rPart": ["Operation", "*"]}, {"lPart": "Type", "rPart": ["\"bool\"", "|", "\"String\"", "|", "\"int\"", "|", "\"char\""]}, {"lPart": "fun", "rPart": ["Type", "*", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operation", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67df90854635a960233ac700"}, "rules": "лаб3", "data": {"rList": [{"lPart": "Expr", "rPart": ["(", "\"(\"", "BegExpr", "EndExpr", "?", "\")\"", "EndExpr", "?", ")", "|", "(", "BegExpr", "EndExpr", "?", ")"]}, {"lPart": "assig", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "Delimiter"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "(", "whenElse", "?", "|", "whenIfElse", "*", ")"]}, {"lPart": "BegExpr", "rPart": ["const", "|", "id"]}, {"lPart": "EndExpr", "rPart": ["SignOfOperation", "Expr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z]", "*", "[0-9]", "{0,3}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>=&|]", "|", "[<>!]", "[=]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "whenIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "whenElse", "?"]}, {"lPart": "whenElse", "rPart": ["\":\"", "\"{\"", "Operation", "+", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operation", "+", "\"end\""]}, {"lPart": "Operation", "rPart": ["loop", "|", "assig", "|", "cond", "|", "Leave", "|", "switch", "|", "fun"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "Delimiter"]}, {"lPart": "switch", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", ")", "*", "\"nooption\"", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", "\"end\""]}, {"lPart": "Main", "rPart": ["Operation", "*"]}, {"lPart": "Type", "rPart": ["\"bool\"", "|", "\"String\"", "|", "\"int\"", "|", "\"char\""]}, {"lPart": "fun", "rPart": ["Type", "*", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operation", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6803a6958558742cb43378fd"}, "rules": "лаб5", "data": {"rList": [{"lPart": "Expr", "rPart": ["(", "\"(\"", "BegExpr", "EndExpr", "?", "\")\"", "EndExpr", "?", ")", "|", "(", "BegExpr", "EndExpr", "?", ")"]}, {"lPart": "assig", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "Delimiter"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "(", "whenElse", "?", "|", "whenIfElse", "*", ")"]}, {"lPart": "BegExpr", "rPart": ["const", "|", "id"]}, {"lPart": "EndExpr", "rPart": ["SignOfOperation", "Expr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z]", "*", "[0-9]", "{0,3}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>=&|]", "|", "[<>!]", "[=]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "whenIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "whenElse", "?"]}, {"lPart": "whenElse", "rPart": ["\":\"", "\"{\"", "Operation", "+", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operation", "+", "\"end\""]}, {"lPart": "Operation", "rPart": ["loop", "|", "assig", "|", "cond", "|", "Leave", "|", "switch", "|", "fun"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "Delimiter"]}, {"lPart": "switch", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", ")", "*", "\"nooption\"", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", "\"end\""]}, {"lPart": "Main", "rPart": ["Operation", "*"]}, {"lPart": "Type", "rPart": ["\"bool\"", "|", "\"String\"", "|", "\"int\"", "|", "\"char\""]}, {"lPart": "fun", "rPart": ["Type", "*", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operation", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681346f58558742cb433ab74"}, "rules": "лаб6", "data": {"rList": [{"lPart": "Main", "rPart": ["{structCnt=0; ifextCnt = 0; swtextCnt =0;}", "Operation", "*"]}, {"lPart": "Operation", "rPart": ["loop", "|", "assig", "|", "cond", "|", "Leave", "|", "switch", "|", "fun"]}, {"lPart": "loop", "rPart": ["{ctlStk.push(++structCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "Operation", "+", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"end\""]}, {"lPart": "assig", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"let\");}", "Delimiter"]}, {"lPart": "cond", "rPart": ["\"?\"", "\"(\"", "Expr", "{ ctlStk.push(++structCnt); toPFR(\"label2_\" + peek(ctlStk) + \" JmpOnFalse\"); }", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "{ifextStk.push(++ifextCnt); toPFR(\"Label3_\" + peek(ifextStk) + \" Jmp\"); toPFR(\"label2_\" + ctlStk.pop() + \":\"); }", "(", "whenIfElse", "|", "whenElse", ")", "?", "{ toPFR(\"label3_\" + ifextStk.pop() + \":\"); }"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "Delimiter"]}, {"lPart": "switch", "rPart": ["\"choice\"", "{swtextStk.push(++swtextCnt); ctlStk.push(++structCnt); setLast();}", "Expr", "{formLast();}", "(", "{toPFR(\"label4_\" + ctlStk.pop() + \":\");}", "\"option\"", "{toPFR(peek(lastWord) + this.currentLexem[1] + \" =\"); ctlStk.push(++structCnt); toPFR(\"label4_\" + peek(ctlStk) + \" JmpOnFalse\");}", "const", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", "{toPFR(\"label5_\" + peek(swtextStk) + \" Jmp\");}", ")", "*", "{toPFR(\"label4_\" + ctlStk.pop() + \":\");}", "\"nooption\"", "\":\"", "Operation", "*", "\"fin\"", "Delimiter", "\"end\"", "{ lastWord.pop(); toPFR(\"label5_\" + swtextStk.pop() + \":\"); }"]}, {"lPart": "fun", "rPart": ["Type", "*", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operation", "*", "\"}\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const", "|", "{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "SignOfOperation", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Type", "rPart": ["\"bool\"", "|", "\"String\"", "|", "\"int\"", "|", "\"char\""]}, {"lPart": "whenElse", "rPart": ["\":\"", "\"{\"", "Operation", "+", "\"}\""]}, {"lPart": "whenIfElse", "rPart": ["\"?:\"", "\"(\"", "Expr", "{ ctlStk.push(++structCnt); toPFR(\"label2_\" + peek(ctlStk) + \" JmpOnFalse\"); }", "\")\"", "\"{\"", "Operation", "+", "\"}\"", "{ toPFR(\"Label3_\" + peek(ifextStk) + \" Jmp\"); toPFR(\"label2_\" + ctlStk.pop() + \":\"); }", "(", "whenIfElse", "|", "whenElse", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z]", "*", "[0-9]", "{0,3}"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>=&|]", "|", "[<>!]", "[=]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer(){\n this.history = [];\n this.lastLength = 0;\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar ifextStk = [];\nvar swtextStk = [];\nvar lastWord = [];\nvar structCnt=0;\nvar ifextCnt = 0;\nvar swtextCnt = 0;\n\nfunction setLast(){\n tracer.lastLength = tracer.history.length;\n}\n\nfunction formLast() {\n  var r = \"\";\n  var removed = tracer.history.splice(tracer.lastLength);\n  for (var i = 0; i < removed.length; i++) {\n    r += \" \" + removed[i];\n  }\n  r += \" \";\n  lastWord.push(r);\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Суворов А.К.","Collection":"411445423",{"_id": {"$oid": "67d82382e0b22203e7cc0dae"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67d8238ae0b22203e7cc0db0"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[\\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "\\.[0-9]+)"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[eE]", "[+-]", "?", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["const '.'"]}], "extension": "4.\t<пБ><пЦ>\t(например: v5, i731, ArT19, …)\n1.\tцелые по основанию 10; вещественные и экспоненциальные; символьные\n1.\tlet <И> on <В> ;\n4.\tat <В> do <ОБ> [ or do <ОБ> ]\n4.\tforeach ( <И> in <K> : <K> ) <ОБ> \t\t\t[ stop; ]\n5.\tchoice <В> option <К> : <ПО> [ fin; ] [ option … ] … [ nooption <ПО> ] end\n4.\t<И> => [ as <Тип> ] ( [ <АргЛист> ] ) <Тело>\t(например i1let => as char () {…} )\n2.\tМогут присутствовать, но не обязательны\n3.\tТетрады:\t<Метка><Код><Оп><Оп>\n"}}{"_id": {"$oid": "67d82b5de0b22203e7cc0de2"}, "rules": "лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "let", "rPart": ["\"let\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67dacfe9e0b22203e7cc16ed"}, "rules": "лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "let", "rPart": ["\"let\""]}, {"lPart": "on", "rPart": ["\"on\""]}, {"lPart": "at", "rPart": ["\"at\""]}, {"lPart": "do", "rPart": ["\"do\""]}, {"lPart": "orDo", "rPart": ["\"or do\""]}, {"lPart": "foreach", "rPart": ["\"foreach\""]}, {"lPart": "in", "rPart": ["\"in\""]}, {"lPart": "colon", "rPart": ["\":\""]}, {"lPart": "stop", "rPart": ["\"stop\""]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "choice", "rPart": ["\"choice\""]}, {"lPart": "option", "rPart": ["\"option\""]}, {"lPart": "fin", "rPart": ["\"fin\""]}, {"lPart": "nooption", "rPart": ["\"nooption\""]}, {"lPart": "end", "rPart": ["\"end\""]}, {"lPart": "fAssign", "rPart": ["\"=>\""]}, {"lPart": "as", "rPart": ["\"as\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "binarOper", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\""]}, {"lPart": "unarOper", "rPart": ["\"!\"", "|", "\"++\"", "|", "\"--\""]}, {"lPart": "assignment", "rPart": ["let", "(", "type", ")", "?", "id", "on", "const", "semicolon"]}, {"lPart": "comment", "rPart": ["(", "[//]", "[*]", "[]", "*", "[*]", "[//]", ")"]}, {"lPart": "comment", "rPart": ["(", "[//]", "[//]", "[]", "*", "[\\n]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fd26098558742cb4336aef"}, "rules": "лаб3", "data": {"rList": [{"lPart": "assignment", "rPart": ["\"let\"", "(", "type", ")", "?", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "universSign", "|", "unarSign", ")", "?", "(", "id", "|", "const", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "binarSign", "rPart": ["\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\""]}, {"lPart": "unarSign", "rPart": ["\"!\""]}, {"lPart": "universSign", "rPart": ["\"-\"", "|", "\"+\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binarSign", "|", "universSign", ")", "Expr", ")", "?"]}, {"lPart": "ifOper", "rPart": ["\"at\"", "Expr", "\"do\"", "BlockOper", "(", "\"or\"", "\"do\"", "BlockOper", ")", "?"]}, {"lPart": "OneOper", "rPart": ["assignment", "|", "ifOper", "|", "foreachOper", "|", "(", "(", "\"stop\"", "|", "\"fin\"", ")", "\";\"", ")", "|", "choiceOper", "|", "FuncOper"]}, {"lPart": "BlockOper", "rPart": ["(", "OneOper", ")", "|", "\"{\"", "(", "OneOper", ")", "*", "\"}\""]}, {"lPart": "foreachOper", "rPart": ["\"foreach\"", "\"(\"", "(", "type", ")", "?", "id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "BlockOper"]}, {"lPart": "choiceOper", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "BlockOper", "?", ")", "*", "(", "\"nooption\"", "BlockOper", "?", ")", "?", "\"end\""]}, {"lPart": "FuncOper", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOper", "*", "\"}\""]}, {"lPart": "typeId", "rPart": ["(", "type", ")", "?", "id"]}, {"lPart": "Sample", "rPart": ["FuncOper", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fd403b8558742cb4336bab"}, "rules": "лаб4", "data": {"rList": [{"lPart": "assignment", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "universSign", "|", "unarSign", ")", "?", "(", "id", "(", "\"(\"", "(", "(", "Expr", ")", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "binarSign", "rPart": ["\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\""]}, {"lPart": "unarSign", "rPart": ["\"!\""]}, {"lPart": "universSign", "rPart": ["\"-\"", "|", "\"+\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binarSign", "|", "universSign", ")", "Expr", ")", "?"]}, {"lPart": "ifOper", "rPart": ["\"at\"", "Expr", "\"do\"", "BlockOper", "ifOperFix"]}, {"lPart": "OneOper", "rPart": ["assignment", "|", "ifOper", "|", "foreachOper", "|", "(", "(", "\"stop\"", "|", "\"fin\"", "|", "(", "\"return\"", "Expr", ")", ")", "\";\"", ")", "|", "choiceOper", "|", "initOper"]}, {"lPart": "BlockOper", "rPart": ["(", "OneOper", ")", "|", "\"{\"", "(", "OneOper", ")", "*", "\"}\""]}, {"lPart": "foreachOper", "rPart": ["\"foreach\"", "\"(\"", "(", "type", ")", "?", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "BlockOper"]}, {"lPart": "choiceOper", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "BlockOper", "*", ")", "*", "(", "\"nooption\"", "BlockOper", "*", ")", "?", "\"end\""]}, {"lPart": "FuncOper", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOper", "*", "\"}\""]}, {"lPart": "typeId", "rPart": ["(", "type", ")", "?", "id"]}, {"lPart": "Sample", "rPart": ["FuncOper", "+"]}, {"lPart": "ifOperFix", "rPart": ["\"or\"", "\"do\"", "BlockOper"]}, {"lPart": "ifOperFix", "rPart": ["~", "\"or\""]}, {"lPart": "initOper", "rPart": ["id", "\"set\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ffeac38558742cb4337362"}, "rules": "лаб3тест", "data": {"rList": [{"lPart": "Sample", "rPart": ["FuncOper", "*"]}, {"lPart": "FuncOper", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOper", "*", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "BlockOper", "rPart": ["(", "OneOper", ")", "|", "\"{\"", "(", "OneOper", ")", "*", "\"}\""]}, {"lPart": "typeId", "rPart": ["(", "type", ")", "?", "id"]}, {"lPart": "OneOper", "rPart": ["assignment", "|", "ifOper", "|", "foreachOper", "|", "(", "(", "\"stop\"", "|", "\"fin\"", ")", "\";\"", ")", "|", "choiceOper", "|", "FuncOper"]}, {"lPart": "assignment", "rPart": ["\"let\"", "(", "type", ")", "?", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "ifOper", "rPart": ["\"at\"", "Expr", "\"do\"", "BlockOper", "(", "\"or\"", "\"do\"", "BlockOper", ")", "?"]}, {"lPart": "foreachOper", "rPart": ["\"foreach\"", "\"(\"", "(", "type", ")", "?", "id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "BlockOper"]}, {"lPart": "choiceOper", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "BlockOper", "?", ")", "*", "(", "\"nooption\"", "BlockOper", "?", ")", "?", "\"end\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "universSign", "|", "unarSign", ")", "?", "(", "id", "|", "const", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binarSign", "|", "universSign", ")", "Expr", ")", "?"]}, {"lPart": "universSign", "rPart": ["\"-\"", "|", "\"+\""]}, {"lPart": "unarSign", "rPart": ["\"!\""]}, {"lPart": "binarSign", "rPart": ["\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fff46e8558742cb43373a3"}, "rules": "лаб4тест", "data": {"rList": [{"lPart": "assignment", "rPart": ["\"let\"", "(", "type", ")", "?", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[*]", "[]", "*", "[*]", "[/]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", ")", "{ignoreLastWord=true;}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["(", "universSign", "|", "unarSign", ")", "?", "(", "id", "|", "const", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "binarSign", "rPart": ["\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\""]}, {"lPart": "unarSign", "rPart": ["\"!\""]}, {"lPart": "universSign", "rPart": ["\"-\"", "|", "\"+\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "binarSign", "|", "universSign", ")", "Expr", ")", "?"]}, {"lPart": "ifOper", "rPart": ["\"at\"", "Expr", "\"do\"", "BlockOper", "ifOperFix"]}, {"lPart": "OneOper", "rPart": ["assignment", "|", "ifOper", "|", "foreachOper", "|", "(", "(", "\"stop\"", "|", "\"fin\"", ")", "\";\"", ")", "|", "choiceOper", "|", "FuncOper"]}, {"lPart": "BlockOper", "rPart": ["(", "OneOper", ")", "|", "\"{\"", "(", "OneOper", ")", "*", "\"}\""]}, {"lPart": "foreachOper", "rPart": ["\"foreach\"", "\"(\"", "(", "type", ")", "?", "id", "\"in\"", "Expr", "\":\"", "Expr", "\")\"", "BlockOper"]}, {"lPart": "choiceOper", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "BlockOper", "?", ")", "*", "(", "\"nooption\"", "BlockOper", "?", ")", "?", "\"end\""]}, {"lPart": "FuncOper", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "BlockOper", "*", "\"}\""]}, {"lPart": "typeId", "rPart": ["(", "type", ")", "?", "id"]}, {"lPart": "Sample", "rPart": ["FuncOper", "*"]}, {"lPart": "ifOperFix", "rPart": ["\"or\"", "\"do\"", "BlockOper"]}, {"lPart": "ifOperFix", "rPart": ["~", "\"or\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Киселев И.К.","Collection":"241332111",{"_id": {"$oid": "67adc485ce6dd03692d07a66"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67adc499ce6dd03692d07a69"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67adc4c0ce6dd03692d07a6c"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c6ab1baf563521c9d5b9be"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "oct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "type", "rPart": ["\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"oct\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "op", "Expr", ")", "?"]}, {"lPart": "LogExpr", "rPart": ["(", "id", "|", "const", ")", "logOp", "(", "id", "|", "const", ")"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Cond", "rPart": ["\"in\"", "\"(\"", "LogExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "CondElse", ")", "?"]}, {"lPart": "block", "rPart": ["(", "Assign", "|", "Expr", "|", "Loop", "|", "Switch", "|", "Cond", ")", "(", "block", ")", "?"]}, {"lPart": "CondElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "LogExpr", "\")\"", "\"do\"", "\"{\"", "loopBlock", "\"}\""]}, {"lPart": "loopBlock", "rPart": ["(", "block", ")", "(", "\"leave\"", "\";\"", ")", "?", "(", "loopBlock", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "(", "block", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "(", "block", ")", "?", "(", "\"exit\"", "\";\"", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "Function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"}\""]}, {"lPart": "const", "rPart": ["real", "|", "char", "|", "string", "|", "bin", "|", "oct"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d963c8e0b22203e7cc10ed"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "oct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "type", "rPart": ["\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"oct\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "op", "Expr", ")", "?"]}, {"lPart": "LogExpr", "rPart": ["(", "id", "|", "const", ")", "logOp", "(", "id", "|", "const", ")"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delim"]}, {"lPart": "Cond", "rPart": ["\"in\"", "\"(\"", "LogExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "CondElse", ")", "?"]}, {"lPart": "block", "rPart": ["(", "Assign", "|", "Loop", "|", "Switch", "|", "Cond", "|", "leave", ")", "(", "block", ")", "?"]}, {"lPart": "CondElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "LogExpr", "\")\"", "\"do\"", "\"{\"", "loopBlock", "\"}\""]}, {"lPart": "loopBlock", "rPart": ["(", "Assign", "|", "Loop", "|", "Switch", "|", "Cond", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "(", "block", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "(", "block", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "Function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"return\"", "Expr", "delim", "\"}\""]}, {"lPart": "const", "rPart": ["real", "|", "char", "|", "string", "|", "bin", "|", "oct"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "Cond", "|", "Switch", "|", "Function", "|", "Loop"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "leave", "rPart": ["\"leave\"", "delim"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67dae432e0b22203e7cc1896"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "oct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "type", "rPart": ["\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"oct\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "op", "Expr", ")", "?"]}, {"lPart": "LogExpr", "rPart": ["(", "id", "|", "const", ")", "logOp", "(", "id", "|", "const", ")"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delim"]}, {"lPart": "Cond", "rPart": ["\"in\"", "\"(\"", "LogExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "CondElse", ")", "?"]}, {"lPart": "block", "rPart": ["(", "Assign", "|", "Loop", "|", "Switch", "|", "Cond", "|", "leave", ")", "(", "block", ")", "?"]}, {"lPart": "CondElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "LogExpr", "\")\"", "\"do\"", "\"{\"", "loopBlock", "\"}\""]}, {"lPart": "loopBlock", "rPart": ["(", "Assign", "|", "Loop", "|", "Switch", "|", "Cond", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "(", "block", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "(", "block", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "Function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"return\"", "Expr", "delim", "\"}\""]}, {"lPart": "const", "rPart": ["real", "|", "char", "|", "string", "|", "bin", "|", "oct"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "Cond", "|", "Switch", "|", "Function", "|", "Loop"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "leave", "rPart": ["\"leave\"", "delim"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fe36058558742cb4336d40"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "op", "rPart": ["[-+*/]"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "oct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "type", "rPart": ["\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"oct\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "op", "Expr", ")", "?"]}, {"lPart": "LogExpr", "rPart": ["(", "id", "|", "const", ")", "logOp", "(", "id", "|", "const", ")"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delim"]}, {"lPart": "Cond", "rPart": ["\"in\"", "\"(\"", "LogExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "CondElse", ")", "?"]}, {"lPart": "block", "rPart": ["(", "Assign", "|", "Loop", "|", "Switch", "|", "Cond", "|", "leave", ")", "(", "block", ")", "?"]}, {"lPart": "CondElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "Loop", "rPart": ["\"while\"", "\"(\"", "LogExpr", "\")\"", "\"do\"", "\"{\"", "loopBlock", "\"}\""]}, {"lPart": "loopBlock", "rPart": ["(", "Assign", "|", "Loop", "|", "Switch", "|", "Cond", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "(", "block", ")", "?", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "(", "block", ")", "?", "(", "\"exit\"", "delim", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "Function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"return\"", "Expr", "delim", "\"}\""]}, {"lPart": "const", "rPart": ["real", "|", "char", "|", "string", "|", "bin", "|", "oct"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "Cond", "|", "Switch", "|", "Function", "|", "Loop"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "leave", "rPart": ["\"leave\"", "delim"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6819d1418558742cb433beb9"}, "rules": "lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[']", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "?", "[']"]}, {"lPart": "op", "rPart": ["[+*/%]"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"]", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "oct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "unaryOp", "rPart": ["[!]"]}, {"lPart": "minusOp", "rPart": ["[-]"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Program", "rPart": ["{whileCnt=0;}", "Function", "+"]}, {"lPart": "Function", "rPart": ["type", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["declaration", "|", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "leave", "|", "exit", "|", "return", "|", "funcCall"]}, {"lPart": "declaration", "rPart": ["type", "id", "(", "\",\"", "id", ")", "*", "delim"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"bin\"", "|", "\"oct\"", "|", "\"string\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delim"]}, {"lPart": "Expr", "rPart": ["(", "unaryOp", "|", "minusOp", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const", "|", "(", "id", "(", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?", ")", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "char", "|", "string", "|", "bin", "|", "oct"]}, {"lPart": "EndExpr", "rPart": ["(", "op", "|", "logOp", "|", "minusOp", ")", "Expr"]}, {"lPart": "cond", "rPart": ["\"in\"", "Expr", "\"then\"", "OB", "(", "\"not\"", "OB", ")", "?"]}, {"lPart": "OB", "rPart": ["\"{\"", "(", "Operator", ")", "+", "\"}\""]}, {"lPart": "loop", "rPart": ["\"while\"", "Expr", "\"do\"", "OB"]}, {"lPart": "switch", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "OB", "*", ")", "*", "(", "\"otherwise\"", "OB", "*", ")", "?", "\"}\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "delim"]}, {"lPart": "exit", "rPart": ["\"exit\"", "delim"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "delim"]}, {"lPart": "funcCall", "rPart": ["id", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", "delim"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "681af8988558742cb433c9ae"}, "rules": "Sample4", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "681b1c588558742cb433cabe"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Каляда А.В.","Collection":"544335315",{"_id": {"$oid": "67bdc306af563521c9d592c8"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bdc35daf563521c9d592d0"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "constEight", "rPart": ["[8]", "[_]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><\\[\\]]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d183a1af563521c9d5e2d0"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "constEight", "rPart": ["[8]", "[_]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "+", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binarysign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e511334635a960233aeafc"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "constEight", "rPart": ["[8]", "[_]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binarysign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logicalsign", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constEight", "|", "char", "|", "string"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constEight"]}, {"lPart": "Unary", "rPart": ["(", "unarsign", "|", "minus", ")"]}, {"lPart": "Binary", "rPart": ["binarysign", "|", "logicalsign", "|", "minus"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperLeave"]}, {"lPart": "OperAssign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperCycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Statement"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "OperLeave", "rPart": ["\"leave\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a2ca18558742cb43394e8"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[_]", "[0-1]", "+"]}, {"lPart": "constEight", "rPart": ["[8]", "[_]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binarysign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logicalsign", "rPart": ["(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constEight", "|", "char", "|", "string"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constEight"]}, {"lPart": "Unary", "rPart": ["(", "unarsign", "|", "minus", ")"]}, {"lPart": "Binary", "rPart": ["binarysign", "|", "logicalsign", "|", "minus"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperLeaveFin", "|", "OperatorSwitch", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperCycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Statement"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "OperLeaveFin", "rPart": ["\"leave\"", "\";\"", "|", "\"fin\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "OperatorSwitch", "rPart": ["\"choice\"", "Expr", "SwitchOp", "*", "SwitchNoop", "\"end\""]}, {"lPart": "SwitchOp", "rPart": ["\"option\"", "SignedConst", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "SwitchNoop", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "SignedConst", "rPart": ["(", "minus", ")", "?", "ConstNum"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "Args", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Func", "rPart": ["id", "\":=\"", "Type", "\"(\"", "Args", "\")\"", "FuncBody", "\";\""]}, {"lPart": "FuncBody", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Prog", "rPart": ["Func", "+"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Марков Д.А.","Collection":"254135213",{"_id": {"$oid": "67add622ce6dd03692d07ab1"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 3800, "assist": 1}}{"_id": {"$oid": "67b1bfa2ce6dd03692d07eaf"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cc1a2faf563521c9d5c764"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "(", "[]", "|", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "{1,1}", "[']"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67deaed04635a960233ac409"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "MathSigns", "rPart": ["[+*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "(", "[]", "|", "[\\\\]", "[\"'\\\\rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Brackets", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", ")"]}, {"lPart": "Unary", "rPart": ["[-!]", "?"]}, {"lPart": "Logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "Prog", "rPart": ["(", "OperIf", "|", "OperC", "|", "Assign", "|", "\"leave;\"", ")", "+"]}, {"lPart": "OperIf", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"else\"", "\"{\"", "Prog", "\"}\"", ")", "?"]}, {"lPart": "Assign", "rPart": ["Type", "?", "id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"string\""]}, {"lPart": "Consts", "rPart": ["Const", "|", "ConstFlt", "|", "ConstStr", "|", "ConstSym"]}, {"lPart": "Expr", "rPart": ["Unary", "*", "BExpr", "EExpr", "?"]}, {"lPart": "BExpr", "rPart": ["id", "|", "Consts", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "MathSigns", "Expr", ")", "|", "(", "Compare", "Expr", ")", "|", "(", "Logic", "Expr", ")"]}, {"lPart": "OperC", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Prog", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f1365ba600182c7517b582"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "MathSigns", "rPart": ["[*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "(", "[]", "|", "[\\\\]", "[\"'\\\\rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "Unary", "rPart": ["[!]"]}, {"lPart": "Logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "UnMath", "rPart": ["[-+]"]}, {"lPart": "binOperation", "rPart": ["MathSigns", "|", "Compare", "|", "Logic"]}, {"lPart": "EExpr", "rPart": ["(", "(", "binOperation", "|", "UnMath", ")", "Expr", ")", "?"]}, {"lPart": "BExpr", "rPart": ["(", "Type", "?", "id", "(", "\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?", "|", "Consts", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "Expr", "rPart": ["(", "UnMath", "|", "Unary", ")", "?", "BExpr", "EExpr"]}, {"lPart": "Prog", "rPart": ["Operators", "+"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["Type", "id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Operators", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operators"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operators"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Consts", "\":\"", "Operator", "+", ")", "+", "PartNoOption", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "PartNoOption", "rPart": ["\"nooption\"", "Operator", "+"]}, {"lPart": "Operator", "rPart": ["id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "Operators"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "PartNoOption", "rPart": ["~", "\"nooption\""]}, {"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Consts", "rPart": ["Const", "|", "ConstFlt", "|", "ConstStr", "|", "ConstSym"]}, {"lPart": "InnerComm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680364f78558742cb4337805"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "MathSigns", "rPart": ["[*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "(", "[]", "|", "[\\\\]", "[\"'\\\\rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "Unary", "rPart": ["[!]"]}, {"lPart": "Logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "UnMath", "rPart": ["[-+]"]}, {"lPart": "binOperation", "rPart": ["MathSigns", "|", "Compare", "|", "Logic"]}, {"lPart": "EExpr", "rPart": ["(", "(", "binOperation", "|", "UnMath", ")", "Expr", ")", "?"]}, {"lPart": "BExpr", "rPart": ["(", "id", "(", "ParamList", ")", "?", "|", "Consts", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "Expr", "rPart": ["(", "UnMath", "|", "Unary", ")", "?", "BExpr", "EExpr"]}, {"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "(", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["Type", "id", "(", "\":=\"", "Expr", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Operators", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operators"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operators"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Consts", "\":\"", "Operator", "+", ")", "+", "PartNoOption", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "PartNoOption", "rPart": ["\"nooption\"", "Operator", "+"]}, {"lPart": "Func", "rPart": ["id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "Type", ")", "Operators"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Consts", "rPart": ["Const", "|", "ConstFlt", "|", "ConstStr", "|", "ConstSym"]}, {"lPart": "InnerComm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["id", "ParamList", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6818ac4c8558742cb433bad6"}, "rules": "lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "(", "[]", "|", "[\\\\]", "[\"'\\\\rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "Compare", "|", "binaryLogic"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Constant", "rPart": ["Const", "|", "ConstFlt", "|", "ConstStr", "|", "ConstSym"]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Assign", "rPart": ["\":=\"", "Expr"]}, {"lPart": "Declare", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "BExpr", "rPart": ["Unary", "?", "(", "id", "(", "ParamList", ")", "?", "|", "Constant", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EExpr", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expr", ")", "?"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "BreakSwitch", "|", "Return", "|", "Statement", "|", "Declare", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch", "|", "(", "Cycle", "|", "BreakCycle", ")"]}, {"lPart": "Func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "Type", ")", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "BreakSwitch", "rPart": ["\"fin\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?"]}, {"lPart": "Conditional", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"else\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"choice\"", "Expr", "(", "SwitchCase", "*", "SwitchDefault", ")", "*", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"option\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDefault", "rPart": ["\"nooption\"", "Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"call\"", "id", "ParamList", "\";\""]}, {"lPart": "InnerComm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "StatementTail", "rPart": ["Assign", "|", "ParamList"]}, {"lPart": "Statement", "rPart": ["id", "StatementTail"]}, {"lPart": "BreakCycle", "rPart": ["\"leave\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681a65558558742cb433c788"}, "rules": "lab61", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFlt", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "ConstSym", "rPart": ["[']", "(", "(", "[]", "|", "[\\\\]", "[\"'\\\\rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", ")", "|", "(", "[<]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "Compare", "|", "binaryLogic"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Constant", "rPart": ["Const", "|", "ConstFlt", "|", "ConstStr", "|", "ConstSym"]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Prog", "rPart": ["{whileCnt=0;}", "Func", "+"]}, {"lPart": "Assign", "rPart": ["\":=\"", "Expr"]}, {"lPart": "Declare", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "EExpr", "rPart": ["{ if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem [1];)}", "(", "Binary", "|", "unaryMath", ")", "Expr", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "BreakSwitch", "|", "Return", "|", "Statement", "|", "Declare", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch", "|", "(", "Cycle", "|", "BreakCycle", ")"]}, {"lPart": "Func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "Type", ")", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "BreakSwitch", "rPart": ["\"fin\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?"]}, {"lPart": "Conditional", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"else\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"choice\"", "Expr", "(", "SwitchCase", "*", "SwitchDefault", ")", "*", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"option\"", "Constant", "\":\"", "Operator", "*"]}, {"lPart": "SwitchDefault", "rPart": ["\"nooption\"", "Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"call\"", "id", "ParamList", "\";\""]}, {"lPart": "InnerComm", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "StatementTail", "rPart": ["(", "Assign", ")", "|", "ParamList"]}, {"lPart": "Statement", "rPart": ["id", "StatementTail"]}, {"lPart": "BreakCycle", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "BExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "ParamList", ")", "?"]}, {"lPart": "BExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constant"]}, {"lPart": "BExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "\")\"", "{opStk.pop();}"]}, {"lPart": "Expr", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "Unary", "BExpr", "{toPFR(\"Unary\"+unaryStack.pop());}", "EExpr"]}, {"lPart": "EExpr", "rPart": []}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Ахметчин В.К.","Collection":"225252435",{"_id": {"$oid": "67bc4b15af563521c9d58dbc"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c07f4daf563521c9d5a4da"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "(", "[0-9]", "[a-zA-Z]", ")", "*", ")", "|", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[.]", "[0-9]", "*", "[1-9]", ")", "|", "(", "[1-9]", "[0-9]", "*", "[.]", "[0-9]", "*", "[1-9]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "(", "[0-1]", ")", "|", "(", "[1]", "[0-1]", "*", ")"]}, {"lPart": "constQuad", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "constOct", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "constDec", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "{0,1}", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{1,2}", "[']"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*=!<>/]", "[=]", "?"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2fe60e0b22203e7cbf6d9"}, "rules": "Lab21", "data": {"rList": [{"lPart": "prog", "rPart": ["Operators", "+"]}, {"lPart": "Operators", "rPart": ["(", "assignOperator", "|", "condOperator", "|", "loopOperator", "|", "compOperator", ")"]}, {"lPart": "assignOperator", "rPart": ["(", "\"put\"", "statement", "\"to\"", "id", ")"]}, {"lPart": "condOperator", "rPart": ["\"when\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "Operators", ")", "*", "\"}\""]}, {"lPart": "loopOperator", "rPart": ["\"loop\"", "\"{\"", "(", "(", "Operators", ")", "*", "\"retire\"", ")", "*", "\"}\"", "\"until\"", "\"(\"", "statement", "\")\""]}, {"lPart": "compOperator", "rPart": ["\"case\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "\"when\"", "\"(\"", "const", "\")\"", "\"{\"", "(", "Operators", ")", "*", "\"exit\"", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "(", "Operators", ")", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "statement", "rPart": ["(", "id", "|", "const", ")", "(", "logicalSign", "(", "id", "|", "const", ")", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "(", "[0-9]", "[a-zA-Z]", ")", "*", ")", "|", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[.]", "[0-9]", "*", "[1-9]", ")", "|", "(", "[1-9]", "[0-9]", "*", "[.]", "[0-9]", "*", "[1-9]", ")"]}, {"lPart": "const", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[0-1]", ")", "|", "(", "[1]", "[0-1]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{1,2}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "const", "rPart": ["(", "[f]", "[a]", "[l]", "[s]", "[e]", ")", "|", "(", "[t]", "[r]", "[u]", "[e]", ")"]}, {"lPart": "logicalSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicalSign", "rPart": ["[<>]"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "sign", "rPart": ["[+]", "[+]"]}, {"lPart": "sign", "rPart": ["[-]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e54da94635a960233aed3e"}, "rules": "Lab3", "data": {"rList": [{"lPart": "prog", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"as\"", "DataType", "\"(\"", "Argument", "*", "\")\"", "\"{\"", "Operators", "*", "\"}\""]}, {"lPart": "DataType", "rPart": ["(", "\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\"", "|", "\"bin\"", "|", "\"oct\"", "|", "\"quad\"", "|", "\"void\"", ")"]}, {"lPart": "Argument", "rPart": ["DataType", "id"]}, {"lPart": "Operators", "rPart": ["(", "assignOperator", "|", "condOperator", "|", "loopOperator", "|", "compOperator", "|", "InitOperation", "|", "ReturnOperator", "|", "BreakOperator", ")", "\";\""]}, {"lPart": "assignOperator", "rPart": ["(", "\"put\"", "statement", "\"to\"", "id", ")"]}, {"lPart": "condOperator", "rPart": ["\"when\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "Operators", ")", "*", "\"}\"", "(", "\"other\"", "\"{\"", "Operators", "*", "\"}\"", ")", "?"]}, {"lPart": "loopOperator", "rPart": ["\"loop\"", "\"{\"", "(", "Operators", ")", "*", "\"}\"", "\"until\"", "\"(\"", "statement", "\")\""]}, {"lPart": "compOperator", "rPart": ["\"case\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "\"when\"", "\"(\"", "const", "\")\"", "\"{\"", "(", "Operators", ")", "*", "\"exit\"", "\";\"", "\"}\"", ")", "+", "(", "\"otherwise\"", "\"{\"", "(", "Operators", ")", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "InitOperation", "rPart": ["DataType", "id", "\"=\"", "(", "statement", ")"]}, {"lPart": "ReturnOperator", "rPart": ["\"return\"", "statement"]}, {"lPart": "BreakOperator", "rPart": ["\"retire\""]}, {"lPart": "statement", "rPart": ["sBeg", "sEnd"]}, {"lPart": "sBeg", "rPart": ["AmbivalentlyOperation", "?", "(", "id", "|", "const", ")"]}, {"lPart": "sBeg", "rPart": ["\"(\"", "statement", "\")\""]}, {"lPart": "sBeg", "rPart": ["\".\"", "id", "\"(\"", "(", "(", "id", "|", "const", ")", "(", "\",\"", "(", "id", "|", "const", ")", ")", "*", ")", "?", "\")\""]}, {"lPart": "sEnd", "rPart": ["(", "BinaryOperation", "statement", ")", "?"]}, {"lPart": "BinaryOperation", "rPart": ["sign", "|", "logicalSign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "(", "[0-9]", "[a-zA-Z]", ")", "*", ")", "|", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[.]", "[0-9]", "*", "[1-9]", ")", "|", "(", "[1-9]", "[0-9]", "*", "[.]", "[0-9]", "*", "[1-9]", ")"]}, {"lPart": "const", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[0-1]", ")", "|", "(", "[1]", "[0-1]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{1,2}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "AmbivalentlyOperation", "rPart": ["[-]"]}, {"lPart": "sign", "rPart": ["[+*/=]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "logicalSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "logicalSign", "rPart": ["[<>]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "UnaryOperation", "rPart": ["(", "[!]", ")", "|", "(", "[+]", "[+]", ")", "(", "[-]", "[-]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6808f3e38558742cb4338bf5"}, "rules": "Lab4", "data": {"rList": [{"lPart": "prog", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "argList", "FuncBody"]}, {"lPart": "argList", "rPart": ["\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "FuncBody", "rPart": ["\"{\"", "Operators", "*", "\"}\""]}, {"lPart": "Operators", "rPart": ["(", "assignOperator", "|", "condOperator", "|", "loopOperator", "|", "compOperator", "|", "InitOperation", "|", "ReturnOperator", "|", "BreakOperator", "|", "ExitOperator", ")"]}, {"lPart": "assignOperator", "rPart": ["(", "\"put\"", "statement", "\"to\"", "id", "\";\"", ")"]}, {"lPart": "condOperator", "rPart": ["\"when\"", "\"(\"", "statement", "\")\"", "OB", "Else"]}, {"lPart": "loopOperator", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "statement", "\")\""]}, {"lPart": "compOperator", "rPart": ["\"case\"", "\"(\"", "statement", "\")\"", "\"{\"", "(", "\"when\"", "\"(\"", "const", "\")\"", "OB", ")", "+", "(", "\"otherwise\"", "OB", ")", "?", "\"}\""]}, {"lPart": "InitOperation", "rPart": ["id", "\"=\"", "(", "statement", ")", "\";\""]}, {"lPart": "ReturnOperator", "rPart": ["\"return\"", "statement", "?", "\";\""]}, {"lPart": "BreakOperator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "ExitOperator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "statement", "rPart": ["UnaryOperation", "sBeg", "sEnd"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operators", "*", "\"}\"", ")", "|", "(", "Operators", ")"]}, {"lPart": "Else", "rPart": ["\"other\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "UnaryOperation", "rPart": ["(", "not", "|", "minus", ")", "?"]}, {"lPart": "sBeg", "rPart": ["(", "(", "id", "(", "\"(\"", "(", "statement", "(", "\",\"", "statement", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "const", ")"]}, {"lPart": "sBeg", "rPart": ["\"(\"", "statement", "\")\""]}, {"lPart": "sEnd", "rPart": ["(", "BinaryOperation", "statement", ")", "?"]}, {"lPart": "BinaryOperation", "rPart": ["sign", "|", "compSign", "|", "logicalSign", "|", "minus"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "(", "[0-9]", "[a-zA-Z]", ")", "*", ")", "|", "(", "[0-9]", "(", "[a-zA-Z]", "[0-9]", ")", "*", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[.]", "[0-9]", "*", "[1-9]", ")", "|", "(", "[1-9]", "[0-9]", "*", "[.]", "[0-9]", "*", "[1-9]", ")"]}, {"lPart": "const", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "(", "[0-1]", ")", "|", "(", "[1]", "[0-1]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "(", "[0-3]", ")", "|", "(", "[1-3]", "[0-3]", "*", ")"]}, {"lPart": "const", "rPart": ["[0]", "[c]", "(", "[0-7]", ")", "|", "(", "[1-7]", "[0-7]", "*", ")"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "[x]", "[a-fA-F0-9]", "{1,2}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "not", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "sign", "rPart": ["[+*/=]"]}, {"lPart": "sign", "rPart": ["[*]", "[*]"]}, {"lPart": "compSign", "rPart": ["[=<>!]", "[=]"]}, {"lPart": "compSign", "rPart": ["[<>]"]}, {"lPart": "logicalSign", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constCom", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"i","Collection":"teacher",{"_id": {"$oid": "61f92323e166f33c850046a4"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 4000, "assist": 0}}{"_id": {"$oid": "61f92349e166f33c850046a8"}, "rules": "rules1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord=true;"}}{"_id": {"$oid": "61fa2046e166f33c850046e5"}, "rules": "rules2", "data": {"rList": [{"lPart": "Expr", "rPart": ["id", "sign", "const", "{f(a,b);}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord=true;"}}{"_id": {"$oid": "620782eb620cc55b46eb5bf2"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[_]", "[a-zA-Z0-9]", "*", "[_]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[01]", "+", ")", "|", "(", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[\\']", "[a-zA-Z\\s0-9]", "[\\']"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ ]", "*", "[\"]", ")"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "Sign", "rPart": ["[\\>]", "|", "[\\<]", "|", "[|]", "{1,2}", "|", "[\\&]", "{1,2}", "|", "[+]", "|", "[-]", "|", "[*]", "|", "[\\/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[=]", "[\\>]", ")", "|", "(", "[=]", "[\\<]", ")", "|", "(", "[!]", "[=]", ")", "|", "[\\^]"]}, {"lPart": "keyword", "rPart": ["[a-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "646c1c918df1782bcfc09098"}, "rules": "RakutaErr", "data": {"rList": [{"lPart": "program", "rPart": ["function", "+", "{toPseudoCode();}"]}, {"lPart": "function", "rPart": ["{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);userFunTbl.push(this.currentLexem[1]);funTimeIdent=this.currentLexem[1]; curType=\"absent\"; argCnt=0;}", "id", "\"(\"", "funArg", "{argCntStk[userFunTbl.indexOf(funTimeIdent)]=argCnt;}", "\")\"", "{hasReturn=true;returnStk[userFunTbl.indexOf(funTimeIdent)]=1;}", "(", "\"ret\"", "{curType=this.currentLexem[1]; hasReturn=false;returnStk[userFunTbl.indexOf(funTimeIdent)]=2;}", "type", ")", "?", "{typeTbl.push(curType);toPFR(funTimeIdent);toPFR(curType);toPFR(\"function\");funArgument();}", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "funArg", "rPart": ["{argTypeStk.push( \"absent \");}", "(", "{argTypeStk.pop();argTypeStk.push(this.currentLexem[1]);typeTbl.push(this.currentLexem[1]);}", "type", ")", "?", "{argStk.push(this.currentLexem[1]);idTbl.push(this.currentLexem[1]);argCnt++;}", "id", "(", "\",\"", "{argTypeStk.push( \"absent \");}", "(", "\",\"", "{argTypeStk.pop();argTypeStk.push(this.currentLexem[1]);typeTbl.push(this.currentLexem[1]);}", "type", ")", "?", "{argStk.push(this.currentLexem[1]);idTbl.push(this.currentLexem[1]);argCnt++;}", "id", ")", "*"]}, {"lPart": "funArg", "rPart": []}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"int\"", "|", "\"double\""]}, {"lPart": "Operator", "rPart": ["{opStk.push(this.currentLexem[1]);timeIdent = this.currentLexem[1];}", "id", "RestOfOperator"]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"at \"", "Expr", "{toPFR( \"LifElse \"+peek(ctlStk));labelStk.push( \"LifElse \"+peek(ctlStk));toPFR( \"jmpOnFalse \");}", "\"do \"", "OBlock", "{toPFR( \"LifExit \"+peek(ctlStk));labelStk.push( \"LifExit \"+peek(ctlStk));toPFR( \"jmp \"); toPFR( \"LifElse \"+peek(ctlStk)+ \": \");}", "condElse", "{toPFR( \"LifExit \"+ctlStk.pop()+ \": \");}"]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);execStk.push(1);toPFR( \"exec0_ \"+peek(ctlStk)+ \": \");}", "\"exec\"", "OBlock", "\"with \"", "{timeIdent=this.currentLexem[1];toPFR(this.currentLexem[1]);}", "id", "\"from \"", "{if(peek(execStk) == 1) toPFR(this.currentLexem[1]); if(peek(execStk) == 1) toPFR( \"set \"); execStk.pop();execStk.push(0);}", "Const", "\"to \"", "{toPFR(timeIdent);toPFR(this.currentLexem[1]);toPFR( \"< \");toPFR( \"exec1_ \"+peek(ctlStk)); toPFR( \"jmpOnFalse \"); }", "Const", "(", "\"step \"", "{toPFR(timeIdent);toPFR(timeIdent);toPFR(this.currentLexem[1]);toPFR( \"+ \");toPFR( \"set \");}", "Const", ")", "?", "{toPFR( \"exec0_ \"+peek(ctlStk));toPFR( \"jmp \");toPFR( \"exec1_ \"+ctlStk.pop()+ \": \");execStk.pop();}"]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt); toPFR( \"exprBy \"+operatorCnt);idTbl.push( \"exprBy \"+operatorCnt);onStk.push(0);toPFR( \"absent \"); toPFR( \"defVar \");}", "\"switch \"", "{toPFR( \"exprBy \"+operatorCnt);}", "Expr", "{ toPFR( \"set \");}", "\"{ \"", "switchBody", "+", "{toPFR( \"SBy \"+peek(ctlStk)+ \"by \"+peek(onStk)+ \": \");}", "(", "\"any \"", "\"do \"", "OBlock", ")", "?", "\"}\"", "{toPFR( \"LBy \"+ctlStk.pop()+ \": \");}"]}, {"lPart": "Operator", "rPart": ["\"return \"", "(", "Expr", ")", "?", "\"; \"", "{if(returnStk[userFunTbl.indexOf(funTimeIdent)]!=0)returnStk[userFunTbl.indexOf(funTimeIdent)]=0;hasReturn=true;toPFR( \"return \");}"]}, {"lPart": "Operator", "rPart": ["{curType= \"absent \"}", "\"var \"", "(", "{curType=this.currentLexem[1];typeTbl.push(curType);}", "type", ")", "?", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR( \"defVar \")}", "id", "(", "{toPFR(peek(idTbl));}", "\"set \"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"( \") opStk.pop(); else toPFR(opStk.pop()); toPFR( \"set \");}", ")", "?", "(", "\", \"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR( \"defVar \")}", "id", "(", "{toPFR(peek(idTbl));}", "\"set \"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"( \") opStk.pop(); else toPFR(opStk.pop()); toPFR( \"set \");}", ")", "?", ")", "*", "\"; \""]}, {"lPart": "RestOfOperator", "rPart": ["{toPFR(opStk.pop());}", "\"set \"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"( \") opStk.pop(); else toPFR(opStk.pop()); toPFR( \"set \");}", "\"; \""]}, {"lPart": "RestOfOperator", "rPart": ["{argCnt=0;}", "\"( \"", "(", "Expr", "{argCnt++;}", "(", "\", \"", "Expr", "{argCnt++;}", ")", "*", ")", "?", "\") \"", "{ret=2;funInfo();toPFR(opStk.pop());}"]}, {"lPart": "Expr", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "logicNot", ")", "?", "(", "{toPFR( \"0 \");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?", "{if(peek(opStk)== \"- \")toPFR(opStk.pop());if(peek(opStk)== \"! \")toPFR(opStk.pop());}"]}, {"lPart": "OBlock", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "condElse", "rPart": ["\"or\"", "\"do\"", "OBlock"]}, {"lPart": "condElse", "rPart": ["~", "\"or\""]}, {"lPart": "Const", "rPart": ["int", "|", "char", "|", "string", "|", "double"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);timeIdent=this.currentLexem[1]; argCnt=0;}", "id", "(", "\"( \"", "(", "Expr", "{argCnt++;}", "(", "\", \"", "Expr", "{argCnt++;}", ")", "*", ")", "?", "\") \"", "{ret=0;funInfo();}", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length>0)&&(peek(opStk)==\"(\")) opStk.pop();}", "\")\""]}, {"lPart": "switchBody", "rPart": ["\"by \"", "{toPFR(this.currentLexem[1]);}", "Const", "{toPFR( \"exprBy \"+peek(ctlStk));toPFR( \"== \"); toPFR( \"LBy \"+peek(ctlStk)+ \"by \"+peek(onStk)); toPFR( \"jmpOnFalse \");}", "\"do \"", "{if(peek(onStk)!=0)toPFR( \"SBy \"+peek(ctlStk)+ \"by \"+peek(onStk)+ \": \");}", "OBlock", "(", "\"off \"", "\"; \"", "{ toPFR( \"LBy \"+peek(ctlStk));toPFR( \"jmp \");}", ")", "?", "{toPFR( \"SBy \"+peek(ctlStk)+ \"by \"+(peek(onStk)+1));toPFR( \"jmp \"); toPFR( \"LBy \"+peek(ctlStk)+ \"by \"+peek(onStk)+ \": \"); onStk.push(onStk.pop()+1); }"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length>0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length>0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{1,4}"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "int", "rPart": ["[$]", "[01]", "+"]}, {"lPart": "int", "rPart": ["[#]", "[0-3]", "+"]}, {"lPart": "double", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "sign", "rPart": ["[+*/]", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "keyword", "rPart": ["[a-z]", "+"]}, {"lPart": "logicNot", "rPart": ["\"!\""]}], "extension": " var ignoreLastWord;\n var startForRun;\n var curType=\"\";\n var opStk = [];\n var operatorCnt=0;\n var  ctlStk=[];\n var  onStk=[];\n var  operandStk = [];\n var  userSignTbl = [];\n var  idTbl = [\"return\",\"defVar\"];\n var  valTbl =[0,0];\n var typeTbl = [\"\",\"\"];\n var  hasReturn = true;\n var  execStk = [];\n var  argStk = [];\n var  argTypeStk= [];\n var  timeIdent=\"\";\n var funTimeIdent =\"\";\n var interValueCnt=0;\n var argCnt=0;\n var argCntStk =[];\nvar callFunArgCnt=[[],[]];\nvar returnStk = [];\nvar callReturnStk=[[],[]];\nvar userFunTbl =[];\nvar ret=0;\nvar testRetCnt=0;\n\n\n function funArgument(){\n var i=0;\n  while(i<argStk.length){\n   toPFR(argStk[i]);\n   toPFR(argTypeStk[i]);\n   toPFR(\"argument\");\n   i++;\n  }\n argStk = [];\n argTypeStk = [];\n }\n\n function Tracer(){\n  this.history=[];\n }\nvar tracer = Tracer.prototype = {\n put: function(b){\n  this.history.push(b);\n },\n getAll: function(){\n var r=\"\";\n for(var i=0;i<this.history.length;i++)\n  r+=\" \" + this.history[i];\n return r;\n },\n clear: function(){\n this.history =[];\n }\n}\nfunction clear(){\n  tracer.history=[];\n  opStk=[];\n  ctlStk= [];\n  onStk=[];\n  userSignStk =[];\n  operandStk =[];\n  idTbl = [];\n  typeTbl =[];\n  operatorCnt=0;\n}\n function toPFR(x){\n tracer.put(x);\n}\nfunction peek(o){\n return o[o.length-1];\n}\n function getPriority(s){\n  if(s==\"(\") return 0;\n  if(s==\"||\") return 1;\n  if(s ==\"&&\") return 2;\n  if(s==\">\") return 3;\n  if(s==\"<\") return 3;\n  if(s==\">=\") return 3;\n  if(s ==\"<=\") return 3;\n  if(s ==\"==\") return 3;\n  if(s ==\"!=\") return 3;\n  if(s ==\"+\") return 5;\n  if(s == \"-\") return 5;\n  if(s == \"*\") return 10;\n  if(s == \"/\") return 10;\n  if(s == \"!\") return 20;\n  return 0;\n }\nfunction funInfo(){\n   var i=0;\n   if(userFunTbl.indexOf(timeIdent)>=0){\n   while( userFunTbl[i]!=timeIdent && i<userFunTbl.length){\n   i++;   \n}\n   while(callFunArgCnt.length < i){\n         callFunArgCnt.push( [] );\n         callReturnStk.push( [] );\n   }\n  callFunArgCnt[i].push(argCnt);\n  callReturnStk[i].push(ret);\n  }\n};\n\nfunction toPseudoCode(){\n var LCnt=0;\n var FunCnt=-1;\n var label = false;\n var expr = false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0) && (userSignTbl.indexOf(word)>=0) && (tracer.history[i+2] != \"function\")){ //определение вызова функции\n   type = 5;\n  }\n  if(type === 0){ \n    if(word.indexOf(\":\")>0){ //определение метки \n     if(LCnt>0){\n      toPFR(\"---\"); //заполнение операндов и кода операций при наличии нескольких меток\n      toPFR(\"---\");\n      toPFR(\"---\");\n     }\n     label=true;\n     toPFR(\"\\n\");\n     toPFR(word); //записать метку\n     LCnt++;\n     if(userSignTbl.indexOf(word.substring(0,word.length-3))>=0){\n       FunCnt++; //определение номера функции\n     }\n    }else{\n     if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl[FunCnt].indexOf(word)<0) && ([\"char\",\"int\",\"double\",\"string\",\"absent\"].indexOf(word)<0) && ((word.search(/[0-9]/)<0) || (word.search(/[0-9]/)>4)) && (word!=\"retAddress\")&& (word!=\"testReturn\") && (labelStk.indexOf(word)<0)){ //определение необъявленных переменных\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){//определение наличия return\n      if(returnStk[testRetCnt]==2){ \n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }\n      testRetCnt++;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(word);\n    }\n  }\n   if(type===5){ // вызов функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n    LCnt=0;}\n    var numFun = userFunTbl.indexOf(word);\n    var arg_Cnt = argCntStk[numFun];\n    var arg_Cnt2 = callFunArgCnt[numFun].shift();\n    var retVal = callReturnStk[numFun].shift();\n     \n    if(arg_Cnt == arg_Cnt2 && (retVal==returnStk[numFun] || retVal==2)){//определение наличия return у функции и соответствие количества аргументов функции в вызове и \n                                                                         // объявлении\n        var cntI = arg_Cnt;\n        while(cntI>0){\n          toPFR(\"push\");\n          toPFR(operandStk.pop());\n          toPFR(\"---\");\n          toPFR(\"\\n_\");\n         cntI--;\n        }\n        toPFR(word);\n        toPFR(\"---\");\n        toPFR(\"---\");\n        if(!returnStk[numFun]){\n           operandStk.push(\"interValue\");\n           \n        }\n       }else{\n       var k=0;\n       while(k<arg_Cnt2){\n         operandStk.pop();\n         k++;\n       }\n       toPFR(\"\\nОшибка в вызове функции\\n\");\n     }\n  }\n  if((type===10)||(type===11) ||(type===13)){ // арифметические, логические операции и операции сравнения\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n   LCnt=0;}\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n   operandStk.push(\"interValue\");\n  }\n  if(type==12){ //операция логического НЕ\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;}\n   LCnt=0;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"---\");\n   operandStk.push(\"interValue\");\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;}\n   LCnt=0;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if(type==20){ //объявление переменных\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n   LCnt=0;}\n   if(!expr){\n    toPFR(\"set\");\n    toPFR(operandStk.pop());\n    toPFR(operandStk.pop());\n   } else{\n     toPFR(word);\n     toPFR(operandStk.pop());\n     toPFR(operandStk.pop());\n     expr=false;\n     }\n  }\n  if((type==40)||(type==41)){ // операции перехода\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n   LCnt=0;}\n   toPFR(word);\n   toPFR(operandStk.pop());\n   if(type==40)\n    toPFR(\"---\");\n   else\n    toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){ // операция return\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n   LCnt=0;}\n   if(!expr){\n    toPFR(word);\n    toPFR(operandStk.pop());\n    toPFR(\"---\");\n   }else{\n    toPFR(word);\n    toPFR(operandStk.pop());\n    toPFR(\"---\");\n    expr=false;\n   }\n  }\n  if(type===60){ //операция объявления функции\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n   LCnt=0;}\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n   if(type===70){ // операция объявления аргументов функции\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else{\n    label=false;\n   LCnt=0;}\n   toPFR(\"pop\");\n   operandStk.pop();\n   toPFR(operandStk.pop());\n   toPFR(\"---\");\n  }\n }\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \"*\":\n   case \"/\":\n    return 10; //знак арифметической операции\n   case \">\":\n   case \"<\":\n   case \">=\":\n   case \"<=\":\n   case \"==\":\n   case \"!=\":\n    return 11; //знак операции сравнения\n   case \"!\":\n    return 12; //знак операции отрицания\n   case \"||\":\n   case \"&&\":\n    return 13; //знак логических операций\n   case \"set\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n   case \"function\":\n    return 60; //объявления функции\n   case \"argument\":\n    return 70; // объявление аргументов функции\n  }\n  return 0;\n}\n}\n\n"}}},
{"FIO":"Комаров П.В.","Collection":"411154111",{"_id": {"$oid": "674de1aece6dd03692d06dab"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[\\r \\n \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[*+/-]"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")", "|", "(", "[']", "[']", ")"]}, {"lPart": "constString", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[\"]", "[\"]", ")"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[#]", "[]", "+", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}], "extension": ""}}{"_id": {"$oid": "674de3dcce6dd03692d06db3"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "6771469bce6dd03692d074a3"}, "rules": "lab2", "data": {"rList": [{"lPart": "Oper", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "+", "[a-zA-Z]", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67949de6ce6dd03692d074ed"}, "rules": "lab3", "data": {"rList": [{"lPart": "Oper", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"when\"", "Expr", "OpBlock", "PartElse"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "+", "[a-zA-Z]", "+"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "6794a027ce6dd03692d074f4"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["OpBlock", "+"]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Oper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "OpBlock", ")", "+", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\""]}, {"lPart": "Oper", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"when\"", "Expr", "OpBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"loop\"", "OpBlock", "\"until\"", "\"(\"", "Expr", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "+", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "6794a3b5ce6dd03692d07502"}, "rules": "lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["id", "(", "\"ret\"", "Type", ")", "?", "(", "\"(\"", "Args", "?", "\")\"", ")", "\"<-\"", "\"{\"", "OpBlock", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"str\""]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Oper", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "OpBlock", ")", "+", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\""]}, {"lPart": "Oper", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Oper", "rPart": ["\"when\"", "Expr", "OpBlock", "PartElse"]}, {"lPart": "Oper", "rPart": ["\"loop\"", "OpBlock", "\"until\"", "\"(\"", "Expr", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "Params", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "bin", "|", "binun", ")", "Expr"]}, {"lPart": "Params", "rPart": ["\"(\"", "Expr", "(", "\",\"", "Expr", ")", "*", "\")\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "+", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "6795cf22ce6dd03692d0752a"}, "rules": "lab7", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Func", "+", "{toPseudoCode();}"]}, {"lPart": "Func", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"function\");}", "(", "\"ret\"", "Type", ")", "?", "(", "\"(\"", "Args", "?", "\")\"", ")", "\"<-\"", "\"{\"", "OpBlock", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"str\""]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Type", "?", "{toPFR(\"arg\"); }", "{argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "Type", "?", "{toPFR(\"arg\"); }", "{argStk.push(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\" +peek(ctlStk) + \"Expr\");}", "\"??\"", "Expr", "{toPFR(\"<-\");}", "\"{\"", "(", "\"?=\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1);}", "{ toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\" +peek(ctlStk) + \"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk));toPFR(\"jmpOnFalse\");}", "\":\"", "OpBlock", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmp\");}", ")", "+", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\");}", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\"); ;}"]}, {"lPart": "Oper", "rPart": ["Type", "?", "{toPFR(this.currentLexem[1]);}", "id", "\"<-\"", "Expr", "{ toPFR(\"<-\"); }", "\";\""]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"when\"", "Expr", "{ toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "OpBlock", "{toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"loop\"", "{toPFR(\"LoopDo_\" + peek(ctlStk)+\":\");}", "OpBlock", "\"until\"", "\"(\"", "Expr", "{toPFR(\"LoopExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");toPFR(\"LoopDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LoopExit_\" + peek(ctlStk)+\":\");}", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\"", "{toPFR(\"LoopExit_\"+peek(ctlStk)); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "Params", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]) ) ) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "{toPFR(\"param\"); }", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", "(", "\",\"", "{toPFR(\"param\"); }", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "+", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\nvar paramStk = [];\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    paramStk = [];\n    isUnary = false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\nfunction toPseudoCode() {\n    var lim = tracer.history.length;\n    toPFR(\"\\n\\n\");\n    toPFR(\"Псевдокод: \");\n    toPFR(\"<Код> <Операнд> <Операнд>\" + \"\\n\");\n    var label = false;\n    var expr = false;\n    for (var i = 0; i < lim; i++) {\n        var word = tracer.history[i];\n        var type = getType(word);\n\n        if (type === 0)\n            if (word.indexOf(\":\") >= 0) {\n                label = true;\n                toPFR(\"\\n\");\n            } else {\n                opStk.push(word);\n            }\n\n        if (type === 5) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n\n            toPFR(\"\\n\");\n        }\n\n        if ((type === 10) || (type === 11)) {\n            expr = true;\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(opStk.pop());\n            strRes = \"result\" + resCnt;\n            //toPFR(strRes);\n            opStk.push(strRes);\n\n            ++resCnt;\n\n        }\n        if (type == 20) {\n            if (label === false) {\n\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            toPFR(opStk.pop());\n            expr = false;\n        }\n        if ((type == 40) || (type == 41)) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            }\n            toPFR(word);\n            if (type === 41) toPFR(\"result\" + (resCnt - 1));\n            else toPFR(\"#\");\n            toPFR(opStk.pop());\n        }\n\n        if (type == 51) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 50) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(opStk.pop());\n            toPFR(\"#\");\n            funcCnt += 1;\n        }\n        if (type == 52) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(argStk.pop());\n            toPFR(\"#\");\n        }\n        if (type == 53) {\n            if (label === false) {\n                toPFR(\"\\n\");\n            } else\n                label = false;\n            toPFR(word);\n            toPFR(paramStk.pop());\n            toPFR(\"#\");\n        }\n    }\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n            return 10; //знак арифметической операции\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"!\":\n        case \"<\":\n        case \">\":\n            return 11; //знак операции сравнения\n        case \"<-\":\n            return 20; //знак операции присваивания\n        case \"jmp\":\n            return 40; //знак операции безусловной передачи управления\n        case \"jmpOnFalse\":\n            return 41; //знак операции передачи управления по условию\n        case \"function\":\n            return 50; // объявление функции\n        case \"return\":\n            return 51; // оператор return\n        case \"arg\":\n            return 52; // оператор arg\n        case \"param\":\n            return 53; // оператор param\n    }\n    return 0;\n}"}}{"_id": {"$oid": "6795d8e5ce6dd03692d07567"}, "rules": "lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{clear();}", "Func", "+"]}, {"lPart": "Func", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"function\");}", "(", "\"ret\"", "Type", ")", "?", "(", "\"(\"", "Args", "?", "\")\"", ")", "\"<-\"", "\"{\"", "OpBlock", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"str\""]}, {"lPart": "OpBlock", "rPart": ["Oper", "|", "\"{\"", "Oper", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Type", "?", "{toPFR(\"arg\"); }", "{argStk.push(this.currentLexem[1]);}", "id", "(", "\",\"", "Type", "?", "{toPFR(\"arg\"); }", "{argStk.push(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt); caseStk.push(0); toPFR(\"Switch\" +peek(ctlStk) + \"Expr\");}", "\"??\"", "Expr", "{toPFR(\"<-\");}", "\"{\"", "(", "\"?=\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\"); caseStk.push(caseStk.pop()+1);}", "{ toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"Switch\" +peek(ctlStk) + \"Expr\"); toPFR(\"==\"); toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk));toPFR(\"jmpOnFalse\");}", "\":\"", "OpBlock", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)); toPFR(\"jmp\");}", ")", "+", "(", "\"?~\"", "\":\"", "OpBlock", ")", "?", "\"}\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Case\"+peek(caseStk)+\":\");}", "{ toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");toPFR(\"Switch\"+ctlStk.pop()+\"Exit\"+\":\"); ;}"]}, {"lPart": "Oper", "rPart": ["Type", "?", "{toPFR(this.currentLexem[1]);}", "id", "\"<-\"", "Expr", "{ toPFR(\"<-\"); }", "\";\""]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"when\"", "Expr", "{ toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmpOnFalse\");}", "OpBlock", "{toPFR(\"Else\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"Else\"+peek(ctlStk)+\":\");}", "PartElse"]}, {"lPart": "Oper", "rPart": ["{ctlStk.push(++opCnt);}", "\"loop\"", "{toPFR(\"LoopDo_\" + peek(ctlStk)+\":\");}", "OpBlock", "\"until\"", "\"(\"", "Expr", "{toPFR(\"LoopExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\");toPFR(\"LoopDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LoopExit_\" + peek(ctlStk)+\":\");}", "\")\"", "\";\""]}, {"lPart": "Oper", "rPart": ["\"quit\"", "\";\"", "{toPFR(\"Switch\"+peek(ctlStk)+\"Exit\"); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"retire\"", "\";\"", "{toPFR(\"LoopExit_\"+peek(ctlStk)); toPFR(\"jmp\");}"]}, {"lPart": "Oper", "rPart": ["\"return\"", "Expr", "\";\"", "{toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["un", "?", "binun", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "OpBlock"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "Params", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if ((opStk.length > 0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]) ) ) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "bin", "|", "binun", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk)==\"(\") opStk.pop(); else toPFR(opStk.pop()); }"]}, {"lPart": "Params", "rPart": ["\"(\"", "(", "{toPFR(\"param\"); }", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", "(", "\",\"", "{toPFR(\"param\"); }", "{paramStk.push(this.currentLexem[1]);}", "(", "id", "|", "const", ")", ")", "*", ")", "?", "\")\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "+", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[x]", "[0-7A-F]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "binun", "rPart": ["[-]"]}, {"lPart": "bin", "rPart": ["[/+*]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[><]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\t\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\nvar userSignStk = [];\nvar isUnary = false;\nvar argStk = [];\nvar paramStk = [];\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n    argStk = [];\n    paramStk = [];\n    isUnary = false;\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\n"}}},
{"FIO":"Фисюков Д.А.","Collection":"351154143",{"_id": {"$oid": "67b6e927ce6dd03692d0882b"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67b9a301ce6dd03692d090fc"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "{1}", "[a-zA-Z0-9]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuat", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "String", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd7b02af563521c9d5ccb7"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuat", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "+", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "+", ")", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/=><&|!]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[\\[\\]\\(\\)\\{\\}]"]}, {"lPart": "endLine", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3d26a4635a960233adfe7"}, "rules": "lab3", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperRetireQuit"]}, {"lPart": "OperAssign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Statement", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"loop\"", "Statement", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "OperRetireQuit", "rPart": ["\"retire\"", "\";\"", "|", "\"quit\"", "\";\""]}, {"lPart": "Else", "rPart": ["\"else\"", "Statement"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constQuat", "|", "String", "|", "char"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constQuat"]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuat", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f763d08558742cb433526d"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgumentList", "\")\"", "FunctionBlock"]}, {"lPart": "ArgumentList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FunctionBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperRetireQuit", "|", "OperSwitch", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Statement", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"loop\"", "Statement", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "OperRetireQuit", "rPart": ["\"retire\"", "\";\"", "|", "\"quit\"", "\";\""]}, {"lPart": "OperSwitch", "rPart": ["\"??\"", "Expr", "\"{\"", "forSwitch", "*", "forSwitch2", "\"}\""]}, {"lPart": "ConstWithSign", "rPart": ["(", "binaryOrUnarySign", ")", "?", "ConstNum"]}, {"lPart": "forSwitch", "rPart": ["\"?=\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "forSwitch2", "rPart": ["\"?~\"", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Else", "rPart": ["\"else\"", "Statement"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constQuat", "|", "String", "|", "char"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constQuat"]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuat", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6809f6618558742cb43392a3"}, "rules": "lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "ArgumentList", "\")\"", "FunctionBlock"]}, {"lPart": "ArgumentList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "FunctionBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperRetireQuit", "|", "OperSwitch", "|", "OperDefine", "|", "OperFuncCall", "|", "Return"]}, {"lPart": "OperDefine", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "OperAssign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Statement", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"loop\"", "Statement", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "OperFuncCall", "rPart": ["id", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", "\";\""]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "OperRetireQuit", "rPart": ["\"retire\"", "\";\"", "|", "\"quit\"", "\";\""]}, {"lPart": "OperSwitch", "rPart": ["\"??\"", "Expr", "\"{\"", "forSwitch", "*", "forSwitch2", "\"}\""]}, {"lPart": "ConstWithSign", "rPart": ["(", "binaryOrUnarySign", ")", "?", "ConstNum"]}, {"lPart": "forSwitch", "rPart": ["\"?=\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "forSwitch2", "rPart": ["\"?~\"", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "Else", "rPart": ["\"else\"", "Statement"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "(", "id", "(", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?", ")", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constQuat", "|", "String", "|", "char"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constFloat", "|", "constBin", "|", "constQuat"]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Binary", "rPart": ["(", "binarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuat", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Юдин К.С.","Collection":"122422235",{"_id": {"$oid": "67bec080af563521c9d5978e"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bec0a2af563521c9d59790"}, "rules": "noName", "data": {"rList": [{"lPart": "var", "rPart": ["[$]", "[0-3]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bec70baf563521c9d597b9"}, "rules": "1", "data": {"rList": [{"lPart": "var", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "opsing", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f63bd08558742cb43344bb"}, "rules": "2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "oct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "sign", "rPart": ["[+-/*]"]}, {"lPart": "assign", "rPart": ["\"<-\"", "Expr", "del"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["four", "|", "oct", "|", "char", "|", "string", "|", "real"]}, {"lPart": "del", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"real\"", "|", "\"four\"", "|", "\"oct\""]}, {"lPart": "cond", "rPart": ["\"at\"", "logExpr", "\"do\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "const", ")", "logic", "(", "id", "|", "const", ")"]}, {"lPart": "logic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "block", "rPart": ["(", "aORF", "|", "cond", "|", "loop", "|", "switch", ")", "(", "block", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "block", "\"}\""]}, {"lPart": "loop", "rPart": ["\"cycle\"", "\"(\"", "aORF", "del", "logExpr", "del", "aORF", "del", "\")\"", "\"{\"", "loopBlock", "\"}\""]}, {"lPart": "loopBlock", "rPart": ["(", "block", ")", "(", "\"quit\"", "del", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "Expr", "\"{\"", "switchBody", "(", "\"otherwise\"", "block", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"when\"", "const", "\"then\"", "\"{\"", "block", "\"}\"", "(", "\"exit\"", "del", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "func", "rPart": ["\"(\"", "(", "args", ")", "?", "\")\"", "return", "?", "\"{\"", "block", "\"}\""]}, {"lPart": "operator", "rPart": ["switch", "|", "loop", "|", "cond", "|", "aORF"]}, {"lPart": "Program", "rPart": ["operator", "+"]}, {"lPart": "return", "rPart": ["\"ret\"", "type"]}, {"lPart": "args", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "aORF", "rPart": ["id", "tail"]}, {"lPart": "tail", "rPart": ["func", "|", "assign"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Черемисин С.А.","Collection":"215211413",{"_id": {"$oid": "67a9f20fce6dd03692d077e1"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67a9f21cce6dd03692d077e3"}, "rules": "lab1", "data": {"rList": [{"lPart": "identifier", "rPart": ["[a-zA-Z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[\\\\]", ")", ")", "?", "[']"]}, {"lPart": "constNumber", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "logicOperation", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "compareOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67a9f28cce6dd03692d077e6"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67ceb1acaf563521c9d5d283"}, "rules": "lab2", "data": {"rList": [{"lPart": "global", "rPart": ["functionExpression", "+"]}, {"lPart": "functionExpression", "rPart": ["identifier", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "type", "identifier", ")", "*", "\")\"", "functionBlock"]}, {"lPart": "functionBlock", "rPart": ["\"{\"", "(", "operator", ")", "*", "\"return\"", "operand", "?", "\";\"", "\"}\""]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"number\""]}, {"lPart": "operator", "rPart": ["assignmentExpression", "|", "conditionalExpression", "|", "cycleExpression", "|", "switchExpression"]}, {"lPart": "operand", "rPart": ["const", "|", "identifier"]}, {"lPart": "assignmentExpression", "rPart": ["\"put\"", "expression", "\"to\"", "identifier", "\";\""]}, {"lPart": "conditionalExpression", "rPart": ["\"when\"", "\"(\"", "logicalExpression", "\")\"", "operationBlock", "otherwiseExpression", "?"]}, {"lPart": "cycleExpression", "rPart": ["\"exec\"", "operationBlock", "\"with\"", "identifier", "\"from\"", "constNumber", "\"to\"", "constNumber", "(", "\"step\"", "constNumber", ")", "?", "(", "\"exit\"", ")", "?", "\";\""]}, {"lPart": "switchExpression", "rPart": ["\"select\"", "expression", "\"{\"", "(", "\"case (\"", "const", "\")\"", "operator", ")", "+", "(", "\"case (false)\"", "operator", ")", "?", "\"end\"", "\"}\""]}, {"lPart": "const", "rPart": ["constChar", "|", "constNumber", "|", "constString"]}, {"lPart": "expression", "rPart": ["(", "unaryOperation", ")", "?", "operand", "(", "operation", "operand", ")", "?"]}, {"lPart": "logicalExpression", "rPart": ["operand", "(", "compareOperation", "operand", ")", "?"]}, {"lPart": "operationBlock", "rPart": ["\"{\"", "(", "operator", ")", "+", "\"}\""]}, {"lPart": "otherwiseExpression", "rPart": ["\"other\"", "operationBlock"]}, {"lPart": "operation", "rPart": ["binaryOperation", "|", "unaryOperation", "|", "logicOperation"]}, {"lPart": "identifier", "rPart": ["[a-zA-Z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "constNumber", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[\\\\]", ")", ")", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "unaryOperation", "rPart": ["[-+]"]}, {"lPart": "compareOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "binaryOperation", "rPart": ["[*/]"]}, {"lPart": "logicOperation", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68186a7c8558742cb433b7be"}, "rules": "lab4", "data": {"rList": [{"lPart": "global", "rPart": ["functionExpression", "+"]}, {"lPart": "functionExpression", "rPart": ["identifier", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "(", "type", "identifier", ")", "*", "\")\"", "functionBlock"]}, {"lPart": "functionBlock", "rPart": ["\"{\"", "(", "operator", ")", "*", "\"return\"", "operand", "?", "\";\"", "\"}\""]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"number\""]}, {"lPart": "operator", "rPart": ["assignmentExpression", "|", "conditionalExpression", "|", "cycleExpression", "|", "switchExpression"]}, {"lPart": "operand", "rPart": ["const", "|", "identifier"]}, {"lPart": "assignmentExpression", "rPart": ["\"put\"", "expression", "\"to\"", "identifier", "\";\""]}, {"lPart": "conditionalExpression", "rPart": ["\"when\"", "\"(\"", "logicalExpression", "\")\"", "operationBlock", "otherwiseExpression", "?"]}, {"lPart": "cycleExpression", "rPart": ["\"exec\"", "operationBlock", "\"with\"", "identifier", "\"from\"", "constNumber", "\"to\"", "constNumber", "(", "\"step\"", "constNumber", ")", "?", "(", "\"exit\"", ")", "?", "\";\""]}, {"lPart": "switchExpression", "rPart": ["\"select\"", "expression", "\"{\"", "(", "\"case (\"", "const", "\")\"", "operator", ")", "+", "(", "\"case (false)\"", "operator", ")", "?", "\"end\"", "\"}\""]}, {"lPart": "const", "rPart": ["constChar", "|", "constNumber", "|", "constString"]}, {"lPart": "expression", "rPart": ["(", "unaryOperation", ")", "?", "operand", "(", "operation", "operand", ")", "?"]}, {"lPart": "logicalExpression", "rPart": ["operand", "(", "compareOperation", "operand", ")", "?"]}, {"lPart": "operationBlock", "rPart": ["\"{\"", "(", "operator", ")", "+", "\"}\""]}, {"lPart": "otherwiseExpression", "rPart": ["\"other\"", "operationBlock"]}, {"lPart": "operation", "rPart": ["binaryOperation", "|", "unaryOperation", "|", "logicOperation"]}, {"lPart": "identifier", "rPart": ["[a-zA-Z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "constNumber", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[\\\\]", ")", ")", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "unaryOperation", "rPart": ["[-+]"]}, {"lPart": "compareOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "binaryOperation", "rPart": ["[*/]"]}, {"lPart": "logicOperation", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Шейерман В.В.","Collection":"551221131",{"_id": {"$oid": "6800ef0d8558742cb43375c4"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuater", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[rnbtv]", ")", "+", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/=]"]}, {"lPart": "delim", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6800ef2f8558742cb43375c7"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "68011dd28558742cb4337651"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuater", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[rnbtv]", ")", "+", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/%=]"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "[a-z]", "[a-z]", "+"]}, {"lPart": "logic", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[+]", "[+]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "keyops", "rPart": ["[(),{}?:]", "|", "(", "[?]", "[:]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6805e2588558742cb4337f4c"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "constQuater", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[rnbtv]", ")", "+", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/%=]"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "unops", "rPart": ["[!~]"]}, {"lPart": "binops", "rPart": ["[*/^%]"]}, {"lPart": "comparisons", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "logicalops", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "specialops", "rPart": ["[-+]"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constBin", "|", "constQuater", "|", "constFloat", "|", "constchar", "|", "constString"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "ProgramText", "rPart": ["(", "FnBlock", "|", "Statement", ")", "*"]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "Statement", "rPart": ["AssignmentLet", "|", "WhenStatement", "|", "LoopStatement", "|", "SelectStatement", "|", "Block", "|", "(", "\"quit\"", "\";\"", ")", "|", "(", "\"exit\"", "Expr", "?", "\";\"", ")", "|", "BreakStatement"]}, {"lPart": "AssignmentLet", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "LoopStatement", "rPart": ["\"cycle\"", "\"(\"", "(", "AssignmentLet", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "\"let\"", "id", "\"on\"", "Expr", ")", "?", "\")\"", "Statement", "(", "\"quit\"", "\";\"", ")", "?"]}, {"lPart": "SelectStatement", "rPart": ["\"select\"", "Expr", "(", "CaseSelect", ")", "+", "\"end\""]}, {"lPart": "CaseSelect", "rPart": ["\"case\"", "\"(\"", "Const", "\")\"", "Block", "|", "\"case\"", "\"(\"", "\"false\"", "\")\"", "Block"]}, {"lPart": "FnBlock", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "ArgList", ")", "?", "\")\"", "Block"]}, {"lPart": "ArgList", "rPart": ["id", "(", "\":\"", "type", ")", "?", "(", "\",\"", "id", "(", "\":\"", "type", ")", "?", ")", "*"]}, {"lPart": "Expr", "rPart": ["BeginExpr", "ExprOperation"]}, {"lPart": "BeginExpr", "rPart": ["(", "unops", "|", "specialops", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")", "|", "(", "ExprId", "|", "Const", ")"]}, {"lPart": "ExprOperation", "rPart": ["(", "(", "binops", "|", "logicalops", "|", "specialops", "|", "comparisons", ")", "Expr", ")", "?"]}, {"lPart": "ExprId", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "WhenStatement", "rPart": ["\"when\"", "Expr", "Block", "(", "\"other\"", "Block", ")", "?"]}, {"lPart": "BreakStatement", "rPart": ["\"break\"", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Чавкина А.А.","Collection":"155423523",{"_id": {"$oid": "67bd892caf563521c9d5924d"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67cd27c6af563521c9d5ca6e"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "(", "[0-9]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd2892af563521c9d5ca7d"}, "rules": "L1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "(", "[0-9]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ ]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e26fbd4635a960233ad797"}, "rules": "L2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "keyWord", "rPart": ["[a-z]", "+"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "assign", "rPart": ["[p]", "[u]", "[t]", "[]"]}, {"lPart": "assign", "rPart": ["[t]", "[o]", "[]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7b6744635a960233af204"}, "rules": "L3", "data": {"rList": [{"lPart": "programm", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?", "|", "\"cycle\"", "\"(\"", "OperatorAssTo", "\";\"", "Expr", "\";\"", "OperatorAssTo", "\")\"", "\"{\"", "Operator", "\"}\"", "\"quit\"", "?", "|", "\"put\"", "Expr", "\"to\"", "id", "\";\"", "|", "\"switch\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorAssTo", "rPart": ["\"put\"", "Expr", "\"to\"", "id"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "SignOfOperation", ")", "Expr", ")", "?"]}, {"lPart": "PartElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Case", "rPart": ["\"by\"", "Const", "\"do\"", "\"{\"", "(", "Operator", "|", "OperatorEx", ")", "*", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"any\"", "\"do\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Term", "rPart": ["id", "|", "Const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "SignOfOperation", "rPart": ["\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "(", "\"!=\"", ")", "|", "(", "\"==\"", ")"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[d]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "keyWord", "rPart": ["[a-z]", "+"]}, {"lPart": "OperatorEx", "rPart": ["\"leave\"", "delimetr"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cb5498558742cb43399b3"}, "rules": "L4444", "data": {"rList": [{"lPart": "programm", "rPart": ["(", "Operator", "|", "ExprFunc", ")", "+"]}, {"lPart": "ExprFunc", "rPart": ["\"function\"", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\"->\"", "id", "\";\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?", "|", "\"cycle\"", "\"(\"", "OperatorAssTo", "\";\"", "Expr", "\";\"", "OperatorAssTo", "\")\"", "\"{\"", "Operator", "\"}\"", "\"quit\"", "?", "|", "\"put\"", "Expr", "\"to\"", "id", "\";\"", "|", "\"switch\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\"", "|", "OperReturn"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorAssTo", "rPart": ["\"put\"", "Expr", "\"to\"", "id"]}, {"lPart": "OperReturn", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "(", "\"!=\"", ")", "|", "(", "\"==\"", ")", ")", "Expr", ")", "?"]}, {"lPart": "PartElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Case", "rPart": ["\"by\"", "Const", "\"do\"", "\"{\"", "(", "Operator", "|", "OperatorEx", ")", "*", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"any\"", "\"do\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Term", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "OperatorEx", "rPart": ["\"leave\"", "delimetr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[d]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Type", "id"]}, {"lPart": "FuncCall", "rPart": ["id", "\"(\"", "ExprList", "?", "\")\"", "\";\""]}, {"lPart": "ExprList", "rPart": ["Expr", "(", "\";\"", "Expr", ")", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680d091b8558742cb4339cd0"}, "rules": "L4", "data": {"rList": [{"lPart": "programm", "rPart": ["(", "Operator", "|", "ExprFunc", ")", "+"]}, {"lPart": "ExprFunc", "rPart": ["\"function\"", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "\"->\"", "id", "\";\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?", "|", "\"cycle\"", "\"(\"", "OperatorAssTo", "\";\"", "Expr", "\";\"", "OperatorAssTo", "\")\"", "\"{\"", "Operator", "\"}\"", "\"quit\"", "?", "|", "\"put\"", "Expr", "\"to\"", "id", "\";\"", "|", "\"switch\"", "Expr", "\"{\"", "Case", "+", "CaseDef", "?", "\"}\"", "|", "OperReturn", "|", "OperatorEx"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorAssTo", "rPart": ["\"put\"", "Expr", "\"to\"", "id"]}, {"lPart": "OperReturn", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "(", "\"!=\"", ")", "|", "(", "\"==\"", ")", ")", "Expr", ")", "?"]}, {"lPart": "PartElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Case", "rPart": ["\"by\"", "Const", "\"do\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"any\"", "\"do\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Term", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr"]}, {"lPart": "OperatorEx", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0]", "[d]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")", "|", "(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "keyword", "rPart": ["\"function\"", "|", "\"->\"", "|", "\"int\"", "|", "\"float\"", "|", "\"str\"", "|", "\"char\"", "|", "\"return\"", "|", "\"at\"", "|", "\"cycle\"", "|", "\"put\"", "|", "\"quit\"", "|", "\"or\"", "|", "\"do\"", "|", "\"switch\"", "|", "\"by\"", "|", "\"any\"", "|", "\"leave\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Шайдуллин И.Р.","Collection":"454514515",{"_id": {"$oid": "65dc536b4b5d9e0496a74ceb"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "65dc54044b5d9e0496a74cf4"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-Z]", "+"]}], "extension": ""}}{"_id": {"$oid": "65dc55834b5d9e0496a74d05"}, "rules": "lr1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "+", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.,]", "[0,9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[bB]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[/r /t /n]", "+", "[ignoreLastWord=true;]"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "65dc5ddc4b5d9e0496a74d90"}, "rules": "lr1t2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "+", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.,]", "[0,9]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[bB]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[\\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}},
{"FIO":"Калинина Р.А.","Collection":"255452334",{"_id": {"$oid": "67bfc557af563521c9d59ff1"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c056baaf563521c9d5a367"}, "rules": "Пример1", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"put\"", "(", "\"(\"", "Args", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", ")", "\"to\"", "id"]}, {"lPart": "Args", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["AssignOp", "|", "Loop", "|", "Condition", "|", "Expr", "|", "Switch", "|", "(", "\"exit\"", "\";\"", ")", "|", "(", "\"retire\"", "\";\"", ")", "|", "(", "\"return\"", "Expr", "\";\"", ")"]}, {"lPart": "AssignOp", "rPart": ["\"put\"", "(", "Type", ")", "?", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Loop", "rPart": ["\"loop\"", "Block", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expr", "\"do\"", "Block", "PartOrdo"]}, {"lPart": "Expr", "rPart": ["UnaryOperator", "?", "BegExpr", "AddPart", "?"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseBranch", "+", "OtherwiseBranch", "?", "\"}\""]}, {"lPart": "Block", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "PartOrdo", "rPart": ["\"or\"", "\"do\"", "Block"]}, {"lPart": "PartOrdo", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "Constant", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "UnaryOperator", "rPart": ["unarOp", "|", "bothOperator"]}, {"lPart": "Constant", "rPart": ["const", "|", "const2", "|", "const4", "|", "constChar", "|", "constStr"]}, {"lPart": "AddPart", "rPart": ["BinarOp", "Expr"]}, {"lPart": "CaseBranch", "rPart": ["\"when\"", "Constant", "\"then\"", "Block", "*"]}, {"lPart": "OtherwiseBranch", "rPart": ["\"otherwise\"", "Block", "*"]}, {"lPart": "BinarOp", "rPart": ["binarOp", "|", "bothOperator"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "unarOp", "rPart": ["[!]"]}, {"lPart": "bothOperator", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[b]", "[B]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[q]", "[Q]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\\"]", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"\\\\]", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binarOp", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t \\r \\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e434d84635a960233ae48c"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6808ae878558742cb4338807"}, "rules": "Sample2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[b]", "[B]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[q]", "[Q]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\\"]", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"\\\\]", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t \\r \\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "compareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")"]}, {"lPart": "binarOp", "rPart": ["[+*/^%]"]}, {"lPart": "logicOps", "rPart": ["(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "dualOperator", "rPart": ["[-]"]}, {"lPart": "unarOp", "rPart": ["[!]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "680a24b98558742cb433949a"}, "rules": "Пример2", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"put\"", "(", "\"(\"", "Args", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", ")", "\"to\"", "id"]}, {"lPart": "Args", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["AssignOp", "|", "Loop", "|", "Condition", "|", "Expr", "|", "Switch", "|", "(", "\"exit\"", "\";\"", ")", "|", "(", "\"retire\"", "\";\"", ")", "|", "(", "\"return\"", "Expr", "\";\"", ")"]}, {"lPart": "AssignOp", "rPart": ["\"put\"", "(", "Type", ")", "?", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "Loop", "rPart": ["\"loop\"", "Block", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expr", "\"do\"", "Block", "PartOrdo"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "Switch", "rPart": ["\"case\"", "Expr", "\"{\"", "CaseBranch", "+", "OtherwiseBranch", "?", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["(", "UnaryOperator", "|", "\"-\"", ")", "?", "Constant"]}, {"lPart": "AddPart", "rPart": ["(", "(", "BinarOp", ")", "BegExpr", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Block", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Constant", "rPart": ["(", "id", "|", "const", "|", "const2", "|", "const4", "|", "constChar", "|", "constStr", ")"]}, {"lPart": "CaseBranch", "rPart": ["\"when\"", "Constant", "\"then\"", "Block", "*"]}, {"lPart": "OtherwiseBranch", "rPart": ["\"otherwise\"", "Block", "*"]}, {"lPart": "BinarOp", "rPart": ["binarOp", "|", "dualOperator"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[b]", "[B]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[q]", "[Q]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\\"]", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"\\\\]", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarOp", "rPart": ["[!]"]}, {"lPart": "dualOperator", "rPart": ["[-]"]}, {"lPart": "binarOp", "rPart": ["[+*/%]", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t \\r \\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "PartOrdo", "rPart": ["\"or do\"", "Block"]}, {"lPart": "PartOrdo", "rPart": ["~", "\"or do\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "Constant", ")", "*"]}, {"lPart": "UnaryOperator", "rPart": ["unarOp"]}, {"lPart": "Term", "rPart": ["Constant", "|", "\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Слипко П.Д.","Collection":"222315213",{"_id": {"$oid": "67ac934bce6dd03692d07886"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67b8894cce6dd03692d08d97"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", "|", "[a-zA-Z]", "[0-9]", ")", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord; \n"}}{"_id": {"$oid": "67cd495daf563521c9d5cb01"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", "?", "|", "[a-zA-Z]", "[0-9]", "?", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord; \n"}}{"_id": {"$oid": "67dfdd0b4635a960233ac7d9"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Prog", "rPart": ["(", "CompareOperation", "|", "AssignOperation", "|", "CycleOperation", ")", "+"]}, {"lPart": "CompareOperation", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Prog", "\"}\"", "(", "\"not\"", "\"{\"", "Prog", "\"}\"", ")", "?"]}, {"lPart": "AssignOperation", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "CycleOperation", "rPart": ["\"exec\"", "\"{\"", "Prog", "\"}\"", "\"with\"", "\"(\"", "T", "?", "id", "\"from\"", "Const", "\"to\"", "Const", "\")\"", "(", "\"step\"", "|", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr", "?"]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "const10", "|", "stringConst", "|", "charConst"]}, {"lPart": "BExpr", "rPart": ["(", "unary", "|", "unMath", ")", "?", "(", "id", "|", "Const", ")"]}, {"lPart": "EExpr", "rPart": ["(", "SignOfOperation", "Expr", ")", "|", "(", "logic", "Expr", ")", "|", "(", "compare", "Expr", ")"]}, {"lPart": "operators", "rPart": ["(", "CompareOperation", "|", "CycleOperation", "|", "AssignOperation", ")"]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "delimetr", "rPart": ["[;,:]"]}, {"lPart": "unMath", "rPart": ["[+-]"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"long\"", "|", "\"string\""]}], "extension": "var ignoreLastWord; \n"}}{"_id": {"$oid": "67f56b2c8558742cb4334125"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "int4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "Real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Constant", "rPart": ["int4", "|", "int8", "|", "int10", "|", "Real", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "(", "id", "ParamList", ")", "?", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Assignment", "rPart": ["Type", "id", "\"<-\"", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Operator", "\"with\"", "id", "\"from\"", "Constant", "\"to\"", "Constant", "(", "\"step\"", "Constant", ")", "?"]}, {"lPart": "Switch", "rPart": ["\"choice\"", "Expression", "SwitchCase", "+", "SwitchDefault", "?", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"option\"", "Constant", "\":\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"nooption\"", "\":\"", "Operator"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"long\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "(", "\"{\"", "Operator", "\"}\"", ")"]}, {"lPart": "Break", "rPart": ["\"fin\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "CycleBreak", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", "|", "CycleBreak", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "id", "|", "Constant", ")", "\";\""]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}], "extension": ""}}{"_id": {"$oid": "68079b488558742cb43383fe"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "int4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "Real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Constant", "rPart": ["int4", "|", "int8", "|", "int10", "|", "Real", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "(", "id", "ParamList", "?", ")", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Assignment", "rPart": ["Type", "id", "\"<-\"", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Cycle", "rPart": ["\"exec\"", "Operator", "\"with\"", "id", "\"from\"", "Constant", "\"to\"", "Constant", "(", "\"step\"", "Constant", ")", "?", "\";\""]}, {"lPart": "Switch", "rPart": ["\"choice\"", "Expression", "SwitchCase", "+", "SwitchDefault", "?", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"option\"", "Constant", "\":\"", "Operator", "Break", "?"]}, {"lPart": "SwitchDefault", "rPart": ["\"nooption\"", "\":\"", "Operator"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"long\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Break", "rPart": ["\"fin\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "CycleBreak", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", "|", "CycleBreak", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"return\"", "(", "id", "|", "Constant", ")", "\";\""]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}], "extension": ""}}{"_id": {"$oid": "68180fb78558742cb433b5a0"}, "rules": "lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "(", "\"{\"", "Operator", "*", "returnOperator", "\"}\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"long\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "returnOperator", "rPart": ["\"return\"", "Expression", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Conditional", "|", "ParamList", "|", "Switch", "|", "Cycle", "|", "Reassignment", ")", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Expression", "rPart": ["{ctlStk.push(this.currentLexem[1]);}", "Unary", "BeginExpression", "{toPFR(\"Unary\"+ctlStk.pop());}", "EndExpression"]}, {"lPart": "Assignment", "rPart": ["{toPFR(this.currentLexem[1]);}", "Type", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"<-\");}", "\"<-\"", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "ConditionalElse"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Switch", "rPart": ["\"choice\"", "Expression", "SwitchCase", "+", "SwitchDefault", "?", "\"end\""]}, {"lPart": "Cycle", "rPart": ["{ctlStk.push(++Count);toPFR(\"Label \"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator", ")", "{toPFR(\"Label0 \"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1 \"+ctlStk.pop()+\":\");}", "\"with\"", "id", "\"from\"", "ConstantNumber", "\"to\"", "{toPFR(\"from \"+this.currentLexem[1]); toPFR(\"to \" + this.currentLexem[1]);}", "ConstantNumber", "(", "\"step\"", "{ toPFR( \"step\"+ this.currentLexem[1]);}", "ConstantNumber", ")", "?", "CycleBreak", "?"]}, {"lPart": "Reassignment", "rPart": ["id", "\"<-\"", "Expression"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "FullConst"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "ParamList", "?"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "unaryMath", ")", "Expression", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "ConstantNumber", "rPart": ["int4", "|", "int8", "|", "int10", "|", "Real"]}, {"lPart": "FullConst", "rPart": ["(", "Constant", "|", "ConstantNumber", ")"]}, {"lPart": "SwitchCase", "rPart": ["\"option\"", "FullConst", "\":\"", "Operator", "*", "Break", "?"]}, {"lPart": "SwitchDefault", "rPart": ["\"nooption\"", "\":\"", "Operator", "*"]}, {"lPart": "CycleBreak", "rPart": ["\"exit\""]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Constant", "rPart": ["string", "|", "char"]}, {"lPart": "Break", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "int4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "Real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "EndExpression", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar ctlStk=[];\nvar whileCnt=0;\nvar cycleStack = [];\nvar CycleCount = 0;\nfunction reboot() {\n cycleStack = [];\n Count = 0;\n}\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}{"_id": {"$oid": "681858f38558742cb433b6fe"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt = 0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Берлезова А.В.","Collection":"221421112",{"_id": {"$oid": "67b362b7ce6dd03692d08197"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b3635bce6dd03692d081a3"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67ce595baf563521c9d5cf52"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["\"let\"", "id", "\"on\"", "(", "id", "|", "const", "|", "constReal", "|", "constChar", "|", "constStr", ")", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e151fc4635a960233ad2ca"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "binMath", "rPart": ["(", "\"*\"", "|", "\"/\"", "|", "\"+\"", "|", "\"-\"", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["(", "[!]", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[&&]", ")", "|", "(", "[||]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "Constants", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr"]}, {"lPart": "UnOperations", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "BinOperations", "rPart": ["binMath", "|", "binLogic", "|", "compare"]}, {"lPart": "Assigment", "rPart": ["(", "\"let\"", "id", "\"on\"", "Expression", "\";\"", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["UnOperations", "?", "(", "id", "|", "Constants", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "UnOperations", "|", "BinOperations", ")", "|", "Expression", ")", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f409de8558742cb43336d0"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["(", "[+-]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["(", "[!]", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[&&]", ")", "|", "(", "[||]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["UnOperations", "?", "(", "id", "|", "Constants", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "UnOperations", "|", "BinOperations", ")", "Expression", ")", "?"]}, {"lPart": "UnOperations", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "BinOperations", "rPart": ["binMath", "|", "binLogic", "|", "compare"]}, {"lPart": "Constants", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr", "|", "\"false\""]}, {"lPart": "Assigment", "rPart": ["\"let\"", "id", "\"on\"", "Expression"]}, {"lPart": "Operator", "rPart": ["(", "Declare", "|", "Assigment", "|", "Break", "|", "Return", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Cycle", "|", "Condition", "|", "Switch", "|", "comments"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"const\"", "|", "\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"boolean\""]}, {"lPart": "Declare", "rPart": ["Type", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assigment", "?", "\";\"", "Expression", "?", "\";\"", "Assigment", "?", "\")\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionDo", "ConditionOrDo"]}, {"lPart": "ConditionDo", "rPart": ["\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionOrDo", "rPart": ["\"or\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Function", "rPart": ["(", "\"void\"", "|", "Type", ")", "?", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}], "extension": ""}}{"_id": {"$oid": "6804c2348558742cb4337c17"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "binMath", "rPart": ["[*/+-]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["(", "[!]", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[&&]", ")", "|", "(", "[||]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["UnOperations", "?", "(", "(", "id", "FunctionCall", "?", ")", "|", "Constants", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "BinOperations", ")", "Expression"]}, {"lPart": "UnOperations", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "BinOperations", "rPart": ["binMath", "|", "binLogic", "|", "compare"]}, {"lPart": "Constants", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr", "|", "\"false\""]}, {"lPart": "Assigment", "rPart": ["\"let\"", "id", "\"on\"", "Expression"]}, {"lPart": "Operator", "rPart": ["(", "Declare", "|", "Assigment", "|", "Break", "|", "Return", "|", "(", "id", "FunctionCall", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Cycle", "|", "Condition", "|", "Switch"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"const\"", "|", "\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"boolean\""]}, {"lPart": "Declare", "rPart": ["Type", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Assigment", "?", "\";\"", "Expression", "?", "\";\"", "Assigment", "?", "\")\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionDo", "ConditionOrDo"]}, {"lPart": "ConditionDo", "rPart": ["\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionOrDo", "rPart": ["\"or\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionOrDo", "rPart": ["~", "\"or\""]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}], "extension": ""}}{"_id": {"$oid": "6819ef868558742cb433c024"}, "rules": "Lab7", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unMath", "rPart": ["[+-]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["(", "[!]", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[&&]", ")", "|", "(", "[||]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Expression", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "UnOperations", "BegExpr", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExpr"]}, {"lPart": "Expression", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "FunctionCall", "?"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constants"]}, {"lPart": "BegExpr", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "EndExpr", "rPart": ["{ if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop()); opStack.push(this.currentLexem[1]); }", "(", "BinOperations", "|", "unMath", ")", "Expression", "{ if(opStack.length > 0) toPFR(opStack.pop()); }"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "UnOperations", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "BinOperations", "rPart": ["binMath", "|", "binLogic", "|", "compare"]}, {"lPart": "Constants", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr", "|", "\"false\""]}, {"lPart": "Assignment", "rPart": ["\"let\"", "{toPFR(this.currentLexem[1]);}", "id", "\"on\"", "Expression", "{toPFR(\"=\");}"]}, {"lPart": "Operator", "rPart": ["(", "Declare", "|", "Assignment", "|", "Break", "|", "Return", "|", "(", "id", "FunctionCall", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Cycle", "|", "Condition", "|", "Switch"]}, {"lPart": "Operators", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"const\"", "|", "\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"boolean\""]}, {"lPart": "Declare", "rPart": ["Type", "id"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression", "{toPFR(\"return\");}"]}, {"lPart": "Cycle", "rPart": ["{cycleStack.push(++cycleCount);}", "\"cycle\"", "\"(\"", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack)+\":\");}", "\";\"", "(", "Expression", "{toPFR(\"CycleEnd_\"+peek(cycleStack));toPFR(\"JumpOnFalse\");toPFR(\"CycleBody_\"+peek(cycleStack));toPFR(\"Jump\");}", ")", "?", "\";\"", "{toPFR(\"CycleAssignment_\"+peek(cycleStack)+\":\");}", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack));toPFR(\"Jump\");}", "\")\"", "{toPFR(\"CycleBody_\"+peek(cycleStack)+\":\");}", "(", "Operator", "|", "Operators", ")", "{toPFR(\"CycleAssignment_\"+peek(cycleStack));toPFR(\"Jump\");toPFR(\"CycleEnd_\"+cycleStack.pop()+\":\");}"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionDo", "ConditionOrDo"]}, {"lPart": "ConditionDo", "rPart": ["\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionOrDo", "rPart": ["\"or\"", "\"do\"", "(", "Operator", "|", "Operators", ")"]}, {"lPart": "ConditionOrDo", "rPart": ["~", "\"or\""]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operators"]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "(", "\"case\"", "\"(\"", "Constants", "\")\"", "(", "Operator", "|", "Operators", ")", "*", ")", "+", "\"end\""]}, {"lPart": "Program", "rPart": ["{resetAll();}", "Function", "+"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n};\n\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for(var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\n// Стеки для обработки операций и управления потоком\nvar unaryStack, opStack, cycleStack, cycleCount;\n\nfunction resetAll() {\n    unaryStack = [];\n    opStack = [];\n    cycleStack = [];\n    cycleCount = 0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\n// Функция определения приоритета операций\nfunction getPriority(s) {\n    switch(s) {\n        case \"(\": return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\": return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\": return 2;\n    }\n}"}}{"_id": {"$oid": "6819efa18558742cb433c02e"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{resetAll();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "Operator"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"const\"", "|", "\"real\"", "|", "\"char\"", "|", "\"string\"", "|", "\"boolean\""]}, {"lPart": "Operator", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["(", "Declare", "|", "Assignment", "|", "Break", "|", "Return", "|", "(", "id", "FunctionCall", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Cycle", "|", "Condition", "|", "Switch"]}, {"lPart": "Cycle", "rPart": ["{cycleStack.push(++cycleCount);}", "\"cycle\"", "\"(\"", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack)+\":\");}", "\";\"", "(", "Expression", "{toPFR(\"CycleEnd_\"+peek(cycleStack));toPFR(\"JumpOnFalse\");toPFR(\"CycleBody_\"+peek(cycleStack));toPFR(\"Jump\");}", ")", "?", "\";\"", "{toPFR(\"CycleAssignment_\"+peek(cycleStack)+\":\");}", "Assignment", "?", "{toPFR(\"CycleBegin_\"+peek(cycleStack));toPFR(\"Jump\");}", "\")\"", "{toPFR(\"CycleBody_\"+peek(cycleStack)+\":\");}", "Operator", "{toPFR(\"CycleAssignment_\"+peek(cycleStack));toPFR(\"Jump\");toPFR(\"CycleEnd_\"+cycleStack.pop()+\":\");}"]}, {"lPart": "Condition", "rPart": ["\"at\"", "Expression", "ConditionDo", "ConditionOrDo"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expression", "SwitchCase"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "Constants", "\")\"", "Operator", "+", "\"end\""]}, {"lPart": "Declare", "rPart": ["Type", "id"]}, {"lPart": "Assignment", "rPart": ["\"let\"", "id", "{toPFR(\"=\");}", "\"on\"", "{toPFR(this.currentLexem[1]);}", "Expression"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression"]}, {"lPart": "Expression", "rPart": ["{unaryStack.push(this.currentLexem[1]);}", "UnOperations", "?", "BegExpr", "{toPFR(\"Unary\"+unaryStack.pop());}", "EndExpr", "?"]}, {"lPart": "Expression", "rPart": ["BegExpr", "EndExpr", "?"]}, {"lPart": "ConditionDo", "rPart": ["\"do\"", "Operator"]}, {"lPart": "ConditionOrDo", "rPart": ["\"or\"", "\"do\"", "Operator"]}, {"lPart": "ConditionOrDo", "rPart": ["~", "\"or\""]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "UnOperations", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "FunctionCall", "?"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Constants"]}, {"lPart": "BegExpr", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "Constants", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr", "|", "\"false\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1])))toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "BinOperations", "|", "binMath", ")", "Expression", "{if(opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "BinOperations", "rPart": ["binMath", "|", "binLogic", "|", "compare"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "unMath", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "unLogic", "rPart": ["(", "[!]", ")"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[8]", "[x]", "[0-7]", "+", ")", "|", "[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binMath", "rPart": ["[*/+-]"]}, {"lPart": "binLogic", "rPart": ["(", "[&&]", ")", "|", "(", "[||]", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\nfunction Tracer() {\n    this.history = [];\n};\n\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for(var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\n// Стеки для обработки операций и управления потоком\nvar unaryStack, opStack, cycleStack, cycleCount;\n\nfunction resetAll() {\n    unaryStack = [];\n    opStack = [];\n    cycleStack = [];\n    cycleCount = 0;\n}\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n\n// Функция определения приоритета операций\nfunction getPriority(s) {\n    switch(s) {\n        case \"(\": return 0;\n        case \"+\":\n        case \"-\":\n        case \"<\":\n        case \">\":\n        case \"==\":\n        case \"!=\":\n        case \"<=\":\n        case \">=\":\n        case \"||\": return 1;\n        case \"*\":\n        case \"/\":\n        case \"&&\": return 2;\n    }\n}"}}},
{"FIO":"Пугач К.С.","Collection":"545412555",{"_id": {"$oid": "67ad8c5cce6dd03692d0793a"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[_]", "(", "[a-zA-Z0-9]", ")", "*", "[_]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "?", "[']", ")"]}, {"lPart": "constString", "rPart": ["(", "[\"]", "[]", "*", "[\"]", ")"]}, {"lPart": "constDecimal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0[9]", "*", ")", ")", "(", "[.]", "(", "[0-9]", "+", ")", "?", ")", "?"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[1-3]", "[0-3]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "(", "[1-9a-fA-F]", "[0-9a-fA-F]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]"]}], "extension": ""}}{"_id": {"$oid": "67ada8acce6dd03692d079e5"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67cdc01faf563521c9d5ce44"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{1,3}", "[a-zA-Z]"]}, {"lPart": "constBinary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "[0-3]", "*"]}, {"lPart": "signs", "rPart": ["[+-/%\\*]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "brackets", "rPart": ["[\\(\\)\\{\\}\\[\\]]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "dash", "rPart": ["[-]", "[>]"]}], "extension": ""}}{"_id": {"$oid": "67ebacaea600182c7517a8b7"}, "rules": "laba3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constBinary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "operand", "\")\"", "operblock", "\"->\"", "id", "\";\""]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "\"exit;\""]}, {"lPart": "assignment", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"at\"", "\"(\"", "expr", "\")\"", "\"do\"", "(", "operblock", ")", "else", "?"]}, {"lPart": "else", "rPart": ["\"or do\"", "operblock"]}, {"lPart": "const", "rPart": ["constBinary", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "switch", "rPart": ["\"case\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "\"exit;\"", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\"", "\"exit;\"", "?"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operations", "rPart": ["signs", "|", "logical"]}], "extension": ""}}{"_id": {"$oid": "67ebacd4a600182c7517a8c2"}, "rules": "laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constBinary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "operand", "\")\"", "operblock", "\"->\"", "id", "\";\""]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle", "|", "exit"]}, {"lPart": "assignment", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "if", "rPart": ["\"at\"", "\"(\"", "expr", "\")\"", "\"do\"", "(", "operblock", ")", "else", "?"]}, {"lPart": "else", "rPart": ["\"or do\"", "operblock"]}, {"lPart": "const", "rPart": ["constBinary", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "switch", "rPart": ["\"case\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "exit", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\"", "exit", "?"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operations", "rPart": ["signs", "|", "logical"]}, {"lPart": "exit", "rPart": ["\"exit;\""]}], "extension": ""}}{"_id": {"$oid": "67f13371a600182c7517b571"}, "rules": "laba4", "data": {"rList": [{"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "operand", "\")\"", "operblock", "\"->\"", "id", "delim"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "assignment", "rPart": ["\"put\"", "expr", "\"to\"", "id", "delim"]}, {"lPart": "if", "rPart": ["\"at\"", "\"(\"", "expr", "\")\"", "\"do\"", "(", "operblock", ")", "else"]}, {"lPart": "else", "rPart": ["\"or do\"", "operblock"]}, {"lPart": "else", "rPart": ["~", "\"or do\""]}, {"lPart": "const", "rPart": ["constBinary", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "switch", "rPart": ["\"case\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "(", "\"exit;\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "delim", "(", "\"exit;\"", ")", "?"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operations", "rPart": ["signs", "|", "logical"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constBinary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}], "extension": ""}}{"_id": {"$oid": "6803e7098558742cb4337a0a"}, "rules": "laba5", "data": {"rList": [{"lPart": "global", "rPart": ["(", "func", "|", "operator", ")", "*"]}, {"lPart": "operator", "rPart": ["assignment", "|", "if", "|", "switch", "|", "cycle"]}, {"lPart": "func", "rPart": ["\"function\"", "\"(\"", "operand", "\")\"", "operblock", "\"->\"", "id", "delim"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "assignment", "rPart": ["\"put\"", "expr", "\"to\"", "id", "delim"]}, {"lPart": "if", "rPart": ["\"at\"", "\"(\"", "expr", "\")\"", "\"do\"", "(", "operblock", ")", "else"]}, {"lPart": "else", "rPart": ["\"or do\"", "operblock"]}, {"lPart": "else", "rPart": ["~", "\"or do\""]}, {"lPart": "const", "rPart": ["constBinary", "|", "constOctal", "|", "constDecimal", "|", "constChar", "|", "constString"]}, {"lPart": "switch", "rPart": ["\"case\"", "\"(\"", "expr", "\")\"", "\"{\"", "(", "\"when\"", "const", "\"then\"", "operblock", "(", "\"exit;\"", ")", "?", ")", "+", "(", "\"otherwise\"", "operblock", ")", "?", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"exec\"", "operblock", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "delim", "(", "\"exit;\"", ")", "?"]}, {"lPart": "expr", "rPart": ["operand", "(", "operations", "expr", ")", "?"]}, {"lPart": "operblock", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operations", "rPart": ["signs", "|", "logical"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constBinary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "signs", "rPart": ["[-+/%*]"]}, {"lPart": "delim", "rPart": ["[;]"]}, {"lPart": "logical", "rPart": ["(", "[>]", ")", "|", "(", "[<]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}], "extension": ""}}},
{"FIO":"Мякинин Я.А.","Collection":"354313114",{"_id": {"$oid": "67bc6531af563521c9d58f06"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bc6b39af563521c9d58f4b"}, "rules": "L1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+", "[0-9a-zA-Z]", "*"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+-/*!<>]", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>!=]", "[=]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d035cdaf563521c9d5d8aa"}, "rules": "L2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "realint", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+-/*]"]}, {"lPart": "logicOperator", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[!<>]", ")"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "Expr", "delimetr"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "Expr", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "loop", "rPart": ["\"exec\"", "\"{\"", "loopBlock", "\"}\"", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "block", "(", "\"off\"", "\";\"", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "const", "rPart": ["realint", "|", "string", "|", "bin", "|", "four", "|", "char"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"realint\"", "|", "\"four\"", "|", "\"bin\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "function", "rPart": ["(", "type", ")", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\""]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "const", ")", "logicOperator", "(", "id", "|", "const", ")"]}, {"lPart": "loopBlock", "rPart": ["(", "block", ")", "(", "\"exit\"", "\";\"", ")", "?", "(", "loopBlock", ")", "?"]}, {"lPart": "delimetr", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e104824635a960233acf7d"}, "rules": "L3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "realint", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+-/*]"]}, {"lPart": "logicOperator", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"realint\"", "|", "\"four\"", "|", "\"bin\""]}, {"lPart": "const", "rPart": ["realint", "|", "string", "|", "bin", "|", "four", "|", "char"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "Expr", "delimetr"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "sign", "Expr", ")", "?"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "loop", "rPart": ["\"exec\"", "\"{\"", "loopBlock", "\"}\"", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any do\"", "block", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "block", "(", "\"off\"", "delimetr", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "function", "rPart": ["type", "?", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"}\""]}, {"lPart": "condElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "const", ")", "logicOperator", "(", "id", "|", "const", ")"]}, {"lPart": "loopBlock", "rPart": ["(", "block", ")", "(", "\"exit\"", "delimetr", ")", "?", "(", "loopBlock", ")", "?"]}, {"lPart": "Operator", "rPart": ["assign", "|", "switch", "|", "loop", "|", "function", "|", "cond"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "delimetr", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6415a8558742cb43344cd"}, "rules": "L4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "realint", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+-/*]"]}, {"lPart": "logicOperator", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "type", "rPart": ["\"char\"", "|", "\"string\"", "|", "\"realint\"", "|", "\"four\"", "|", "\"bin\""]}, {"lPart": "const", "rPart": ["realint", "|", "string", "|", "bin", "|", "four", "|", "char"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "Expr", "delimetr"]}, {"lPart": "Expr", "rPart": ["Term", "(", "sign", "Expr", ")", "?"]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "logExpr", "\")\"", "\"then\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "loop", "rPart": ["\"exec\"", "\"{\"", "loopBlock", "\"}\"", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any do\"", "\"{\"", "block", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "\"{\"", "block", "\"}\"", "(", "\"off\"", "delimetr", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "function", "rPart": ["type", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"}\""]}, {"lPart": "condElse", "rPart": ["\"not\"", "\"{\"", "block", "\"}\""]}, {"lPart": "block", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "logExpr", "rPart": ["Term", "logicOperator", "Term"]}, {"lPart": "loopBlock", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "cond", ")", "(", "exit", "delimetr", ")", "?", "(", "loopBlock", ")", "?"]}, {"lPart": "Operator", "rPart": ["assign", "|", "switch", "|", "loop", "|", "function", "|", "cond"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Тюмин В.М.","Collection":"321225144",{"_id": {"$oid": "67c87bceaf563521c9d5c190"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c87ffcaf563521c9d5c1ac"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c883b9af563521c9d5c1c6"}, "rules": "моеправило", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]"]}, {"lPart": "const", "rPart": ["(", "[-]", ")", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[0-3]", "+", "[4]", ")", "?", "(", "[0-7]", "+", "[8]", ")", "?", "(", "[0-9]", "+", ")", "?", "(", "[a-zA-Z]", "+", "[s]", ")", "?", "[]", "?"]}, {"lPart": "const", "rPart": ["[']", "[ ]", "[']"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67c892eaaf563521c9d5c248"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[#]", "(", "[a-z]", "?", "[a-z]", "?", "[a-z]", "?", ")", "[a-zA-Z0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", ")", "|", "(", "[o]", "[4]", "[0-3]", "+", ")", "|", "(", "[o]", "[8]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[\"]", "[]", "+", "[\"]", ")"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Лапин Н.А.","Collection":"211415245",{"_id": {"$oid": "67c442e1af563521c9d5b0f1"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 2000, "assist": 1}}{"_id": {"$oid": "67c445e4af563521c9d5b12a"}, "rules": "lab1", "data": {"rList": [{"lPart": "programm", "rPart": ["ObyavlenieFunction", "*"]}, {"lPart": "ObyavlenieFunction", "rPart": ["id", "\"(\"", "(", "types", "id", "(", "\",\"", "types", "id", ")", "*", ")", "?", "\")\"", "\"ret\"", "types", "OperBlockerVse"]}, {"lPart": "types", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", ")"]}, {"lPart": "OperBlockerVse", "rPart": ["\"{\"", "operatori", "*", "\"}\""]}, {"lPart": "operatori", "rPart": ["Oper", "|", "UslovniyOper", "|", "CycleOperator", "|", "Pereklychatel", "|", "id", "(", "\"(\"", "Exspreska", "(", "\",\"", "Exspreska", ")", "*", "\")\"", ")", "\";\""]}, {"lPart": "operatori", "rPart": ["(", "\"exit\"", "\";\"", ")", "|", "fin"]}, {"lPart": "operatori", "rPart": ["\"ret\"", "Exspreska", "?", "\";\""]}, {"lPart": "Oper", "rPart": ["\"let\"", "id", "\"on\"", "Exspreska", "\";\""]}, {"lPart": "UslovniyOper", "rPart": ["\"at\"", "Exspreska", "\"do\"", "(", "operatori", "|", "OperBlocker", ")", "ElseOperator"]}, {"lPart": "fin", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "CycleOperator", "rPart": ["\"exec\"", "(", "operatori", "|", "OperBlocker", ")", "\"with\"", "id", "\"from\"", "DecConstantik", "\"to\"", "DecConstantik", "\"step\"", "DecConstantik"]}, {"lPart": "Pereklychatel", "rPart": ["\"choice\"", "Exspreska", "CasePereklychatel", "+", "\"nooption\"", "PereklychatelBody", "*", "\"end\""]}, {"lPart": "Exspreska", "rPart": ["unarniy", "?", "(", "id", "(", "\"(\"", "(", "Exspreska", "(", "\",\"", "Exspreska", ")", "*", ")", "?", "\")\"", ")", "?", "|", "constantik", "|", "\"(\"", "Exspreska", "\")\"", ")", "(", "(", "minus", "|", "binarniy", ")", "Exspreska", ")", "?"]}, {"lPart": "ElseOperator", "rPart": ["\"or\"", "\"do\"", "(", "operatori", "|", "OperBlocker", ")"]}, {"lPart": "ElseOperator", "rPart": ["~", "\"or\""]}, {"lPart": "OperBlocker", "rPart": ["\"{\"", "operatori", "+", "\"}\""]}, {"lPart": "CasePereklychatel", "rPart": ["\"option\"", "constantik", "\":\"", "PereklychatelBody", "*"]}, {"lPart": "PereklychatelBody", "rPart": ["operatori", "|", "(", "OperBlockerVse", ")"]}, {"lPart": "unarniy", "rPart": ["minus", "|", "UnarOper"]}, {"lPart": "constantik", "rPart": ["DecConstantik", "|", "floatConstantik", "|", "charConst", "|", "EConstantik"]}, {"lPart": "binarniy", "rPart": ["BinOperation", "|", "BinOperationLogika", "|", "BinOperationSravnenie"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "DecConstantik", "rPart": ["[0-9]", "+"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "UnarOper", "rPart": ["[!]"]}, {"lPart": "floatConstantik", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "EConstantik", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "BinOperation", "rPart": ["[+*/%]"]}, {"lPart": "BinOperationLogika", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "BinOperationSravnenie", "rPart": ["(", "[<]", "|", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "probel", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": ""}}},
{"FIO":"Евтушенко А.В.","Collection":"354533344",{"_id": {"$oid": "67aec317ce6dd03692d07b8a"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67af169bce6dd03692d07c63"}, "rules": "Laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "operationUnary", "rPart": ["[!]", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b08efbce6dd03692d07d39"}, "rules": "Laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\]", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"ntr\\\\]", ")", ")", "+", "[\"]"]}, {"lPart": "sign", "rPart": ["[-+*/=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2b166e0b22203e7cbf3fa"}, "rules": "Laba3", "data": {"rList": [{"lPart": "OperatorQueue", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["id", "assign", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")", "ElseIf", "Else"]}, {"lPart": "Operator", "rPart": ["Type", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")", "ElseIf"]}, {"lPart": "ElseIf", "rPart": []}, {"lPart": "Else", "rPart": ["\":\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Else", "rPart": []}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "BegExpr", "rPart": ["(", "operationUnary", "|", "operationAmbivalently", ")", "?", "(", "const", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "operationUnary", "|", "operationOnlyIdUnary", "|", "operationAmbivalently", ")", "?", "id"]}, {"lPart": "BegExpr", "rPart": ["(", "operationUnary", "|", "operationAmbivalently", ")", "?", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "operationBinary", "|", "operationAmbivalently", ")", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationOnlyIdUnary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e51fa64635a960233aeb5c"}, "rules": "Laba4", "data": {"rList": [{"lPart": "OperatorQueue", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["id", "assign", "(", "(", "(", "\"[\"", "Type", "\"]\"", ")", "?", "Expr", "\";\"", ")", "|", "(", "Function", ")", ")"]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf", "Else"]}, {"lPart": "Operator", "rPart": ["Type", "id", "(", "assign", "(", "\"[\"", "Type", "\"]\"", ")", "?", "Expr", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "OperatorBlock"]}, {"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "Case", "+", "AnyCase", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Function", "rPart": ["Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["(", "operationUnary", "|", "operationAmbivalently", ")", "?", "(", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")", "|", "id", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "operationOnlyIdUnary", ")", "id"]}, {"lPart": "EndExpr", "rPart": ["(", "operationBinary", "|", "operationAmbivalently", ")", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Case", "rPart": ["\"by\"", "const", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "AnyCase", "rPart": ["\"any\"", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}, {"lPart": "operationOnlyIdUnary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7806a8558742cb4335318"}, "rules": "Laba5", "data": {"rList": [{"lPart": "seq", "rPart": ["(", "Function", "|", "FunctionUse", ")", "+"]}, {"lPart": "Function", "rPart": ["id", "assign", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["id", "assign", "(", "\"[\"", "Type", "\"]\"", ")", "?", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf", "Else"]}, {"lPart": "Operator", "rPart": ["Type", "id", "(", "assign", "(", "\"[\"", "Type", "\"]\"", ")", "?", "Expr", ")", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "OperatorBlock"]}, {"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "Case", "+", "AnyCase", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "BegExpr", "rPart": ["(", "operationUnary", "|", "operationAmbivalently", ")", "?", "(", "const", "|", "(", "\"(\"", "Expr", "\")\"", ")", "|", "id", ")"]}, {"lPart": "BegExpr", "rPart": ["(", "operationOnlyIdUnary", ")", "id"]}, {"lPart": "EndExpr", "rPart": ["(", "operationBinary", "|", "operationAmbivalently", ")", "Expr"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Case", "rPart": ["\"by\"", "const", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "AnyCase", "rPart": ["\"any\"", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}, {"lPart": "operationOnlyIdUnary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "FunctionUse", "rPart": ["id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808a35c8558742cb4338766"}, "rules": "Laba6", "data": {"rList": [{"lPart": "seq", "rPart": ["{whileCnt=0;}", "(", "Function", ")", "+"]}, {"lPart": "Function", "rPart": ["id", "assign", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{curType=\"0\";}", "{toPFR(this.currentLexem[1]);}", "id", "assign", "(", "\"[\"", "{curType=this.currentLexem[1];}", "Type", "\"]\"", ")", "?", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "{curType !== \"0\" && (toPFR(curType), toPFR(\"toType\"), curType = \"0\");}", "{ toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf", "Else"]}, {"lPart": "Operator", "rPart": ["{curType=\"0\";}", "{idType=this.currentLexem[1];}", "Type", "{toPFR(this.currentLexem[1]);toPFR(idType);toPFR(\"defVar\")}", "id", "(", "assign", "(", "\"[\"", "{curType=this.currentLexem[1];}", "Type", "\"]\"", ")", "?", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "{curType !== \"0\" && (toPFR(curType), toPFR(\"toType\"), curType = \"0\");}", "{ toPFR(\"=\");}", ")", "?", "(", "\",\"", "{toPFR(this.currentLexem[1]);idTbl.push(this.currentLexem[1]);toPFR(idType);toPFR(\"toType\")}", "id", "(", "assign", "(", "\"[\"", "{curType=this.currentLexem[1];}", "Type", "\"]\"", ")", "?", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "{curType !== \"0\" && (toPFR(curType), toPFR(\"toType\"), curType = \"0\");}", "{ toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "OperatorBlock", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["\"leave\"", "\";\"", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "Case", "+", "AnyCase", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "BegExpr", "rPart": ["(", "{opStk.push(this.currentLexem[1])}", "(", "operationUnary", ")", "|", "{opStk.push(\"-u\")}", "(", "{toPFR(\"0\");}", "operationAmbivalently", ")", ")", "?", "(", "(", "{toPFR(this.currentLexem[1]);}", "const", ")", "|", "(", "{opStk.push(\"(\");}", "\"(\"", "Expr", "\")\"", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "{toPFR(opStk.pop());}", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1])}", "(", "operationOnlyIdUnary", ")", "{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "{opStk.push(this.currentLexem[1]);}", "(", "operationBinary", "|", "operationAmbivalently", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Case", "rPart": ["\"by\"", "const", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "AnyCase", "rPart": ["\"any\"", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationOnlyIdUnary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\n\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"||\") return 10;\n if(s == \"&&\") return 20;\n if(s == \"==\") return 30;\n if(s == \"!=\") return 30;\n if(s == \">=\") return 30;\n if(s == \"<=\") return 30;\n if(s == \">\") return 30;\n if(s == \"<\") return 30;\n if(s == \"+\") return 40;\n if(s == \"-\") return 40;\n if(s == \"*\") return 50;\n if(s == \"/\") return 50;\n if(s == \"!\") return 60;\n if(s == \"--\") return 60;\n if(s == \"++\") return 60;\n if(s == \"-u\") return 60;\n return 0;\n}\n"}}{"_id": {"$oid": "6808c1958558742cb43388bf"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "680995838558742cb433905a"}, "rules": "Laba6Test", "data": {"rList": [{"lPart": "seq", "rPart": ["{whileCnt=0;}", "(", "Function", ")", "+"]}, {"lPart": "Function", "rPart": ["id", "assign", "Type", "\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{curType=\"0\";}", "{toPFR(this.currentLexem[1]);idTbl.push(this.currentLexem[1])}", "id", "assign", "(", "\"[\"", "{curType=this.currentLexem[1];}", "Type", "\"]\"", ")", "?", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "{curType !== \"0\" && (toPFR(curType), toPFR(\"defVar\"), curType = \"0\");}", "{ toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf", "Else"]}, {"lPart": "Operator", "rPart": ["{curType=\"0\";}", "{idType=this.currentLexem[1];}", "Type", "{toPFR(this.currentLexem[1]);idTbl.push(this.currentLexem[1]);toPFR(idType);toPFR(\"defVar\")}", "id", "(", "assign", "(", "\"[\"", "{curType=this.currentLexem[1];}", "Type", "\"]\"", ")", "?", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "{curType !== \"0\" && (toPFR(curType), toPFR(\"defVar\"), curType = \"0\");}", "{ toPFR(\"=\");}", ")", "?", "(", "\",\"", "{toPFR(this.currentLexem[1]);idTbl.push(this.currentLexem[1]);toPFR(idType);toPFR(\"defVar\")}", "id", "(", "assign", "(", "\"[\"", "{curType=this.currentLexem[1];}", "Type", "\"]\"", ")", "?", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", "{curType !== \"0\" && (toPFR(curType), toPFR(\"defVar\"), curType = \"0\");}", "{ toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "OperatorBlock", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["\"leave\"", "\";\"", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "Case", "+", "AnyCase", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "OperatorBlock", "rPart": ["(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "OperatorBlock", "ElseIf"]}, {"lPart": "ElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "Else", "rPart": ["\":\"", "(", "Operator", "|", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["~", "\":\""]}, {"lPart": "BegExpr", "rPart": ["(", "{opStk.push(this.currentLexem[1])}", "(", "operationUnary", ")", "|", "{opStk.push(this.currentLexem[1])}", "(", "{toPFR(\"0\");}", "operationAmbivalently", ")", ")", "?", "(", "(", "{toPFR(this.currentLexem[1]);}", "const", ")", "|", "(", "{opStk.push(\"(\");}", "\"(\"", "Expr", "\")\"", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "{toPFR(opStk.pop());}", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1])}", "(", "operationOnlyIdUnary", ")", "{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "{opStk.push(this.currentLexem[1]);}", "(", "operationBinary", "|", "operationAmbivalently", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "Case", "rPart": ["\"by\"", "const", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "AnyCase", "rPart": ["\"any\"", "\"do\"", "OperatorBlock", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-f]", "[0-9a-f]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationOnlyIdUnary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operationAmbivalently", "rPart": ["[-]"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"||\") return 10;\n if(s == \"&&\") return 20;\n if(s == \"==\") return 30;\n if(s == \"!=\") return 30;\n if(s == \">=\") return 30;\n if(s == \"<=\") return 30;\n if(s == \">\") return 30;\n if(s == \"<\") return 30;\n if(s == \"+\") return 40;\n if(s == \"-\") return 40;\n if(s == \"*\") return 50;\n if(s == \"/\") return 50;\n if(s == \"!\") return 60;\n if(s == \"--\") return 60;\n if(s == \"++\") return 60;\n return 0;\n}\n"}}},
{"FIO":"Смирнов Е.А.","Collection":"344244115",{"_id": {"$oid": "67b421fece6dd03692d081e3"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+4", "deltat": 500, "assist": 1}}{"_id": {"$oid": "67b434d2ce6dd03692d081f3"}, "rules": "Пример11", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+", "(", "[.]", "[0-1]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+", "(", "[.]", "[0-7]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "signOfOperation", "rPart": ["[-+/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6a47ae0b22203e7cbfdb6"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[0-1]", "+", "(", "[.]", "[0-1]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "[0-7]", "+", "(", "[.]", "[0-7]", "+", ")", "?"]}, {"lPart": "constDec", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "signOfOperation", "rPart": ["[-+/*]"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "switchOperator", "rPart": ["(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")"]}, {"lPart": "compareOperator", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "conditionWhen", "rPart": ["[w]", "[h]", "[e]", "[n]", "[ ]"]}, {"lPart": "condtionOther", "rPart": ["[o]", "[t]", "[h]", "[e]", "[r]", "[ ]"]}, {"lPart": "cycleForeach", "rPart": ["[f]", "[o]", "[r]", "[e]", "[a]", "[c]", "[h]", "[ ]"]}, {"lPart": "cycleIn", "rPart": ["[i]", "[n]", "[ ]"]}, {"lPart": "cycleStop", "rPart": ["[s]", "[t]", "[o]", "[p]", "[ ]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e92aba4635a960233af984"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e93fa34635a960233afaea"}, "rules": "Sample2", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9]", "+", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["Id", "|", "ConstInt", "|", "ConstFloat", "|", "ConstStr", "|", "ConstChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["Id", "Assign", "Expr", "Delimiter"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "BlockOrOperator"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e942aa4635a960233afb1c"}, "rules": "123", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9]", "+", ")", "*", "[\"]"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["Id", "|", "ConstInt", "|", "ConstFloat", "|", "ConstStr", "|", "ConstChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["Id", "Assign", "Expr", "Delimiter"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", ")", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "BlockOrOperator"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fa34d48558742cb433577f"}, "rules": "lab4", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[0-1]", "+", "(", "[.]", "[0-1]", "+", ")", "?"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "[0-7]", "+", "(", "[.]", "[0-7]", "+", ")", "?"]}, {"lPart": "constDec", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+/*><]", "|", "[<>=!]", "[=]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["constBin", "|", "constOct", "|", "constDec", "|", "constStr"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["signOfOperation", "Expr"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["Type", "?", "Id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "BlockOrOperator"]}, {"lPart": "Const", "rPart": ["constBin", "|", "constOct", "|", "constDec", "|", "constStr"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", ")", "delimiter"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Type", "Id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "BegExpr", "rPart": ["Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680cb6d48558742cb43399d6"}, "rules": "lab6", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[0-1]", "+", "(", "[.]", "[0-1]", "+", ")", "?"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "[0-7]", "+", "(", "[.]", "[0-7]", "+", ")", "?"]}, {"lPart": "constDec", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+/*><]", "|", "[<>=!]", "[=]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", "|", "\"!\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?", "{flushOps();}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "signOfOperation", "|", "\"-\"", "|", "\"&&\"", "|", "\"||\"", "|", "\"!\"", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["Type", "?", "{toPFR(this.currentLexem[1]);}", "Id", "assign", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\":=\");}", "delimiter"]}, {"lPart": "Const", "rPart": ["constBin", "|", "constOct", "|", "constDec", "|", "constStr"]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Operator", "+", ")", "+", "(", "\"?~\"", "\":\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", ")", "delimiter"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Type", "Id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"when\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["{ ctlStk.push(++operatorCnt); }", "\"foreach\"", "\"(\"", "Id", "\"in\"", "(", "Const", ")", "{ toPFR(\"pushStart\"); }", "\":\"", "(", "Const", ")", "{ toPFR(\"pushEnd\"); toPFR(\"Label0_\" + peek(ctlStk) + \":\"); }", "\")\"", "BlockOrOperator", "{ toPFR(\"Label0_\" + peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label1_\" + peek(ctlStk) + \":\"); ctlStk.pop(); }"]}, {"lPart": "Operator", "rPart": ["{ ctlStk.push(++operatorCnt); toPFR(\"exprChoice\" + operatorCnt); onStk.push(0); toPFR(\"defVar\"); }", "\"$??\"", "Expr", "{ toPFR(\"exprChoice\" + operatorCnt); toPFR(\":=\"); }", "\"{\"", "(", "\"?=\"", "Const", "{ toPFR(\"exprChoice\" + peek(ctlStk)); toPFR(\"==\"); toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk)); toPFR(\"jmpOnFalse\"); }", "\":\"", "Operator", "+", "{ toPFR(\"LChoice\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk) + \":\"); onStk.push(onStk.pop() + 1); }", ")", "+", "PartDefault", "?", "\"}\""]}, {"lPart": "PartDefault", "rPart": ["\"?~:\"", "Operator", "+"]}], "extension": "var ignoreLastWord;\nvar operatorCnt = 0;\n\nfunction Tracer() {\n    this.history = [];\n}\n\nTracer.prototype = {\n    put: function (b) {\n        this.history.push(b);\n    },\n    getAll: function () {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function () {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\nvar opStk = [];  // стек операторов\nvar ctlStk = []; // стек управляющих конструкций (например выборов)\nvar onStk = [];  // стек для счёта вариантов внутри выбора\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(stack) {\n    return stack[stack.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 10;\n    if (s == \"-\") return 10;\n    if (s == \"*\") return 20;\n    if (s == \"/\") return 20;\n    if (s == \">\" || s == \"<\" || s == \"==\" || s == \"!=\") return 5;\n    return 0;\n}\n\n// Обработка токенов выражения\nfunction processToken(x) {\n    if (x == \"(\") {\n        opStk.push(x);\n    } else if (x == \")\") {\n        while (opStk.length > 0 && peek(opStk) != \"(\") {\n            toPFR(opStk.pop());\n        }\n        if (opStk.length > 0) opStk.pop(); // убрать \"(\"\n    } else if (x == \"+\" || x == \"-\" || x == \"*\" || x == \"/\" || x == \">\" || x == \"<\" || x == \"==\" || x == \"!=\") {\n        while (opStk.length > 0 && getPriority(peek(opStk)) >= getPriority(x)) {\n            toPFR(opStk.pop());\n        }\n        opStk.push(x);\n    } else {\n        // Операнд (переменная, число и т.п.)\n        toPFR(x);\n    }\n}\n\n// После окончания выражения\nfunction flushOps() {\n    while (opStk.length > 0) {\n        toPFR(opStk.pop());\n    }\n}\n\n// =======================\n// Новое правило \"?? ... ?= ... ?~ ... quit;\"\n// =======================\n\n// Старт блока выбора\nfunction startChoice() {\n    ctlStk.push(++operatorCnt);\n    onStk.push(0);\n    toPFR(\"exprChoice\" + operatorCnt);\n    toPFR(\"defVar\");\n}\n\n// После выражения в ??\nfunction handleChoiceAssignment() {\n    toPFR(\"exprChoice\" + peek(ctlStk));\n    toPFR(\":=\");\n}\n\n// Обработка каждой ветки ?= константа:\nfunction handleChoiceOption(constant) {\n    toPFR(constant);\n    toPFR(\"exprChoice\" + peek(ctlStk));\n    toPFR(\"==\");\n    toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk));\n    toPFR(\"jmpOnFalse\");\n}\n\n// После выполнения блока ветки (после quit;)\nfunction afterChoiceOption() {\n    toPFR(\"LChoice\" + peek(ctlStk));\n    toPFR(\"jmp\");\n    toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk) + \":\");\n    onStk.push(onStk.pop() + 1);\n}\n\n// После блока по умолчанию (?~:)\nfunction afterChoiceDefault() {\n    toPFR(\"LChoice\" + ctlStk.pop() + \":\");\n}\n\n// =======================\n// Остальные операторы (например if/while) — остаются такими же\n// =======================\n\n// Пример для if (when)\nfunction handleWhenStart() {\n    ctlStk.push(++operatorCnt);\n}\n\nfunction handleWhenCondition() {\n    toPFR(\"LifElse\" + peek(ctlStk));\n    toPFR(\"jmpOnFalse\");\n}\n\nfunction handleWhenAfterIf() {\n    toPFR(\"LifExit\" + peek(ctlStk));\n    toPFR(\"jmp\");\n    toPFR(\"LifElse\" + peek(ctlStk) + \":\");\n}\n\nfunction handleWhenAfterElse() {\n    toPFR(\"LifExit\" + ctlStk.pop() + \":\");\n}\n"}}{"_id": {"$oid": "6819f0d28558742cb433c043"}, "rules": "lab7", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "constBin", "rPart": ["[0]", "[b]", "[0-1]", "+", "(", "[.]", "[0-1]", "+", ")", "?"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "[0-7]", "+", "(", "[.]", "[0-7]", "+", ")", "?"]}, {"lPart": "constDec", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constStr", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+/*><]", "|", "[<>=!]", "[=]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "spliter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", "|", "\"!\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?", "{flushOps();}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "signOfOperation", "|", "\"-\"", "|", "\"&&\"", "|", "\"||\"", "|", "\"!\"", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "BlockOrOperator", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["Type", "?", "{toPFR(this.currentLexem[1]);}", "Id", "assign", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\":=\");}", "delimiter"]}, {"lPart": "Const", "rPart": ["constBin", "|", "constOct", "|", "constDec", "|", "constStr"]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"quit\"", ")", "delimiter"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Type", "Id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"when\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "Operator", "rPart": ["{ ctlStk.push(++operatorCnt); }", "\"foreach\"", "\"(\"", "Id", "\"in\"", "(", "Const", ")", "{ toPFR(\"pushStart\"); }", "\":\"", "(", "Const", ")", "{ toPFR(\"pushEnd\"); toPFR(\"Label0_\" + peek(ctlStk) + \":\"); }", "\")\"", "BlockOrOperator", "{ toPFR(\"Label0_\" + peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label1_\" + peek(ctlStk) + \":\"); ctlStk.pop(); }"]}, {"lPart": "Operator", "rPart": ["{ ctlStk.push(++operatorCnt); toPFR(\"exprChoice\" + operatorCnt); onStk.push(0); toPFR(\"defVar\"); }", "\"??\"", "Expr", "{ toPFR(\"exprChoice\" + operatorCnt); toPFR(\":=\"); }", "\"{\"", "(", "\"?=\"", "Const", "{ toPFR(\"exprChoice\" + peek(ctlStk)); toPFR(\"==\"); toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk)); toPFR(\"jmpOnFalse\"); }", "\":\"", "Operator", "+", "{ toPFR(\"LChoice\" + peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk) + \":\"); onStk.push(onStk.pop() + 1); }", ")", "+", "PartDefault", "?", "\"}\"", "{generatePseudoCode(tracer.history);}"]}, {"lPart": "PartDefault", "rPart": ["\"?~:\"", "Operator", "+"]}], "extension": "var ignoreLastWord;\nvar operatorCnt = 0;\n\nfunction Tracer() {\n    this.history = [];\n}\n\nTracer.prototype = {\n    put: function (b) {\n        this.history.push(b);\n    },\n    getAll: function () {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function () {\n        this.history = [];\n    }\n};\n\nvar tracer = new Tracer();\n\nvar opStk = [];  // стек операторов\nvar ctlStk = []; // стек управляющих конструкций (например выборов)\nvar onStk = [];  // стек для счёта вариантов внутри выбора\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction peek(stack) {\n    return stack[stack.length - 1];\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 10;\n    if (s == \"-\") return 10;\n    if (s == \"*\") return 20;\n    if (s == \"/\") return 20;\n    if (s == \">\" || s == \"<\" || s == \"==\" || s == \"!=\") return 5;\n    return 0;\n}\n\n// Обработка токенов выражения\nfunction processToken(x) {\n    if (x == \"(\") {\n        opStk.push(x);\n    } else if (x == \")\") {\n        while (opStk.length > 0 && peek(opStk) != \"(\") {\n            toPFR(opStk.pop());\n        }\n        if (opStk.length > 0) opStk.pop(); // убрать \"(\"\n    } else if (x == \"+\" || x == \"-\" || x == \"*\" || x == \"/\" || x == \">\" || x == \"<\" || x == \"==\" || x == \"!=\") {\n        while (opStk.length > 0 && getPriority(peek(opStk)) >= getPriority(x)) {\n            toPFR(opStk.pop());\n        }\n        opStk.push(x);\n    } else {\n        // Операнд (переменная, число и т.п.)\n        toPFR(x);\n    }\n}\n\n// После окончания выражения\nfunction flushOps() {\n    while (opStk.length > 0) {\n        toPFR(opStk.pop());\n    }\n}\n\n// =======================\n// Новое правило \"?? ... ?= ... ?~ ... quit;\"\n// =======================\n\n// Старт блока выбора\nfunction startChoice() {\n    ctlStk.push(++operatorCnt);\n    onStk.push(0);\n    toPFR(\"exprChoice\" + operatorCnt);\n    toPFR(\"defVar\");\n}\n\n// После выражения в ??\nfunction handleChoiceAssignment() {\n    toPFR(\"exprChoice\" + peek(ctlStk));\n    toPFR(\":=\");\n}\n\n// Обработка каждой ветки ?= константа:\nfunction handleChoiceOption(constant) {\n    toPFR(constant);\n    toPFR(\"exprChoice\" + peek(ctlStk));\n    toPFR(\"==\");\n    toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk));\n    toPFR(\"jmpOnFalse\");\n}\n\n// После выполнения блока ветки (после quit;)\nfunction afterChoiceOption() {\n    toPFR(\"LChoice\" + peek(ctlStk));\n    toPFR(\"jmp\");\n    toPFR(\"LChoice\" + peek(ctlStk) + \"Option\" + peek(onStk) + \":\");\n    onStk.push(onStk.pop() + 1);\n}\n\n// После блока по умолчанию (?~:)\nfunction afterChoiceDefault() {\n    toPFR(\"LChoice\" + ctlStk.pop() + \":\");\n}\n\n// =======================\n// Остальные операторы (например if/while) — остаются такими же\n// =======================\n\n// Пример для if (when)\nfunction handleWhenStart() {\n    ctlStk.push(++operatorCnt);\n}\n\nfunction handleWhenCondition() {\n    toPFR(\"LifElse\" + peek(ctlStk));\n    toPFR(\"jmpOnFalse\");\n}\n\nfunction handleWhenAfterIf() {\n    toPFR(\"LifExit\" + peek(ctlStk));\n    toPFR(\"jmp\");\n    toPFR(\"LifElse\" + peek(ctlStk) + \":\");\n}\n\nfunction handleWhenAfterElse() {\n    toPFR(\"LifExit\" + ctlStk.pop() + \":\");\n}\n\n\nfunction generatePseudoCode(pfr) {\n    let result = \"\";\n    let indent = 0;\n\n    function write(line) {\n        result += \"  \".repeat(indent) + line + \"\\n\";\n    }\n\n    let i = 0;\n    while (i < pfr.length) {\n        const token = pfr[i];\n\n        // Обработка меток начала блока выбора\n        if (token.startsWith(\"LSelect\") && token.includes(\"Option\") && token.endsWith(\":\")) {\n            if (indent > 0) indent--;\n            write(\"} else if (...) {\");\n            indent++;\n            i++;\n            continue;\n        }\n\n        // Обработка перехода на ложное условие\n        if (token == \"jmpOnFalse\") {\n            const label = pfr[i - 1];\n            const condRight = pfr[i - 2];\n            const condLeft = pfr[i - 3];\n            const condOp = pfr[i - 4];\n            write(`if (${condLeft} ${condOp} ${condRight}) {`);\n            indent++;\n            i++;\n            continue;\n        }\n\n        // Обработка присваивания\n        if (token == \":=\") {\n            const value = pfr[i - 1];\n            const variable = pfr[i - 2];\n            write(`${variable} = ${value};`);\n            i++;\n            continue;\n        }\n\n        // Обработка quit;\n        if (token == \"quit;\" || token == \"quit\") {\n            write(\"quit;\");\n            i++;\n            continue;\n        }\n\n        // Обработка перехода в конец выбора\n        if (token == \"jmp\") {\n            // skip jmp\n            i++;\n            continue;\n        }\n\n        // Конец всей конструкции выбора\n        if (token.endsWith(\":\") && token.startsWith(\"LSelect\") && !token.includes(\"Option\")) {\n            if (indent > 0) {\n                indent--;\n                write(\"}\"); // закрыть else\n            }\n            i++;\n            continue;\n        }\n\n        i++;\n    }\n\n    return result;\n}\n"}}},
{"FIO":"Джоши Е.В.","Collection":"453443521",{"_id": {"$oid": "67d05904af563521c9d5dab2"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "67d05c45af563521c9d5dae8"}, "rules": "Sample2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67d07565af563521c9d5dc18"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "сharconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "сonstreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d0758baf563521c9d5dc1a"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67d09f93af563521c9d5dc5b"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "сharconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "сonstreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "statement", "rPart": ["\"set(\"", "(", "id", "|", "const2", "|", "const4", "|", "const10", "|", "strconst", "|", "charconst", "|", "constreal", ")", "\",\"", "id", "\");\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3a33f4635a960233ade57"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "сharconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "сonstreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "statement", "rPart": ["\"set(\"", "(", "Expression", ")", "\",\"", "id", "\");\""]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[ ! ]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[ | ]", "[ | ]", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["сharconst", "|", "сonstreal", "|", "strconst", "|", "const2", "|", "const4", "|", "const10"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[ * ]", "[ / ]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f5d9898558742cb433415b"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "сharconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "сonstreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[ ! ]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[ | ]", "[ | ]", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["сharconst", "|", "сonstreal", "|", "strconst", "|", "const2", "|", "const4", "|", "const10"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[ * ]", "[ / ]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Conditional", "rPart": ["\"at\"", "Expression", "\"do\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"or\"", "\"do\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"or\""]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Constant", "\":\"", "Constant", "\")\"", "Operator"]}, {"lPart": "SwitchCase", "rPart": ["\"by\"", "Constant", "\"do\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"any\"", "\"do\"", "Operator"]}, {"lPart": "Break", "rPart": ["\"leave\""]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808831a8558742cb43386c0"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"string\"", "|", "\"char\"", "|", "\"real\""]}, {"lPart": "ArgList", "rPart": ["Type", "?", "id", "(", "\",\"", "Type", "?", "id", ")", "*"]}, {"lPart": "Function", "rPart": ["\"(\"", "\"[\"", "ArgList", "?", "\"]\"", "\")\"", "\"{\"", "Operator", "*", "\"}\"", "\"=>\"", "id"]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Conditional", "rPart": ["\"at\"", "Expression", "\"do\"", "Operator", "ConditionalElse"]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Constant", "\":\"", "Constant", "\")\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "Assignment", "rPart": ["\"set\"", "\"(\"", "Expression", "\",\"", "id", "\")\""]}, {"lPart": "Break", "rPart": ["\"leave\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "ConditionalElse", "rPart": ["\"or\"", "\"do\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"or\""]}, {"lPart": "Constant", "rPart": ["сharconst", "|", "сonstreal", "|", "strconst", "|", "const2", "|", "const4", "|", "const10"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "SwitchCase", "rPart": ["\"by\"", "Constant", "\"do\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"any\"", "\"do\"", "Operator"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "сharconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "сonstreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "const2", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[ ! ]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[ | ]", "[ | ]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[ * ]", "[ / ]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Терентьев Е.Р.","Collection":"112434154",{"_id": {"$oid": "67bf325daf563521c9d59dd4"}, "rules": "lab", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "char", "rPart": ["[\\'[^']", "\\']"]}, {"lPart": "string", "rPart": ["[\\\"[^\"]", "*", "\\\"]"]}, {"lPart": "exp", "rPart": []}], "extension": ""}}{"_id": {"$oid": "67bf4e11af563521c9d59ecc"}, "rules": "laba", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "sim", "rPart": ["[']", "[]", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*", "[eE]", "[+-]", "?", "[0-9]", "+"]}, {"lPart": "coment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "border", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "znak", "rPart": ["[-+/*%]"]}, {"lPart": "const", "rPart": ["const10", "|", "float", "|", "sim", "|", "exp"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "compareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "operation", "rPart": ["znak", "|", "compareOp", "|", "logicOp"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "main", "rPart": ["operationM", "*"]}, {"lPart": "operationM", "rPart": ["loop", "|", "assig", "|", "cond", "|", "fun", "|", "switch"]}, {"lPart": "assig", "rPart": ["id", "\"<-\"", "expr", "razdel"]}, {"lPart": "razdel", "rPart": ["[;]"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "operationM", "(", "\"leave\"", ")", "?"]}, {"lPart": "cond", "rPart": ["\"at\"", "expr", "\"do\"", "operationM", "(", "\"or do\"", "operationM", ")", "?"]}, {"lPart": "fun", "rPart": ["type", "id", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "operationM", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"exp\""]}, {"lPart": "switch", "rPart": ["\"??\"", "expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "operationM", "*", "\"quit\"", "razdel", ")", "*", "\"?~ :\"", "operationM", "*", "\"quit\"", "razdel", "\"}\""]}], "extension": ""}}{"_id": {"$oid": "67bf4e53af563521c9d59ed2"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+2", "deltat": 1000, "assist": 1}}{"_id": {"$oid": "67e1085c4635a960233acfc2"}, "rules": "labb", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "sim", "rPart": ["[']", "[]", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*", "[eE]", "[+-]", "?", "[0-9]", "+"]}, {"lPart": "coment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "border", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "znak", "rPart": ["[-+/*%]"]}, {"lPart": "const", "rPart": ["const10", "|", "float", "|", "sim", "|", "exp"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "compareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "operation", "rPart": ["znak", "|", "compareOp", "|", "logicOp"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "main", "rPart": ["operationM", "*"]}, {"lPart": "operationM", "rPart": ["loop", "|", "assig", "|", "cond", "|", "fun", "|", "switch", "|", "\"leave\""]}, {"lPart": "assig", "rPart": ["id", "\"<-\"", "expr", "razdel"]}, {"lPart": "razdel", "rPart": ["[;]"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "operationM"]}, {"lPart": "cond", "rPart": ["\"at\"", "expr", "\"do\"", "operationM", "cond0"]}, {"lPart": "fun", "rPart": ["type", "id", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "operationM", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"exp\""]}, {"lPart": "switch", "rPart": ["\"??\"", "expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "operationM", "*", "\"quit\"", "razdel", ")", "*", "\"?~ :\"", "operationM", "*", "\"quit\"", "razdel", "\"}\""]}, {"lPart": "cond0", "rPart": ["\"or do\"", "operationM"]}, {"lPart": "cond0", "rPart": ["~", "\"or do\""]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}{"_id": {"$oid": "68187fbc8558742cb433b8f0"}, "rules": "labcc", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "sim", "rPart": ["[']", "[]", "[']"]}, {"lPart": "exp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*", "[eE]", "[+-]", "?", "[0-9]", "+"]}, {"lPart": "coment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "border", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "znak", "rPart": ["[-+/*%]"]}, {"lPart": "const", "rPart": ["const10", "|", "float", "|", "sim", "|", "exp"]}, {"lPart": "operand", "rPart": ["const", "|", "id"]}, {"lPart": "expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "compareOp", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "operation", "rPart": ["znak", "|", "compareOp", "|", "logicOp"]}, {"lPart": "logicOp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "main", "rPart": ["{whileCnt=0;}", "operationM", "*"]}, {"lPart": "operationM", "rPart": ["loop", "|", "assig", "|", "cond", "|", "fun", "|", "switch", "|", "\"leave\""]}, {"lPart": "assig", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"<-\"", "expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"<-\");}", "razdel"]}, {"lPart": "razdel", "rPart": ["[;]"]}, {"lPart": "loop", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"do\"", "operationM", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "cond", "rPart": ["\"at\"", "expr", "\"do\"", "operationM", "cond0"]}, {"lPart": "fun", "rPart": ["type", "id", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "operationM", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"exp\""]}, {"lPart": "switch", "rPart": ["\"??\"", "expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "operationM", "*", "\"quit\"", "razdel", ")", "*", "\"?~ :\"", "operationM", "*", "\"quit\"", "razdel", "\"}\""]}, {"lPart": "cond0", "rPart": ["\"or do\"", "operationM"]}, {"lPart": "cond0", "rPart": ["~", "\"or do\""]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "operation", "expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}},
{"FIO":"Осадчий Н.А.","Collection":"113543222",{"_id": {"$oid": "67c4017baf563521c9d5ad97"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c402a0af563521c9d5adbb"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[\\$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+", "[e]", "[+-]", "[0-9]", "*"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "mixedOp", "rPart": ["[-]"]}, {"lPart": "unOp", "rPart": ["[!]"]}, {"lPart": "binArif", "rPart": ["(", "[+*/]", ")"]}, {"lPart": "binCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "Binary", "rPart": ["binArif", "|", "binLogic", "|", "binCheck"]}, {"lPart": "Unary", "rPart": ["unOp", "|", "mixedOp"]}, {"lPart": "Constant", "rPart": ["constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "Expression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "Unary", "|", "Binary", ")", "Expression", ")", "?"]}, {"lPart": "Oper", "rPart": ["Assign", "\";\"", "|", "Condition", "|", "Cycle", "|", "Select", "|", "stop"]}, {"lPart": "Assign", "rPart": ["\"set\"", "\"(\"", "(", "Expression", ")", "\",\"", "id", "\")\""]}, {"lPart": "Condition", "rPart": ["\"?\"", "\"(\"", "Expression", "\")\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")", "elseif", "else"]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Constant", "\":\"", "Constant", "\")\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "stop", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "elseif", "rPart": ["\"?\"", "\":\"", "\"(\"", "Expression", "\")\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "else", "rPart": ["\":\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "elseif", "rPart": ["~", "\"?\""]}, {"lPart": "else", "rPart": ["~", "\":\""]}, {"lPart": "Select", "rPart": ["\"switch\"", "Expression", "\"{\"", "case1", "+", "case2", "?", "\"}\""]}, {"lPart": "case1", "rPart": ["\"by\"", "Constant", "\"do\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "case2", "rPart": ["\"any\"", "\"do\"", "(", "(", "\"{\"", "Oper", "*", "\"}\"", ")", "|", "Oper", ")"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "id", "*", "\")\"", "\"{\"", "Oper", "*", "\"}\""]}, {"lPart": "Program", "rPart": ["Oper", "*", "Function", "*"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Кондратьев С.А.","Collection":"432455541",{"_id": {"$oid": "67c458daaf563521c9d5b1fe"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "+3", "deltat": 9999, "assist": 1}}{"_id": {"$oid": "67c4669daf563521c9d5b34c"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c46e4baf563521c9d5b3c0"}, "rules": "лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonstChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[16]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb95b28558742cb4336006"}, "rules": "лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonstChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "dotCommand", "rPart": ["[;:,]"]}, {"lPart": "binary", "rPart": ["[+*/%><]", "|", "[|]", "[|]", "|", "[&]", "[&]", "|", "[=]", "[=]", "|", "[<]", "[=]", "|", "[>]", "[=]", "|", "[!]", "[=]", "|", "[<]", "[<]", "|", "[>]", "[>]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[16]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[!]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "mixed", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;\n\nfunction assign(target, value) {\n  return target = value;\n}\n\nchoice day {  1 option { cout << \"Понедельник\"; fin; }; 2 option { cout << \"Вторник\"; fin; }; nooption cout << \"Неизвестный день\"; };"}}{"_id": {"$oid": "67fccad08558742cb4336827"}, "rules": "лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonstChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "dotCommand", "rPart": ["[;:,]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[16]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Oper", "rPart": ["id", "\"<-\"", "(", "Expression", ")", "\";\""]}, {"lPart": "Expression", "rPart": ["Unary", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "|", "(", "(", "mixed", "|", "binary", ")", "Expression", ")", "?"]}, {"lPart": "Unary", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["сonstChar", "|", "сonstReal", "|", "const4", "|", "const10", "|", "const16"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck", "|", "mixed"]}], "extension": "var ignoreLastWord;\n\nfunction assign(target, value) {\n  return target = value;\n}\n"}}{"_id": {"$oid": "680e668a8558742cb433a1aa"}, "rules": "лаба4", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonstChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[16]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Oper", "rPart": ["id", "\"<-\"", "(", "Expression", ")", "\";\""]}, {"lPart": "Expression", "rPart": ["Unary", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "|", "(", "(", "binary", ")", "Expression", ")", "?"]}, {"lPart": "Unary", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["сonstChar", "|", "сonstReal", "|", "const4", "|", "const10", "|", "const16"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "(", "(", "\"{\"", "operator", "*", "retire", "?", "\"}\"", ")", "|", "operator", ")", "\"until\"", "\"(\"", "(", "Expression", ")", "\")\""]}, {"lPart": "Choice", "rPart": ["\"choice\"", "\"(\"", "Expression", "\")\"", "\"{\"", "(", "option", "constant", "\":\"", "\"{\"", "operator", "*", "(", "\",\"", "\"fin\"", ")", "\"}\"", ")", "+", "(", "nooption", "\"do\"", "\"{\"", "operator", "*", "\"}\"", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "operator", "rPart": ["At", "|", "Oper", "|", "Cycle", "|", "Choice"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "At", "rPart": ["\"at\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "\"{\"", "operator", "*", "\"}\"", "|", "operator", ")", "(", "\"or\"", "\"do\"", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "option", "rPart": ["\"option\"", "\";\""]}, {"lPart": "nooption", "rPart": ["\"nooption\"", "\";\""]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": "var ignoreLastWord;\n\nfunction assign(target, value) {\n  return target = value;\n}\n"}}{"_id": {"$oid": "680f44148558742cb433a6f4"}, "rules": "лаба5", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "+", ")", "[0-9]", "{0,3}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonstChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "сonstReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[16]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Oper", "rPart": ["id", "\"<-\"", "(", "Expression", ")", "\";\""]}, {"lPart": "Expression", "rPart": ["Unary", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "|", "(", "(", "binary", ")", "Expression", ")", "?"]}, {"lPart": "Unary", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["сonstChar", "|", "сonstReal", "|", "const4", "|", "const10", "|", "const16"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "(", "(", "\"{\"", "operator", "*", "retire", "?", "\"}\"", ")", "|", "operator", ")", "\"until\"", "\"(\"", "(", "Expression", ")", "\")\""]}, {"lPart": "Choice", "rPart": ["\"choice\"", "\"(\"", "Expression", "\")\"", "\"{\"", "(", "option", "constant", "\":\"", "\"{\"", "operator", "*", "(", "\",\"", "\"fin\"", ")", "\"}\"", ")", "+", "(", "nooption", "\"do\"", "\"{\"", "operator", "*", "\"}\"", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "operator", "rPart": ["At", "|", "Oper", "|", "Cycle", "|", "Choice"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "At", "rPart": ["\"at\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "\"{\"", "operator", "*", "\"}\"", "|", "operator", ")", "(", "\"or\"", "\"do\"", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "option", "rPart": ["\"option\"", "\";\""]}, {"lPart": "nooption", "rPart": ["\"nooption\"", "\";\""]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": "var ignoreLastWord;\n\nfunction assign(target, value) {\n  return target = value;\n}\n"}}},
{"FIO":"Юнашев А.С.","Collection":"145141122",{"_id": {"$oid": "67bc1f54ce6dd03692d096e6"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "Int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"]", ")", "|", "[\\\\]", ")", "+", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[\\\\]", ")", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><|&!=%]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "usarsign", "rPart": ["[!]"]}, {"lPart": "minussign", "rPart": ["[-]"]}, {"lPart": "condOperator", "rPart": ["[by]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bc214fce6dd03692d09705"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-2", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67e432a04635a960233ae47e"}, "rules": "Lab3", "data": {"rList": [{"lPart": "operators", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["condOperator", "|", "compOperator", "|", "assignOperator", "|", "(", "\"stop\"", "\";\"", ")"]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "statement", "\")\"", "\"{\"", "operator", "+", "\"}\"", "(", "\"else\"", "\"{\"", "operator", "+", "\"}\"", ")", "?"]}, {"lPart": "compOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "\"{\"", "operator", "+", "\"}\""]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "statement", "\"to\"", "id", "\";\""]}, {"lPart": "statement", "rPart": ["(", "minussign", "|", "unarsign", ")", "?", "const", "|", "id", "(", "(", "sign", "|", "minussign", "(", "id", "|", "const", ")", ")", "+", ")", "?"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "constEight", "|", "constBin", "|", "char", "|", "string"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[\\\\]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"]", ")", "|", "[\\\\]", ")", "+", "[\"]"]}, {"lPart": "minussign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "sign", "rPart": ["[+*/><|&=%]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7d9514635a960233af411"}, "rules": "LabEdit3", "data": {"rList": [{"lPart": "blockOperator", "rPart": ["(", "operator", ")", "|", "(", "\"{\"", "operator", "+", "\"}\"", ")"]}, {"lPart": "operator", "rPart": ["condOperator", "|", "compOperator", "|", "assignOperator", "|", "stopOperator", "|", "breakOperator"]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "statement", "\")\"", "blockOperator", "else"]}, {"lPart": "compOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "statement", "\"to\"", "id", "\";\""]}, {"lPart": "statement", "rPart": ["(", "minussign", "|", "unarsign", ")", "?", "(", "const", "|", "id", ")", "(", "(", "sign", "|", "minussign", ")", "(", "id", "|", "const", ")", ")", "*"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "constEight", "|", "constBin", "|", "char", "|", "string"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[\\\\]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"]", ")", "|", "[\\\\]", ")", "+", "[\"]"]}, {"lPart": "minussign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "sign", "rPart": ["[+*/><|&=%]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "operators", "rPart": ["operator", "+"]}, {"lPart": "else", "rPart": ["~", "\"else\""]}, {"lPart": "else", "rPart": ["\"else\"", "blockOperator"]}, {"lPart": "switchOperator", "rPart": ["\"select\"", "statement", "(", "\"case\"", "\"(\"", "const", "\")\"", "po", ")", "+", "(", "\"case\"", "\"(\"", "\"false\"", "\")\"", "po", ")", "?", "\"end\""]}, {"lPart": "po", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "stopOperator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "breakOperator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7cc058558742cb4335466"}, "rules": "Lab4", "data": {"rList": [{"lPart": "start", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["type", "?", "id", "\"(\"", "argumentList", "\")\"", "po"]}, {"lPart": "argumentList", "rPart": ["(", "arguments", "(", "\",\"", "arguments", ")", "*", ")", "?"]}, {"lPart": "po", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "arguments", "rPart": ["type", "?", "id"]}, {"lPart": "operator", "rPart": ["condOperator", "|", "compOperator", "|", "assignOperator", "|", "switchOperator", "|", "stopOperator", "|", "breakOperator", "|", "blockReturn"]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "statement", "\")\"", "blockOperator", "else"]}, {"lPart": "compOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "statement", "\"to\"", "id", "\";\""]}, {"lPart": "switchOperator", "rPart": ["\"select\"", "statement", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "po", ")", "+", "\"end\""]}, {"lPart": "stopOperator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "breakOperator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "statement", "rPart": ["(", "minussign", "|", "unarsign", ")", "?", "(", "const", "|", "id", ")", "(", "(", "sign", "|", "minussign", ")", "(", "id", "|", "const", ")", ")", "*"]}, {"lPart": "blockOperator", "rPart": ["(", "operator", ")", "|", "(", "\"{\"", "operator", "+", "\"}\"", ")"]}, {"lPart": "else", "rPart": ["~", "\"else\""]}, {"lPart": "else", "rPart": ["\"else\"", "blockOperator"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "constEight", "|", "constBin", "|", "char", "|", "string"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[\\\\]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"]", ")", "|", "[\\\\]", ")", "+", "[\"]"]}, {"lPart": "minussign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "sign", "rPart": ["[+*/><|&=%]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "blockReturn", "rPart": ["\"return\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a0b328558742cb4339397"}, "rules": "Lab5", "data": {"rList": [{"lPart": "start", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["type", "?", "id", "\"(\"", "argumentList", "\")\"", "\"{\"", "operator", "*", "\"}\""]}, {"lPart": "argumentList", "rPart": ["(", "arguments", "(", "\",\"", "arguments", ")", "*", ")", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "operator", "rPart": ["condOperator", "|", "compOperator", "|", "assignOperator", "|", "switchOperator", "|", "stopOperator", "|", "breakOperator", "|", "blockReturn", "|", "declaringOperator", "|", "callFunction"]}, {"lPart": "arguments", "rPart": ["type", "?", "id"]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "expr", "\")\"", "blockOperator", "else"]}, {"lPart": "compOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "expr", "\"to\"", "expr", "\";\""]}, {"lPart": "switchOperator", "rPart": ["\"select\"", "expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "blockOperator", "*", ")", "+", "\"end\""]}, {"lPart": "stopOperator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "breakOperator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "blockReturn", "rPart": ["\"return\"", "(", "expr", ")", "?", "\";\""]}, {"lPart": "expr", "rPart": ["(", "minussign", "|", "unarsign", ")", "?", "beginExpr", "(", "endExpr", ")", "?"]}, {"lPart": "blockOperator", "rPart": ["(", "operator", ")", "|", "(", "\"{\"", "operator", "+", "\"}\"", ")"]}, {"lPart": "else", "rPart": ["~", "\"else\""]}, {"lPart": "else", "rPart": ["\"else\"", "blockOperator"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "constEight", "|", "constBin", "|", "char", "|", "string"]}, {"lPart": "beginExpr", "rPart": ["const", "|", "id", "|", "\"(\"", "expr", "\")\""]}, {"lPart": "endExpr", "rPart": ["(", "sign", "|", "minussign", ")", "expr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[\\\\]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"]", ")", "|", "[\\\\]", ")", "+", "[\"]"]}, {"lPart": "minussign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "sign", "rPart": ["[+*/><|&=%]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "callFunction", "rPart": ["\"(\"", "id", "\"(\"", "expr", "?", "(", "\",\"", "expr", ")", "*", "\")\"", "\")\"", "\";\""]}, {"lPart": "declaringOperator", "rPart": ["type", "?", "id", "(", "\",\"", "id", ")", "*", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680b10f18558742cb4339805"}, "rules": "Lab5Edit", "data": {"rList": [{"lPart": "start", "rPart": ["function", "+"]}, {"lPart": "function", "rPart": ["type", "?", "id", "\"(\"", "argumentList", "\")\"", "\"{\"", "operator", "*", "\"}\""]}, {"lPart": "argumentList", "rPart": ["(", "arguments", "(", "\",\"", "arguments", ")", "*", ")", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "operator", "rPart": ["condOperator", "|", "compOperator", "|", "assignOperator", "|", "switchOperator", "|", "stopOperator", "|", "breakOperator", "|", "blockReturn", "|", "declaringOperator", "|", "callFunction"]}, {"lPart": "arguments", "rPart": ["type", "?", "id"]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "expr", "\")\"", "blockOperator", "else"]}, {"lPart": "compOperator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "blockOperator"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "expr", "\"to\"", "expr", "\";\""]}, {"lPart": "switchOperator", "rPart": ["\"select\"", "expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "blockOperator", "*", ")", "+", "\"end\""]}, {"lPart": "stopOperator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "breakOperator", "rPart": ["\"break\"", "\";\""]}, {"lPart": "blockReturn", "rPart": ["\"return\"", "(", "expr", ")", "?", "\";\""]}, {"lPart": "expr", "rPart": ["(", "minussign", "|", "unarsign", ")", "?", "beginExpr", "(", "endExpr", ")", "?"]}, {"lPart": "blockOperator", "rPart": ["(", "operator", ")", "|", "(", "\"{\"", "operator", "+", "\"}\"", ")"]}, {"lPart": "else", "rPart": ["~", "\"else\""]}, {"lPart": "else", "rPart": ["\"else\"", "blockOperator"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "constEight", "|", "constBin", "|", "char", "|", "string"]}, {"lPart": "beginExpr", "rPart": ["const", "|", "id", "(", "\"(\"", "(", "expr", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "\"(\"", "expr", "\")\""]}, {"lPart": "endExpr", "rPart": ["(", "sign", "|", "minussign", ")", "expr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constEight", "rPart": ["[xX]", "[xX]", "[0-7]", "+"]}, {"lPart": "constBin", "rPart": ["[xX]", "[0-1]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "|", "[\\\\]", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"]", ")", "|", "[\\\\]", ")", "+", "[\"]"]}, {"lPart": "minussign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "sign", "rPart": ["[+*/><|&=%]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "callFunction", "rPart": ["id", "\"(\"", "(", "expr", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", "\";\""]}, {"lPart": "declaringOperator", "rPart": ["type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Яньков В.Е.","Collection":"512431513",{"_id": {"$oid": "67bbde0bce6dd03692d0964d"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bbef0ece6dd03692d0967a"}, "rules": "Lab1", "data": {"rList": [{"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e|E]", "[\\+|\\-]", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[A-z]", "[0-9]", "*", "[A-z]"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "AsSign", "rPart": ["[=]"]}, {"lPart": "AddSign", "rPart": ["[-+]"]}, {"lPart": "MultSign", "rPart": ["[/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6805ac4e8558742cb4337f33"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[A-z]", "[0-9]", "*", "[A-z]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e|E]", "[\\+|\\-]", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Program", "rPart": ["(", "Block", "|", "Statement", "|", "FunctionDefinition", ")", "+"]}, {"lPart": "Block", "rPart": ["\"{\"", "(", "Block", "|", "Statement", ")", "+", "\"}\""]}, {"lPart": "Statement", "rPart": ["(", "Expression", "|", "VariableDeclaration", "|", "Operator", "|", "Return", ")", "?", "(", "delimiter", ")"]}, {"lPart": "Value", "rPart": ["(", "(", "UnaryOperator", "|", "summationOperator", ")", "?", "(", "const", "|", "id", ")", "(", "(", "BinaryOperator", "|", "summationOperator", ")", "Expression", ")", "?", ")"]}, {"lPart": "VariableDeclaration", "rPart": ["Type", "id", "(", "assign", "(", "Expression", ")", ")", "?"]}, {"lPart": "Variable", "rPart": ["id", "(", "assign", "(", "Expression", ")", ")", "?"]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", ")"]}, {"lPart": "incrementOperator", "rPart": ["[-]", "[-]", "|", "[+]", "[+]"]}, {"lPart": "multiplicationOperator", "rPart": ["[*/%]"]}, {"lPart": "summationOperator", "rPart": ["[+-]"]}, {"lPart": "unaryLogicalOperator", "rPart": ["[!]"]}, {"lPart": "binaryLogicalOperator", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "CastOperator", "rPart": ["\"[\"", "Type", "\"]\""]}, {"lPart": "UnaryOperator", "rPart": ["(", "unaryLogicalOperator", "|", "incrementOperator", "|", "CastOperator", ")"]}, {"lPart": "BinaryOperator", "rPart": ["(", "multiplicationOperator", "|", "binaryLogicalOperator", "|", "assign", ")"]}, {"lPart": "ValueBlock", "rPart": ["\"(\"", "(", "ValueBlock", "|", "Value", ")", "\")\""]}, {"lPart": "Expression", "rPart": ["ValueBlock", "|", "Value"]}, {"lPart": "Operator", "rPart": ["(", "ConditionalOperator", "|", "CyclicOperator", "|", "SwitchOperator", ")"]}, {"lPart": "ConditionalOperator", "rPart": ["\"at\"", "Expression", "\"do\"", "Line", "(", "\"or\"", "\"do\"", "Line", ")", "?"]}, {"lPart": "CyclicOperator", "rPart": ["\"while\"", "Expression", "\"do\"", "Line", "(", "\"leave\"", ")", "?"]}, {"lPart": "SwitchOperator", "rPart": ["\"select\"", "Expression", "(", "Case", ")", "+", "\"end\""]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\"", "Const", "\")\"", "Line", "\"break;\""]}, {"lPart": "Line", "rPart": ["(", "Block", "|", "Statement", ")"]}, {"lPart": "Const", "rPart": ["(", "const", "|", "\"false\"", ")"]}, {"lPart": "FormalParams", "rPart": ["\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "FacticalParams", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "FunctionDefinition", "rPart": ["\"function\"", "FormalParams", "Line", "\"->\"", "(", "Type", ")", "?", "id"]}, {"lPart": "FunctionCall", "rPart": ["id", "FacticalParams"]}, {"lPart": "Return", "rPart": ["\"return\"", "(", "Expression", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6805ae2e8558742cb4337f38"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[A-z]", "[0-9]", "*", "[A-z]"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[e|E]", "[\\+|\\-]", "?", "[0-9]", "+", ")", "?", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Program", "rPart": ["(", "Block", "|", "Statement", "|", "FunctionDefinition", ")", "+"]}, {"lPart": "Block", "rPart": ["\"{\"", "(", "Block", "|", "Statement", ")", "+", "\"}\""]}, {"lPart": "Statement", "rPart": ["(", "Expression", "|", "VariableDeclaration", "|", "Operator", "|", "Return", ")", "?", "(", "delimiter", ")"]}, {"lPart": "Value", "rPart": ["(", "(", "UnaryOperator", "|", "summationOperator", ")", "?", "(", "const", "|", "id", ")", "(", "(", "BinaryOperator", "|", "summationOperator", ")", "Expression", ")", "?", ")"]}, {"lPart": "VariableDeclaration", "rPart": ["Type", "id", "(", "assign", "(", "Expression", ")", ")", "?"]}, {"lPart": "Variable", "rPart": ["id", "(", "assign", "(", "Expression", ")", ")", "?"]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", ")"]}, {"lPart": "incrementOperator", "rPart": ["[-]", "[-]", "|", "[+]", "[+]"]}, {"lPart": "multiplicationOperator", "rPart": ["[*/%]"]}, {"lPart": "summationOperator", "rPart": ["[+-]"]}, {"lPart": "unaryLogicalOperator", "rPart": ["[!]"]}, {"lPart": "binaryLogicalOperator", "rPart": ["(", "[<>=!]", "[=]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")"]}, {"lPart": "CastOperator", "rPart": ["\"[\"", "Type", "\"]\""]}, {"lPart": "UnaryOperator", "rPart": ["(", "unaryLogicalOperator", "|", "incrementOperator", "|", "CastOperator", ")"]}, {"lPart": "BinaryOperator", "rPart": ["(", "multiplicationOperator", "|", "binaryLogicalOperator", "|", "assign", ")"]}, {"lPart": "ValueBlock", "rPart": ["\"(\"", "(", "ValueBlock", "|", "Value", ")", "\")\""]}, {"lPart": "Expression", "rPart": ["ValueBlock", "|", "Value"]}, {"lPart": "Operator", "rPart": ["(", "ConditionalOperator", "|", "CyclicOperator", "|", "SwitchOperator", ")"]}, {"lPart": "ConditionalOperator", "rPart": ["\"at\"", "Expression", "\"do\"", "Line", "(", "\"or\"", "\"do\"", "Line", ")", "?"]}, {"lPart": "CyclicOperator", "rPart": ["\"while\"", "Expression", "\"do\"", "Line", "(", "\"leave\"", ")", "?"]}, {"lPart": "SwitchOperator", "rPart": ["\"select\"", "Expression", "(", "Case", ")", "+", "\"end\""]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\"", "Const", "\")\"", "Line", "\"break;\""]}, {"lPart": "Line", "rPart": ["(", "Block", "|", "Statement", ")"]}, {"lPart": "Const", "rPart": ["(", "const", "|", "\"false\"", ")"]}, {"lPart": "FormalParams", "rPart": ["\"(\"", "(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\""]}, {"lPart": "FacticalParams", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "FunctionDefinition", "rPart": ["\"function\"", "FormalParams", "Line", "\"->\"", "(", "Type", ")", "?", "id"]}, {"lPart": "FunctionCall", "rPart": ["id", "FacticalParams"]}, {"lPart": "Return", "rPart": ["\"return\"", "(", "Expression", ")", "?"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Малютин И.Д.","Collection":"212522433",{"_id": {"$oid": "67adc9a8ce6dd03692d07a82"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67af123dce6dd03692d07c58"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c97eb2af563521c9d5c414"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67de5ff2e0b22203e7cc2039"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[\\] [\\] []", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "LeftBr1", "rPart": ["[(]"]}, {"lPart": "LeftBr2", "rPart": ["[{]"]}, {"lPart": "RightBr1", "rPart": ["[)]"]}, {"lPart": "RightBr2", "rPart": ["[}]"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "id", "|", "const", ")", "\";\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "6800c84e8558742cb43375b3"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "680385a18558742cb433788f"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[\\] [\\] []", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "LeftBr1", "rPart": ["[(]"]}, {"lPart": "LeftBr2", "rPart": ["[{]"]}, {"lPart": "RightBr1", "rPart": ["[)]"]}, {"lPart": "RightBr2", "rPart": ["[}]"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "id", "|", "const", ")", "\";\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", "|", "\"!\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstChar", "|", "ConstStr"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "Sign", "|", "\"-\"", "|", "\"&&\"", "|", "\"||\"", "|", "\"!\"", ")", "Expr"]}, {"lPart": "Operator", "rPart": ["Type", "?", "Id", "Assign", "Expr", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "PartElse"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"other\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"other\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "BlockOrOperator", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["\"endloop\"", "Delimiter"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "(", "\"-\"", ")", "?", "(", "ConstInt", "|", "ConstFloat", "|", "ConstChar", "|", "ConstStr", ")", "\":\"", "Operator", "+", ")", "+", "PartNoOption", "\"end\""]}, {"lPart": "Operator", "rPart": ["\"fin\"", "Delimiter"]}, {"lPart": "PartNoOption", "rPart": ["\"nooption\"", "Operator", "+"]}, {"lPart": "PartNoOption", "rPart": ["~", "\"nooption\""]}, {"lPart": "Function", "rPart": ["Type", "?", "Id", "\"(\"", "(", "Type", "?", "Id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "Delimiter"]}, {"lPart": "Program", "rPart": ["Function", "+"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Якушева А.С.","Collection":"532113324",{"_id": {"$oid": "67af009cce6dd03692d07c15"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bf17adaf563521c9d59c30"}, "rules": "Laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[]", "[']"]}, {"lPart": "constSt", "rPart": ["[\"]", "(", "[]", "|", "[\"\\\\]", ")", "*", "[\"]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d1bbf0e0b22203e7cbef03"}, "rules": "Laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[1]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[\\\\]", "[]", "[']"]}, {"lPart": "constSt", "rPart": ["[\"]", "(", "[]", "|", "[\"\\\\]", ")", "*", "[\"]"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e3e7474635a960233ae0c6"}, "rules": "Laba3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[1]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"\\\\]", ")", "|", "(", "[x]", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constSt", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\\"]", ")", "|", "(", "[x]", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "BinOper", "rPart": ["(", "[+*/^%]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")"]}, {"lPart": "dualO", "rPart": ["[-]"]}, {"lPart": "unaryO", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Type", "rPart": ["\"char\"", "|", "\"integer\"", "|", "\"string\"", "|", "\"double\"", "|", "\"float\""]}, {"lPart": "Const", "rPart": ["(", "const", "|", "const4", "|", "const16", "|", "constChar", "|", "constSt", ")", "*"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Const", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "BinOper", "|", "dualO", "|", "unaryO", ")", "Expr", ")", "?"]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["Opera1", "|", "Opera3", "|", "Opera2", "|", "Opera4", "|", "Expr"]}, {"lPart": "Block", "rPart": ["\"{\"", "Operator", "*", "\"}\"", "|", "Operator"]}, {"lPart": "Opera1", "rPart": ["Type", "?", "id", "Assign", "Expr", "\";\""]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Opera2", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Block", "(", "\"else\"", "Block", ")", "?"]}, {"lPart": "Opera3", "rPart": ["\"exec\"", "Block", "\"with\"", "Type", "?", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "Opera4", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "Const", "\"do\"", "(", "Block", ")", "?", ")", "+", "(", "\"any\"", "\"do\"", "(", "Block", ")", "?", ")", "?", "\"}\"", "\"leave\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fa3a548558742cb4335856"}, "rules": "Laba4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[1]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"\\\\]", ")", "|", "(", "[x]", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constSt", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\\"]", ")", "|", "(", "[x]", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "BinOper", "rPart": ["(", "[+*/^%]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")"]}, {"lPart": "dualO", "rPart": ["[-]"]}, {"lPart": "unaryO", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Type", "rPart": ["\"char\"", "|", "\"integer\"", "|", "\"string\"", "|", "\"double\"", "|", "\"float\""]}, {"lPart": "Const", "rPart": ["const", "|", "const4", "|", "const16", "|", "constChar", "|", "constSt"]}, {"lPart": "Expr", "rPart": ["(", "unaryO", "|", "dualO", ")", "?", "Term", "(", "(", "BinOper", "|", "dualO", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Operator", "rPart": ["Assign", "|", "CondOp", "|", "LoopOp", "|", "SwitchOp", "|", "FuncDecl", "|", "ExitOp", "|", "LeaveOp"]}, {"lPart": "Block", "rPart": ["\"{\"", "Operator", "*", "\"}\"", "|", "Operator"]}, {"lPart": "Assign", "rPart": ["id", "AssignOp", "Expr", "\";\""]}, {"lPart": "AssignOp", "rPart": ["[<]", "[-]"]}, {"lPart": "CondOp", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Block", "ElsePart"]}, {"lPart": "ElsePart", "rPart": ["\"else\"", "Block", "\"|\""]}, {"lPart": "LoopOp", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "\";\""]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "Const", "\"do\"", "Block", ")", "+", "(", "\"any\"", "\"do\"", "Block", ")", "?", "\"}\""]}, {"lPart": "FuncDecl", "rPart": ["Type", "?", "\"(\"", "ArgList", "?", "\")\"", "Block", "\";\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "?", "id", ")", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "ExitOp", "rPart": ["\"exit;\""]}, {"lPart": "LeaveOp", "rPart": ["\"leave;\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6809ab348558742cb4339133"}, "rules": "Laba5", "data": {"rList": [{"lPart": "Program", "rPart": ["FuncDecl", "+"]}, {"lPart": "FuncDecl", "rPart": ["id", "\"<-\"", "Type", "?", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Block", "*", "\"}\"", "\";\""]}, {"lPart": "Type", "rPart": ["\"char\"", "|", "\"integer\"", "|", "\"string\"", "|", "\"double\"", "|", "\"float\""]}, {"lPart": "ArgList", "rPart": ["(", "Type", "?", "id", ")", "(", "\",\"", "Type", "?", "id", ")", "*"]}, {"lPart": "Block", "rPart": ["\"{\"", "Operator", "*", "\"}\"", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "CondOp", "|", "LoopOp", "|", "SwitchOp", "|", "ExitOp", "|", "LeaveOp"]}, {"lPart": "Assign", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "CondOp", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Block", "ElsePart"]}, {"lPart": "LoopOp", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "ConstNum", "\"to\"", "ConstNum", "(", "\"step\"", "ConstNum", ")", "?"]}, {"lPart": "SwitchOp", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "(", "Const", "|", "ConstNum", ")", "\"do\"", "\"{\"", "Block", "*", "\"}\"", ")", "+", "(", "\"any\"", "\"do\"", "Block", ")", "?", "\"}\""]}, {"lPart": "ExitOp", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "LeaveOp", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "unaryO", "|", "dualO", ")", "?", "Term", "(", "(", "BinOper", "|", "dualO", ")", "Term", ")", "*"]}, {"lPart": "ElsePart", "rPart": ["\"else\"", "Block"]}, {"lPart": "ElsePart", "rPart": ["~", "\"else\""]}, {"lPart": "ConstNum", "rPart": ["const", "|", "const4", "|", "const16"]}, {"lPart": "Term", "rPart": ["id", "|", "Const", "|", "ConstNum", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Const", "rPart": ["constChar", "|", "constSt"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[1]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "unaryO", "rPart": ["[!]"]}, {"lPart": "dualO", "rPart": ["[-]"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"\\\\]", ")", "|", "(", "[x]", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constSt", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[ntr\\\\\"]", ")", "|", "(", "[x]", "[\\\\]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "BinOper", "rPart": ["(", "[+*/^%]", ")", "|", "(", "[&]", "[&]", "?", ")", "|", "(", "[|]", "[|]", "?", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")"]}, {"lPart": "AssignOp", "rPart": ["[<]", "[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "{2}", "(", "[]", "*", ")", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Диденко А.А.","Collection":"322113144",{"_id": {"$oid": "67c29d45af563521c9d5a948"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 500, "assist": 1}}{"_id": {"$oid": "67c29d7caf563521c9d5a94e"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c29db3af563521c9d5a95b"}, "rules": "Примермой", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a0bcf8558742cb43393a4"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "brackets", "rPart": ["[{}]", "|", "[()]"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a0d868558742cb43393df"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[a-zA-Z0-9]", ")", "*"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "{0,1}", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "['ntr]", "[']"]}, {"lPart": "brackets", "rPart": ["[{}]", "|", "[()]"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}, {"lPart": "math", "rPart": ["[-+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "compare", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operators", "rPart": ["assign", "|", "cond"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "math", "Expr", ")", "?"]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "logExpr", "\")\"", "\"{\"", "(", "block", ")", "?", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "logExpr", "rPart": ["(", "id", "|", "const", ")", "compare", "(", "id", "|", "const", ")"]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"else\"", "\"{\"", "block", "\"}\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Котельников В.А.","Collection":"435341354",{"_id": {"$oid": "67bdd704af563521c9d593ab"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67bdeb88af563521c9d5945b"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[h]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "charconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']", ")"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d06e5aaf563521c9d5dbfc"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[h]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "charconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "assign", "rPart": ["\"put\"", "(", "const", "|", "constreal", "|", "strconst", "|", "charconst", "|", "id", ")", "\"to\"", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e39ca34635a960233ade36"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[h]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "charconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "assign", "rPart": ["\"put\"", "(", "Expression", ")", "\"to\"", "id", "\";\""]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[ ! ]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[ | ]", "[ | ]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const", "|", "constreal", "|", "strconst", "|", "charconst"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[ * ]", "[ / ]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f61fa48558742cb43343b8"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[h]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "charconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "Operator", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "\";\""]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[ ! ]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[ | ]", "[ | ]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const", "|", "constreal", "|", "strconst", "|", "charconst"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[ * ]", "[ / ]"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Constant", "\":\"", "Constant", "\")\"", "Operator"]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "Constant", "\")\"", "Operator"]}, {"lPart": "Break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "SwitchDefault", "rPart": ["\"case (false)\"", "Operator", "\"end\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680895718558742cb433871a"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "\"(\"", "Arglist", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"const\"", "|", "\"constreal\"", "|", "\"strconst\"", "|", "\"charconst\""]}, {"lPart": "Arglist", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["\"put\"", "Expression", "\"to\"", "id", "\";\""]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"select\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Operator", "|", "Break", "|", "Break", "(", "id", "Paramlist", ")", ")", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "Constant", "\")\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"case (false)\"", "Operator", "\"end\""]}, {"lPart": "Declaration", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Constant", "rPart": ["const", "|", "constreal", "|", "strconst", "|", "charconst"]}, {"lPart": "Paramlist", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[h]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strconst", "rPart": ["(", "[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]", ")"]}, {"lPart": "charconst", "rPart": ["(", "[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[ ! ]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[ | ]", "[ | ]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[ * ]", "[ / ]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Стасюк А.И.","Collection":"231451144",{"_id": {"$oid": "67b8636ece6dd03692d08d1c"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c063ceaf563521c9d5a415"}, "rules": "ЛР1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[1]", "[6]", "[x]", "[0-9A-Fa-f]", "+"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "assignSign", "rPart": ["[=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d2bee2e0b22203e7cbf43c"}, "rules": "ЛР2", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "integer", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constFour", "rPart": ["[4]", "[xX]", "[0-3]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[xX]", "[0-9A-Fa-f]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"d]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "['d]", "[0-9]", "*", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><|&!%]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[\\[\\]\\(\\)\\{\\}]"]}, {"lPart": "assign", "rPart": ["[o]", "[n]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e5475f4635a960233aece4"}, "rules": "ЛР3", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[x]", "[0-9A-Fa-f]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"]", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[']", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "UnaryOperation", "rPart": ["[!]"]}, {"lPart": "UnaryBinaryOperation", "rPart": ["[-]"]}, {"lPart": "BinaryOperation", "rPart": ["[+*/%]"]}, {"lPart": "LogicOperation", "rPart": ["[><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"four\"", "|", "\"hex\""]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "string", "|", "char", "|", "four", "|", "hex"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "(", "UnaryBinaryOperation", "|", "BinaryOperation", ")", "Expr", ")", "?"]}, {"lPart": "LogicExpr", "rPart": ["(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "(", "id", "|", "const", ")", "LogicOperation", "(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "(", "id", "|", "const", ")", "(", "LogicOperation", "LogicExpr", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "Expr", "delimiter"]}, {"lPart": "condition", "rPart": ["\"at\"", "\"(\"", "LogicExpr", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "conditionElse", ")", "?"]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "condition", "|", "loop", ")", "(", "block", ")", "?"]}, {"lPart": "loopBlock", "rPart": ["(", "assign", "|", "Expr", "|", "condition", "|", "loop", "|", "retireLoop", "*", ")", "(", "block", ")", "?"]}, {"lPart": "conditionElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "block", "\"}\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "\"{\"", "loopBlock", "\"}\"", "\"until\"", "\"(\"", "LogicExpr", "\")\""]}, {"lPart": "retireLoop", "rPart": ["\"retire\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["assign", "|", "condition", "|", "loop"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7c46b8558742cb4335446"}, "rules": "ЛР4", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[x]", "[0-9A-Fa-f]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"]", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[']", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "UnaryOperation", "rPart": ["[!]"]}, {"lPart": "UnaryBinaryOperation", "rPart": ["[-]"]}, {"lPart": "BinaryOperation", "rPart": ["[+*/%]"]}, {"lPart": "LogicOperation", "rPart": ["[><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"four\"", "|", "\"hex\""]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "string", "|", "char", "|", "four", "|", "hex"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "(", "UnaryBinaryOperation", "|", "BinaryOperation", ")", "Expr", ")", "?"]}, {"lPart": "LogicExpr", "rPart": ["(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "(", "id", "|", "const", ")", "LogicOperation", "(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "(", "id", "|", "const", ")", "(", "LogicOperation", "LogicExpr", ")", "?"]}, {"lPart": "retire", "rPart": ["\"retire\"", "delimiter"]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "Expr", "delimiter"]}, {"lPart": "condition", "rPart": ["\"at\"", "LogicExpr", "\"do\"", "OB", "conditionElse"]}, {"lPart": "conditionElse", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "loop", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "LogicExpr", "\")\""]}, {"lPart": "switchBody", "rPart": ["\"case\"", "\"(\"", "const", "\")\"", "OB", "(", "break", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "break", "rPart": ["\"break\"", "delimiter"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "switchBody", "(", "\"case(false)\"", "OB", ")", "?", "\"end\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "function", "rPart": ["(", "type", ")", "?", "\"(\"", "(", "argList", ")", "?", "\")\"", "OB"]}, {"lPart": "Operator", "rPart": ["assign", "|", "retire", "|", "condition", "|", "loop", "|", "switch", "|", "function"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6809ea458558742cb433926e"}, "rules": "ЛР5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["type", "id", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["assign", "|", "breakOperators", "|", "condition", "|", "loop", "|", "switch", "|", "return", "|", "functionCall", "|", "declaration"]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "delimiter"]}, {"lPart": "breakOperators", "rPart": ["(", "\"retire\"", "|", "\"break\"", ")", "delimiter"]}, {"lPart": "condition", "rPart": ["\"at\"", "Expr", "\"do\"", "OB", "conditionElse"]}, {"lPart": "loop", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "OB", "*", ")", "*", "\"end\""]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "delimiter"]}, {"lPart": "functionCall", "rPart": ["id", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", "delimiter"]}, {"lPart": "declaration", "rPart": ["type", "id", "(", "\",\"", "id", ")", "*", "delimiter"]}, {"lPart": "Expr", "rPart": ["(", "UnaryOperation", "|", "UnaryBinaryOperation", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator"]}, {"lPart": "conditionElse", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "conditionElse", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["const", "|", "(", "id", "(", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "string", "|", "char", "|", "four", "|", "hex"]}, {"lPart": "EndExpr", "rPart": ["(", "UnaryBinaryOperation", "|", "BinaryOperation", "|", "LogicOperation", ")", "Expr"]}, {"lPart": "id", "rPart": ["[A-Za-z]", "(", "[0-9]", "[A-Za-z]", ")", "*", "[0-9]", "?"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "UnaryOperation", "rPart": ["[!]"]}, {"lPart": "UnaryBinaryOperation", "rPart": ["[-]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"]", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[']", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "?", "[']"]}, {"lPart": "four", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "hex", "rPart": ["[0]", "[x]", "[0-9A-Fa-f]", "+"]}, {"lPart": "BinaryOperation", "rPart": ["[+*/%]"]}, {"lPart": "LogicOperation", "rPart": ["[><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Шипеев И.О.","Collection":"235433554",{"_id": {"$oid": "67beb829af563521c9d59751"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-2", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bebf19af563521c9d59781"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67bec8d1af563521c9d597d5"}, "rules": "self", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "WordForFormatting", "rPart": ["[ \\r\\n\\t]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67becfd1af563521c9d5981f"}, "rules": "self1", "data": {"rList": [{"lPart": "assignOperator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "endOfLine"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "SignOfOperation", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "baseSixteen", "|", "baseFour", "|", "char", "|", "string"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "endOfLine", "rPart": ["[;]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/!]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "baseSixteen", "rPart": ["[0]", "[xX]", "[0-9a-fA-F]", "+"]}, {"lPart": "baseFour", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "['']", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "CommentSingle", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Operator", "rPart": ["assignOperator", "|", "switch"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any\"", "\"do\"", "Operator", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "Operator", "(", "\"leave\"", "SignOfOperation", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "block", "rPart": ["(", "assignOperator", "|", "Expr", "|", "switch", ")", "(", "block", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e563954635a960233aee5f"}, "rules": "self3", "data": {"rList": [{"lPart": "assignOperator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "endOfLine"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "SignOfOperation", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "baseSixteen", "|", "baseFour", "|", "char", "|", "string"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "endOfLine", "rPart": ["[;]"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/!]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "baseSixteen", "rPart": ["[0]", "[xX]", "[0-9a-fA-F]", "+"]}, {"lPart": "baseFour", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "['']", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "CommentSingle", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Operator", "rPart": ["assignOperator"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "switch", "rPart": ["\"switch\"", "id", "\"{\"", "switchBody", "(", "\"any\"", "\"do\"", "Operator", ")", "?", "\"}\""]}, {"lPart": "switchBody", "rPart": ["\"by\"", "id", "\"do\"", "Operator", "(", "\"leave\"", "SignOfOperation", ")", "?", "(", "switchBody", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e56bc54635a960233aeec7"}, "rules": "self21", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["assignOperator", "|", "switch", "|", "cond"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "endOfLine"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any\"", "\"do\"", "block", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "logicExp", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "condDo", ")", "?"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "SignOfOperation", "Expr", ")", "?"]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "block", "(", "\"leave\"", "endOfLine", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "logicExp", "rPart": ["(", "id", "|", "const", ")", "LogicOp", "(", "id", "|", "const", ")"]}, {"lPart": "block", "rPart": ["(", "assignOperator", "|", "Expr", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "baseSixteen", "|", "baseFour", "|", "char", "|", "string"]}, {"lPart": "condDo", "rPart": ["\"or do\"", "\"{\"", "block", "\"}\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "endOfLine", "rPart": ["[;]"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/!]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "baseSixteen", "rPart": ["[0]", "[xX]", "[0-9a-fA-F]", "+"]}, {"lPart": "baseFour", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "['']", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "CommentSingle", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "logicExp", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "\"leave\"", "endOfLine", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e575db4635a960233aef2f"}, "rules": "self213", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["assignOperator", "|", "switch", "|", "cond", "|", "loop"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "endOfLine"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any\"", "\"do\"", "po", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "logicExp", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "condDo", ")", "?"]}, {"lPart": "Expr", "rPart": ["(", "minusSign", "|", "unarSign", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "po", "(", "leave", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "logicExp", "rPart": ["(", "id", "|", "const", ")", "LogicOp", "(", "id", "|", "const", ")"]}, {"lPart": "block", "rPart": ["(", "assignOperator", "|", "Expr", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "baseSixteen", "|", "baseFour", "|", "char", "|", "string"]}, {"lPart": "condDo", "rPart": ["\"or do\"", "\"{\"", "block", "\"}\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "endOfLine", "rPart": ["[;]"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "baseSixteen", "rPart": ["[0]", "[xX]", "[0-9a-fA-F]", "+"]}, {"lPart": "baseFour", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "['']", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "CommentSingle", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "logicExp", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "\"leave\"", "endOfLine", ")", "?"]}, {"lPart": "minusSign", "rPart": ["[-]"]}, {"lPart": "unarSign", "rPart": ["[!~]"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "args", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "args", "rPart": ["arg", "(", "\",\"", "arg", ")", "*"]}, {"lPart": "arg", "rPart": ["type", "?", "id"]}, {"lPart": "type", "rPart": ["\"realint\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"tetr\""]}, {"lPart": "loopBlock", "rPart": ["(", "assignOperator", "|", "Expr", "|", "loop", "|", "switch", "|", "leave", "|", "cond", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "leave", "rPart": ["\"leave\"", "endOfLine"]}, {"lPart": "po", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f7f59e8558742cb4335577"}, "rules": "self2134", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["assignOperator", "|", "switch", "|", "cond", "|", "loop"]}, {"lPart": "assignOperator", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "endOfLine"]}, {"lPart": "switch", "rPart": ["\"switch\"", "Expr", "\"{\"", "switchBody", "(", "\"any\"", "\"do\"", "po", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"at\"", "\"(\"", "logicExp", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "condDo", ")", "?"]}, {"lPart": "Expr", "rPart": ["(", "minusSign", "|", "unarSign", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "switchBody", "rPart": ["\"by\"", "const", "\"do\"", "po", "(", "leave", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "logicExp", "rPart": ["(", "id", "|", "const", ")", "LogicOp", "(", "id", "|", "const", ")"]}, {"lPart": "block", "rPart": ["(", "assignOperator", "|", "Expr", "|", "switch", "|", "cond", ")", "(", "block", ")", "?"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "baseSixteen", "|", "baseFour", "|", "char", "|", "string"]}, {"lPart": "condDo", "rPart": ["\"or do\"", "\"{\"", "block", "\"}\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "endOfLine", "rPart": ["[;]"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "baseSixteen", "rPart": ["[0]", "[xX]", "[0-9a-fA-F]", "+"]}, {"lPart": "baseFour", "rPart": ["[0]", "[fF]", "[0-3]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "['']", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "CommentSingle", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "loop", "rPart": ["\"while\"", "\"(\"", "logicExp", "\")\"", "\"do\"", "\"{\"", "block", "\"}\"", "(", "\"leave\"", "endOfLine", ")", "?"]}, {"lPart": "minusSign", "rPart": ["[-]"]}, {"lPart": "unarSign", "rPart": ["[!~]"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "args", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "\"->\"", "id"]}, {"lPart": "args", "rPart": ["arg", "(", "\",\"", "arg", ")", "*"]}, {"lPart": "arg", "rPart": ["type", "?", "id"]}, {"lPart": "type", "rPart": ["\"realint\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"tetr\""]}, {"lPart": "loopBlock", "rPart": ["(", "assignOperator", "|", "Expr", "|", "loop", "|", "switch", "|", "leave", "|", "cond", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "leave", "rPart": ["\"leave\"", "endOfLine"]}, {"lPart": "po", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Григорьева М.А.","Collection":"435335544",{"_id": {"$oid": "67b32616ce6dd03692d0808b"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-3", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bd9880af563521c9d5926b"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "constQuater", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "mathOperator", "rPart": ["[-+/*]"]}, {"lPart": "compareOperator", "rPart": ["[<]", "|", "[>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "logicOperator", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d18bc2af563521c9d5e329"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "constQuater", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "delimiter", "rPart": ["[;,:]"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e90a8e4635a960233af8ae"}, "rules": "Лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "constQuater", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["constQuater", "|", "constDec", "|", "constHex", "|", "constFloat", "|", "constChar", "|", "constString"]}, {"lPart": "unary", "rPart": ["unaryOperator", "|", "minus"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "expr", "rPart": ["unary", "?", "(", "id", "|", "const", "|", "(", "\"(\"", "expr", "\")\"", ")", ")", "(", "binary", "expr", ")", "?"]}, {"lPart": "binary", "rPart": ["binaryOperator", "|", "minus"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fa1d8e8558742cb433571c"}, "rules": "Лаба4", "data": {"rList": [{"lPart": "program", "rPart": ["func", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "type", "\"(\"", "argum", "?", "\")\"", "\"{\"", "operator", "*", "\"}\"", "\"->\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "cycle", "|", "declare", "|", "choice", "|", "return", "|", "leave", "|", "(", "id", "\"(\"", "param", "?", "\")\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "OB", "else"]}, {"lPart": "cycle", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "OB"]}, {"lPart": "declare", "rPart": ["\"declare\"", "type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "expr", "(", "option", "OB", "*", "fin", "?", ")", "+", "(", "\"nooption\"", "OB", "*", ")", "?", "\"end\""]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "fin", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "argum", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["unary", "?", "(", "(", "id", "(", "\"(\"", "param", "?", "\")\"", ")", "?", ")", "|", "const", "|", "(", "\"(\"", "expr", "\")\"", ")", ")", "(", "binary", "expr", ")", "?"]}, {"lPart": "OB", "rPart": ["operator", "|", "(", "\"{\"", "operator", "*", "\"}\"", ")"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"string\"", "|", "\"float\""]}, {"lPart": "else", "rPart": ["\"not\"", "OB"]}, {"lPart": "option", "rPart": ["\"option\"", "const", "\":\""]}, {"lPart": "unary", "rPart": ["unaryOperator", "|", "minus"]}, {"lPart": "const", "rPart": ["constQuater", "|", "constDec", "|", "constHex", "|", "constFloat", "|", "constChar", "|", "constString"]}, {"lPart": "binary", "rPart": ["binaryOperator", "|", "minus"]}, {"lPart": "param", "rPart": ["expr", "(", "\",\"", "expr", ")", "*"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constQuater", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "else", "rPart": ["~", "\"not\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680c87328558742cb43398dc"}, "rules": "Лаба5", "data": {"rList": [{"lPart": "program", "rPart": ["func", "*"]}, {"lPart": "func", "rPart": ["\"function\"", "type", "\"(\"", "argum", "?", "\")\"", "\"{\"", "operator", "*", "\"}\"", "\"->\"", "id"]}, {"lPart": "operator", "rPart": ["assign", "|", "cond", "|", "cycle", "|", "declare", "|", "choice", "|", "return", "|", "leave", "|", "fin", "|", "(", "id", "\"(\"", "param", "?", "\")\"", "\";\"", ")"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "expr", "\")\"", "\"then\"", "OB", "else"]}, {"lPart": "cycle", "rPart": ["\"while\"", "\"(\"", "expr", "\")\"", "\"do\"", "OB"]}, {"lPart": "declare", "rPart": ["\"declare\"", "type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "expr", "(", "option", "OB", "*", ")", "+", "(", "\"nooption\"", "OB", "*", ")", "?", "\"end\""]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "fin", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "argum", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["unary", "?", "(", "(", "id", "(", "\"(\"", "param", "?", "\")\"", ")", "?", ")", "|", "const", "|", "(", "\"(\"", "expr", "\")\"", ")", ")", "(", "binary", "expr", ")", "?"]}, {"lPart": "OB", "rPart": ["operator", "|", "(", "\"{\"", "operator", "*", "\"}\"", ")"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"string\"", "|", "\"float\""]}, {"lPart": "else", "rPart": ["\"not\"", "OB"]}, {"lPart": "option", "rPart": ["\"option\"", "const", "\":\""]}, {"lPart": "unary", "rPart": ["unaryOperator", "|", "minus"]}, {"lPart": "const", "rPart": ["constQuater", "|", "constDec", "|", "constHex", "|", "constFloat", "|", "constChar", "|", "constString"]}, {"lPart": "binary", "rPart": ["binaryOperator", "|", "minus"]}, {"lPart": "param", "rPart": ["expr", "(", "\",\"", "expr", ")", "*"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "unaryOperator", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constQuater", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "constDec", "rPart": ["[0-9]", "+"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[rnt]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "else", "rPart": ["~", "\"not\""]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Драйко А.В.","Collection":"254522123",{"_id": {"$oid": "67d68a10e0b22203e7cbfc70"}, "rules": "LAB1", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "[0-9]", "|", "[0-9]", "[a-zA-Z]", ")", "(", "[a-zA-Z]", "[0-9]", "|", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "operationUnary", "rPart": ["[!]", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operatinAmbivalently", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d68abfe0b22203e7cbfc83"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 1000, "assist": 1}}{"_id": {"$oid": "67fb65778558742cb4335c57"}, "rules": "LAB2", "data": {"rList": [{"lPart": "id", "rPart": ["(", "[a-zA-Z]", "[0-9]", "|", "[0-9]", "[a-zA-Z]", ")", "(", "[a-zA-Z]", "[0-9]", "|", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "operationUnary", "rPart": ["[!]", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"ntr\\\\]", "|", "(", "[0-9a-z]", "[0-9a-z]", ")", ")", ")", ")", "+", "[\"]"]}, {"lPart": "operationBinary", "rPart": ["[+*/><]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operatinAmbivalently", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Суханова В.Е.","Collection":"245135244",{"_id": {"$oid": "67c010caaf563521c9d5a0f3"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67ea7a22a600182c7517a548"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "|", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "assignStart", "rPart": ["[p]", "[u]", "[t]"]}, {"lPart": "assignEnd", "rPart": ["[t]", "[o]"]}, {"lPart": "delimeter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea86f3a600182c7517a5da"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "Leave"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Statement", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Statement"]}, {"lPart": "Leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "Statement"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "|", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ef31eca600182c7517b436"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "|", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?"]}, {"lPart": "сonst10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e4f598558742cb4339f4b"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"ret\"", "Type", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"double\"", "|", "\"long\""]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "Declare", "|", "LeaveFin"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Statement", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Statement"]}, {"lPart": "OperSwitch", "rPart": ["\"choice\"", "Expr", "forSwitch", "*", "forSwitch2", "\"end\""]}, {"lPart": "Declare", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "LeaveFin", "rPart": ["(", "\"leave\"", "\";\"", ")", "|", "(", "\"fin\"", "\";\"", ")"]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "Statement"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "forSwitch2", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"option\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "ConstWithSign", "rPart": ["binaryOrUnarySign", "?", "ConstNum"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "|", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e634a8558742cb433a179"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "\"ret\"", "Type", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"double\"", "|", "\"long\""]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "Declare", "|", "LeaveFin"]}, {"lPart": "OperAssign", "rPart": ["\"put\"", "Expr", "\"to\"", "id", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "Statement", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "Statement"]}, {"lPart": "OperSwitch", "rPart": ["\"choice\"", "Expr", "forSwitch", "*", "forSwitch2", "\"end\""]}, {"lPart": "Declare", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "LeaveFin", "rPart": ["(", "\"leave\"", "\";\"", ")", "|", "(", "\"fin\"", "\";\"", ")"]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "Statement"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "forSwitch2", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"option\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "binaryOrUnarySign", ")"]}, {"lPart": "Const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constChar", "|", "constString"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "ConstWithSign", "rPart": ["binaryOrUnarySign", "?", "ConstNum"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "binaryOrUnarySign"]}, {"lPart": "ConstNum", "rPart": ["const2", "|", "const8", "|", "const10"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "|", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[o]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binaryOrUnarySign", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Тимочкин Е.А.","Collection":"511355544",{"_id": {"$oid": "67bdc374af563521c9d592d4"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bdc399af563521c9d592df"}, "rules": "laba1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/><]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd7b94af563521c9d5ccc1"}, "rules": "laba2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "sign", "rPart": ["[+*/><=]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "breaket", "rPart": ["[\\(\\)]"]}, {"lPart": "sqbraket", "rPart": ["[\\[\\]]"]}, {"lPart": "figbraket", "rPart": ["[\\{\\}]"]}, {"lPart": "bitsign", "rPart": ["[^&|]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "logicsign", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e513474635a960233aeb18"}, "rules": "laba3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binarysign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "char"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constReal", "|", "constExp"]}, {"lPart": "Unary", "rPart": ["(", "unarsign", "|", "minus", ")"]}, {"lPart": "Binary", "rPart": ["binarysign", "|", "minus"]}, {"lPart": "BegExpres", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expres", "\")\""]}, {"lPart": "EndExpres", "rPart": ["Binary", "Expres"]}, {"lPart": "Expres", "rPart": ["(", "Unary", ")", "?", "BegExpres", "(", "EndExpres", ")", "?"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperatorAssign", "|", "OperatorCond", "|", "OperatorCycle"]}, {"lPart": "OperatorAssign", "rPart": ["\"let\"", "id", "\"on\"", "Expres", "\";\""]}, {"lPart": "OperatorCond", "rPart": ["\"in\"", "\"(\"", "Expres", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperatorCycle", "rPart": ["\"loop\"", "Statement", "\"until\"", "\"(\"", "Expres", "\")\"", "Retire"]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "Retire", "rPart": ["\"retire\"", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f75ceb8558742cb4335250"}, "rules": "laba4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binarysign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "char"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constReal", "|", "constExp"]}, {"lPart": "Unary", "rPart": ["(", "unarsign", "|", "minus", ")"]}, {"lPart": "Binary", "rPart": ["(", "binarysign", "|", "minus", ")"]}, {"lPart": "BegExpres", "rPart": ["Const", "|", "id", "|", "\"(\"", "Expres", "\")\""]}, {"lPart": "EndExpres", "rPart": ["Binary", "Expres"]}, {"lPart": "Expres", "rPart": ["(", "Unary", ")", "?", "BegExpres", "(", "EndExpres", ")", "?"]}, {"lPart": "Operator", "rPart": ["OperatorAssign", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorSwitch", "|", "RetireFin", "|", "Return"]}, {"lPart": "OperatorAssign", "rPart": ["\"let\"", "id", "\"on\"", "Expres", "\";\""]}, {"lPart": "OperatorCond", "rPart": ["\"in\"", "\"(\"", "Expres", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperatorCycle", "rPart": ["\"loop\"", "Statement", "\"until\"", "\"(\"", "Expres", "\")\""]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "RetireFin", "rPart": ["\"retire\"", "\";\"", "|", "\"fin\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expres", "?", "\";\""]}, {"lPart": "OperatorSwitch", "rPart": ["\"choice\"", "Expres", "SwitchFir", "*", "SwitchSec", "\"end\""]}, {"lPart": "SignedConst", "rPart": ["(", "minus", ")", "?", "ConstNum"]}, {"lPart": "SwitchFir", "rPart": ["\"option\"", "SignedConst", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "SwitchSec", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "Args", "\")\"", "FuncBody", "\"->\"", "id"]}, {"lPart": "Args", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBody", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6809fdc58558742cb4339304"}, "rules": "laba5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[e]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binarysign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constReal", "|", "constExp", "|", "char"]}, {"lPart": "ConstNum", "rPart": ["constInt", "|", "constReal", "|", "constExp"]}, {"lPart": "Unary", "rPart": ["(", "unarsign", "|", "minus", ")"]}, {"lPart": "Binary", "rPart": ["(", "binarysign", "|", "minus", ")"]}, {"lPart": "BegExpres", "rPart": ["Const", "|", "(", "id", "(", "\"(\"", "Expres", "?", "(", "\",\"", "Expres", ")", "*", "\")\"", ")", "?", ")", "|", "(", "\"(\"", "Expres", "\")\"", ")"]}, {"lPart": "EndExpres", "rPart": ["Binary", "Expres"]}, {"lPart": "Expres", "rPart": ["(", "Unary", ")", "?", "BegExpres", "(", "EndExpres", ")", "?"]}, {"lPart": "Operator", "rPart": ["OperatorAssign", "|", "OperatorCond", "|", "OperatorCycle", "|", "OperatorSwitch", "|", "RetireFin", "|", "Return", "|", "OperatorDefine", "|", "FuncCall"]}, {"lPart": "OperatorAssign", "rPart": ["\"let\"", "id", "\"on\"", "Expres", "\";\""]}, {"lPart": "OperatorCond", "rPart": ["\"in\"", "\"(\"", "Expres", "\")\"", "\"then\"", "Statement", "Not"]}, {"lPart": "OperatorCycle", "rPart": ["\"loop\"", "Statement", "\"until\"", "\"(\"", "Expres", "\")\""]}, {"lPart": "Statement", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Not", "rPart": ["\"not\"", "Statement"]}, {"lPart": "Not", "rPart": ["~", "\"not\""]}, {"lPart": "RetireFin", "rPart": ["\"retire\"", "\";\"", "|", "\"fin\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expres", "?", "\";\""]}, {"lPart": "OperatorSwitch", "rPart": ["\"choice\"", "Expres", "SwitchFir", "*", "SwitchSec", "\"end\""]}, {"lPart": "SignedConst", "rPart": ["(", "minus", ")", "?", "ConstNum"]}, {"lPart": "SwitchFir", "rPart": ["\"option\"", "SignedConst", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "SwitchSec", "rPart": ["\"nooption\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "*"]}, {"lPart": "Prog", "rPart": ["Func", "+"]}, {"lPart": "Func", "rPart": ["\"function\"", "\"(\"", "Args", "\")\"", "FuncBody", "\"->\"", "Type", "id"]}, {"lPart": "Args", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBody", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "OperatorDefine", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "FuncCall", "rPart": ["id", "\"(\"", "Expres", "?", "(", "\",\"", "Expres", ")", "*", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Челяпина Е.К.","Collection":"143312142",{"_id": {"$oid": "67b34e15ce6dd03692d08162"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bb7076ce6dd03692d0963b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/|&<>]", "?", "|", "[\"!=\"]", "|", "[\"==\"]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c418ebaf563521c9d5af2c"}, "rules": "Лр1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", "[A-Za-z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/|&<>]", "?", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d54921e0b22203e7cbfa56"}, "rules": "Лр2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[A-Za-z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/|&<>]", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "keyWord", "rPart": ["[a-z]", "+"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e99da64635a960233afcf8"}, "rules": "Лр3", "data": {"rList": [{"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[A-Za-z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constString", "|", "constChar"]}, {"lPart": "SignOfCompOperation", "rPart": ["\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "(", "\"!=\"", ")", "|", "(", "\"==\"", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "SignOfCompOperation", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "Const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "ComprNo", "?"]}, {"lPart": "ComprNo", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "\"{\"", "Operator", "*", "\"}\"", ")", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "\"{\"", "Operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fc878d8558742cb433672a"}, "rules": "Лр4", "data": {"rList": [{"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[A-Za-z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfCompOperation", "rPart": ["\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "(", "\"!=\"", ")", "|", "(", "\"==\"", ")"]}, {"lPart": "Sign", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "SignOfCompOperation"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constString", "|", "constChar"]}, {"lPart": "Type", "rPart": ["\"string\"", "|", "\"char\"", "|", "\"float\"", "|", "\"int\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "id"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["\"(\"", "(", "id", "\",\"", "?", ")", "*", "\")\""]}, {"lPart": "EndExpr", "rPart": ["Sign", "Expr"]}, {"lPart": "Program", "rPart": ["Function", "+", "|", "Operator", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Type", "*", "id", "\")\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "ComprNo", "?"]}, {"lPart": "ComprNo", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "\"{\"", "Operator", "*", "\"}\"", ")", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\"(\"", "(", "id", "\",\"", "?", ")", "*", "\")\"", "delimiter"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cc6728558742cb4339ac3"}, "rules": "Лр6", "data": {"rList": [{"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[A-Za-z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[01]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfCompOperation", "rPart": ["\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "(", "\"!=\"", ")", "|", "(", "\"==\"", ")"]}, {"lPart": "Sign", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "SignOfCompOperation"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constString", "|", "constChar"]}, {"lPart": "Type", "rPart": ["\"string\"", "|", "\"char\"", "|", "\"float\"", "|", "\"int\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const", "|", "id"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "(", "id", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\",\"", "?", ")", "*", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Program", "rPart": ["Function", "+", "|", "Operator", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "Type", "id", "\",\"", "?", ")", "*", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Type", "*", "id", "\")\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "ComprNo", "?"]}, {"lPart": "ComprNo", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"exit\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "\"{\"", "Operator", "*", "\"}\"", ")", "+", "CaseDef", "?", "\"}\""]}, {"lPart": "CaseDef", "rPart": ["\"otherwise\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\"(\"", "(", "id", "\",\"", "?", ")", "*", "\")\"", "delimiter"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}},
{"FIO":"Мойкин Ф.А.","Collection":"122115515",{"_id": {"$oid": "67adbab5ce6dd03692d07a40"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b6f730ce6dd03692d088b3"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "four", "rPart": ["[0-9]", "+", "[f]"]}, {"lPart": "eight", "rPart": ["[0-9]", "+", "[e]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assignSign", "rPart": ["[<]", "[-]"]}, {"lPart": "operationSign", "rPart": ["[=]", "[=]"]}, {"lPart": "operationSign", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]"]}, {"lPart": "const", "rPart": ["int", "|", "string", "|", "char", "|", "four", "|", "eight", "|", "float"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "operationSign", "Expr", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "assignSign", "Expr", "\";\""]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "body", "(", "condElse", ")", "?"]}, {"lPart": "body", "rPart": ["\"{\"", "(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", ")", "(", "body", ")", "?", "\"}\""]}, {"lPart": "condElse", "rPart": ["\"else\"", "body"]}, {"lPart": "loop", "rPart": ["\"exec\"", "body", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "switch", "rPart": ["\"choice\"", "Expr", "switchBody", "(", "\"nooption\"", "body", ")", "?", "\"end\""]}, {"lPart": "switchBody", "rPart": ["\"option\"", "const", "\":\"", "body", "(", "\"fin\"", "\";\"", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", ")", "?", "\")\"", "\"{\"", "body", "\"}\"", "\"->\"", "id"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"four\"", "|", "\"eight\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e174504635a960233ad44d"}, "rules": "Lab3", "data": {"rList": [{"lPart": "start", "rPart": ["text", "+"]}, {"lPart": "text", "rPart": ["(", "assign", "|", "cond", "|", "loop", "|", "switch", "|", "function", ")"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "Expr", "delimeter"]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "body", "condElse", "?"]}, {"lPart": "loop", "rPart": ["\"exec\"", "bodyLoop", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "delimeter"]}, {"lPart": "switch", "rPart": ["\"choice\"", "Expr", "\"{\"", "switchBody", "(", "\"nooption\"", "body", ")", "?", "\"}\"", "\"end\""]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", ")", "?", "\")\"", "body", "\"->\"", "id"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "operationSign", "Expr", ")", "?"]}, {"lPart": "body", "rPart": ["\"{\"", "(", "assign", "|", "loop", "|", "switch", ")", "+", "\"}\""]}, {"lPart": "const", "rPart": ["int", "|", "string", "|", "char", "|", "four", "|", "eight", "|", "float"]}, {"lPart": "switchBody", "rPart": ["(", "\"option\"", "const", "\":\"", "\"{\"", "(", "assign", "|", "loop", "|", "switch", ")", "+", "(", "\"fin\"", "delimeter", ")", "?", "\"}\"", ")", "+"]}, {"lPart": "condElse", "rPart": ["\"else\"", "body"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"four\"", "|", "\"eight\""]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{,3}", "[a-zA-Z]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "four", "rPart": ["[0-9]", "+", "[f]"]}, {"lPart": "eight", "rPart": ["[0-9]", "+", "[e]"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "operationSign", "rPart": ["[=]", "[=]"]}, {"lPart": "operationSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true}"]}, {"lPart": "bodyLoop", "rPart": ["\"{\"", "(", "assign", "|", "loop", "|", "switch", ")", "+", "(", "\"exit\"", "delimeter", ")", "?", "\"}\""]}, {"lPart": "delimeter", "rPart": ["\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Хрусталев Д.А.","Collection":"333451435",{"_id": {"$oid": "67c455acaf563521c9d5b1e2"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+4", "deltat": 9999, "assist": 1}}{"_id": {"$oid": "67c45db3af563521c9d5b258"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["(", "(", "[0–9]", "+", "[.]", "[0–9]", "*", ")", "|", "(", "[0–9]", "*", "[.]", "[0–9]", "+", ")", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-3]", ")", "|", "(", "[0-9]", ")", "|", "(", "[0-9a-fA-F]", "*", ")"]}, {"lPart": "const", "rPart": ["[a-zA-Z]", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c470fbaf563521c9d5b3fa"}, "rules": "лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["[-+*/]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}], "extension": "var ignoreLastWord;\nset(42, x1y);\nset(\"Hello\", a1A);\nset(0b101, b2B);\nset(0x123, cC);\nset(-3.14, d4D);\n\n"}}{"_id": {"$oid": "67fba77f8558742cb43360b3"}, "rules": "лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "dotCommand", "rPart": ["[;:,]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")", "|", "[!]"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+"]}, {"lPart": "binary", "rPart": ["[+*/%><]", "|", "[|]", "[|]", "|", "[&]", "[&]", "|", "[=]", "[=]", "|", "[<]", "[=]", "|", "[>]", "[=]", "|", "[!]", "[=]", "|", "[<]", "[<]", "|", "[>]", "[>]"]}], "extension": "var ignoreLastWord;\nset(42, x1y);\nset(\"Hello\", a1A);\nset(0b101, b2B);\nset(0x123, cC);\nset(-3.14, d4D);\n\n"}}{"_id": {"$oid": "67fba8c48558742cb43360da"}, "rules": "лаба3", "data": {"rList": [{"lPart": "Oper", "rPart": ["\"set\"", "\"(\"", "(", "Expression", ")", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expression", "rPart": ["Unarny", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "mixed", "|", "binary", ")", "Expression", ")", "?"]}, {"lPart": "Unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["constChar", "|", "const4", "|", "const10", "|", "const16", "|", "constFloat"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "bracer", "rPart": ["[(){}]"]}, {"lPart": "dotCommand", "rPart": ["[;:,]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "680e776a8558742cb433a27e"}, "rules": "лаба4", "data": {"rList": [{"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"as\"", "(", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"const4\"", "|", "\"const16\"", ")", "\"(\"", "Expression", "*", "\")\"", "\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["At", "|", "Oper", "|", "Cycle", "|", "SwitchOp"]}, {"lPart": "Oper", "rPart": ["\"set\"", "\"(\"", "(", "Expression", ")", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "At", "rPart": ["\"at\"", "\"(\"", "Expression", "\")\"", "\"do\"", "(", "\"{\"", "operator", "*", "\"}\"", "|", "operator", ")", "(", "\"or\"", "\"do\"", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "(", "(", "\"{\"", "operator", "*", "retire", "?", "\"}\"", ")", "|", "operator", ")", "\"until\"", "\"(\"", "(", "Expression", ")", "\")\"", "retire", "\";\""]}, {"lPart": "SwitchOp", "rPart": ["\"select\"", "Expression", "\"{\"", "SwitchCase", "+", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "SwitchConst", "\")\"", "operator", "*", "break", "?"]}, {"lPart": "SwitchConst", "rPart": ["constant", "|", "false"]}, {"lPart": "Expression", "rPart": ["Unarny", "?", "(", "id", "|", "constant", "|", "\"(\"", "Expression", "\")\"", ")", "(", "(", "binary", ")", "Expression", ")", "?"]}, {"lPart": "Unarny", "rPart": ["mixed", "|", "unary"]}, {"lPart": "constant", "rPart": ["constChar", "|", "const4", "|", "const10", "|", "const16", "|", "constFloat", "|", "constString"]}, {"lPart": "binary", "rPart": ["binaryLogic", "|", "binaryArif", "|", "binaryCheck"]}, {"lPart": "false", "rPart": ["\"false\""]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "(", "[trn]", "|", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "+", "[\"]"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9a-fA-F]", "+"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[|]", "[|]", "|", "[&]", "[&]", ")"]}, {"lPart": "binaryArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binaryCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Беляев А.Р.","Collection":"212232411",{"_id": {"$oid": "67c05eb0af563521c9d5a3d8"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67c05efbaf563521c9d5a3e8"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c05f38af563521c9d5a3f8"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67c06d46af563521c9d5a42c"}, "rules": "лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=false;}"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67daaedae0b22203e7cc1581"}, "rules": "лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "type", "rPart": ["\"double\"", "|", "\"int\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "Operator", "rPart": ["id", "assign", "Expr", "semicolon"]}, {"lPart": "assignFunc", "rPart": ["\"=>\""]}, {"lPart": "case", "rPart": ["\"case\""]}, {"lPart": "then", "rPart": ["\"then\""]}, {"lPart": "when", "rPart": ["\"when\""]}, {"lPart": "while", "rPart": ["\"while\""]}, {"lPart": "otherwise", "rPart": ["\"otherwise\""]}, {"lPart": "as", "rPart": ["\"as\""]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "other", "rPart": ["\"other\""]}, {"lPart": "lsqbracket", "rPart": ["\"[\""]}, {"lPart": "rsqbracket", "rPart": ["\"]\""]}, {"lPart": "lcbracket", "rPart": ["\"{\""]}, {"lPart": "rcbracket", "rPart": ["\"}\""]}, {"lPart": "rbracket", "rPart": ["\")\""]}, {"lPart": "lbracket", "rPart": ["\"(\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "rcomm", "rPart": ["\"*/\""]}, {"lPart": "lcomm", "rPart": ["\"/*\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ed587aa600182c7517aff3"}, "rules": "лаба3", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Operator", "rPart": ["id", "assign", "Expr", "semicolon"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", "\"other\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Operator", ")"]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "unaryOperator", "rPart": ["\"-\"", "|", "\"+\"", "|", "\"!\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a64558558742cb4339665"}, "rules": "лаба4тест", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Operator", "rPart": ["id", "assign", "Expr", "semicolon"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", "OperFix"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Operator", ")"]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "unaryOperator", "rPart": ["\"-\"", "|", "\"+\"", "|", "\"!\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "Operator", "*", ")", "*", "(", "\"otherwise\"", "Operator", "*", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "typeId", "rPart": ["type", "id"]}, {"lPart": "OperFix", "rPart": ["(", "\"other\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", ")"]}, {"lPart": "OperFix", "rPart": ["~", "\"other\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a6f608558742cb43396a5"}, "rules": "лаба4тест2", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Operator", "rPart": ["id", "(", "assign", "Expr", "semicolon", "|", "\"=>\"", "(", "\"as\"", "type", ")", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", "OperFix"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Operator", ")"]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "unaryOperator", "rPart": ["\"-\"", "|", "\"+\"", "|", "\"!\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "Operator", "*", ")", "*", "(", "\"otherwise\"", "Operator", "*", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "typeId", "rPart": ["type", "id"]}, {"lPart": "OperFix", "rPart": ["(", "\"other\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", ")"]}, {"lPart": "OperFix", "rPart": ["~", "\"other\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a71628558742cb43396bd"}, "rules": "лаба4тест3", "data": {"rList": [{"lPart": "Operator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "Operator", "rPart": ["id", "(", "assign", "Expr", "semicolon", "|", "\"=>\"", "(", "\"as\"", "type", ")", "\"(\"", "(", "(", "typeId", ")", "(", "\",\"", "typeId", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\"", ")"]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", "OperFix"]}, {"lPart": "Operator", "rPart": ["\"while\"", "\"(\"", "Expr", "\")\"", "\"do\"", "(", "Operator", ")"]}, {"lPart": "assign", "rPart": ["\"<-\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "semicolon", "rPart": ["\";\""]}, {"lPart": "EndExpr", "rPart": ["(", "binaryOperator", "Expr", ")", "?"]}, {"lPart": "binaryOperator", "rPart": ["\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"==\"", "|", "\"!=\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"&&\"", "|", "\"||\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const"]}, {"lPart": "unaryOperator", "rPart": ["\"-\"", "|", "\"+\"", "|", "\"!\""]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "[d]", "[0-9]", "[0-9]", "[0-9]", ")", "|", "[]", ")", "[']"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "const", "\"then\"", "Operator", "*", ")", "*", "(", "\"otherwise\"", "Operator", "*", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exit\"", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\""]}, {"lPart": "typeId", "rPart": ["type", "id"]}, {"lPart": "OperFix", "rPart": ["(", "\"other\"", "(", "Operator", "|", "\"{\"", "Operator", "\"}\"", ")", ")"]}, {"lPart": "OperFix", "rPart": ["~", "\"other\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Самойлова Е.В.","Collection":"551124532",{"_id": {"$oid": "67bd741faf563521c9d591ad"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 2000, "assist": 1}}{"_id": {"$oid": "67bdf781af563521c9d594bf"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67be0a29af563521c9d5955b"}, "rules": "LR1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "binConst", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "quarterConst", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "decConst", "rPart": ["[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", ")", "|", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "strConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "binOperationLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binOperationCompare", "rPart": ["(", "[<]", "|", "[>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binOperation", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unMinus", "rPart": ["[-]"]}, {"lPart": "unOperator", "rPart": ["[!]"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["unMinus", "|", "unOperator"]}, {"lPart": "binary", "rPart": ["binOperation", "|", "binOperationLogic", "|", "binOperationCompare"]}, {"lPart": "const", "rPart": ["binConst", "|", "quarterConst", "|", "decConst", "|", "floatConst", "|", "strConst", "|", "charConst"]}, {"lPart": "Expr", "rPart": ["unary", "?", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "const", "|", "\"(\"", "(", "Expr", "|", "type", ")", "\")\"", "id", "?", ")", "(", "(", "unMinus", "|", "binary", ")", "Expr", ")", "?"]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "OB", "rPart": ["operator", "|", "(", "\"{\"", "operator", "*", "\"}\"", ")"]}, {"lPart": "cond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "OB", ")", "partElse"]}, {"lPart": "partElse", "rPart": ["\"else\"", "(", "OB", ")"]}, {"lPart": "partElse", "rPart": ["~", "\"else\""]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["cond", "|", "assign", "\";\"", "|", "cycle", "|", "switch", "|", "\"return\"", "Expr", "?", "\";\"", "|", "id", "(", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "\";\"", "|", "quit"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "assign", "?", "\";\"", "Expr", "?", "\";\"", "assign", "?", "\")\"", "(", "OB", ")"]}, {"lPart": "switch", "rPart": ["\"??\"", "Expr", "\"{\"", "case", "+", "\"?~\"", "\":\"", "OB", "*", "\"}\""]}, {"lPart": "case", "rPart": ["\"?=\"", "const", "\":\"", "OB", "*"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "argum", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "argum", "?", "\")\"", "\"{\"", "operator", "*", "\"}\"", "\"->\"", "id"]}, {"lPart": "program", "rPart": ["function", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e80bd94635a960233af462"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67e80d4c4635a960233af467"}, "rules": "Sample4", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Базаров Б.Н.","Collection":"233444422",{"_id": {"$oid": "67c7209daf563521c9d5bc95"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67d95013e0b22203e7cc10a7"}, "rules": "Лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[xX]", "[0-9a-fA-F]", "+"]}, {"lPart": "constChar", "rPart": ["(", "[']", "(", "[]", "|", "[ \\r\\n\\t]", ")", "[']", ")"]}, {"lPart": "operation", "rPart": ["[+\\-*/%]"]}, {"lPart": "constString", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fffeff8558742cb43373b7"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{1,4}", "[a-zA-Z]", "+"]}, {"lPart": "СonstInt", "rPart": ["(", "[0]", "[0-3]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0]", "[0-9A-F]", "+", ")"]}, {"lPart": "СonstStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9]", "+", ")", "*", "[\"]", "="]}, {"lPart": "СonstChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "СonstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[+*-/]", "="]}, {"lPart": "Comment", "rPart": ["[/]", "[]", "[^]", "[]", "+", "(", "[^/]", "[^]", "[]", "+", ")", "*", "[/]"]}, {"lPart": "Assignment", "rPart": ["set", "(", ", ) ;"]}, {"lPart": "Conditional", "rPart": ["at", " do [ or do ]"]}, {"lPart": "Loop", "rPart": ["foreach", "(", " in : ) [ stop; ]"]}, {"lPart": "Switch", "rPart": ["?", "? { ?= : [ quit; ] [ ?= … ] … [ ?~ : ] }"]}, {"lPart": "FunctionDecl", "rPart": ["FunctionDecl => [ as ] ( [ ] )"]}, {"lPart": "Loop", "rPart": ["\"foreach\"", "\"(\"", "Id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "Block", "(", "[ \"stop\" \";\" ]", ")", "*", ""]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Statement", "+", "[ \"quit\" \";\" ]", ")", "*", "[ \"?~\" \":\" Statement* ]", "\"}\"", ""]}, {"lPart": "FunctionDecl", "rPart": ["Id", "\"=>\"", "[ \"as\" Type ]", "\"(\"", "[ ArgList ]", "\")\"", "Block", ""]}, {"lPart": "Block", "rPart": ["\"{\"", "Statement", "*", "\"}\""]}, {"lPart": "OperatorOrBlock", "rPart": ["Statement", "|", "Block"]}, {"lPart": "Expr", "rPart": ["Term", "(", "(", "\"+\"", "|", "\"-\"", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["Factor", "(", "(", "\"*\"", "|", "\"/\"", ")", "Factor", ")", "*"]}, {"lPart": "Factor", "rPart": ["Id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Const", "rPart": ["ConstInt", "|", "ConstFloat", "|", "ConstStr", "|", "ConstChar"]}, {"lPart": "Type", "rPart": ["id"]}, {"lPart": "ArgList", "rPart": ["Id", "(", "\",\"", "Id", ")", "*"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "680007768558742cb43373c0"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{1,4}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[0-3]", "+", ")", "|", "(", "[0]", "[0-7]", "+", ")", "|", "(", "[0]", "[0-9A-F]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9]", "+", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "When", "rPart": ["when"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68000ae78558742cb43373d1"}, "rules": "Лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "СonstInt", "rPart": ["[0]", "|", "(", "[1-9]", "[0-9]", "*", ")", "|", "(", "[0q]", "[0-3]", "+", ")", "|", "(", "[0x]", "[0-9A-Fa-f]", "+", ")"]}, {"lPart": "ConstStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9]", "+", ")", "*", "[\"]"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9]", "+", "[']"]}, {"lPart": "Formatting", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[+ | - | * | / | < | > | =]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Word", "rPart": ["[a-z]", "+"]}, {"lPart": "Spliter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Ущалов А.Е.","Collection":"233152251",{"_id": {"$oid": "67bf3f81af563521c9d59e60"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bf4794af563521c9d59e8f"}, "rules": "lab1", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}], "extension": "var ignoreLastWord;\n\n"}}{"_id": {"$oid": "67d15c16af563521c9d5e035"}, "rules": "lab2", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[!=><]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "[]", "|", "[:]", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\n"}}{"_id": {"$oid": "67d3da88e0b22203e7cbf8bf"}, "rules": "lab3", "data": {"rList": [{"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[!=><]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "[]", "|", "[:]", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "Block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Block", "|", "operator", ")", "endPart"]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "Block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "compare", "|", "logic", "|", "opSign", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr"]}, {"lPart": "operator", "rPart": ["Expr", "\",\""]}, {"lPart": "operator", "rPart": ["\"loop\"", "(", "Block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "Block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "other", "rPart": ["\"otherwise\"", "Block"]}], "extension": "var ignoreLastWord;\n\n"}}{"_id": {"$oid": "67f65baa8558742cb4334687"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Block", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"loop\"", "(", "Block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "Block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "Block"]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "Block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "Block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "compare", "|", "logic", "|", "opSign", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr"]}, {"lPart": "other", "rPart": ["\"otherwise\"", "Block"]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[!=><]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "[]", "|", "[:]", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\n"}}{"_id": {"$oid": "6808e31e8558742cb4338a76"}, "rules": "lab5", "data": {"rList": [{"lPart": "program", "rPart": ["(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Block", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"loop\"", "(", "Block", "|", "operator", ")", "\"until\"", "\"(\"", "Expr", "\")\"", "(", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "Block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "function", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "Block"]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "Block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "Block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["consts"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "compare", "|", "logic", "|", "opSign", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr"]}, {"lPart": "other", "rPart": ["\"otherwise\"", "Block"]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[!=><]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "[]", "|", "[:]", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n\n"}}{"_id": {"$oid": "680e2be18558742cb4339e38"}, "rules": "lab6", "data": {"rList": [{"lPart": "program", "rPart": ["{whileCnt=0;}", "(", "operator", "|", "function", ")", "+"]}, {"lPart": "operator", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", "\")\"", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "(", "Block", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"loop\"", "(", "Block", "|", "operator", ")", "{toPFR(\"Label0_\" +peek(ctlStk)); toPFR(\"Jmp\"); toPFR(\"Label1_\"+ctlStk.pop()+\":\");}", "\"until\"", "\"(\"", "Expr", "{toPFR(\"Label1_\" +peek(ctlStk)); toPFR(\"JumpOnFalse\");}", "\")\"", "(", "{toPFR(\"labelLoopFalse\"+peek(ctlStk)); toPFR(\"JumpFalse\");}", "\"retire\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "consts", "\"then\"", "Block", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "function", "rPart": ["{toPFR(\"func\");toPFR(this.currentLexem[1]);}", "id", "\"(\"", "ArgList", "?", "\")\"", "Block"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"else\"", "(", "Block", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"else\""]}, {"lPart": "Block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "consts"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "compare", "|", "logic", "|", "opSign", "|", "minus", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "consts", "rPart": ["const", "|", "constReal", "|", "constChar", "|", "constStr"]}, {"lPart": "other", "rPart": ["\"otherwise\"", "Block"]}, {"lPart": "ArgList", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "{toPFR(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "compare", "rPart": ["[<]", "|", "[>]", "|", "(", "[!=><]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "[]", "|", "[:]", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord = false;\nvar whileCnt = 0;\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar ctlStk=[1]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\n\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n\n return 0;\n}\n"}}},
{"FIO":"Гирченко Л.В.","Collection":"522315441",{"_id": {"$oid": "67bac2a7ce6dd03692d09371"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bac3c0ce6dd03692d09375"}, "rules": "noName", "data": {"rList": [{"lPart": "var", "rPart": ["[a-zA-Z]", "[0-3]", "[a-zA-z]"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "opsign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}], "extension": ""}}{"_id": {"$oid": "67bae794ce6dd03692d0942b"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-z]"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "opsign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "op", "rPart": ["[!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67baea21ce6dd03692d09438"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "67ceaa14af563521c9d5d17c"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-z]"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "opsign", "rPart": ["[-+*/]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e164904635a960233ad39b"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-z]"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "opsign", "rPart": ["[+*/]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "block", "|", "operator", ")", "EndPart"]}, {"lPart": "EndPart", "rPart": ["~", "\"not\""]}, {"lPart": "EndPart", "rPart": ["\"not\"", "(", "block", "|", "operator", ")"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opsign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "operator", "rPart": ["(", "const", "|", "compare", "|", "logic", "|", "opsign", "|", "minus", "|", "logno", ")", "\",\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f673018558742cb433499c"}, "rules": "Lab4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "block", "|", "func", ")", "+"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "block", "|", "operator", ")", "EndPart"]}, {"lPart": "operator", "rPart": ["(", "const", "|", "compare", "|", "logic", "|", "opsign", "|", "minus", "|", "logno", ")", "\",\""]}, {"lPart": "operator", "rPart": ["\"exec\"", "(", "block", "|", "operator", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "(", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "block", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "block", ")", "?", "\"end\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\"", "|", "\"char\"", "|", "\"four\"", "|", "\"eight\""]}, {"lPart": "ArgList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "EndPart", "rPart": ["~", "\"not\""]}, {"lPart": "EndPart", "rPart": ["\"not\"", "(", "block", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opsign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-z]"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opsign", "rPart": ["[+*/]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808d59c8558742cb43389f0"}, "rules": "Lab5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "block", "|", "func", ")", "+"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "operator", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "block", "|", "operator", ")", "EndPart"]}, {"lPart": "operator", "rPart": ["(", "const", "|", "compare", "|", "logic", "|", "opsign", "|", "minus", "|", "logno", ")", "\",\""]}, {"lPart": "operator", "rPart": ["\"exec\"", "(", "block", "|", "operator", ")", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "(", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "const", "\":\"", "block", "(", "\"fin\"", "\";\"", ")", "?", ")", "+", "(", "\"nooption\"", "block", ")", "?", "\"end\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"str\"", "|", "\"char\"", "|", "\"four\"", "|", "\"eight\""]}, {"lPart": "ArgList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "logno", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "EndPart", "rPart": ["~", "\"not\""]}, {"lPart": "EndPart", "rPart": ["\"not\"", "(", "block", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opsign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-z]"]}, {"lPart": "const", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "opsign", "rPart": ["[+*/]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logno", "rPart": ["[!]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true}"]}, {"lPart": "comment", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Кузьмин М.А.","Collection":"414432112",{"_id": {"$oid": "67bdcc14af563521c9d59317"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-1", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bdccceaf563521c9d5932f"}, "rules": "LAB1", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "bracket", "rPart": ["[{}()]"]}, {"lPart": "signOfOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[-+*/]", "[=]", "?", ")"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}, {"lPart": "exponenta", "rPart": ["[0-9]", "+", "[e]", "[^]", "[0-9]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e5485a4635a960233aece8"}, "rules": "LAB2", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "bracket", "rPart": ["[{}()]"]}, {"lPart": "signOfOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "?", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[-+*/]", "[=]", "?", ")"]}, {"lPart": "delimiter", "rPart": ["[,;]"]}, {"lPart": "exponenta", "rPart": ["[0-9]", "+", "[e]", "[^]", "[0-9]", "+"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68063bd98558742cb433802c"}, "rules": "LAB3", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[-+*/]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "exponenta", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[e]", "[^]", "[0-9]", "+"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "prog", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["assign", "|", "condition"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "condition", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "operator", "*", "\"}\"", "(", "\"or do\"", "\"{\"", "operator", "*", "\"}\"", ")", "?"]}, {"lPart": "constAll", "rPart": ["const10", "|", "exponenta"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "signOfOperation", "Expr", ")", "?"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680662838558742cb4338105"}, "rules": "LAB4", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[-+*/]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "exponenta", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[e]", "[^]", "[0-9]", "+"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "operator", "rPart": ["assign", "|", "condition", "|", "cycle", "|", "case"]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "condition", "rPart": ["\"at\"", "Expr", "\"do\"", "\"{\"", "operator", "*", "\"}\"", "(", "\"or do\"", "\"{\"", "operator", "*", "\"}\"", ")", "?"]}, {"lPart": "constAll", "rPart": ["const10", "|", "exponenta"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "signOfOperation", "Expr", ")", "?"]}, {"lPart": "cycle", "rPart": ["\"while\"", "Expr", "\"do\"", "\"{\"", "operator", "*", "(", "\"leave\"", "\";\"", ")", "?", "\"}\""]}, {"lPart": "case", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "constAll", "\"then\"", "\"{\"", "operator", "*", "\"}\"", ")", "*", "\"otherwise\"", "\"{\"", "operator", "*", "\"}\"", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"void\""]}, {"lPart": "func", "rPart": ["type", "id", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "operator", "*", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a1be78558742cb433946c"}, "rules": "LAB4test", "data": {"rList": [{"lPart": "id", "rPart": ["[A-Za-z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[\"ntr]", ")", "[']"]}, {"lPart": "bracket", "rPart": ["[{}()]"]}, {"lPart": "signOfOperation", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[-+*/]", ")"]}, {"lPart": "delimiter", "rPart": ["[,:;]"]}, {"lPart": "exponenta", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "[e]", "[^]", "[0-9]", "+"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "(", "[]", "*", "(", "[\\\\]", "[\"ntr]", ")", "?", ")", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "prog", "rPart": ["(", "func", "|", "operator", ")", "+"]}, {"lPart": "operator", "rPart": ["assign", "|", "condition", "|", "cycle", "|", "case"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "blockCycle", "rPart": ["\"{\"", "operator", "*", "(", "\"leave\"", "\";\"", ")", "?", "\"}\""]}, {"lPart": "blockCase", "rPart": ["\"{\"", "operator", "*", "(", "\"exit\"", "\";\"", ")", "?", "\"}\""]}, {"lPart": "assign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "condition", "rPart": ["\"at\"", "Expr", "\"do\"", "(", "operator", "|", "block", ")", "(", "\"or do\"", "(", "operator", "|", "block", ")", ")", "?"]}, {"lPart": "constAll", "rPart": ["const10", "|", "exponenta"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "constAll", ")", "(", "signOfOperation", "Expr", ")", "?"]}, {"lPart": "cycle", "rPart": ["\"while\"", "Expr", "\"do\"", "(", "operator", "|", "blockCycle", ")"]}, {"lPart": "case", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "constAll", "\"then\"", "(", "operator", "|", "blockCase", ")", ")", "*", "\"otherwise\"", "(", "operator", "|", "blockCase", ")", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"void\""]}, {"lPart": "func", "rPart": ["type", "id", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "(", "operator", "|", "block", ")"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Штатных Т.Ю.","Collection":"424244144",{"_id": {"$oid": "67ac9254ce6dd03692d0787d"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "+4", "deltat": 0, "assist": 0}}{"_id": {"$oid": "67b88c0ace6dd03692d08da3"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67b88da9ce6dd03692d08db1"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "str", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cd4c73af563521c9d5cb23"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "str", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2bf6a4635a960233ada22"}, "rules": "Лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "str", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "delimetr", "rPart": ["[;,:]"]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "const10", "|", "str", "|", "char", "|", "constReal"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"long\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Expr", "rPart": ["unary", "*", "BExpr", "EExpr", "?"]}, {"lPart": "BExpr", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "operation", "Expr", ")", "|", "(", "logic", "Expr", ")", "|", "(", "compare", "Expr", ")"]}, {"lPart": "Prog", "rPart": ["(", "CompareOperation", "|", "AssignOperation", "|", "CycleOperation", ")", "+"]}, {"lPart": "CompareOperation", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "\"{\"", "Prog", "\"}\"", "(", "\"not\"", "\"{\"", "Prog", "\"}\"", ")", "?"]}, {"lPart": "AssignOperation", "rPart": ["T", "?", "id", "\":=\"", "Expr", "\";\""]}, {"lPart": "CycleOperation", "rPart": ["\"exec\"", "\"{\"", "Prog", "\"}\"", "\"with\"", "\"(\"", "T", "?", "id", "\"from\"", "Const", "\"to\"", "Const", "\")\"", "(", "\"step\"", "|", "\"exit\"", "\";\"", ")", "?"]}, {"lPart": "switchOperator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "AssignOperation", "(", "\"quit\"", "\";\"", ")", "?", "(", "\"?=\"", "Prog", "+", ")", "?", "(", "\"?~\"", "\":\"", "Prog", "+", ")", "?", ")", "+", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2ff3f4635a960233adcbb"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "*"]}, {"lPart": "const4", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")"]}, {"lPart": "const8", "rPart": ["(", "[0]", "[o]", "[0-7]", "+", ")"]}, {"lPart": "const10", "rPart": ["(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "str", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "const10", "|", "str", "|", "char", "|", "constReal"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"long\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Expr", "rPart": ["unary", "*", "BExpr", "EExpr", "?"]}, {"lPart": "BExpr", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EExpr", "rPart": ["(", "operation", "Expr", ")", "|", "(", "logic", "Expr", ")", "|", "(", "compare", "Expr", ")"]}, {"lPart": "delimetr", "rPart": ["[;,:]"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "AssignOperation", "rPart": ["T", "?", "id", "\":=\"", "Expr", "\";\""]}, {"lPart": "Prog", "rPart": ["(", "CompareOperation", "|", "AssignOperation", "|", "CycleOperation", "|", "switchOperator", ")", "+"]}, {"lPart": "CompareOperation", "rPart": ["\"when\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"other\"", "\"{\"", "Prog", "\"}\"", ")", "?"]}, {"lPart": "CycleOperation", "rPart": ["\"foreach\"", "\"(\"", "T", "?", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"stop\"", "\";\"", ")", "?"]}, {"lPart": "switchOperator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "Const", "\":\"", "Prog", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "Prog", ")", "?", "\"}\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f516008558742cb43338f8"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "*"]}, {"lPart": "int4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "Real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "Constant", "rPart": ["int4", "|", "int8", "|", "int10", "|", "Real", "|", "string", "|", "char"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Assignment", "rPart": ["id", "\":=\"", "Expression", "\";\""]}, {"lPart": "Conditional", "rPart": ["\"when\"", "Expression", "Operator", "ConditionalElse"]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "ConditionalElse", "rPart": ["\"other\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"other\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "(", "id", "\"in\"", "Constant", "\":\"", "Constant", ")", "\")\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Operator"]}, {"lPart": "Type", "rPart": ["\"int4\"", "|", "\"int8\"", "|", "\"int10\"", "|", "\"Real\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "Operator"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Break", ")", "\";\""]}, {"lPart": "CycleBreak", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Cycle", "|", "CycleBreak", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68077f068558742cb433826f"}, "rules": "Лаб5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "\"{\"", "Operators", "\"return\"", "(", "Id", "|", "Const", ")", "\";\"", "\"}\""]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Arguments", "rPart": ["Type", "Expression", "(", "\",\"", "Type", "Expression", ")", "*"]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const8", "|", "Const10", "|", "String", "|", "Char", ")"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "Operator", "rPart": ["Id", "\":=\"", "Expression", "\";\""]}, {"lPart": "Operator", "rPart": ["ConditionalStart", "ConditionalElsePart1"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "(", "Id", "\"in\"", "Const", "\":\"", "Const", ")", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Type", "Id", "\":=\"", "(", "Id", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "\")\"", ")", "\";\""]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "Id", "|", "Const", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "ExpressionEnd", "rPart": ["(", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", ")", "?"]}, {"lPart": "ConditionalStart", "rPart": ["\"when\"", "Expression", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["\"other\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["~", "\"other\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "\"{\"", "Operators", "\"}\""]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "*"]}, {"lPart": "Const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "Const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681a4f8e8558742cb433c66f"}, "rules": "Лаб61", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "Id", "\"(\"", "(", "Arguments", ")", "?", "\")\"", "\"{\"", "Operators", "\"}\""]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"string\"", "|", "\"char\"", "|", "\"long\"", ")"]}, {"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Arguments", "rPart": ["Type", "Expression", "(", "\",\"", "Type", "Expression", ")", "*"]}, {"lPart": "Const", "rPart": ["(", "Const4", "|", "Const8", "|", "Const10", "|", "String", "|", "Char", ")"]}, {"lPart": "Expression", "rPart": ["ExpressionStart", "ExpressionEnd"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "Id", "\":=\"", "Expression", "{while(opStk.length>0) if(peek(opStk)==\"(\") opsStk.pop();else toPFR(opStk.pop());toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["ConditionalStart", "ConditionalElsePart1"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "{ cycleStack.push(++CycleCount); toPFR(\"CycleBegin\" + peek(cycleStack) + \":\"); }", "\"(\"", "Id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "{ toPFR(\"CycleEnd\" + peek(cycleStack)); toPFR(\"JmpF\"); }", "BlockOperator", "{ toPFR(\"CycleBegin\" + peek(cycleStack)); toPFR(\"Jmp\"); toPFR(\"CycleEnd\" + cycleStack.pop() + \":\"); }"]}, {"lPart": "Operator", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Operator", "rPart": ["\"??\"", "Expression", "\"{\"", "BodySwitch", "+", "DefaultSwitch", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Operator", "rPart": ["Type", "{toPFR(this.currentLexem[1]);}", "Id", "\":=\"", "Id", "(", "Expression", "{while(opStk.length>0)if(peek(opStk)==\"(\")opStk.pop();else toPFR(opStk.pop()); toPFR(\"=\");}", ")", "?", "\";\""]}, {"lPart": "ExpressionStart", "rPart": ["(", "UnaryLogic", "|", "UnaryMinus", ")", "?", "(", "{toPFR(this.currentLexem[1]);}", "Id", "(", "\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\"", ")", "?", "|", "(", "{toPFR(this.currentLexem[1]);}", "Const", ")", "|", "(", "{opStk.push(\"(\");}", "\"(\"", "Expression", "{if((opStk.length >0) && (peek(opStk)==\"(\")) opStk.pop();}", "\")\"", ")", ")"]}, {"lPart": "ExpressionEnd", "rPart": ["(", "{if((opStk.length >0)&&(getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "(", "Math", "|", "Logic", "|", "Comparison", "|", "UnaryMinus", ")", "Expression", "{if(opStk.length>0)if(peek(opStk)==\"(\")opStk.pop();else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "ConditionalStart", "rPart": ["\"when\"", "Expression", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["\"other\"", "BlockOperator"]}, {"lPart": "ConditionalElsePart1", "rPart": ["~", "\"other\""]}, {"lPart": "BlockOperator", "rPart": ["Operator", "|", "\"{\"", "Operators", "\"}\""]}, {"lPart": "BodySwitch", "rPart": ["\"?=\"", "Const", "\":\"", "BlockOperator"]}, {"lPart": "DefaultSwitch", "rPart": ["\"?~\"", "\":\"", "BlockOperator"]}, {"lPart": "Id", "rPart": ["[a-zA-Z]", "+", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "*"]}, {"lPart": "Const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "Const8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "Const10", "rPart": ["[0-9]", "+"]}, {"lPart": "String", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "Char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "UnaryLogic", "rPart": ["[!]"]}, {"lPart": "UnaryMinus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[+/*]"]}, {"lPart": "Logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comparison", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Comments", "rPart": ["[-]", "[-]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expression", "\";\""]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar cycleStack = [];\nvar CycleCount = 0;\nfunction reboot() {\n opStk = [];\n cycleStack = [];\n CycleCount = 0;\n}\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}{"_id": {"$oid": "681af66c8558742cb433c994"}, "rules": "lab6z", "data": {"rList": [{"lPart": "Program", "rPart": ["{reboot();}", "Function", "+"]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "(", "\"ret\"", "Type", ")", "?", "(", "\"{\"", "Operator", "*", "returnOperator", "\"}\"", ")"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"double\"", "|", "\"long\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "returnOperator", "rPart": ["\"return\"", "Expression", "?", "\";\""]}, {"lPart": "Operator", "rPart": ["(", "Assignment", "|", "Conditional", "|", "ParamList", "|", "Switch", "|", "Cycle", "|", "Reassignment", ")", "\";\""]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "Expression", "rPart": ["{ctlStk.push(this.currentLexem[1]);}", "Unary", "BeginExpression", "{toPFR(\"Unary\"+ctlStk.pop());}", "EndExpression"]}, {"lPart": "Assignment", "rPart": ["{toPFR(this.currentLexem[1]);}", "Type", "{toPFR(this.currentLexem[1]);}", "id", "{toPFR(\"<-\");}", "\"<-\"", "Expression"]}, {"lPart": "Conditional", "rPart": ["\"in\"", "\"(\"", "Expression", "\")\"", "\"then\"", "\"{\"", "Operator", "+", "\"}\"", "ConditionalElse"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}, {"lPart": "Switch", "rPart": ["\"choice\"", "Expression", "SwitchCase", "+", "SwitchDefault", "?", "\"end\""]}, {"lPart": "Cycle", "rPart": ["{ctlStk.push(++Count);toPFR(\"Label \"+peek(ctlStk)+\":\");}", "\"exec\"", "(", "(", "\"{\"", "Operator", "+", "\"}\"", ")", "|", "Operator", ")", "{toPFR(\"Label0 \"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1 \"+ctlStk.pop()+\":\");}", "\"with\"", "id", "\"from\"", "ConstantNumber", "\"to\"", "{toPFR(\"from \"+this.currentLexem[1]); toPFR(\"to \" + this.currentLexem[1]);}", "ConstantNumber", "(", "\"step\"", "{ toPFR( \"step\"+ this.currentLexem[1]);}", "ConstantNumber", ")", "?", "CycleBreak", "?"]}, {"lPart": "Reassignment", "rPart": ["id", "\"<-\"", "Expression"]}, {"lPart": "BeginExpression", "rPart": ["{opStack.push(\"(\");}", "\"(\"", "Expression", "\")\"", "{opStack.pop();}"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "FullConst"]}, {"lPart": "BeginExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "ParamList", "?"]}, {"lPart": "EndExpression", "rPart": ["{if((opStack.length > 0) && (getPriority(peek(opStack)) >= getPriority(this.currentLexem[1]))) toPFR(opStack.pop());opStack.push(this.currentLexem[1]);}", "(", "Binary", "|", "unaryMath", ")", "Expression", "{if (opStack.length > 0) toPFR(opStack.pop());}"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "ConditionalElse", "rPart": ["\"not\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"not\""]}, {"lPart": "ConstantNumber", "rPart": ["int4", "|", "int8", "|", "int10", "|", "Real"]}, {"lPart": "FullConst", "rPart": ["(", "Constant", "|", "ConstantNumber", ")"]}, {"lPart": "SwitchCase", "rPart": ["\"option\"", "FullConst", "\":\"", "Operator", "*", "Break", "?"]}, {"lPart": "SwitchDefault", "rPart": ["\"nooption\"", "\":\"", "Operator", "*"]}, {"lPart": "CycleBreak", "rPart": ["\"exit\""]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Constant", "rPart": ["string", "|", "char"]}, {"lPart": "Break", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "id", "rPart": ["(", "[a-zA-Z]", ")", "|", "(", "(", "[a-zA-Z]", "[0-9]", ")", "+", "[a-zA-Z]", "?", ")"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "int4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "Real", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "EndExpression", "rPart": []}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar ctlStk=[];\nvar whileCnt=0;\nvar cycleStack = [];\nvar CycleCount = 0;\nfunction reboot() {\n cycleStack = [];\n Count = 0;\n}\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}"}}},
{"FIO":"Шамилов М.Г.","Collection":"134543413",{"_id": {"$oid": "67c46383af563521c9d5b2f0"}, "rules": "lab1", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "SignOfAriphmeticOperation", "rPart": ["[-+*/]"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Const", "rPart": ["[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "Const", "rPart": ["(", "[']", "[ -&(-~]", "?", "[']", ")", "|", "(", "[\\\"]", "[ !#-~]", "*", "[\\\"]", ")"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-F]", "+", ")", "|", "(", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c463d3af563521c9d5b2fd"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c4681eaf563521c9d5b365"}, "rules": "noName", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "[a-zA-Z]", "+", "[0-9]", "{0,3}"]}], "extension": ""}}{"_id": {"$oid": "67d6ebc4e0b22203e7cc040e"}, "rules": "lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "ConstString", "rPart": ["(", "[\\\"]", "[]", "+", "[\\\"]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "SignOfAriphmeticOperation", "rPart": ["[-+*/<>]"]}, {"lPart": "Formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[:]", "[=]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "FunctionWord", "rPart": ["[a-z?]", "+"]}, {"lPart": "Bracket", "rPart": ["[(){}]"]}, {"lPart": "Splitter", "rPart": ["[,:]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "Func", "rPart": ["(", "[=]", "[>]", ")"]}], "extension": ""}}{"_id": {"$oid": "67fbc0688558742cb433624f"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constStr", "rPart": ["(", "[\\\"]", "[]", "+", "[\\\"]", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Program", "rPart": ["(", "Operator", "|", "Expr", ")", "+"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"$\"", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"leave\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"switch\"", "id", "\"{\"", "(", "\"by\"", "\"(\"", "Const", "\")\"", "\"do\"", "Operator", "+", ")", "+", "(", "\"any do\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "ElseIf", "?"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "Term", "\"{\"", "Operator", "+", "\"}\"", "Else", "?"]}, {"lPart": "Else", "rPart": ["\":\"", "\"{\"", "Operator", "+", "\"}\""]}], "extension": "var ignoreLastWord=true;"}}{"_id": {"$oid": "680a55328558742cb43395ef"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constStr", "rPart": ["(", "[\\\"]", "[]", "+", "[\\\"]", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Sign", "rPart": ["(", "[+-*/<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"$\"", "type", "?", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"leave\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"switch\"", "id", "\"{\"", "(", "\"by\"", "\"(\"", "Const", "\")\"", "\"do\"", "Operator", "+", ")", "+", "(", "\"any do\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "ElseIf", "?"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "BegExpr", "\"{\"", "Operator", "+", "\"}\"", "Else", "?"]}, {"lPart": "Else", "rPart": ["\":\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"as\"", "type", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "delimiter"]}, {"lPart": "BegExpr", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "EndExpr", "rPart": ["Sign", "Expr"]}], "extension": "var ignoreLastWord=true;"}}{"_id": {"$oid": "680c64e78558742cb43398c6"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constStr", "rPart": ["(", "[\\\"]", "[]", "+", "[\\\"]", ")"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[x]", "[0-9A-Fa-f]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["(", "[']", "[]", "[']", ")"]}, {"lPart": "formatting", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Expr", "rPart": ["(", "\"-\"", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "Sign", "rPart": ["(", "[+-*/<>]", ")", "|", "(", "[<>!=]", "[=]", ")"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "Operator", "rPart": ["\"$\"", "type", "?", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Const", "\":\"", "Const", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["(", "\"stop\"", "|", "\"leave\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"switch\"", "id", "\"{\"", "(", "\"by\"", "\"(\"", "Const", "\")\"", "\"do\"", "Operator", "+", ")", "+", "(", "\"any do\"", "Operator", "+", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "ElseIf", "?"]}, {"lPart": "ElseIf", "rPart": ["\"?:\"", "BegExpr", "\"{\"", "Operator", "+", "\"}\"", "Else", "?"]}, {"lPart": "Else", "rPart": ["\":\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"as\"", "type", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "(", "Operator", "|", "Expr", ")", "+", "\"}\"", "delimiter"]}, {"lPart": "BegExpr", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}, {"lPart": "EndExpr", "rPart": ["Sign", "Expr"]}], "extension": "var ignoreLastWord=true;"}}},
{"FIO":"Димаков А.В.","Collection":"122251553",{"_id": {"$oid": "67b2b420ce6dd03692d07f9e"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-3", "deltat": 1000, "assist": 1}}{"_id": {"$oid": "67bf5a7daf563521c9d59f27"}, "rules": "Лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[o]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[u]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[!]", "|", "[#-~]", "|", "[\\\\]", "[\"\\\\ntr]", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c16ee7af563521c9d5a70b"}, "rules": "Лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[o]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[u]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[]", "*", "|", "[\\\\]", "[\"\\\\ntr]", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signsBi", "rPart": ["(", "[+*/]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "signsUn", "rPart": ["[!]"]}, {"lPart": "signsUnBi", "rPart": ["[-]"]}, {"lPart": "keywords", "rPart": ["[a-z]", "[a-z]", "*"]}, {"lPart": "symbol", "rPart": ["[(]", "|", "[)]", "|", "[{]", "|", "[}]", "|", "[,]", "|", "[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d226d7e0b22203e7cbf06c"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[o]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[u]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"\\\\ntr]", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["id", "assign1", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "Const", "|", "(", "\"{\"", "Expr", "\"}\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "signsBi", "|", "signsUn", "|", "signsUnBi", ")", "Expr"]}, {"lPart": "signsBi", "rPart": ["(", "[+*/]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "signsUn", "rPart": ["[!]"]}, {"lPart": "signsUnBi", "rPart": ["[-]"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "(", "\"retire\"", "\";\"", ")", "|", "Function"]}, {"lPart": "If", "rPart": ["\"when\"", "Expr", "OperatorBlock", "Other", "?"]}, {"lPart": "OperatorBlock", "rPart": ["(", "\"{\"", "Operator", "{2,}", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Other", "rPart": ["\"other\"", "OperatorBlock"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "OperatorBlock", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "Const", "\")\"", "OperatorBlock", "*", "(", "\"break\"", "\";\"", ")", "?", ")", "+", "(", "FalseSwitch", ")", "?", "\"end\""]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "constChar", "|", "constString", "|", "const"]}, {"lPart": "Function", "rPart": ["\"function \"", "\"(\"", "id", "(", "\",\"", "id", ")", "*", "\")\"", "OperatorBlock", "assign2", "id"]}, {"lPart": "Program", "rPart": ["OperatorBlock", "+"]}, {"lPart": "FalseSwitch", "rPart": ["\"case\"", "\"(\"", "\"false\"", "\")\"", "OperatorBlock", "*"]}, {"lPart": "assign1", "rPart": ["[<]", "[-]"]}, {"lPart": "assign2", "rPart": ["[-]", "[>]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e52e8e4635a960233aec65"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function \"", "\"(\"", "id", "(", "\",\"", "id", ")", "*", "\")\"", "OperatorBlock", "assign2", "id"]}, {"lPart": "OperatorBlock", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "(", "\"retire\"", "\";\"", ")"]}, {"lPart": "Assign", "rPart": ["id", "assign1", "Expr", "\";\""]}, {"lPart": "If", "rPart": ["\"when\"", "Expr", "OperatorBlock", "Other"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "OperatorBlock", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "(", "Case", "(", "SwitchBody", "+", "|", "FalseSwitch", "?", ")", ")", "+", "EndSwitch"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr", "?"]}, {"lPart": "Other", "rPart": ["\"other\"", "OperatorBlock"]}, {"lPart": "Other", "rPart": ["~", "\"other\""]}, {"lPart": "FalseSwitch", "rPart": ["\"false\"", "\")\"", "OperatorBlock", "*"]}, {"lPart": "BegExpr", "rPart": ["(", "signsUn", "|", "signsUnBi", ")", "?", "(", "id", "|", "Const", "|", "(", "\"{\"", "Expr", "\"}\"", ")", ")"]}, {"lPart": "SwitchBody", "rPart": ["Const", "\")\"", "OperatorBlock", "*", "(", "\"break\"", "\";\"", ")", "?"]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "constChar", "|", "constString", "|", "const"]}, {"lPart": "EndExpr", "rPart": ["(", "signsBi", "|", "signsUn", "|", "signsUnBi", ")", "Expr"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "assign2", "rPart": ["[-]", "[>]"]}, {"lPart": "assign1", "rPart": ["[<]", "[-]"]}, {"lPart": "const4", "rPart": ["[0]", "[o]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "[0-7]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[u]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"\\\\ntr]", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "signsBi", "rPart": ["(", "[+*/]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "signsUn", "rPart": ["[!]"]}, {"lPart": "signsUnBi", "rPart": ["[-]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\""]}, {"lPart": "EndSwitch", "rPart": ["\"end\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808ab4b8558742cb43387df"}, "rules": "Лаб5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function \"", "\"(\"", "id", "(", "\",\"", "id", ")", "*", "\")\"", "\"{\"", "OperatorBlock", "*", "\"}\"", "assign2", "id"]}, {"lPart": "OperatorBlock", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "(", "\"retire\"", "\";\"", ")"]}, {"lPart": "Assign", "rPart": ["id", "assign1", "Expr", "\";\""]}, {"lPart": "If", "rPart": ["\"when\"", "Expr", "OperatorBlock", "Other"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "OperatorBlock", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "(", "Case", "(", "SwitchBody", "+", "|", "FalseSwitch", "?", ")", ")", "+", "EndSwitch"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr", "?"]}, {"lPart": "Other", "rPart": ["\"other\"", "OperatorBlock"]}, {"lPart": "Other", "rPart": ["~", "\"other\""]}, {"lPart": "EndSwitch", "rPart": ["\"end\""]}, {"lPart": "BegExpr", "rPart": ["(", "signsUn", "|", "signsUnBi", ")", "?", "(", "id", "|", "Const", "|", "(", "\"{\"", "Expr", "\"}\"", ")", ")"]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\""]}, {"lPart": "EndExpr", "rPart": ["(", "signsBi", "|", "signsUnBi", ")", "Expr"]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "constChar", "|", "constString", "|", "const"]}, {"lPart": "SwitchBody", "rPart": ["Const", "\")\"", "OperatorBlock", "*", "(", "\"break\"", "\";\"", ")", "?"]}, {"lPart": "FalseSwitch", "rPart": ["\"false\"", "\")\"", "OperatorBlock", "*"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "assign2", "rPart": ["[-]", "[>]"]}, {"lPart": "assign1", "rPart": ["[<]", "[-]"]}, {"lPart": "signsUn", "rPart": ["[!]"]}, {"lPart": "signsUnBi", "rPart": ["[-]"]}, {"lPart": "const4", "rPart": ["[0]", "[o]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "[0-7]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[u]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"\\\\ntr]", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "signsBi", "rPart": ["(", "[+*/]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "681651a48558742cb433aff8"}, "rules": "Лаб6", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function \"", "\"(\"", "(", "id", "(", "\",\"", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "OperatorBlock", "*", "\"}\"", "assign2", "id"]}, {"lPart": "OperatorBlock", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "(", "\"retire\"", "\";\"", ")"]}, {"lPart": "Assign", "rPart": ["id", "assign1", "Expr", "\";\""]}, {"lPart": "If", "rPart": ["\"when\"", "Expr", "OperatorBlock", "Other"]}, {"lPart": "Cycle", "rPart": ["\"loop\"", "OperatorBlock", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "(", "Case", "(", "SwitchBody", "+", "|", "FalseSwitch", "?", ")", ")", "+", "EndSwitch"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr", "?"]}, {"lPart": "Other", "rPart": ["\"other\"", "OperatorBlock"]}, {"lPart": "Other", "rPart": ["~", "\"other\""]}, {"lPart": "EndSwitch", "rPart": ["\"end\""]}, {"lPart": "BegExpr", "rPart": ["(", "signsUn", "|", "signsUnBi", ")", "?", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", "|", "Const", "|", "(", "\"{\"", "Expr", "\"}\"", ")"]}, {"lPart": "Case", "rPart": ["\"case\"", "\"(\""]}, {"lPart": "EndExpr", "rPart": ["(", "signsBi", "|", "signsUnBi", ")", "Expr"]}, {"lPart": "Const", "rPart": ["const4", "|", "const8", "|", "constChar", "|", "constString", "|", "const"]}, {"lPart": "SwitchBody", "rPart": ["Const", "\")\"", "OperatorBlock", "*", "(", "\"break\"", "\";\"", ")", "?"]}, {"lPart": "FalseSwitch", "rPart": ["\"false\"", "\")\"", "OperatorBlock", "*"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "assign2", "rPart": ["[-]", "[>]"]}, {"lPart": "assign1", "rPart": ["[<]", "[-]"]}, {"lPart": "signsUn", "rPart": ["[!]"]}, {"lPart": "signsUnBi", "rPart": ["[-]"]}, {"lPart": "const4", "rPart": ["[0]", "[o]", "[0-3]", "+"]}, {"lPart": "const8", "rPart": ["[0]", "[c]", "[0-7]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[u]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", "[a-zA-Z0-9]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"\\\\ntr]", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "signsBi", "rPart": ["(", "[+*/]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Семёнов С.А.","Collection":"355522134",{"_id": {"$oid": "67b4a3b0ce6dd03692d082b0"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b6c0dcce6dd03692d08737"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 500, "assist": 1}}{"_id": {"$oid": "67b6c655ce6dd03692d08746"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[-+/*]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c02607af563521c9d5a154"}, "rules": "Lab2dot1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><=]"]}, {"lPart": "сomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "operator", "rPart": ["[?]", "|", "[?]", "[:]", "|", "[:]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}, {"lPart": "assign", "rPart": ["[p]", "[u]", "[t]", "[ ]", "|", "[t]", "[o]", "[ ]"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67f244eca600182c7517b952"}, "rules": "lab3search", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "сomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "operator", "rPart": ["[?]", "|", "[?]", "[:]", "|", "[:]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "addPart"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "addPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operators", "rPart": ["(", "expr", "|", "(", "assign", "end", "?", ")", "|", "conditional", "|", "quit", "|", "exit", "|", "cycle", "|", "switch", ")", "+"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "term"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "assign", "?", "end", "expr", "?", "end", "operators", "?", "\")\"", "block"]}, {"lPart": "conditional", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "block", "(", "\"?:\"", "\"(\"", "expr", "\")\"", "block", ")", "*", "(", "\":\"", "block", ")", "?"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "?", "\"}\""]}, {"lPart": "quit", "rPart": ["\"quit\""]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchCase", "+", "switchDefault", "?", "\"}\""]}, {"lPart": "switchCase", "rPart": ["\"when\"", "term", "\"then\"", "block", "exit", "?"]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "switchDefault", "rPart": ["\"otherwise\"", "block", "exit", "?"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67fa328b8558742cb4335761"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "сomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "operator", "rPart": ["[?]", "|", "[?]", "[:]", "|", "[:]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "addPart"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "addPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operators", "rPart": ["(", "expr", "|", "(", "assign", "end", "?", ")", "|", "conditional", "|", "quit", "|", "exit", "|", "return", "|", "cycle", "|", "switch", ")", "+"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "type", "?", "term"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "assign", "?", "end", "expr", "?", "end", "operators", "?", "\")\"", "block"]}, {"lPart": "conditional", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "block", "(", "\"?:\"", "\"(\"", "expr", "\")\"", "block", ")", "*", "(", "\":\"", "block", ")", "?"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "?", "\"}\""]}, {"lPart": "quit", "rPart": ["\"quit\""]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchCase", "+", "switchDefault", "?", "\"}\""]}, {"lPart": "switchCase", "rPart": ["\"when\"", "term", "\"then\"", "block", "exit", "?"]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "switchDefault", "rPart": ["\"otherwise\"", "block", "exit", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "(", "type", "?", "id", "\",\"", "?", ")", "*", "\")\"", "block"]}, {"lPart": "program", "rPart": ["func", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "expr"]}, {"lPart": "term", "rPart": ["\"$\"", "id", "\"(\"", "(", "term", "\",\"", "?", ")", "*", "\")\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "680cad8c8558742cb4339982"}, "rules": "lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "сomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "operator", "rPart": ["[?]", "|", "[?]", "[:]", "|", "[:]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "addPart"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "addPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operators", "rPart": ["(", "expr", "|", "(", "assign", "end", "?", ")", "|", "conditional", "|", "quit", "|", "exit", "|", "return", "|", "cycle", "|", "switch", ")", "+"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "type", "?", "term"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "assign", "?", "end", "expr", "?", "end", "operators", "?", "\")\"", "block"]}, {"lPart": "conditional", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "block", "(", "\"?:\"", "\"(\"", "expr", "\")\"", "block", ")", "*", "(", "\":\"", "block", ")", "?"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "?", "\"}\""]}, {"lPart": "quit", "rPart": ["\"quit\""]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchCase", "+", "switchDefault", "?", "\"}\""]}, {"lPart": "switchCase", "rPart": ["\"when\"", "term", "\"then\"", "block", "exit", "?"]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "switchDefault", "rPart": ["\"otherwise\"", "block", "exit", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "(", "type", "?", "id", "\",\"", "?", ")", "*", "\")\"", "block"]}, {"lPart": "program", "rPart": ["func", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "expr"]}, {"lPart": "term", "rPart": ["\"$\"", "id", "\"(\"", "(", "term", "\",\"", "?", ")", "*", "\")\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "680cc0fd8558742cb4339a6d"}, "rules": "lab6", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*", "[0-9]", "+"]}, {"lPart": "constInt", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[d]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "[<>=!]", "[=]"]}, {"lPart": "сomment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "operator", "rPart": ["[?]", "|", "[?]", "[:]", "|", "[:]"]}, {"lPart": "end", "rPart": ["[;]"]}, {"lPart": "word", "rPart": ["[a-z]", "+"]}, {"lPart": "expr", "rPart": ["begExpr", "addPart"]}, {"lPart": "begExpr", "rPart": ["term", "multPart"]}, {"lPart": "addPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "expr", ")", "?"]}, {"lPart": "term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constStr", "|", "constChar"]}, {"lPart": "multPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "begExpr", ")", "?"]}, {"lPart": "operators", "rPart": ["(", "expr", "|", "(", "assign", "end", "?", ")", "|", "conditional", "|", "quit", "|", "exit", "|", "return", "|", "cycle", "|", "switch", ")", "+"]}, {"lPart": "assign", "rPart": ["\"put\"", "expr", "\"to\"", "type", "?", "term"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "assign", "?", "end", "expr", "?", "end", "operators", "?", "\")\"", "block"]}, {"lPart": "conditional", "rPart": ["\"?\"", "\"(\"", "expr", "\")\"", "block", "(", "\"?:\"", "\"(\"", "expr", "\")\"", "block", ")", "*", "(", "\":\"", "block", ")", "?"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "?", "\"}\""]}, {"lPart": "quit", "rPart": ["\"quit\""]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "switchCase", "+", "switchDefault", "?", "\"}\""]}, {"lPart": "switchCase", "rPart": ["\"when\"", "term", "\"then\"", "block", "exit", "?"]}, {"lPart": "exit", "rPart": ["\"exit\""]}, {"lPart": "switchDefault", "rPart": ["\"otherwise\"", "block", "exit", "?"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"void\""]}, {"lPart": "func", "rPart": ["type", "?", "id", "\"(\"", "(", "type", "?", "id", "\",\"", "?", ")", "*", "\")\"", "block"]}, {"lPart": "program", "rPart": ["func", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "expr"]}, {"lPart": "term", "rPart": ["\"$\"", "id", "\"(\"", "(", "term", "\",\"", "?", ")", "*", "\")\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Никончук М.А.","Collection":"312112453",{"_id": {"$oid": "6807673c8558742cb43381df"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[A-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[E]", "[+-]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808b91e8558742cb433886d"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[A-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[E]", "[+-]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "assign", "rPart": ["[-]", "[<]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808e6a18558742cb4338a9b"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[A-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[E]", "[+-]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "assign", "rPart": ["[-]", "[<]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "\"|\"", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Program", "rPart": ["(", "Operator", "|", "Expr", ")", "+"]}, {"lPart": "Operator", "rPart": ["(", "\"exit\"", "|", "\"break\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"@\"", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "Else", "?"]}, {"lPart": "Else", "rPart": ["\"else\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "Const", "\"to\"", "Const", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "Operator", "+", ")", "+", "(", "\"otherwise\"", "\"false\"", "Operator", "+", ")", "?", "\"}\"", "delimiter"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808e9e78558742cb4338ac4"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "680e19cb8558742cb4339e1d"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[A-Z0-9]", "*"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[-]", "?", "[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constExp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[E]", "[+-]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "assign", "rPart": ["[-]", "[<]"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\"<\"", "|", "\">\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "\"|\"", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["(", "\"exit\"", "|", "\"break\"", ")", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"@\"", "type", "?", "id", "assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "Else", "?"]}, {"lPart": "Else", "rPart": ["\"else\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"exec\"", "\"{\"", "Operator", "+", "\"}\"", "\"with\"", "id", "\"from\"", "(", "Const", "|", "id", ")", "\"to\"", "(", "Const", "|", "id", ")", "(", "\"step\"", "Const", ")", "?", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"when\"", "Const", "\"then\"", "Operator", "+", ")", "+", "(", "\"otherwise\"", "\"false\"", "Operator", "+", ")", "?", "\"}\"", "delimiter"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constFloat", "|", "constExp", "|", "constChar"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"exp\"", "|", "\"char\""]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"as\"", "type", "\"(\"", "(", "type", "id", "(", "\",\"", "type", "id", ")", "*", ")", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\"", "delimiter"]}, {"lPart": "BegExpr", "rPart": ["\"~\"", "id", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Лярский Р.А.","Collection":"252214321",{"_id": {"$oid": "67ae0a5fce6dd03692d07b15"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bca997af563521c9d590a5"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "[]", "?", "[']", "|", "[']", "[\\!\\@\\#\\$\\%\\^\\&\\*()\\<\\>']", "[']"]}, {"lPart": "compare", "rPart": ["[<>]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[\\!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "sign", "rPart": ["[/]", "|", "[*]", "{1,2}"]}, {"lPart": "logic", "rPart": ["[&|]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "quad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d20480e0b22203e7cbf013"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "compare", "rPart": ["[<>]", "|", "(", "[<>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["[&|]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "quad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "keywords", "rPart": ["(", "[w]", "[h]", "[e]", "[n]", ")", "|", "(", "[o]", "[t]", "[h]", "[e]", "[r]", ")", "|", "(", "[e]", "[x]", "[e]", "[c]", ")", "|", "(", "[w]", "[i]", "[t]", "[h]", ")", "|", "(", "[f]", "[r]", "[o]", "[m]", ")", "|", "(", "[t]", "[o]", ")", "|", "(", "[s]", "[t]", "[e]", "[p]", ")", "|", "(", "[e]", "[x]", "[i]", "[t]", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[q]", "[u]", "[i]", "[t]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[p]", "[r]", "[i]", "[n]", "[t]", ")"]}, {"lPart": "keyops", "rPart": ["[.;:]", "|", "(", "[<]", "[-]", ")"]}, {"lPart": "types", "rPart": ["(", "[i]", "[n]", "[t]", ")", "|", "(", "[b]", "[i]", "[n]", ")", "|", "(", "[q]", "[u]", "[a]", "[d]", ")", "|", "(", "[c]", "[h]", "[a]", "[r]", ")", "|", "(", "[s]", "[t]", "[r]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\t]", "{ignoreLastWord=true;}"]}, {"lPart": "unsign", "rPart": ["[+]", "[+]", "|", "[-]", "[-]"]}, {"lPart": "bracketopen", "rPart": ["[({]"]}, {"lPart": "bracketclose", "rPart": ["[)}]"]}, {"lPart": "sign", "rPart": ["[+/]", "|", "[*]", "{1,2}", "|", "[-]"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67e3b6af4635a960233adf14"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "compare", "rPart": ["\"==\"", "|", "\"!=\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"<\"", "|", "\">\""]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "quad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"bin\"", "|", "\"quad\"", "|", "\"char\"", "|", "\"str\""]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\t]", "{ignoreLastWord=true;}"]}, {"lPart": "Program", "rPart": ["Stmt", "+"]}, {"lPart": "Assign", "rPart": ["id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["LogicalExpr"]}, {"lPart": "LogicalExpr", "rPart": ["CompareExpr", "(", "(", "\"&&\"", "|", "\"||\"", ")", "LogicalExpr", ")", "?"]}, {"lPart": "CompareExpr", "rPart": ["ArithmeticExpr", "(", "compare", "ArithmeticExpr", ")", "?"]}, {"lPart": "ArithmeticExpr", "rPart": ["Term", "(", "(", "\"+\"", "|", "\"-\"", ")", "ArithmeticExpr", ")", "?"]}, {"lPart": "Term", "rPart": ["Factor", "(", "(", "\"*\"", "|", "\"/\"", "|", "\"%\"", ")", "Term", ")", "?"]}, {"lPart": "Factor", "rPart": ["id", "FunctionCall", "?", "|", "const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "FunctionDecl", "rPart": ["Type", "?", "\"(\"", "ArgList", "?", "\")\"", "Block", "\";\""]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*", "\";\""]}, {"lPart": "Arg", "rPart": ["Type", "?", "id", "\";\""]}, {"lPart": "Block", "rPart": ["\"{\"", "Stmt", "*", "(", "\"exit.\"", ")", "?", "\"}\"", "\";\""]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "ExprList", "?", "\")\"", "\";\""]}, {"lPart": "ExprList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*", "\";\""]}, {"lPart": "WhenStmt", "rPart": ["\"when\"", "Expr", "Block", "(", "\"other\"", "Block", ")", "?", "\";\""]}, {"lPart": "LoopStmt", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\""]}, {"lPart": "MatchStmt", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "Case", ")", "+", "\"}\"", "\";\""]}, {"lPart": "Case", "rPart": ["\"?=\"", "const", "\":\"", "Block", "(", "\"quit\"", ")", "?", "|", "\"?^\"", "\":\"", "Block", "\";\""]}, {"lPart": "const", "rPart": ["decimal", "|", "char", "|", "string", "|", "binary", "|", "quad"]}, {"lPart": "Stmt", "rPart": ["WhenStmt", "|", "LoopStmt", "|", "MatchStmt", "|", "FunctionDecl", "|", "FunctionCall"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "680967278558742cb4338ffd"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "decimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "(", "[\\\\]", "[x]", "[0-9]", "+", ")", "|", "(", "[\\\\]", "?", "[]", ")", ")", "[']"]}, {"lPart": "compare", "rPart": ["\"==\"", "|", "\"!=\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"<\"", "|", "\">\""]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "quad", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"bin\"", "|", "\"quad\"", "|", "\"char\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\t]", "{ignoreLastWord=true;}"]}, {"lPart": "Program", "rPart": ["Stmt", "+"]}, {"lPart": "Assign", "rPart": ["id", "\"<-\"", "(", "FunctionDecl", "|", "Expr", ")", "\";\""]}, {"lPart": "Expr", "rPart": ["LogicalExpr"]}, {"lPart": "LogicalExpr", "rPart": ["CompareExpr", "(", "(", "\"&&\"", "|", "\"||\"", ")", "CompareExpr", ")", "*"]}, {"lPart": "CompareExpr", "rPart": ["ArithmeticExpr", "(", "compare", "ArithmeticExpr", ")", "*"]}, {"lPart": "ArithmeticExpr", "rPart": ["Term", "(", "(", "\"+\"", "|", "\"-\"", ")", "Term", ")", "*"]}, {"lPart": "Term", "rPart": ["Factor", "(", "(", "\"*\"", "|", "\"/\"", "|", "\"%\"", ")", "Factor", ")", "*"]}, {"lPart": "Factor", "rPart": ["id", "FunctionCall", "?", "|", "const"]}, {"lPart": "FunctionDecl", "rPart": ["Type", "?", "\"(\"", "ArgList", "?", "\")\"", "Block"]}, {"lPart": "ArgList", "rPart": ["Arg", "(", "\",\"", "Arg", ")", "*"]}, {"lPart": "Arg", "rPart": ["Type", "?", "id"]}, {"lPart": "Block", "rPart": ["\"{\"", "Stmt", "*", "(", "\"exit.\"", "|", "\"quit\"", ")", "?", "\"}\""]}, {"lPart": "FunctionCall", "rPart": ["\"(\"", "ExprList", "?", "\")\"", "\";\""]}, {"lPart": "ExprList", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "WhenStmt", "rPart": ["\"when\"", "Expr", "Block", "(", "\"other\"", "Block", ")", "?", "\";\""]}, {"lPart": "LoopStmt", "rPart": ["\"exec\"", "Block", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?", "\";\""]}, {"lPart": "MatchStmt", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "Case", ")", "+", "\"}\"", "\";\""]}, {"lPart": "Case", "rPart": ["\"?=\"", "const", "\":\"", "Block", "\";\"", "|", "\"?^\"", "\":\"", "Block", "\";\""]}, {"lPart": "const", "rPart": ["decimal", "|", "char", "|", "string", "|", "binary", "|", "quad"]}, {"lPart": "Stmt", "rPart": ["Assign", "|", "WhenStmt", "|", "LoopStmt", "|", "MatchStmt", "|", "FunctionCall", "|", "PrintFn"]}, {"lPart": "PrintFn", "rPart": ["\"print\"", "\"(\"", "Expr", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}},
{"FIO":"Новопашин К.И.","Collection":"343122221",{"_id": {"$oid": "67b6c2f1ce6dd03692d0873b"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67b6d25bce6dd03692d08775"}, "rules": "Lab1", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperations", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[!]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]"]}], "extension": ""}}{"_id": {"$oid": "67caa6ebaf563521c9d5c4a6"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperation", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["ConstBIN", "|", "ConstOCT", "|", "ConstDEC", "|", "ConstFloat", "|", "ConstStr", "|", "ConstSymb"]}, {"lPart": "operand", "rPart": ["const", "|", "Identificator"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "operation", "rPart": ["LogicOperation", "|", "ComparisonOperation", "|", "SignOfOperation"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "expr", "\",\"", "Identificator", "\")\""]}, {"lPart": "expr", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch"]}, {"lPart": "if", "rPart": ["\"by\"", "\"(\"", "expr", "\")\"", "block", "(", "\"else\"", "block", ")", "*"]}, {"lPart": "block", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "assign", "?", "Delimiter", "expr", "?", "Delimiter", "assign", "?", "\")\"", "block", "(", "\"quit;\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "\"{\"", "\"when\"", "const", "\"then\"", "block", "(", "\"exit;\"", ")", "?", "(", "\"when\"", "const", "\"then\"", "block", "(", "\"exit;\"", ")", "?", ")", "*", "(", "\"otherwise\"", "block", ")", "?", "\"}\""]}, {"lPart": "programm", "rPart": ["Identificator", "\"(\"", "(", "type", "?", "Identificator", ")", "*", "\")\"", "(", "\"ret\"", "type", ")", "?", "block"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "openFigBracket", "rPart": ["[{]"]}, {"lPart": "closeFigBracket", "rPart": ["[}]"]}, {"lPart": "open", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67df991c4635a960233ac712"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperation", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["ConstBIN", "|", "ConstOCT", "|", "ConstDEC", "|", "ConstFloat", "|", "ConstStr", "|", "ConstSymb"]}, {"lPart": "operand", "rPart": ["const", "|", "Identificator"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "operation", "rPart": ["LogicOperation", "|", "ComparisonOperation", "|", "SignOfOperation"]}, {"lPart": "assign", "rPart": ["\"set\"", "openBracket", "expr", "\",\"", "Identificator", "closeBracket"]}, {"lPart": "expr", "rPart": ["openBracket", "expr", "closeBracket"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch"]}, {"lPart": "if", "rPart": ["\"by\"", "openBracket", "expr", "closeBracket", "block", "(", "\"else\"", "block", ")", "*"]}, {"lPart": "block", "rPart": ["openFigBracket", "operator", "+", "closeFigBracket"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "openBracket", "assign", "?", "Delimiter", "expr", "?", "Delimiter", "assign", "?", "closeBracket", "block", "(", "\"quit\"", "Delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "openFigBracket", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", "(", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", ")", "*", "(", "\"otherwise\"", "block", ")", "?", "closeFigBracket"]}, {"lPart": "programm", "rPart": ["Identificator", "openBracket", "(", "type", "?", "Identificator", ")", "*", "closeBracket", "(", "\"ret\"", "type", ")", "?", "block"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "openFigBracket", "rPart": ["[{]"]}, {"lPart": "closeFigBracket", "rPart": ["[}]"]}, {"lPart": "openBracket", "rPart": ["[(]"]}, {"lPart": "closeBracket", "rPart": ["[)]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f24843a600182c7517b965"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperation", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["ConstBIN", "|", "ConstOCT", "|", "ConstDEC", "|", "ConstFloat", "|", "ConstStr", "|", "ConstSymb"]}, {"lPart": "operand", "rPart": ["const", "|", "Identificator"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "operation", "rPart": ["LogicOperation", "|", "ComparisonOperation", "|", "SignOfOperation"]}, {"lPart": "assign", "rPart": ["\"set\"", "openBracket", "expr", "\",\"", "Identificator", "closeBracket"]}, {"lPart": "expr", "rPart": ["openBracket", "expr", "closeBracket"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch"]}, {"lPart": "if", "rPart": ["\"by\"", "openBracket", "expr", "closeBracket", "block", "(", "\"else\"", "block", ")", "*"]}, {"lPart": "block", "rPart": ["openFigBracket", "operator", "+", "closeFigBracket"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "openBracket", "assign", "?", "Delimiter", "expr", "?", "Delimiter", "assign", "?", "closeBracket", "block", "(", "\"quit\"", "Delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "openFigBracket", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", "(", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", ")", "*", "(", "\"otherwise\"", "block", ")", "?", "closeFigBracket"]}, {"lPart": "programm", "rPart": ["Identificator", "openBracket", "(", "type", "?", "Identificator", ")", "*", "closeBracket", "(", "\"ret\"", "type", ")", "?", "block"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "openFigBracket", "rPart": ["[{]"]}, {"lPart": "closeFigBracket", "rPart": ["[}]"]}, {"lPart": "openBracket", "rPart": ["[(]"]}, {"lPart": "closeBracket", "rPart": ["[)]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6804916e8558742cb4337adb"}, "rules": "Lab5", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[–+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperation", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["ConstBIN", "|", "ConstOCT", "|", "ConstDEC", "|", "ConstFloat", "|", "ConstStr", "|", "ConstSymb"]}, {"lPart": "operand", "rPart": ["const", "|", "Identificator"]}, {"lPart": "expr", "rPart": ["operand", "(", "operation", "expr", ")", "?"]}, {"lPart": "operation", "rPart": ["LogicOperation", "|", "ComparisonOperation", "|", "SignOfOperation"]}, {"lPart": "assign", "rPart": ["\"set\"", "openBracket", "expr", "\",\"", "Identificator", "closeBracket"]}, {"lPart": "expr", "rPart": ["openBracket", "expr", "closeBracket"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch"]}, {"lPart": "if", "rPart": ["\"by\"", "openBracket", "expr", "closeBracket", "block", "(", "\"else\"", "block", ")", "*"]}, {"lPart": "block", "rPart": ["openFigBracket", "operator", "+", "closeFigBracket"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "openBracket", "assign", "?", "Delimiter", "expr", "?", "Delimiter", "assign", "?", "closeBracket", "block", "(", "\"quit\"", "Delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "openFigBracket", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", "(", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", ")", "*", "(", "\"otherwise\"", "block", ")", "?", "closeFigBracket"]}, {"lPart": "func", "rPart": ["Identificator", "openBracket", "(", "type", "?", "Identificator", ")", "*", "closeBracket", "(", "\"ret\"", "type", ")", "?", "block"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "openFigBracket", "rPart": ["[{]"]}, {"lPart": "closeFigBracket", "rPart": ["[}]"]}, {"lPart": "openBracket", "rPart": ["[(]"]}, {"lPart": "closeBracket", "rPart": ["[)]"]}, {"lPart": "global", "rPart": ["func", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "68176dbb8558742cb433b29c"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "681774648558742cb433b316"}, "rules": "Lab6", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperation", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["ConstBIN", "|", "ConstOCT", "|", "ConstDEC", "|", "ConstFloat", "|", "ConstStr", "|", "ConstSymb"]}, {"lPart": "operand", "rPart": ["(", "{toOutStr(this.currentLexem[1]);}", "const", "|", "Identificator", ")", "|", "(", "{opStk.push(\"(\");}", "openBracket", "expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "closeBracket", ")"]}, {"lPart": "expr", "rPart": ["operand", "(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toOutStr(opStk.pop());opStk.push(this.currentLexem[1]);}", "operation", "expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toOutStr(opStk.pop());}", ")", "?"]}, {"lPart": "operation", "rPart": ["LogicOperation", "|", "ComparisonOperation", "|", "SignOfOperation"]}, {"lPart": "assign", "rPart": ["\"set\"", "openBracket", "expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "Identificator", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toOutStr(opStk.pop()); toOutStr(\"=\");toPFR(outStr);outStr=\"\";}", "closeBracket"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch"]}, {"lPart": "if", "rPart": ["\"by\"", "openBracket", "expr", "closeBracket", "block", "(", "\"else\"", "block", ")", "*"]}, {"lPart": "block", "rPart": ["openFigBracket", "operator", "+", "closeFigBracket"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "openBracket", "assign", "?", "Delimiter", "expr", "?", "Delimiter", "assign", "?", "closeBracket", "block", "(", "\"quit\"", "Delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "openFigBracket", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", "(", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", ")", "*", "(", "\"otherwise\"", "block", ")", "?", "closeFigBracket"]}, {"lPart": "func", "rPart": ["Identificator", "openBracket", "(", "type", "?", "Identificator", ")", "*", "closeBracket", "(", "\"ret\"", "type", ")", "?", "block"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "openFigBracket", "rPart": ["[{]"]}, {"lPart": "closeFigBracket", "rPart": ["[}]"]}, {"lPart": "openBracket", "rPart": ["[(]"]}, {"lPart": "closeBracket", "rPart": ["[)]"]}, {"lPart": "global", "rPart": ["func", "+"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Identificator"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "operator", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\noutStr=\"\";\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar outStr=\"\";\n\nfunction toOutStr(x) {\n outStr+=\" \"+x;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}{"_id": {"$oid": "681875168558742cb433b866"}, "rules": "Lab6s", "data": {"rList": [{"lPart": "Identificator", "rPart": ["[a-z]", "[a-z0-9A-Z]", "*"]}, {"lPart": "ConstBIN", "rPart": ["[B]", "[I]", "[N]", "(", "[1]", "[01]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstOCT", "rPart": ["[O]", "[C]", "[T]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "ConstDEC", "rPart": ["(", "[D]", "[E]", "[C]", ")", "(", "(", "[1-9]", "[0-9]", "*", ")", "|", "[0]", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Spaces", "rPart": ["[ ]", "+", "{ignoreLastWord=true}"]}, {"lPart": "ConstStr", "rPart": ["[\\\"]", "[]", "+", "[\\\"]"]}, {"lPart": "ConstSymb", "rPart": ["[']", "[]", "[']"]}, {"lPart": "EndOfLine", "rPart": ["[\\n\\r]", "+", "{ignoreLastWord=true}"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "ComparisonOperation", "rPart": ["[<>]", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "LogicOperation", "rPart": ["[|&]"]}, {"lPart": "Comments", "rPart": ["(", "[!]", "[!]", ")", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "const", "rPart": ["ConstBIN", "|", "ConstOCT", "|", "ConstDEC", "|", "ConstFloat", "|", "ConstStr", "|", "ConstSymb"]}, {"lPart": "operand", "rPart": ["(", "{toOutStr(this.currentLexem[1]);}", "(", "const", "|", "Identificator", ")", ")", "|", "(", "{opStk.push(\"(\");}", "openBracket", "expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "closeBracket", ")"]}, {"lPart": "expr", "rPart": ["operand", "(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toOutStr(opStk.pop());opStk.push(this.currentLexem[1]);}", "operation", "expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toOutStr(opStk.pop());}", ")", "?"]}, {"lPart": "operation", "rPart": ["LogicOperation", "|", "ComparisonOperation", "|", "SignOfOperation"]}, {"lPart": "assign", "rPart": ["\"set\"", "openBracket", "expr", "\",\"", "{toPFR(this.currentLexem[1]);}", "Identificator", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toOutStr(opStk.pop()); toOutStr(\"=\");toPFR(outStr);outStr=\"\";}", "closeBracket"]}, {"lPart": "operator", "rPart": ["assign", "|", "if", "|", "cycle", "|", "switch"]}, {"lPart": "if", "rPart": ["\"by\"", "openBracket", "expr", "{toPFR(outStr);toPFR(\"label_else_\"+rec_deapth+\" jmpF\");outStr=\"\";}", "closeBracket", "{rec_deapth++;}", "block", "{rec_deapth--;toPFR(\"label_exit_\"+rec_deapth+\" jmp label_else_\"+rec_deapth)}", "(", "\"else\"", "block", ")", "*", "{toPFR(\"label_exit_\"+rec_deapth);}"]}, {"lPart": "block", "rPart": ["openFigBracket", "operator", "+", "closeFigBracket"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "openBracket", "assign", "?", "Delimiter", "expr", "?", "Delimiter", "assign", "?", "closeBracket", "block", "(", "\"quit\"", "Delimiter", ")", "?"]}, {"lPart": "switch", "rPart": ["\"case\"", "expr", "openFigBracket", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", "(", "\"when\"", "const", "\"then\"", "block", "(", "\"exit\"", "Delimiter", ")", "?", ")", "*", "(", "\"otherwise\"", "block", ")", "?", "closeFigBracket"]}, {"lPart": "func", "rPart": ["Identificator", "openBracket", "(", "type", "?", "Identificator", ")", "*", "closeBracket", "(", "\"ret\"", "type", ")", "?", "block"]}, {"lPart": "type", "rPart": ["\"bool\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "openFigBracket", "rPart": ["[{]"]}, {"lPart": "closeFigBracket", "rPart": ["[}]"]}, {"lPart": "openBracket", "rPart": ["[(]"]}, {"lPart": "closeBracket", "rPart": ["[)]"]}, {"lPart": "global", "rPart": ["func", "+"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Identificator"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "operator", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\noutStr=\"\";\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\nvar outStr=\"\";\nvar rec_deapth=0;\n\nfunction toOutStr(x) {\n outStr+=\" \"+x;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Маркин Н.А.","Collection":"212425141",{"_id": {"$oid": "6817d6d68558742cb433b54f"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[^]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "bin", "rPart": ["[*/+&|<>]", "|", "(", "[!<>=]", "[=]", ")"]}, {"lPart": "unbin", "rPart": ["[-]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6817d6de8558742cb433b551"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "6817ee618558742cb433b56f"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constexp", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "[^]", "[-]", "?", "[0-9]", "+"]}, {"lPart": "constchar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "un", "rPart": ["[!]"]}, {"lPart": "bin", "rPart": ["[*/+&|<>]", "|", "(", "[!<>=]", "[=]", ")"]}, {"lPart": "unbin", "rPart": ["[-]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Батырев К.В.","Collection":"121144512",{"_id": {"$oid": "67c464cbaf563521c9d5b32a"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67c5391baf563521c9d5b63e"}, "rules": "Лаб15", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["[`]", "(", "[]", "|", "[\\\\]", "[trn]", ")", "[`]"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "braket", "rPart": ["[(){}]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "constString", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[trn]", ")", "+", "[']"]}, {"lPart": "c", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6a24ee0b22203e7cbfd85"}, "rules": "Лаб1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["[`]", "(", "[]", "|", "(", "[\\\\]", "[trn]", ")", ")", "[`]"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "constString", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[trn]", ")", ")", "+", "[']"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6aa3be0b22203e7cbfe4b"}, "rules": "Лаб2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "ConstChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "binary", "rPart": ["(", "[+/*]", ")", "|", "(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "assignment", "rPart": ["(", "[a-zA-Z]", "+", "[a-zA-Z]", "+", "[a-zA-Z]", "+", ")", "|", "(", "[a-zA-Z]", "+", ")"]}, {"lPart": "semicolon", "rPart": ["[;:,]"]}, {"lPart": "plusplus", "rPart": ["[+]", "[+]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f3ae878558742cb43334c7"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "Oper", "rPart": ["\"let\"", "id", "\"on\"", "(", "Exspression", ")", "\";\""]}, {"lPart": "Exspression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Exspression", "\")\"", ")", "(", "(", "mixed", "|", "Binary", ")", "Exspression", ")", "?"]}, {"lPart": "Unary", "rPart": ["unary", "|", "mixed"]}, {"lPart": "Constant", "rPart": ["constInt", "|", "constFloat", "|", "constChar", "|", "constQuad", "|", "constOct", "|", "constString"]}, {"lPart": "Binary", "rPart": ["binArif", "|", "binLogic", "|", "binCheck"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67fb765e8558742cb4335de4"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "operator", "rPart": ["Condition", "|", "Assignment", "|", "Cycle", "|", "Switch"]}, {"lPart": "Condition", "rPart": ["\"by\"", "\"(\"", "Exspression", "\")\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")", "\"else\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "Assignment", "rPart": ["\"let\"", "id", "\"on\"", "(", "Exspression", ")", "\";\""]}, {"lPart": "Cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "Constant", "\":\"", "Constant", "\")\"", "(", "(", "\"{\"", "operator", "*", "stop", "?", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "Switch", "rPart": ["\"??\"", "\"(\"", "(", "Exspression", ")", "\")\"", "\"{\"", "(", "\"?=\"", "Constant", "\":\"", "\"{\"", "(", "\"{\"", "operator", "*", "\"}\"", "\";\"", "\"quit\"", "\";\"", ")", "\"}\"", ")", "+", "\"}\"", "(", "\"?~\"", "\"{\"", "operator", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "Exspression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Exspression", "\")\"", ")", "(", "(", "mixed", "|", "Binary", ")", "Exspression", ")", "?"]}, {"lPart": "Constant", "rPart": ["constInt", "|", "constFloat", "|", "constChar", "|", "constQuad", "|", "constOct", "|", "constString"]}, {"lPart": "stop", "rPart": ["\"stop\"", "\";\""]}, {"lPart": "Unary", "rPart": ["unary", "|", "mixed"]}, {"lPart": "Binary", "rPart": ["binArif", "|", "binLogic", "|", "binCheck"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "binArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "binLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Зеленчук Н.А.","Collection":"zelenchuk",{"_id": {"$oid": "67a2eb94ce6dd03692d07744"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "", "deltat": 5000, "assist": 0}}{"_id": {"$oid": "67b5cc06ce6dd03692d08518"}, "rules": "test", "data": {"rList": [{"lPart": "ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[rnt]", ")", "|", "(", "[d]", "[0-9]", "(", "[0-9]", ")", "?", "(", "[0-9]", ")", "?", ")", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[+]", "|", "[-]", "|", "[/]", "|", "[*]", "|", "(", "[=]", "[=]", ")", "|", "[<]", "|", "[>]", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[&]", "|", "[|]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["(", "[a-z]", "[a-z]", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[-]", "[>]", ")"]}, {"lPart": "operators", "rPart": ["(", "function", ")", "+"]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "(", "type", "ident", "(", "\",\"", "type", "ident", ")", "*", ")", "?", "\")\"", "(", "\"{\"", "operator", "+", "\"}\"", ")", "\"->\"", "(", "(", "type", ")", "|", "(", "\"void\"", ")", ")", "ident"]}, {"lPart": "type", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", ")"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "ident", "\";\""]}, {"lPart": "operator", "rPart": ["\"loop\"", "operOrBlock", "\"until\"", "\"(\"", "expr", "\")\""]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "operator", "rPart": ["\"??\"", "expr", "\"{\"", "(", "\"?=\"", "expr", "\":\"", "operator", "+", ")", "+", "defaultPart", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"if\"", "\"(\"", "expr", "\")\"", "\"then\"", "operOrBlock", "elsePart"]}, {"lPart": "operator", "rPart": ["\"return\"", "expr", "\";\""]}, {"lPart": "operator", "rPart": ["type", "ident", "(", "\",\"", "ident", ")", "*", "\";\""]}, {"lPart": "operator", "rPart": ["expr", "\";\""]}, {"lPart": "expr", "rPart": ["(", "(", "(", "unary", "|", "\"-\"", "|", "\"+\"", ")", "begExpr", ")", "|", "begExpr", ")", "(", "endExpr", ")", "?"]}, {"lPart": "operOrBlock", "rPart": ["operator", "|", "(", "\"{\"", "operator", "+", "\"}\"", ")"]}, {"lPart": "elsePart", "rPart": ["\"not\"", "operOrBlock"]}, {"lPart": "elsePart", "rPart": ["~", "\"not\""]}, {"lPart": "defaultPart", "rPart": ["\"?~\"", "\":\"", "operOrBlock", "+"]}, {"lPart": "begExpr", "rPart": ["term"]}, {"lPart": "begExpr", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "begExpr", "rPart": ["ident", "(", "(", "\"(\"", "(", "expr", "(", "\",\"", "expr", ")", "*", ")", "?", "\")\"", ")", "|", "(", "(", "(", "decrement", ")", "|", "(", "increment", ")", ")", ")", ")", "?"]}, {"lPart": "endExpr", "rPart": ["binary", "expr"]}, {"lPart": "term", "rPart": ["(", "(", "(", "decrement", ")", "|", "(", "increment", ")", ")", "ident", ")", "|", "const"]}, {"lPart": "binary", "rPart": ["(", "\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"&\"", "|", "\"\\|\"", "|", "\"^\"", "|", "\"<<\"", "|", "\">>\"", "|", "\"&&\"", "|", "\"\\|\\|\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"==\"", "|", "\"!=\"", ")"]}, {"lPart": "unary", "rPart": ["(", "\"~\"", "|", "\"!\"", ")"]}, {"lPart": "decrement", "rPart": ["(", "\"--\"", ")"]}, {"lPart": "increment", "rPart": ["\"++\""]}, {"lPart": "ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[rnt]", ")", "|", "(", "[d]", "[0-9]", "(", "[0-9]", ")", "?", "(", "[0-9]", ")", "?", ")", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6a8f18558742cb4334c67"}, "rules": "test2", "data": {"rList": [{"lPart": "ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[rnt]", ")", "|", "(", "[d]", "[0-9]", "(", "[0-9]", ")", "?", "(", "[0-9]", ")", "?", ")", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "signOfOperation", "rPart": ["[+]", "|", "[-]", "|", "[/]", "|", "[*]", "|", "(", "[=]", "[=]", ")", "|", "[<]", "|", "[>]", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "[&]", "|", "[|]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "bracket", "rPart": ["[(){}]"]}, {"lPart": "splitter", "rPart": ["[,:]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "keyword", "rPart": ["(", "[a-z]", "[a-z]", "[a-z]", "+", ")", "|", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[-]", "[>]", ")"]}, {"lPart": "operators", "rPart": ["{clear();toPFR(\"Func_m01n\");toPFR(\"Jmp\");}", "(", "function", ")", "+", "{printPC();}"]}, {"lPart": "function", "rPart": ["\"function\"", "{ toPFR(\"Func_\" + funcCnt + \":\"); }", "\"(\"", "(", "{ curType = this.currentLexem[1]; }", "type", "{ toPFR(this.currentLexem[1]); toPFR(curType); toPFR(\"getArg\"); }", "ident", "(", "\",\"", "{ curType = this.currentLexem[1]; }", "type", "{ toPFR(this.currentLexem[1]); toPFR(curType); toPFR(\"getArg\"); }", "ident", ")", "*", ")", "?", "\")\"", "(", "\"{\"", "operator", "+", "\"}\"", ")", "\"->\"", "(", "(", "{ curType = this.currentLexem[1]; }", "type", ")", "|", "(", "{ curType = \"0\"; }", "\"void\"", ")", ")", "{ name = this.currentLexem[1]; funcType.set(name, curType); toPFR(\"FuncExit_\" + funcCnt + \":\"); if (name != \"m01n\" ) toPFR(\"retFunc_\" + name); if (name != \"m01n\" ) toPFR(\"getLabel\"); if (name != \"m01n\" ) toPFR(\"retFunc_\" + name); else toPFR(\"endOfCode\"); if (name != \"m01n\" ) toPFR(\"Jmp\"); toPFR(\"Func_\" + name + \":\"); returnType.push(curType); toPFR(\"Func_\" + (funcCnt++)); toPFR(\"Jmp\"); }", "ident"]}, {"lPart": "type", "rPart": ["(", "\"int\"", "|", "\"float\"", "|", "\"char\"", ")"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "{toPFR(this.currentLexem[1]);}", "ident", "\";\"", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"put\");}"]}, {"lPart": "operator", "rPart": ["{loopStk.push(++loopCnt);toPFR(\"Loop_\"+peek(loopStk)+\":\");}", "\"loop\"", "operOrBlock", "\"until\"", "\"(\"", "expr", "{toPFR(\"LoopExit_\"+peek(loopStk));toPFR(\"JmpOnFalse\"); toPFR(\"Loop_\"+peek(loopStk));toPFR(\"Jmp\");}", "\")\"", "{toPFR(\"LoopExit_\"+loopStk.pop() +\":\");}"]}, {"lPart": "operator", "rPart": ["\"retire\"", "\";\"", "{toPFR(\"LoopExit_\"+peek(loopStk)); toPFR(\"Jmp\"); }"]}, {"lPart": "operator", "rPart": ["\"quit\"", "\";\"", "{toPFR(\"Switch\"+peek(switchStk)); toPFR(\"Jmp\");}"]}, {"lPart": "operator", "rPart": ["{ switchStk.push(++switchCnt); }", "\"??\"", "expr", "{ toPFR(\"exprSwitch\"+peek(switchStk)); toPFR(\"put\"); }", "\"{\"", "(", "{ onStk.push(++switchOptionCnt); if(peek(onStk) != 1) toPFR(\"Switch\"+peek(switchStk)+\"Option\"+(peek(onStk)-1)+\":\"); }", "\"?=\"", "expr", "{ toPFR(\"exprSwitch\"+peek(switchStk)); toPFR(\"==\"); toPFR(\"Switch\"+peek(switchStk)+\"Option\"+peek(onStk)); toPFR(\"JmpOnFalse\"); if (switchOptionCnt != 1) toPFR(\"Switch\"+peek(switchStk)+\"Comp\"+(peek(onStk)-1)+\":\"); }", "\":\"", "operator", "+", "{ toPFR(\"Switch\"+peek(switchStk)+\"Comp\"+peek(onStk)); toPFR(\"Jmp\"); }", ")", "+", "defaultPart", "?", "\"}\"", "{ toPFR(\"Switch\"+switchStk.pop()+\":\"); }"]}, {"lPart": "operator", "rPart": ["{ifStk.push(++ifCnt);}", "\"if\"", "\"(\"", "expr", "{toPFR(\"ifElse\"+peek(ifStk));toPFR(\"JmpOnFalse\");}", "\")\"", "\"then\"", "operOrBlock", "{toPFR(\"ifExit\"+peek(ifStk));toPFR(\"Jmp\"); toPFR(\"ifElse\"+peek(ifStk)+\":\");}", "elsePart", "{toPFR(\"ifExit\"+peek(ifStk)+\":\");ifStk.pop();}"]}, {"lPart": "operator", "rPart": ["\"return\"", "expr", "\";\"", "{ toPFR(\"return\"); toPFR(\"FuncExit_\" + funcCnt); toPFR(\"Jmp\"); }"]}, {"lPart": "operator", "rPart": ["{curType = this.currentLexem[1];}", "type", "{toPFR(this.currentLexem[1]); toPFR(curType); toPFR(\"defVal\");}", "ident", "(", "\",\"", "{toPFR(this.currentLexem[1]); toPFR(curType); toPFR(\"defVal\");}", "ident", ")", "*", "\";\""]}, {"lPart": "operator", "rPart": ["expr", "\";\""]}, {"lPart": "expr", "rPart": ["(", "(", "(", "{opStk.push(this.currentLexem[1]);}", "unary", "|", "{opStk.push(\"UnaryMinus\");}", "\"-\"", "|", "{opStk.push(\"UnaryPlus\");}", "\"+\"", ")", "begExpr", "{toPFR(opStk.pop());}", ")", "|", "begExpr", ")", "(", "endExpr", ")", "?"]}, {"lPart": "operOrBlock", "rPart": ["operator", "|", "(", "\"{\"", "operator", "+", "\"}\"", ")"]}, {"lPart": "elsePart", "rPart": ["\"not\"", "operOrBlock"]}, {"lPart": "elsePart", "rPart": ["~", "\"not\""]}, {"lPart": "defaultPart", "rPart": ["{ toPFR(\"Switch\"+peek(switchStk)+\"Option\"+peek(onStk)+\":\"); toPFR(\"Switch\"+peek(switchStk)+\"Comp\"+onStk.pop()+\":\"); while (onStk.length > 0) onStk.pop(); }", "\"?~\"", "\":\"", "operOrBlock", "+"]}, {"lPart": "begExpr", "rPart": ["term"]}, {"lPart": "begExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "begExpr", "rPart": ["{name = this.currentLexem[1]; flagId = 0;}", "ident", "(", "(", "{var funname = name;}", "\"(\"", "(", "expr", "{toPFR(\"setArg\");}", "(", "\",\"", "expr", "{toPFR(\"setArg\");}", ")", "*", ")", "?", "\")\"", "{ toPFR(\"setLabel\");toPFR(\"Func_\"+funname); toPFR(\"Jmp\"); flagId = 1; if(funcType.get(funname) != \"0\") toPFR(\"funcExprRet\"); }", ")", "|", "(", "{toPFR(name);flagId = 1;}", "(", "(", "{toPFR( \"DecPost\");}", "decrement", ")", "|", "(", "{toPFR( \"IncPost\");}", "increment", ")", ")", ")", ")", "?", "{if (flagId == 0) toPFR(name);}"]}, {"lPart": "endExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "binary", "expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "term", "rPart": ["(", "(", "(", "{opStk.push( \"DecPre\");}", "decrement", ")", "|", "(", "{opStk.push( \"IncPre\");}", "increment", ")", ")", "{toPFR(this.currentLexem[1]);}", "ident", "{toPFR(opStk.pop());}", ")", "|", "{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "binary", "rPart": ["(", "\"+\"", "|", "\"-\"", "|", "\"*\"", "|", "\"/\"", "|", "\"%\"", "|", "\"&\"", "|", "\"\\|\"", "|", "\"^\"", "|", "\"<<\"", "|", "\">>\"", "|", "\"&&\"", "|", "\"\\|\\|\"", "|", "\">\"", "|", "\"<\"", "|", "\">=\"", "|", "\"<=\"", "|", "\"==\"", "|", "\"!=\"", ")"]}, {"lPart": "unary", "rPart": ["(", "\"~\"", "|", "\"!\"", ")"]}, {"lPart": "decrement", "rPart": ["(", "\"--\"", ")"]}, {"lPart": "increment", "rPart": ["\"++\""]}, {"lPart": "ident", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "(", "[eE]", "[+-]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[rnt]", ")", "|", "(", "[d]", "[0-9]", "(", "[0-9]", ")", "?", "(", "[0-9]", ")", "?", ")", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar onStk = [];\nvar ctlStk = [];\nvar ifStk = [];\nvar loopStk = [];\nvar switchStk = [];\n\nvar operatorCnt = 0;\nvar loopCnt = 0;\nvar switchCnt = 0;\nvar switchOptionCnt = 0;\nvar ifCnt = 0;\nvar funcCnt = 0;\nvar functionRetCnt = 0;\nvar flagId = 0;\nvar funcType = new Map();\nvar returnType = \"\";\n\nvar isPFE = true;\nvar psI = 0;\nvar psArr = [];\nvar errorPnt = 0;\nvar errorMsg = [];\nvar isOk = true;\n\nfunction clear() {\n    isPFE = true;\n    opStk = [];\n    onStk = [];\n    ctlStk = [];\n    ifStk = [];\n    loopStk = [];\n    switchStk = [];\n    functionRetCnt = 0;\n    operatorCnt = 0;\n    loopCnt = 0;\n    switchCnt = 0;\n    switchOptionCnt = 0;\n    ifCnt = 0;\n    funcCnt = 0;\n    funcType.clear();\n    tracer.clear();\n    psI = 0;\n    psArr = [];\n    isOk = true;\n    errorPnt = 0;\n    errorMsg = [];\n    typeTbl = new Map();\n    operandStk = [];\n    typeStk = [];\n    resStk = [];\n    labelID = new Map();\n    labelStk = [];\n    returnType = [];\n}\n\nfunction toPFR(x) {\n   tracer.put(x);\n   if (isPFE)\n     errorPnt = PFEtoPseudoCode(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if (s == \"(\") return 0;\n\n if (s == \"||\") return 1;\n\n if (s == \"&&\") return 2;\n\n if (s == \"|\") return 3;\n\n if (s == \"^\") return 4;\n\n if (s == \"&\") return 5;\n\n if (s == \"==\") return 6;\n if (s == \"!=\") return 6;\n\n if (s == \"<=\") return 7;\n if (s == \"<\") return 7;\n if (s == \">=\") return 7;\n if (s == \">\") return 7;\n\n if (s == \"<<\") return 8;\n if (s == \">>\") return 8;\n\n if (s == \"+\") return 9;\n if (s == \"-\") return 9;\n\n if (s == \"*\") return 10;\n if (s == \"/\") return 10;\n if (s == \"%\") return 10;\n return 0;\n}\n\nfunction getType(w) {\n    switch (w) {\n        case \"+\":\n        case \"-\":\n        case \"/\":\n        case \"*\":\n        case \"%\":\n            return 10; //знак арифметической операции\n        case \">\":\n        case \"<\":\n        case \"<=\":\n        case \">=\":\n        case \"==\":\n        case \"!=\":\n            return 11; //знак операции сравнения\n        case \"&&\":\n        case \"||\":\n            return 12; //логические операции\n        case \"&\":\n        case \"|\":\n        case \"^\":\n        case \"<<\":\n        case \">>\":\n            return 13; //побитовые операции\n        case \"UnaryMinus\": \n        case \"UnaryPlus\": \n        case \"DecPre\": \n        case \"IncPre\":\n        case \"DecPost\":\n        case \"IncPost\":\n            return 14; //унарный знак арифметической операции\n        case \"!\":\n            return 15; //унарный знак логической операции\n        case \"~\":\n            return 16;//унарный знак побитовой операции\n        case \"getArg\":\n            return 17;\n        case \"setArg\":\n            return 18;\n        case \"getLabel\":\n            return 19;\n        case \"put\":\n            return 20; //знак операции присваивания\n        case \"return\":\n            return 21;\n        case \"defVal\":\n            return 30; //знак операции объявления переменной\n        case \"Jmp\":\n            return 40; //знак операции безусловной передачи управления\n        case \"JmpOnFalse\":\n            return 41; //знак операции передачи управления по условию\n        case \"setLabel\":\n            return 42; //знак операции передачи управления по условию\n        case \"endOfCode\":\n            return 50; //знак операции передачи управления по условию\n    }\n    return 0;\n};\n\nfunction getVarType(value) {\n    if (Number(value) === Number(value) && Math.abs(Number(value) % 1) !== 0) \n        return \"float\";\n    else if (Number(value) === Number(value) && Math.abs(Number(value) % 1) === 0)\n        if (value.toString().indexOf(\".\") > 0)\n            return \"float\";\n        else\n            return \"int\";\n    else if (typeof value === \"string\" && value.length === 1)\n        return \"char\";\n    else\n        return \"undef\";\n}\n\nvar typeTbl = new Map();\nvar operandStk = [];\nvar typeStk = [];\nvar resStk = [];\nvar labelID = new Map();\nvar labelStk = [];\n\nfunction PFEtoPseudoCode(word) {\n    var type = getType(word);\n    var psJ = 0;\n    psArr.push([\"-\",\"-\",\"-\"]);\n    if (type === 0)\n        if (word.indexOf(\":\") > 0) {\n            labelID.set(word.substring(0, word.length - 1), psI);\n        }\n        else {\n            operandStk.push(word);\n            if (getVarType(word) != \"undef\")\n                typeStk.push(getVarType(word));\n            else if (typeTbl.has(word))\n                typeStk.push(typeTbl.get(word));\n            else if (word.indexOf(\"Expr\"))\n                typeStk.push(\"allType\");\n        }\n    else {\n        psArr[psI][psJ++] = word;\n        switch (type) {\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n                if (operandStk.length > 1) {\n                    psArr[psI][2] = operandStk.pop();\n                    psArr[psI][1] = operandStk.pop();\n                }\n                else if (operandStk.length == 1) {\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                    psArr[psI][psJ++] = operandStk.pop();\n                }\n                else {\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                }\n                resStk.push(psI);\n                var type1 = typeStk.pop();\n                var type2 = typeStk.pop();\n                if (type1 !== type2 && type1 != \"allType\" && type2 != \"allType\") {\n                    typeStk.pop();\n                    errorMsg.push(\"Недопустимая операция:\" + \" (\" + type2 + \")\" +  psArr[psI][1] + \" \" + word + \"(\" + type1 + \")\" +  psArr[psI][2] + \";\\n\");\n                    if ((type2 === \"int\" && type1 === \"float\") || (type1 === \"int\") && (type2 === \"float\")) { \n                    errorMsg.push(\"Если вы хотите указать, что константа принадлежит типу float используйте \\\".\\\", например \\\"4. / 3.0 \\\" \\n\");  \n                    }\n                }\n                typeStk.push(type1);\n                break;\n            case 14:\n            case 15:\n            case 16:\n                if (operandStk.length > 0) {\n                    psArr[psI][psJ++] = operandStk.pop();\n                } else {\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                }\n                psArr[psI][psJ++] = \"-\";\n                resStk.push(psI);\n                break;\n            case 17:\n                psArr[psI][psJ++] = operandStk.pop();\n                psArr[psI][psJ++] = operandStk.pop();\n                typeTbl.set(psArr[psI][psJ-1],psArr[psI][psJ-2]);\n                break;\n            case 18:\n                psArr[psI][psJ++] = operandStk.pop();\n                psArr[psI][psJ++] = \"-\";\n                break;\n            case 19:\n                labelStk.push(peek(operandStk));\n                labelID.set(operandStk.pop(), psI);\n                psArr[psI][psJ++] = \"-\";\n                psArr[psI][psJ++] = \"-\";\n                break;\n            case 20:\n                if (operandStk.length > 1) {\n                    psArr[psI][2] = operandStk.pop();\n                    psArr[psI][1] = operandStk.pop();1\n                }\n                else {\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                    psArr[psI][psJ++] = operandStk.pop(); \n                }\n                var type1 = typeStk.pop();\n                var type2 = typeStk.pop();\n                if (type1 !== type2 && type1 != \"allType\" && type2 != \"allType\") {\n                    errorMsg.push(\"Недопустимая операция: put \" + \"(\" + type2 + \")\" +  psArr[psI][1] + \" to \" + \"(\" + type1 + \")\" +  psArr[psI][2] + \";\\n\");\n                    if (type2 === \"int\" && type1 === \"float\") {  \n                    errorMsg.push(\"Если вы хотите указать, что константа принадлежит типу float используйте \\\".\\\", например \\\"put 2. to f01t\\\" \\n\");  \n                    }\n                }\n                break;\n            case 21:\n                if (operandStk.length > 0) {\n                    psArr[psI][psJ++] = operandStk.pop();\n                } else {\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                }\n                psArr[psI][psJ++] = \"-\";\n                break;\n            case 30:\n                psArr[psI][psJ++] = operandStk.pop(); \n                psArr[psI][psJ++] = operandStk.pop();\n                typeTbl.set(psArr[psI][psJ-1],psArr[psI][psJ-2]);\n            break;\n            case 40:\n                psArr[psI][psJ++] = operandStk.pop();\n                psArr[psI][psJ++] = \"-\";\n            case 41:\n                if (operandStk.length > 1){\n                    psArr[psI][psJ++] = operandStk.pop();\n                    psArr[psI][psJ++] = operandStk.pop();\n                } else {\n                    psArr[psI][psJ++] = operandStk.pop();\n                    psArr[psI][psJ++] = \"@\" + (resStk.pop() - psI);\n                }\n                psArr[psI][psJ++] = \"-\";\n                break;\n            case 42:\n                psArr[psI][psJ++] = \"-\";\n                psArr[psI][psJ++] = \"-\";\n                break;\n            case 50:\n                psArr[psI][psJ++] = \"-\";\n                psArr[psI][psJ++] = \"-\";\n            break;\n        }\n    psI++;\n    }\n    return -1;\n}\n\nfunction printPC() {\n    toPFR(\"\\n\\n\");\n    isPFE = false;\n    for (let i = 0; i < psI; i++) {\n        if (labelID.has(psArr[i][1])) {\n             if (labelStk.includes(psArr[i][1]))\n                 psArr[i][1] = \"@\" + (labelID.get(psArr[i][1]) - i); \n             else \n                 psArr[i][1] = (labelID.get(psArr[i][1]) - i); \n        }\n    } \n    var valTbl  = new Map(); \n    if (isOk) {\n    var ret = run(valTbl);\n    }\n    var msg = errorMsg.reverse();\n    if (msg.length > 0) {\n    while(msg.length > 0) {\n         toPFR(msg.pop());\n    }\n    isOk = false;\n    }\n    else {\n             toPFR(\"Псевдокод:\\n\");\n    for (let i = 0; i < psI; i++)\n        toPFR(i + '\\t' + psArr[i][0] +'\\t' + psArr[i][1] +'\\t' + psArr[i][2] + '\\n');\n    toPFR(\"\\nИсполнение программы\\n\");\n    toPFR(\"\\nReturned: \" + ret + '\\n');\n    toPFR(\"\\nПеременные:\\n\");\n    for (let entry of valTbl) {\n    toPFR(entry);\n    toPFR(\"\\n\")\n    }\n    }\n}\n\nfunction run(valTbl) {\n    var typeTbl = new Map();\n    var resStk = [];\n    var argStk = [];\n    var labelStk = [];\n    var i = 0;\n    var funCnt = 0;\n    var funcStk = [];\n    funcStk.push(funCnt);\n    var isJmp = false;\n    var isExit = false;\n    while (i < (psI + 1) && !isExit) {\n        var operation = psArr[i][0];\n        var var1 = psArr[i][1];\n        console.log(var1);\n        if(var1 === \"funcExprRet\") {\n            var1 = argStk.pop()\n        }\n        if (typeof var1 === \"string\" && isNaN(var1) && var1[0] === \"@\") {\n            var1 = resStk.pop();\n        }\n        if (valTbl.has(var1.toString() + \"_\" + peek(funcStk).toString()) && operation.indexOf(\"Dec\") < 0 && operation.indexOf(\"Inc\") < 0 ) {;\n            var1 = valTbl.get(var1.toString() + \"_\" + peek(funcStk).toString());\n        }\n        if(!isNaN(Number(var1)))\n            var1 = Number(var1);\n        var var2 = psArr[i][2];\n        if (typeof var2 === \"string\" &&  isNaN(var2) && var2[0] === \"@\") {\n            var2 = resStk.pop();\n        } \n        if (valTbl.has(var2.toString() + \"_\" + peek(funcStk).toString()) && operation != \"put\" && operation != \"getArg\") {\n            var2 = valTbl.get(var2.toString() + \"_\" + peek(funcStk).toString());\n        }\n        if(!isNaN(Number(var2)))\n            var2 = Number(var2);\n        \n        console.log(var1 + '\\t' + var2 + '\\t' + operation);\n        switch (operation) {\n            case \"+\":\n                resStk.push(var1 + var2);\n            break;\n\n            case \"-\":\n                resStk.push(var1 - var2);\n            break;\n\n            case \"/\":\n                if (var2 === 0) {\n                errorMsg.push(\"Недопустимая операция:\" +  var1 + \" / \" +  var2 + \";\\n\"); \n                errorMsg.push(\"Деление на ноль\\n\"); \n                }\n                resStk.push(var1 / var2);\n            break;\n\n            case \"*\":\n                resStk.push(var1 * var2);\n            break;\n\n            case \"%\":\n                resStk.push(var1 % var2);\n            break;\n            \n            case \">\":\n                resStk.push(var1 > var2);\n            break;\n\n            case \"<\":\n                resStk.push(var1 < var2);\n            break;\n\n            case \"<=\":\n                resStk.push(var1 <= var2);\n            break;\n\n            case \">=\":\n                resStk.push(var1 >= var2);\n            break;\n\n            case \"==\":\n                resStk.push(var1 === var2);\n            break;\n\n            case \"!=\":\n                resStk.push(var1 != var2);\n            break;\n            \n            case \"&&\":\n                resStk.push(var1 && var2);\n            break;\n\n            case \"||\":\n                resStk.push(var1 || var2);\n            break;\n            \n            case \"&\":\n                resStk.push(var1 & var2);\n            break;\n\n            case \"|\":\n                resStk.push(var1 | var2);\n            break;\n\n            case \"^\":\n                resStk.push(var1 ^ var2);\n            break;\n\n            case \"<<\":\n                resStk.push(var1 << var2);\n            break;\n\n            case \">>\":\n                resStk.push(var1 >> var2);\n            break;\n            \n            case \"UnaryMinus\":\n                resStk.push(-var1);\n            break; \n\n            case \"UnaryPlus\":\n                resStk.push(+var1);\n            break; \n\n            case \"DecPre\": \n                key = valTbl.get(var1);\n                valTbl.set(var1, key-1);\n                resStk.push(key-1);\n            break;\n\n            case \"IncPre\":\n                key = valTbl.get(var1);\n                valTbl.set(var1, key+1);\n                resStk.push(key+1);\n            break;\n\n            case \"DecPost\":\n                key = valTbl.get(var1);\n                valTbl.set(var1, key-1);\n                resStk.push(key);\n            break;\n\n            case \"IncPost\":\n                key = valTbl.get(var1);\n                valTbl.set(var1 ,key+1);\n                resStk.push(key);\n            break;\n            \n            case \"!\":\n                resStk.push(!var1);\n            break;\n            \n            case \"~\":\n                resStk.push(~var1);\n            break;\n\n            case \"getArg\":\n                var arg = argStk.pop();\n                typeTbl.set(var2.toString() + \"_\" + peek(funcStk).toString(), var1);\n                valTbl.set(var2.toString() + \"_\" + peek(funcStk).toString(), arg);\n            break;\n\n            case \"setArg\":\n                argStk.push(var1);\n            break;\n\n            case \"return\":\n                argStk.push(var1);\n            break;\n\n            case \"getLabel\":\n                resStk.push((labelStk.pop() + 1) - i);\n                funcStk.pop();\n            break;\n\n            case \"put\":\n                valTbl.set(var2.toString() + \"_\" + peek(funcStk).toString(), var1);\n            break;\n\n            case \"defVal\":\n                typeTbl.set(var2.toString() + \"_\" + peek(funcStk).toString(), var1);\n                valTbl.set(var2.toString() + \"_\" + peek(funcStk).toString(), NaN);\n            break;\n\n            case \"setLabel\":\n                labelStk.push(i);\n                argStk.reverse();\n                funcStk.push(++funCnt);\n            break;\n\n            case \"Jmp\":\n                isJmp = true;\n                i = i + var1;\n            break;\n\n            case \"JmpOnFalse\":\n                if (!var2) {\n                    isJmp = true;\n                    i = i + var1;\n                }\n            break;\n\n            case \"endOfCode\":\n                i = psI+1;\n            break;\n        }\n        if (!isJmp)\n            i++;\n        isJmp = false;\n    }\n    return argStk.pop();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction(int a1b, int a2b) {\n  return a1b + a2b;\n} -> int f10n\n\nfunction(int a1b) {\n  \tif (a1b > 0) then\n\tput -1 to a1b; \n\tnot\n        {\n\tput 1 to a1b; \n        }\n        return a1b;\n} -> int f20n\n\nfunction(int y1y, int x2x) {\n\t?? y1y {\n\t\t?= 1:\n\t\t\tput x2x / 2 to x2x;\n\t\t\tquit;\n\t\t?= -1:\n\t\t\tput -x2x to x2x;\n\t\t\tquit;\n\t\t?~:\n\t\t\tput 1 to x2x;\n\t\t\tquit;\n\t}\n        return x2x;\n} -> int f30n\n\nfunction(float x2x) {\n  \tloop\n\tput x2x * 1.5 to x2x;\n\tuntil (x2x <= 200.)\n        return x2x;\n} -> float f40n\n\nfunction() {\n   int r1t, r2t, r3t;\n   float r4t;\n   int i1t, i2t;\n   put 1 to i1t;\n   put 2 to i2t;\n   \n   put f10n(i1t, 2) to r1t;\n   put f20n(100) to r2t;\n   put f30n(i1t, i2t) to r3t;\n   put f40n(20) to r4t;\n   return 0;\n} -> int m01n \n*/"}}},
{"FIO":"Григоренко С.Н.","Collection":"121122153",{"_id": {"$oid": "6412096267fb645f4c674d3a"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "641210ce67fb645f4c674d7b"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+", "(", "[0-9]", "+", "(", "[0-9]", "+", "(", "[0-9]", "+", "(", "[0-9]", ")", "?", ")", "?", ")", "?", ")", "+", "(", "[a-z]", "*", ")", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6412194967fb645f4c674d93"}, "rules": "lr1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9]", "{1,4}", "[A-Za-z]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[h]", "(", "[0-9]", "|", "[A-F]", ")", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "operations", "rPart": ["[-+/*]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "compare", "rPart": ["(", "(", "[<]", "|", "[>]", ")", "[=]", "?", ")", "|", "(", "[==]", ")", "|", "(", "[!=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "det", "rPart": []}, {"lPart": "det", "rPart": []}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6412466567fb645f4c674e7c"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9]", "{1,4}", "[A-Za-z]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const4", "rPart": ["[0]", "[q]", "[0-3]", "+"]}, {"lPart": "const16", "rPart": ["[0]", "[h]", "(", "[0-9]", "|", "[A-F]", ")", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[rnt\\\\]", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "+", "[\"]"]}, {"lPart": "operations", "rPart": ["[-+/*]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "compare", "rPart": ["(", "(", "[<]", "|", "[>]", ")", "[=]", "?", ")", "|", "(", "[=]", ")", "|", "(", "[!]", ")"]}, {"lPart": "space", "rPart": ["[\\t \\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comments", "rPart": ["[//]", "+", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Assignement", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "Const", "|", "Operation", "|", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "Const", "rPart": ["constReal", "|", "const4", "|", "const16", "|", "constChar", "|", "constString"]}, {"lPart": "UnaryOp", "rPart": ["[-+]"]}, {"lPart": "Operation", "rPart": ["BinaryOp", "|", "UnaryOp"]}, {"lPart": "UnaryOperation", "rPart": ["(", "UnaryOp", ")", "Expr"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Толкачева К.В.","Collection":"412455352",{"_id": {"$oid": "67d6f135e0b22203e7cc04b1"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6f148e0b22203e7cc04b4"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67d6f5dfe0b22203e7cc0540"}, "rules": "Пример", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "|", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "[ -&(-~]", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d74d02e0b22203e7cc07ca"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "|", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[']", "[ -&(-~]", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Word", "rPart": ["[a-z]", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e26fba4635a960233ad793"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "|", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "constSym", "rPart": ["[']", "[ -&(-~]", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "const", "rPart": ["\"id\"", "|", "\"const10\"", "|", "\"constFloat\"", "|", "\"constExp\"", "|", "\"constSym\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7b63f4635a960233af1f6"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "|", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "constSym", "rPart": ["[[']", "[ -&(-~]", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Term", "rPart": ["id", "|", "const10", "|", "constFloat", "|", "constExp", "|", "constSym", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "Assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"at\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "\"{\"", "Operator", "\"}\"", "\"until\"", "\"(\"", "Expr", "\")\"", "\"retire;\"", "?"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Expr", "\":\"", "Operator", "*", ")", "+", "\"nooption\"", "Operator", "+", "\"end\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e7cf554635a960233af37b"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constFloat", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "constExp", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", "|", "[.]", "[0-9]", "+", ")", "(", "[eE]", "[-+]", "?", "[0-9]", "+", ")"]}, {"lPart": "constSym", "rPart": ["[[']", "[ -&(-~]", "?", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/<>]"]}, {"lPart": "Comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "Assign", "rPart": ["[<]", "[-]"]}, {"lPart": "Bracket", "rPart": ["[(){}\\[\\]]"]}, {"lPart": "Term", "rPart": ["id", "|", "const10", "|", "constFloat", "|", "constExp", "|", "constSym"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", "|", "\">\"", "|", "\"<\"", "|", "\"<=\"", "|", "\">=\"", "|", "\"!=\"", "|", "\"==\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "Assign", "Expr", "delimiter"]}, {"lPart": "Operator", "rPart": ["\"at\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Operator", "\"}\"", "PartElse", "?"]}, {"lPart": "PartElse", "rPart": ["\"or\"", "\"do\"", "\"{\"", "Operator", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"loop\"", "\"{\"", "Operator", "+", "\"}\"", "\"until\"", "\"(\"", "Expr", "\")\"", "\"retire;\"", "?"]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Operator", "rPart": ["\"choice\"", "Expr", "(", "\"option\"", "Expr", "\":\"", "Operator", "*", ")", "+", "(", "\"nooption\"", "Operator", "+", ")", "*", "\"end\""]}, {"lPart": "Function", "rPart": ["id", "Assign", "Type", "?", "\"(\"", "(", "Type", "?", "id", "\",\"", "?", ")", "*", "\")\"", "(", "\"{\"", "Operator", "+", "\"};\"", ")", "?"]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\"", "|", "\"double\""]}, {"lPart": "Operator", "rPart": ["\"$\"", "id", "Assign", "id", "\"(\"", "(", "Type", "?", "id", "\",\"", "?", ")", "*", "\");\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "delimiter"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Манков Н.С.","Collection":"524344231",{"_id": {"$oid": "65e86fd84b5d9e0496a76969"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "65e878d54b5d9e0496a7699f"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[+/*]"]}, {"lPart": "comparison", "rPart": ["[<]", "|", "[>]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[^]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b3351ace6dd03692d080bc"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[&/*|><]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "solo", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b33716ce6dd03692d080c7"}, "rules": "lab3", "data": {"rList": [{"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "operators", "|", "operator"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "sign", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constFloat", "|", "string", "|", "constChar"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "sign", "rPart": ["[&/*|><]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b33a65ce6dd03692d080dd"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["func", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "?", ")", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "(", "operator", "|", "operators", ")", "+", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constFloat", "|", "string", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "sign", ")", "Expr", ")", "?"]}, {"lPart": "other", "rPart": ["\"?~\"", "\":\"", "(", "operator", "|", "operators", ")", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "sign", "rPart": ["[&/*|><]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b34ce4ce6dd03692d08151"}, "rules": "lab5", "data": {"rList": [{"lPart": "program", "rPart": ["func", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "?", ")", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "(", "operator", "|", "operators", ")", "+", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constFloat", "|", "string", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "sign", ")", "Expr", ")", "?"]}, {"lPart": "other", "rPart": ["\"?~\"", "\":\"", "(", "operator", "|", "operators", ")", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "sign", "rPart": ["[&/*|><]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b34ce8ce6dd03692d08153"}, "rules": "kr", "data": {"rList": [{"lPart": "program", "rPart": ["func", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "(", "\"ret\"", "?", ")", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"in\"", "\"(\"", "Expr", "\")\"", "\"then\"", "(", "operators", "|", "operator", ")", "endPart"]}, {"lPart": "operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["\"??\"", "Expr", "\"{\"", "(", "\"?=\"", "const", "\":\"", "(", "operator", "|", "operators", ")", "+", "(", "\"quit\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "solo", "|", "extra", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["\"not\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"not\""]}, {"lPart": "const", "rPart": ["const2", "|", "const8", "|", "const10", "|", "constFloat", "|", "string", "|", "constChar"]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "extra", "|", "sign", ")", "Expr", ")", "?"]}, {"lPart": "other", "rPart": ["\"?~\"", "\":\"", "(", "operator", "|", "operators", ")", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{,3}", "[a-zA-Z]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "const8", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-2]", "[0-9]", "[0-9]", ")", "[']"]}, {"lPart": "solo", "rPart": ["[!]"]}, {"lPart": "extra", "rPart": ["[-+]"]}, {"lPart": "sign", "rPart": ["[&/*|><]", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"stop\"", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Урмашов В.М.","Collection":"335444125",{"_id": {"$oid": "6616b682e80848761346619e"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "6616c62ce8084876134662ca"}, "rules": "Lab1", "data": {"rList": [{"lPart": "ident", "rPart": ["[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const16", "rPart": ["[1]", "[6]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "constReal", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binaryUp", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "[+]", "[*]", "[/]", "(", "[!]", "[=]", ")", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "unaryUp", "rPart": ["[!]"]}, {"lPart": "sentenceEnd", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66df079343e7565e8d4a27c6"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66df2d5e43e7565e8d4a27f7"}, "rules": "lab3", "data": {"rList": [{"lPart": "Operators", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "ExitQuit", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "ConstN", "\"to\"", "ConstN", "(", "\"step\"", "ConstN", ")", "?"]}, {"lPart": "ExitQuit", "rPart": ["(", "\"quit\"", "\";\"", ")", "|", "(", "\"exit\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "ConstN", "rPart": ["const4", "|", "const10", "|", "const16"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Unary", "rPart": ["(", "unarySign", "|", "minus", ")"]}, {"lPart": "Const", "rPart": ["const4", "|", "const10", "|", "const16", "|", "charConst", "|", "stringConst"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "minus"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66df30ca43e7565e8d4a2837"}, "rules": "lab4", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "ExitQuit", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "ConstN", "\"to\"", "ConstN", "(", "\"step\"", "ConstN", ")", "?"]}, {"lPart": "OperSwitch", "rPart": ["\"??\"", "Expr", "\"{\"", "forSwitch", "*", "forSwitch2", "\"}\""]}, {"lPart": "ExitQuit", "rPart": ["(", "\"quit\"", "\";\"", ")", "|", "(", "\"exit\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "ConstN", "rPart": ["const4", "|", "const10", "|", "const16"]}, {"lPart": "forSwitch2", "rPart": ["\"?~\"", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"?=\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Unary", "rPart": ["unarySign", "|", "minus"]}, {"lPart": "Const", "rPart": ["const4", "|", "const10", "|", "const16", "|", "charConst", "|", "stringConst"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "ConstWithSign", "rPart": ["(", "minus", ")", "?", "ConstN"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "minus"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66e1540043e7565e8d4a2a0f"}, "rules": "lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "ExitQuit", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "OperCond", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "BlockOrOperator", "Else"]}, {"lPart": "OperCycle", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "ConstN", "\"to\"", "ConstN", "(", "\"step\"", "ConstN", ")", "?"]}, {"lPart": "OperSwitch", "rPart": ["\"??\"", "Expr", "\"{\"", "forSwitch", "*", "forSwitch2", "\"}\""]}, {"lPart": "ExitQuit", "rPart": ["(", "\"quit\"", "\";\"", ")", "|", "(", "\"exit\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "ConstN", "rPart": ["const4", "|", "const10", "|", "const16"]}, {"lPart": "forSwitch2", "rPart": ["\"?~\"", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["Const", "|", "(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"?=\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Unary", "rPart": ["unarySign", "|", "minus"]}, {"lPart": "Const", "rPart": ["const4", "|", "const10", "|", "const16", "|", "charConst", "|", "stringConst"]}, {"lPart": "EndExpr", "rPart": ["Binary", "Expr"]}, {"lPart": "ConstWithSign", "rPart": ["(", "minus", ")", "?", "ConstN"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "minus"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66e1912d43e7565e8d4a2aa0"}, "rules": "lab6", "data": {"rList": [{"lPart": "Program", "rPart": ["{whileCnt=0;}", "Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"(\"", "ArgList", "\")\"", "FuncBlock"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "FuncBlock", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Operator", "rPart": ["OperAssign", "|", "OperCond", "|", "OperCycle", "|", "OperSwitch", "|", "ExitQuit", "|", "Return"]}, {"lPart": "OperAssign", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\":=\");}", "\";\""]}, {"lPart": "OperCond", "rPart": ["{ctlStk.push(++whileCnt); toPFR(\"If_\"+peek(ctlStk)+\":\");}", "\"by\"", "\"(\"", "Expr", "{toPFR(\"Else_\" +peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"Exit_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Else_\" +peek(ctlStk)+\":\");}", "Else", "{toPFR(\"Exit_\" +ctlStk.pop()+\":\");}"]}, {"lPart": "OperCycle", "rPart": ["\"exec\"", "BlockOrOperator", "\"with\"", "id", "\"from\"", "ConstN", "\"to\"", "ConstN", "(", "\"step\"", "ConstN", ")", "?"]}, {"lPart": "OperSwitch", "rPart": ["\"??\"", "Expr", "\"{\"", "forSwitch", "*", "forSwitch2", "\"}\""]}, {"lPart": "ExitQuit", "rPart": ["(", "\"quit\"", "\";\"", ")", "|", "(", "\"exit\"", "\";\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "Unary", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "ConstN", "rPart": ["const4", "|", "const10", "|", "const16"]}, {"lPart": "forSwitch2", "rPart": ["\"?~\"", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "Const", "|", "(", "{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "{toPFR(opStk.pop());}", "|", "{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "forSwitch", "rPart": ["\"?=\"", "ConstWithSign", "\":\"", "(", "Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")", ")", "+"]}, {"lPart": "Unary", "rPart": ["{opStk.push(this.currentLexem[1]);}", "(", "unarySign", "|", "{toPFR(\"0\");}", "minus", ")"]}, {"lPart": "Const", "rPart": ["const4", "|", "const10", "|", "const16", "|", "charConst", "|", "stringConst"]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]);}", "Binary", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "ConstWithSign", "rPart": ["(", "minus", ")", "?", "ConstN"]}, {"lPart": "Binary", "rPart": ["binarySign", "|", "minus"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "const16", "rPart": ["[0]", "[x]", "[0-9A-F]", "+"]}, {"lPart": "unarySign", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "charConst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "[']"]}, {"lPart": "stringConst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[]", ")", "|", "(", "[\\\\]", "[x]", "[0-9A-F]", "[0-9A-F]", ")", ")", "*", "[\"]"]}, {"lPart": "binarySign", "rPart": ["[+*/]", "|", "[^|&]", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"*\") return 50;\n if(s == \"/\") return 50;\n if(s == \"+\") return 40;\n if(s == \"-\") return 40;\n if(s == \"<\") return 35;\n if(s == \"<=\") return 35;\n if(s == \">\") return 35;\n if(s == \">=\") return 35;\n if(s == \"==\") return 30;\n if(s == \"!=\") return 30;\n if(s == \"&\") return 25;\n if(s == \"^\") return 24;\n if(s == \"|\") return 23;\n if(s === \"&&\") return 20;\n if(s == \"||\") return 10;\n if(s == \":=\") return 5;\n if(s == \"(\") return 1;\n return 0;\n}\n"}}},
{"FIO":"Чупин С.О.","Collection":"154523445",{"_id": {"$oid": "67be735eaf563521c9d595d8"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67be7468af563521c9d595e8"}, "rules": "noName", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["['']", "[]", "*", "['']"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67be77b3af563521c9d5961d"}, "rules": "lab1", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67cf1d72af563521c9d5d597"}, "rules": "laba2", "data": {"rList": [{"lPart": "opSign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "assign", "rPart": ["[:]", "[=]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67dd5cc8e0b22203e7cc1f05"}, "rules": "laba3", "data": {"rList": [{"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart", "othPart"]}, {"lPart": "Expr", "rPart": ["(", "operationUnary", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"?:\""]}, {"lPart": "endPart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "othPart", "rPart": ["~", "\":\""]}, {"lPart": "othPart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constStr", "|", "const2", "|", "const4", "|", "const10", "|", "constReal"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "operators", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "other", "rPart": ["\"any\"", "\"do\"", "operators"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67f66b1d8558742cb43348bf"}, "rules": "laba4", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operators", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart", "othPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "operators", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "operationUnary", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"?:\""]}, {"lPart": "endPart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "othPart", "rPart": ["~", "\":\""]}, {"lPart": "othPart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "type", "rPart": ["\"four\"", "|", "\"two\"", "|", "\"int\"", "|", "\"real\"", "|", "\"char\"", "|", "\"str\""]}, {"lPart": "ArgList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constStr", "|", "const2", "|", "const4", "|", "const10", "|", "constReal"]}, {"lPart": "other", "rPart": ["\"any\"", "\"do\"", "operators"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6808d1128558742cb43389a8"}, "rules": "laba5", "data": {"rList": [{"lPart": "prog", "rPart": ["(", "func", "|", "operators", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["\"four\"", "|", "\"two\"", "|", "\"int\"", "|", "\"real\"", "|", "\"char\"", "|", "\"str\""]}, {"lPart": "ArgList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["id", "\":=\"", "Expr", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart", "othPart"]}, {"lPart": "operator", "rPart": ["\"cycle\"", "\"(\"", "operator", "Expr", "\";\"", "operator", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "operator", "rPart": ["(", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "operators", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "operationUnary", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"?:\""]}, {"lPart": "endPart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "othPart", "rPart": ["~", "\":\""]}, {"lPart": "othPart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constStr", "|", "const2", "|", "const4", "|", "const10", "|", "constReal"]}, {"lPart": "other", "rPart": ["\"any\"", "\"do\"", "operators"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6809e3a68558742cb4339247"}, "rules": "laba6", "data": {"rList": [{"lPart": "prog", "rPart": ["{whileCnt=0;}", "(", "func", "|", "operators", ")", "+"]}, {"lPart": "func", "rPart": ["{toPFR(\"func\");toPFR(this.currentLexem[1]);}", "id", "\"=>\"", "(", "\"as\"", "type", ")", "?", "\"(\"", "ArgList", "?", "\")\"", "operators"]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "+", "\"}\""]}, {"lPart": "type", "rPart": ["{toPFR(this.currentLexem[1]);}", "(", "\"four\"", "|", "\"two\"", "|", "\"int\"", "|", "\"real\"", "|", "\"char\"", "|", "\"str\"", ")"]}, {"lPart": "ArgList", "rPart": ["type", "{toPFR(this.currentLexem[1]);}", "id", "(", "\",\"", "type", "{toPFR(this.currentLexem[1]);}", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\":=\"", "Expr", "{while(opStk.length>0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "operator", "rPart": ["\"?\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")", "endPart", "othPart"]}, {"lPart": "operator", "rPart": ["{ctlStk.push(++opCnt);}", "\"cycle\"", "\"(\"", "{toPFR(\"_cycle_\");}", "operator", "{toPFR(\"CycleDo_\"+peek(ctlStk));}", "Expr", "{toPFR(\"_cycle_\");}", "\";\"", "operator", "{toPFR(\"CycleExit_\"+peek(ctlStk)); toPFR(\"jmpOnFalse\"); }", "{toPFR(\"_cycle_\");}", "\")\"", "(", "operators", "|", "operator", ")", "{toPFR(\"CycleDo_\"+peek(ctlStk)); toPFR(\"jmp\"); toPFR(\"CycleExit_\" +peek(ctlStk)+\":\");}"]}, {"lPart": "operator", "rPart": ["(", "{toPFR(\"labelLoopFalse\"+peek(ctlStk)); toPFR(\"JumpFalse\");}", "\"quit\"", "\";\"", ")"]}, {"lPart": "operator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"by\"", "const", "\"do\"", "operators", "(", "\"leave\"", "\";\"", ")", "?", ")", "+", "other", "?", "\"}\""]}, {"lPart": "operator", "rPart": ["\"return\"", "Expr", "?", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "operationUnary", "|", "minus", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "endPart", "rPart": ["~", "\"?:\""]}, {"lPart": "endPart", "rPart": ["\"?:\"", "\"(\"", "Expr", "\")\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "othPart", "rPart": ["~", "\":\""]}, {"lPart": "othPart", "rPart": ["\":\"", "(", "operators", "|", "operator", ")"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}", ")", "?"]}, {"lPart": "const", "rPart": ["constChar", "|", "constStr", "|", "const2", "|", "const4", "|", "const10", "|", "constReal"]}, {"lPart": "other", "rPart": ["\"any\"", "\"do\"", "operators"]}, {"lPart": "id", "rPart": ["[$]", "(", "[0-9]", ")", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "operationUnary", "rPart": ["[!]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constStr", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "opSign", "rPart": ["[+*/]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n \\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\nvar opStk = []; //стек имен операндов для формирования операторов псевдокода\nvar ctlStk = []; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk = []; //стек номеров веток переключателей для формирования уникальных меток\nvar userSignStk = []; //стек имен функций как знаков операций, объявляемых пользователем\nvar opCnt = 0; // счетчик операторов для нумерации меток\nvar resCnt = 0; // счетчик результатов операций\nvar strRes = \"\"; // строка для вывода результата операции\nvar funcCnt = 0;\n\nfunction clear() {\n    opStk = [];\n    ctlStk = [];\n    resCnt = 0;\n    userSignStk = [];\n    funcCnt = 0;\n    opCnt = -1;\n    caseStk = [];\n}\n\nfunction Tracer() {\n    this.history = [];\n};\nTracer.prototype = {\n    put: function(b) {\n        this.history.push(b);\n    },\n    getAll: function() {\n        var r = \"\";\n        for (var i = 0; i < this.history.length; i++)\n            r += \" \" + this.history[i];\n        return r;\n    },\n    clear: function() {\n        this.history = [];\n    }\n};\nvar tracer = new Tracer();\n\nfunction toPFR(x) {\n    tracer.put(x);\n}\n\nfunction getPriority(s) {\n    if (s == \"(\") return 0;\n    if (s == \"+\") return 5;\n    if (s == \"-\") return 5;\n    if (s == \"*\") return 10;\n    if (s == \"/\") return 10;\n    return 0;\n}\n\nfunction peek(o) {\n    return o[o.length - 1];\n}\n"}}},
{"FIO":"Анисимов В.М.","Collection":"412233121",{"_id": {"$oid": "67baa8fcce6dd03692d09274"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "+3", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67baa9e9ce6dd03692d09279"}, "rules": "noName", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-ZA-z]", "+", "[0-9]", "{0,3}"]}], "extension": ""}}{"_id": {"$oid": "67baa9ebce6dd03692d0927b"}, "rules": "lab1", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Space", "rPart": ["[ ]", "*"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "{1}", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/<>]"]}, {"lPart": "Formatting", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "LogicOperations", "rPart": ["[&|]"]}, {"lPart": "Comment", "rPart": ["[//]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true}"]}, {"lPart": "Delimeter", "rPart": ["[;]"]}], "extension": ""}}{"_id": {"$oid": "67caa5f8af563521c9d5c4a1"}, "rules": "lab2", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Space", "rPart": ["[ ]", "*", "{ignoreLastWord=true}"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "Formatting", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "LogicOperations", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comment", "rPart": ["[//]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true}"]}, {"lPart": "OpenPer", "rPart": ["[(]"]}, {"lPart": "ClosePer", "rPart": ["[)]"]}, {"lPart": "OpenExpr", "rPart": ["[{]"]}, {"lPart": "CloseExpr", "rPart": ["[}]"]}, {"lPart": "Delimeter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["Ident", "\"<-\"", "Expression", "Delimeter"]}, {"lPart": "Const", "rPart": ["ConstDec", "|", "ConstFloat", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["Ident", "|", "Const"]}, {"lPart": "Expression", "rPart": ["OpenPer", "Expression", "ClosePer"]}, {"lPart": "Expression", "rPart": ["Operator", "(", "Operations", "Operator", ")", "?"]}, {"lPart": "LogicExpression", "rPart": ["OpenPer", "LogicExpression", "ClosePer"]}, {"lPart": "LogicExpression", "rPart": ["Operator", "(", "LogicOperations", "Operator", ")", "?"]}, {"lPart": "If", "rPart": ["\"when\"", "LogicExpression", "OperBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"other\"", "OperBlock"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "OpenPer", "LogicExpression", "ClosePer", "\"do\"", "OperBlock"]}, {"lPart": "OperBlock", "rPart": ["OpenExpr", "Oper", "+", "CloseExpr"]}, {"lPart": "OperBlock", "rPart": ["Oper"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "OpenExpr", "ByBlock", "+", "AnyDoBlock", "OpenExpr"]}, {"lPart": "ByBlock", "rPart": ["(", "\"by\"", "Const", "\"do\"", "OperBlock", ")"]}, {"lPart": "AnyDoBlock", "rPart": ["\"any do\"", "OperBlock"]}, {"lPart": "AnyDoBlock", "rPart": ["~", "\"any do\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "\"leave\""]}, {"lPart": "Types", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["OpenPer", "(", "Types", "?", "Ident", ")", "*", "ClosePer"]}, {"lPart": "Func", "rPart": ["Types", "Ident", "ArgList", "OpenExpr", "Oper", "*", "CloseExpr"]}], "extension": ""}}{"_id": {"$oid": "67df9c594635a960233ac722"}, "rules": "lab3", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Space", "rPart": ["[ ]", "*", "{ignoreLastWord=true}"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "Formatting", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "LogicOperations", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comment", "rPart": ["[//]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true}"]}, {"lPart": "OpenPer", "rPart": ["[(]"]}, {"lPart": "ClosePer", "rPart": ["[)]"]}, {"lPart": "OpenExpr", "rPart": ["[{]"]}, {"lPart": "CloseExpr", "rPart": ["[}]"]}, {"lPart": "Delimeter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["Ident", "\"<-\"", "Expression", "Delimeter"]}, {"lPart": "Const", "rPart": ["ConstDec", "|", "ConstFloat", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["Ident", "|", "Const"]}, {"lPart": "Expression", "rPart": ["OpenPer", "Expression", "ClosePer"]}, {"lPart": "Expression", "rPart": ["Operator", "(", "Operations", "Operator", ")", "?"]}, {"lPart": "LogicExpression", "rPart": ["OpenPer", "LogicExpression", "ClosePer"]}, {"lPart": "LogicExpression", "rPart": ["Operator", "(", "LogicOperations", "Operator", ")", "?"]}, {"lPart": "If", "rPart": ["\"when\"", "LogicExpression", "OperBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"other\"", "OperBlock"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "OpenPer", "LogicExpression", "ClosePer", "\"do\"", "OperBlock"]}, {"lPart": "OperBlock", "rPart": ["OpenExpr", "Oper", "+", "CloseExpr"]}, {"lPart": "OperBlock", "rPart": ["Oper"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "OpenExpr", "ByBlock", "+", "AnyDoBlock", "CloseExpr"]}, {"lPart": "ByBlock", "rPart": ["(", "\"by\"", "Const", "\"do\"", "OperBlock", ")"]}, {"lPart": "AnyDoBlock", "rPart": ["\"any do\"", "OperBlock"]}, {"lPart": "AnyDoBlock", "rPart": ["~", "\"any do\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "\"leave\""]}, {"lPart": "Types", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["(", "Types", "?", "Ident", ")", "*"]}, {"lPart": "Func", "rPart": ["Types", "Ident", "OpenPer", "ArgList", "ClosePer", "OpenExpr", "Oper", "*", "CloseExpr"]}], "extension": ""}}{"_id": {"$oid": "67f232fca600182c7517b8f7"}, "rules": "lab4", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Space", "rPart": ["[ ]", "*", "{ignoreLastWord=true}"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "Formatting", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "LogicOperations", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comment", "rPart": ["[//]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true}"]}, {"lPart": "OpenPer", "rPart": ["[(]"]}, {"lPart": "ClosePer", "rPart": ["[)]"]}, {"lPart": "OpenExpr", "rPart": ["[{]"]}, {"lPart": "CloseExpr", "rPart": ["[}]"]}, {"lPart": "Delimeter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["Ident", "\"<-\"", "Expression", "Delimeter"]}, {"lPart": "Const", "rPart": ["ConstDec", "|", "ConstFloat", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["Ident", "|", "Const"]}, {"lPart": "Expression", "rPart": ["OpenPer", "Expression", "ClosePer"]}, {"lPart": "Expression", "rPart": ["Operator", "(", "Operations", "Operator", ")", "?"]}, {"lPart": "LogicExpression", "rPart": ["OpenPer", "LogicExpression", "ClosePer"]}, {"lPart": "LogicExpression", "rPart": ["Operator", "(", "LogicOperations", "Operator", ")", "?"]}, {"lPart": "If", "rPart": ["\"when\"", "LogicExpression", "OperBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"other\"", "OperBlock"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "OpenPer", "LogicExpression", "ClosePer", "\"do\"", "OperBlock"]}, {"lPart": "OperBlock", "rPart": ["OpenExpr", "Oper", "+", "CloseExpr"]}, {"lPart": "OperBlock", "rPart": ["Oper"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "OpenExpr", "ByBlock", "+", "AnyDoBlock", "CloseExpr"]}, {"lPart": "ByBlock", "rPart": ["(", "\"by\"", "Const", "\"do\"", "OperBlock", ")"]}, {"lPart": "AnyDoBlock", "rPart": ["\"any do\"", "OperBlock"]}, {"lPart": "AnyDoBlock", "rPart": ["~", "\"any do\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "\"leave\""]}, {"lPart": "Types", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["(", "Types", "?", "Ident", ")", "*"]}, {"lPart": "Func", "rPart": ["Types", "Ident", "OpenPer", "ArgList", "ClosePer", "OpenExpr", "Oper", "*", "CloseExpr"]}], "extension": ""}}{"_id": {"$oid": "680491608558742cb4337ad4"}, "rules": "lab5", "data": {"rList": [{"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Space", "rPart": ["[ ]", "*", "{ignoreLastWord=true}"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "Formatting", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "LogicOperations", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Comment", "rPart": ["[//]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true}"]}, {"lPart": "OpenPer", "rPart": ["[(]"]}, {"lPart": "ClosePer", "rPart": ["[)]"]}, {"lPart": "OpenExpr", "rPart": ["[{]"]}, {"lPart": "CloseExpr", "rPart": ["[}]"]}, {"lPart": "Delimeter", "rPart": ["[;]"]}, {"lPart": "Assign", "rPart": ["Ident", "\"<-\"", "Expression", "Delimeter"]}, {"lPart": "Const", "rPart": ["ConstDec", "|", "ConstFloat", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["Ident", "|", "Const"]}, {"lPart": "Expression", "rPart": ["OpenPer", "Expression", "ClosePer"]}, {"lPart": "Expression", "rPart": ["Operator", "(", "Operations", "Operator", ")", "?"]}, {"lPart": "LogicExpression", "rPart": ["OpenPer", "LogicExpression", "ClosePer"]}, {"lPart": "LogicExpression", "rPart": ["Operator", "(", "LogicOperations", "Operator", ")", "?"]}, {"lPart": "If", "rPart": ["\"when\"", "LogicExpression", "OperBlock", "Else"]}, {"lPart": "Else", "rPart": ["\"other\"", "OperBlock"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Cycle", "rPart": ["\"while\"", "OpenPer", "LogicExpression", "ClosePer", "\"do\"", "OperBlock"]}, {"lPart": "OperBlock", "rPart": ["OpenExpr", "Oper", "+", "CloseExpr"]}, {"lPart": "OperBlock", "rPart": ["Oper"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "OpenExpr", "ByBlock", "+", "AnyDoBlock", "CloseExpr"]}, {"lPart": "ByBlock", "rPart": ["(", "\"by\"", "Const", "\"do\"", "OperBlock", ")"]}, {"lPart": "AnyDoBlock", "rPart": ["\"any do\"", "OperBlock"]}, {"lPart": "AnyDoBlock", "rPart": ["~", "\"any do\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "\"leave\""]}, {"lPart": "Types", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["(", "Types", "?", "Ident", ")", "*"]}, {"lPart": "Func", "rPart": ["Types", "Ident", "OpenPer", "ArgList", "ClosePer", "OpenExpr", "Oper", "*", "CloseExpr"]}], "extension": ""}}{"_id": {"$oid": "681716678558742cb433b07c"}, "rules": "lab6", "data": {"rList": [{"lPart": "Func", "rPart": ["{reset();}", "Types", "Ident", "OpenPer", "ArgList", "ClosePer", "OpenExpr", "Oper", "*", "CloseExpr"]}, {"lPart": "Assign", "rPart": ["{toPFR(this.currentLexem[1]);}", "Ident", "\"<-\"", "Expression", "{toPFR(\"<-\");}", "Delimeter"]}, {"lPart": "Const", "rPart": ["ConstDec", "|", "ConstFloat", "|", "ConstChar"]}, {"lPart": "Operator", "rPart": ["Ident", "|", "Const"]}, {"lPart": "Expression", "rPart": ["BegExpression", "EndExpression"]}, {"lPart": "BegExpression", "rPart": ["{opStk.push(\"(\");}", "OpenPer", "Expression", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop();}", "ClosePer"]}, {"lPart": "BegExpression", "rPart": ["{toPFR(this.currentLexem[1]);}", "Operator"]}, {"lPart": "EndExpression", "rPart": ["{if( (opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1])) ) toPFR(opStk.pop()); opStk.push(this.currentLexem[1]);}", "(", "Operations", "|", "LogicOperations", ")", "Expression", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpression", "rPart": []}, {"lPart": "If", "rPart": ["{condStk.push(++condCnt); toPFR(\"CondLabel0_\"+peek(condStk));}", "\"when\"", "Expression", "{toPFR(\"CondLabel1_\"+peek(condStk)+\":\");toPFR(\"JmpFalse\");}", "OperBlock", "{toPFR(\"CondLabel0_\"+peek(condStk)+\":\");toPFR(\"Fin\");toPFR(\"CondLabel1_\"+condStk.pop());}", "Else"]}, {"lPart": "Else", "rPart": ["{toPFR(\"Else\");}", "\"other\"", "OperBlock"]}, {"lPart": "Else", "rPart": ["~", "\"other\""]}, {"lPart": "Cycle", "rPart": ["{cycleStk.push(++cycleCnt); toPFR(\"CLabel0_\"+peek(cycleStk));}", "\"while\"", "OpenPer", "Expression", "{toPFR(\"CLabel1_\"+peek(cycleStk)+\":\");toPFR(\"JmpFalse\");}", "ClosePer", "\"do\"", "OperBlock", "{toPFR(\"CLabel0_\"+peek(cycleStk)+\":\"); toPFR(\"Jmp\"); toPFR(\"CLabel1_\"+cycleStk.pop());}"]}, {"lPart": "OperBlock", "rPart": ["OpenExpr", "Oper", "+", "CloseExpr"]}, {"lPart": "OperBlock", "rPart": ["Oper"]}, {"lPart": "Switch", "rPart": ["\"switch\"", "Expression", "OpenExpr", "ByBlock", "+", "AnyDoBlock", "CloseExpr"]}, {"lPart": "ByBlock", "rPart": ["(", "\"by\"", "Const", "\"do\"", "OperBlock", ")"]}, {"lPart": "AnyDoBlock", "rPart": ["\"any do\"", "OperBlock"]}, {"lPart": "AnyDoBlock", "rPart": ["~", "\"any do\""]}, {"lPart": "Oper", "rPart": ["Assign", "|", "If", "|", "Cycle", "|", "Switch", "|", "\"leave\""]}, {"lPart": "Types", "rPart": ["\"void\"", "|", "\"int\"", "|", "\"float\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["(", "Types", "?", "Ident", ")", "*"]}, {"lPart": "Ident", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "Space", "rPart": ["[ ]", "*", "{ignoreLastWord=true}"]}, {"lPart": "ConstDec", "rPart": ["[0]", "|", "[1-9]", "[0-9]", "*"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+", "(", "[e]", "[0-9]", "+", ")", "?"]}, {"lPart": "ConstChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Operations", "rPart": ["[-+*/%]"]}, {"lPart": "Formatting", "rPart": ["[\\n\\r\\t]", "+", "{ignoreLastWord=true}"]}, {"lPart": "OpenPer", "rPart": ["[(]"]}, {"lPart": "ClosePer", "rPart": ["[)]"]}, {"lPart": "OpenExpr", "rPart": ["[{]"]}, {"lPart": "CloseExpr", "rPart": ["[}]"]}, {"lPart": "Delimeter", "rPart": ["[;]"]}, {"lPart": "Comment", "rPart": ["[#]", "[]", "*", "[\\r\\n]", "{ignoreLastWord=true}"]}, {"lPart": "LogicOperations", "rPart": ["(", "[<>]", "[=]", "?", ")", "|", "(", "[!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}], "extension": "var ignoreLastWord;\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\n\nvar opStk = [];\nvar cycleStk=[];\nvar cycleCnt = 0;\nvar condStk=[];\nvar condCnt = 0;\n\nfunction reset() {\n  cycleStk=[];\n  condStk=[];\n  condCnt=0;\n  cycleCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n switch(s) {\n case \"(\": \n  return 1;\n case \"*\":\n case \"/\":\n case \"%\":\n  return 2;\n case \"+\":\n case \"-\":\n  return 3;\n case \"<\":\n case \">\":\n case \"<=\":\n case \">=\":\n  return 4;\n case \"==\":\n case \"!=\":\n  return 5;\n case \"&&\":\n  return 6;\n case \"||\":\n  return 7;\n }\n return 0;\n}\n\n\n"}}{"_id": {"$oid": "681718618558742cb433b084"}, "rules": "Sample6", "data": {"rList": [{"lPart": "OperatorList", "rPart": ["{whileCnt=0;}", "(", "Operator", ")", "+"]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++whileCnt);toPFR(\"Label0_\"+peek(ctlStk)+\":\");}", "\"while\"", "\"(\"", "Expr", "{toPFR(\"Label1_\"+peek(ctlStk));toPFR(\"JmpOnFalse\");}", "\")\"", "Operator", "{toPFR(\"Label0_\"+peek(ctlStk));toPFR(\"Jmp\");toPFR(\"Label1_\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "id"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());opStk.push(this.currentLexem[1]);}", "sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "EndExpr", "rPart": []}, {"lPart": "const", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[-+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n// пример преобразования выражений, а также операторов присваивания и цикла в ПФЗ\n// в функции getPriority пока учтены только арифметические операции\n\nvar ignoreLastWord;\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nvar opStk = [];\nvar ctlStk=[];\nvar whileCnt=0;\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \"+\") return 10;\n if(s == \"-\") return 10;\n if(s == \"*\") return 20;\n if(s == \"/\") return 20;\n return 0;\n}\n"}}},
{"FIO":"Мазин П.К.","Collection":"151444131",{"_id": {"$oid": "67b6fab6ce6dd03692d088e1"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67bde861af563521c9d59424"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "opSign", "rPart": ["[-+/*]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d0edf0af563521c9d5dd77"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "opSign", "rPart": ["[-+/*]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "expr", "\";\""]}, {"lPart": "expr", "rPart": ["allConst"]}, {"lPart": "allConst", "rPart": ["constReal", "|", "const10", "|", "const2", "|", "const4", "|", "constChar", "|", "constString"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "program", "rPart": ["statement", "*"]}, {"lPart": "operator", "rPart": ["allConst", "\";\""]}, {"lPart": "statement", "rPart": ["assign", "|", "operator"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2ba4c4635a960233ad9be"}, "rules": "lab3", "data": {"rList": [{"lPart": "program", "rPart": ["block", "*"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "expr", "\";\""]}, {"lPart": "operator", "rPart": ["allConst", "\";\""]}, {"lPart": "ifelse", "rPart": ["\"at\"", "expr", "\"do\"", "(", "block", "|", "operators", ")", "endPart"]}, {"lPart": "expr", "rPart": ["(", "minus", "|", "logicno", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "allConst", "rPart": ["constReal", "|", "const10", "|", "const2", "|", "const4", "|", "constChar", "|", "constString"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "block", "|", "operators", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["allConst"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "expr", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicno", "rPart": ["[!]"]}, {"lPart": "opSign", "rPart": ["[+/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "operators", "rPart": ["assign", "|", "operator", "|", "ifelse"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f665fa8558742cb433485b"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["(", "func", "|", "operators", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "operators", "rPart": ["assign", "|", "operator", "|", "ifelse", "|", "cycle", "|", "(", "\"stop;\"", ")", "|", "case", "|", "return"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "expr", "\";\""]}, {"lPart": "operator", "rPart": ["allConst", "\";\""]}, {"lPart": "ifelse", "rPart": ["\"at\"", "expr", "\"do\"", "(", "block", "|", "operators", ")", "endPart"]}, {"lPart": "cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "allConst", "\":\"", "allConst", "\")\"", "(", "operators", "|", "block", ")"]}, {"lPart": "case", "rPart": ["\"??\"", "expr", "\"{\"", "(", "\"?=\"", "allConst", "\":\"", "block", "(", "\"quit;\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "block", ")", "?", "\"}\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["(", "minus", "|", "logicno", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "allConst", "rPart": ["constReal", "|", "const10", "|", "const2", "|", "const4", "|", "constChar", "|", "constString"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "block", "|", "operators", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["allConst"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "expr", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicno", "rPart": ["[!]"]}, {"lPart": "opSign", "rPart": ["[+/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6808cd258558742cb433895c"}, "rules": "lab5", "data": {"rList": [{"lPart": "program", "rPart": ["(", "func", "|", "operators", ")", "+"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "ArgList", "?", "\")\"", "block"]}, {"lPart": "operators", "rPart": ["assign", "|", "operator", "|", "ifelse", "|", "cycle", "|", "(", "\"stop;\"", ")", "|", "case", "|", "return"]}, {"lPart": "block", "rPart": ["\"{\"", "operators", "+", "\"}\""]}, {"lPart": "assign", "rPart": ["\"let\"", "id", "\"on\"", "expr", "\";\""]}, {"lPart": "operator", "rPart": ["allConst", "\";\""]}, {"lPart": "ifelse", "rPart": ["\"at\"", "expr", "\"do\"", "(", "block", "|", "operators", ")", "endPart"]}, {"lPart": "cycle", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "allConst", "\":\"", "allConst", "\")\"", "(", "operators", "|", "block", ")"]}, {"lPart": "case", "rPart": ["\"??\"", "expr", "\"{\"", "(", "\"?=\"", "allConst", "\":\"", "block", "(", "\"quit;\"", ")", "?", ")", "+", "(", "\"?~\"", "\":\"", "block", ")", "?", "\"}\""]}, {"lPart": "return", "rPart": ["\"return\"", "expr", "?", "\";\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "expr", "rPart": ["(", "minus", "|", "logicno", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "allConst", "rPart": ["constReal", "|", "const10", "|", "const2", "|", "const4", "|", "constChar", "|", "constString"]}, {"lPart": "endPart", "rPart": ["\"or\"", "\"do\"", "(", "block", "|", "operators", ")"]}, {"lPart": "endPart", "rPart": ["~", "\"or\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "BegExpr", "rPart": ["allConst"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "(", "opSign", "|", "compare", "|", "logic", "|", "minus", ")", "expr", ")", "?"]}, {"lPart": "id", "rPart": ["[$]", "[0-9]", "{0,3}", "[a-zA-Z]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "const2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "const4", "rPart": ["[0]", "[f]", "[0-3]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logicno", "rPart": ["[!]"]}, {"lPart": "opSign", "rPart": ["[+/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Федотов Д.В.","Collection":"514124333",{"_id": {"$oid": "67b9d994ce6dd03692d09175"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bb8f85ce6dd03692d09642"}, "rules": "Lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d0788aaf563521c9d5dc29"}, "rules": "Lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "sign", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "id", "|", "const10", "|", "constreal", "|", "constexp", "|", "charconst", ")", "\";\""]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "logicOperator", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "[!]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e2f0a84635a960233adc2a"}, "rules": "Lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "Expression", ")", "\";\""]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const10", "|", "constreal", "|", "constexp", "|", "charconst"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f5f5b68558742cb433422d"}, "rules": "Lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "Expression", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const10", "|", "constreal", "|", "constexp", "|", "charconst"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Operator", "rPart": ["(", "Statement", "|", "Break", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "Conditional", "rPart": ["\"by\"", "\"(\"", "Expression", "\")\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"else\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Statement", "?", "\";\"", "Expression", "?", "\";\"", "Statement", "?", "\")\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Operator"]}, {"lPart": "Break", "rPart": ["\"quit\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f6079e8558742cb43342b6"}, "rules": "Lab5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constreal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constexp", "rPart": ["(", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")", "|", "(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "+", ")", ")", "[E]", "[-+]", "?", "[0-9]", "+"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Statement", "rPart": ["id", "\":=\"", "(", "Expression", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n\\r]", "{ignoreLastWord=true;}"]}, {"lPart": "unaryMath", "rPart": ["[-+]"]}, {"lPart": "binaryMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unaryLogic", "rPart": ["[!]"]}, {"lPart": "binaryLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Expression", "rPart": ["BeginExpression", "EndExpression"]}, {"lPart": "BeginExpression", "rPart": ["Unary", "?", "(", "id", "|", "Constant", "|", "\"(\"", "Expression", "\")\"", ")"]}, {"lPart": "EndExpression", "rPart": ["(", "(", "Binary", "|", "unaryMath", ")", "Expression", ")", "?"]}, {"lPart": "Constant", "rPart": ["const10", "|", "constreal", "|", "constexp", "|", "charconst"]}, {"lPart": "Unary", "rPart": ["unaryMath", "|", "unaryLogic"]}, {"lPart": "Binary", "rPart": ["binaryMath", "|", "compare", "|", "binaryLogic"]}, {"lPart": "Operator", "rPart": ["(", "Declaration", "|", "Statement", "|", "Break", "|", "Return", "|", "(", "id", "ParamList", ")", ")", "\";\""]}, {"lPart": "Operator", "rPart": ["Conditional", "|", "Cycle", "|", "Switch"]}, {"lPart": "Operator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Conditional", "rPart": ["\"by\"", "\"(\"", "Expression", "\")\"", "Operator", "ConditionalElse"]}, {"lPart": "ConditionalElse", "rPart": ["\"else\"", "Operator"]}, {"lPart": "ConditionalElse", "rPart": ["~", "\"else\""]}, {"lPart": "Cycle", "rPart": ["\"cycle\"", "\"(\"", "Statement", "?", "\";\"", "Expression", "?", "\";\"", "Statement", "?", "\")\"", "Operator"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expression", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Constant", "\":\"", "Operator"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Operator"]}, {"lPart": "Break", "rPart": ["\"quit\""]}, {"lPart": "Function", "rPart": ["Type", "id", "\"(\"", "ArgList", "?", "\")\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"exp\"", "|", "\"char\""]}, {"lPart": "ArgList", "rPart": ["Type", "id", "(", "\",\"", "Type", "id", ")", "*"]}, {"lPart": "Declaration", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expression", "?"]}, {"lPart": "ParamList", "rPart": ["\"(\"", "(", "Expression", "(", "\",\"", "Expression", ")", "*", ")", "?", "\")\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Будзинский Д.А.","Collection":"321525432",{"_id": {"$oid": "67b6e84dce6dd03692d08822"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "67b6e9f2ce6dd03692d0882f"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67b6ea68ce6dd03692d08840"}, "rules": "Лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "AssignSign", "rPart": ["[=]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67d45aace0b22203e7cbf972"}, "rules": "Лаба2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", "|", "[\\\\]", "[\"]", ")", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[\\\\]", "[rnt0]", ")", "[']", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "keywords", "rPart": ["(", "[=]", "[>]", ")", "|", "(", "[?]", "?", "[:]", "?", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "comment", "rPart": ["[//]", "[//]", "+", "[]", "*", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["(", "[{]", "[]", "*", "[}]", ")", "|", "(", "[(]", "[]", "*", "[}]", ")"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67ec0d88a600182c7517aac7"}, "rules": "Лаба3другая", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", "|", "[\\\\]", "[\"]", ")", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[\\\\]", "[rnt0]", ")", "[']", ")"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "somebinary", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "somebinary", "|", "unary", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "EndExpr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "SignOfOperation", "|", "unary", ")", "BegExpr", ")", "?"]}, {"lPart": "if", "rPart": ["\"?\"", "Expr", "BlockOperator", "(", "\"?:\"", "Expr", "BlockOperator", ")", "?", "(", "\":\"", "BlockOperator", ")", "?"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "if", "|", "quit", "|", "cycle"]}, {"lPart": "BlockOperator", "rPart": ["\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "Assign", "|", "(", "Expr", "\";\"", ")", ")", "?", "\")\"", "BlockOperator", "quit", "?"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67ede56aa600182c7517b23f"}, "rules": "Лаба3", "data": {"rList": [{"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "if", "|", "quit", "|", "cycle"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "Expr", "BlockOperator", "(", "\"?:\"", "Expr", "BlockOperator", ")", "?", "(", "\":\"", "BlockOperator", ")", "?"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "Assign", "|", "(", "Expr", "\";\"", ")", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "Expr", "rPart": ["(", "somebinary", "|", "unary", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "EndExpr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "SignOfOperation", "|", "unary", ")", "BegExpr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "somebinary", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", "|", "[\\\\]", "[\"]", ")", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[\\\\]", "[rnt0]", ")", "[']", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67fcf9378558742cb4336a78"}, "rules": "Лаба4", "data": {"rList": [{"lPart": "prog", "rPart": ["Operator", "+", "|", "Function", "*"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"(\"", "FuncArgList", "?", "\")\"", "BlockOperator"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "if", "|", "quit", "|", "cycle", "|", "fin", "|", "choice"]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "Expr", "BlockOperator", "Else", "Elseif"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "Assign", "|", "(", "Expr", "\";\"", ")", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "fin", "rPart": ["\"fin;\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "Expr", "\"{\"", "Case", "+", "Default", "?", "\"}\"", "\"end\""]}, {"lPart": "FuncArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Expr", "rPart": ["(", "somebinary", "|", "unary", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "Else", "rPart": ["\"?:\"", "Expr", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\"?:\""]}, {"lPart": "Elseif", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "Elseif", "rPart": ["~", "\":\""]}, {"lPart": "BegExpr", "rPart": ["id", "|", "const", "|", "(", "\"(\"", "EndExpr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "SignOfOperation", "|", "unary", "|", "somebinary", ")", "BegExpr", ")", "?"]}, {"lPart": "Case", "rPart": ["\"option\"", "const", "\":\"", "\"{\"", "Operator", "*", "\"}\""]}, {"lPart": "Default", "rPart": ["\"nooption\"", "BlockOperator", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "somebinary", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", "|", "[\\\\]", "[\"]", ")", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[\\\\]", "[rnt0]", ")", "[']", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "6818f4988558742cb433bbda"}, "rules": "Лаба5", "data": {"rList": [{"lPart": "prog", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "(", "\"as\"", "Type", ")", "?", "\"(\"", "FuncArgList", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "FuncArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "if", "|", "quit", "|", "cycle", "|", "fin", "|", "choice"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "Expr", "BlockOperator", "Else", "Elseif"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "Assign", "|", "Expr", ")", "?", "\";\"", "(", "(", "Expr", ")", "?", ")", "\";\"", "(", "Assign", "|", "Expr", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "fin", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "Expr", "\"{\"", "Case", "+", "Default", "?", "\"}\"", "\"end\""]}, {"lPart": "Expr", "rPart": ["(", "somebinary", "|", "unary", ")", "?", "BegExpr", "EndExpr"]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Else", "rPart": ["\"?:\"", "Expr", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\"?:\""]}, {"lPart": "Elseif", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "BegExpr", "rPart": ["(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")", "|", "const", "|", "(", "\"(\"", "EndExpr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "SignOfOperation", "|", "somebinary", ")", "BegExpr", ")", "?"]}, {"lPart": "Case", "rPart": ["\"option\"", "const", "\":\"", "Operator", "*"]}, {"lPart": "Default", "rPart": ["\"nooption\"", "BlockOperator", "*"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "somebinary", "rPart": ["[-]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", "|", "[\\\\]", "[\"]", ")", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[\\\\]", "[rnt0]", ")", "[']", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68198f638558742cb433bd29"}, "rules": "Лаба10", "data": {"rList": [{"lPart": "prog", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "(", "\"as\"", "Type", ")", "?", "\"(\"", "FuncArgList", "?", "\")\"", "\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\""]}, {"lPart": "FuncArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "if", "|", "quit", "|", "cycle", "|", "fin", "|", "choice"]}, {"lPart": "Assign", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "if", "rPart": ["\"?\"", "Expr", "BlockOperator", "Else", "Elseif"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "cycle", "rPart": ["\"cycle\"", "\"(\"", "(", "Assign", "|", "Expr", ")", "?", "\";\"", "(", "(", "Expr", ")", "?", ")", "\";\"", "(", "Assign", "|", "Expr", ")", "?", "\")\"", "BlockOperator"]}, {"lPart": "fin", "rPart": ["\"fin\"", "\";\""]}, {"lPart": "choice", "rPart": ["\"choice\"", "Expr", "\"{\"", "Case", "+", "Default", "?", "\"}\"", "\"end\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BlockOperator", "rPart": ["(", "\"{\"", "Operator", "*", "\"}\"", ")", "|", "Operator"]}, {"lPart": "Else", "rPart": ["\"?:\"", "Expr", "BlockOperator"]}, {"lPart": "Else", "rPart": ["~", "\"?:\""]}, {"lPart": "Elseif", "rPart": ["\":\"", "BlockOperator"]}, {"lPart": "BegExpr", "rPart": ["Term"]}, {"lPart": "BegExpr", "rPart": ["(", "unary", "|", "somebinary", ")", "Term"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "logic", "|", "SignOfOperation", "|", "somebinary", ")", "Expr", ")", "?"]}, {"lPart": "Case", "rPart": ["\"option\"", "const", "\":\"", "Operator", "*"]}, {"lPart": "Default", "rPart": ["\"nooption\"", "BlockOperator", "*"]}, {"lPart": "Term", "rPart": ["(", "id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?", ")"]}, {"lPart": "Term", "rPart": ["const", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "[0-9A-Za-z]", "*"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-3]", "+", ")"]}, {"lPart": "const", "rPart": ["(", "[0]", "[c]", "[0-7]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "const", "rPart": ["(", "[\"]", "(", "[]", "+", "|", "[\\\\]", "[\"]", ")", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[\\\\]", "[rnt0]", ")", "[']", ")"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "somebinary", "rPart": ["[-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "[>]", "|", "[<]"]}, {"lPart": "SignOfOperation", "rPart": ["[+*/]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Кулишов А.А.","Collection":"252334414",{"_id": {"$oid": "67c406dcaf563521c9d5ae08"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a0-zA-Z0-Z9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[01]", "+", "\"b\"", "|", "[0-3]", "+", "\"q\"", "|", "[0-9]", "+", "|", "[0-9]", "+", "(", ".[0-9]+)?)"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c406e5af563521c9d5ae0a"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": [":", "(", "[0-1]", "+", "\"b\"", ")", "|", "(", "[0-3]", "+", "\"q\"", ")", "|", "(", "[0-9]", "+", "(", "\".\"", "[0-9]", "*", ")", "?", ")", "|", "(", "\"\\\"\"", "[^\\\"]", "*", "\"\\\"\"", ")", "|", "(", "\"'\"", "[^']", "\"'\"", ")", ""]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "assign", "rPart": [":", "\"<-\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c40e33af563521c9d5ae5f"}, "rules": "bomba", "data": {"rList": [{"lPart": "Oper", "rPart": ["id", "\"<-\"", "(", "Exspression", ")", "\";\""]}, {"lPart": "Exspression", "rPart": ["unarniy", "?", "(", "id", "|", "constnti", "|", "\"(\"", "Exspression", "\")\"", ")", "(", "(", "mixed", "|", "binary", ")", "Exspression", ")", "?"]}, {"lPart": "unarniy", "rPart": ["mixed", "|", "unaryOperation"]}, {"lPart": "constnti", "rPart": ["constFloat", "|", "constChar", "|", "constString", "|", "constBin", "|", "constQuad", "|", "constInt"]}, {"lPart": "binary", "rPart": ["binLogic", "|", "binCheck", "|", "binArif"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unaryOperation", "rPart": ["[!]"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constString", "rPart": ["[`]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\][\\][x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[`]"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "binLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c46495af563521c9d5b31f"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsSingleFSM", "saving": "", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67fb68058558742cb4335c77"}, "rules": "lab4", "data": {"rList": [{"lPart": "program", "rPart": ["operator", "*"]}, {"lPart": "quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "leave", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "operator", "rPart": ["cond", "|", "assign", "|", "cycle", "|", "switch"]}, {"lPart": "switch", "rPart": ["\"??\"", "\"(\"", "(", "Exspression", ")", "\")\"", "\"{\"", "(", "\"?=\"", "constnti", "\":\"", "\"{\"", "(", "\"{\"", "operator", "*", "\"}\"", "\";\"", "quit", ")", "\"}\"", ")", "+", "\"}\"", "(", "\"?~\"", "\"{\"", "operator", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "cond", "rPart": ["\"in\"", "\"(\"", "Exspression", "\")\"", "\"then\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")", "\"not\"", "(", "(", "\"{\"", "operator", "*", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "Exspression", "rPart": ["unarniy", "?", "(", "id", "|", "constnti", "|", "\"(\"", "Exspression", "\")\"", ")", "(", "(", "mixed", "|", "binary", ")", "Exspression", ")", "?"]}, {"lPart": "assign", "rPart": ["id", "\"<-\"", "(", "Exspression", ")", "\";\""]}, {"lPart": "cycle", "rPart": ["\"while\"", "\"(\"", "Exspression", "\")\"", "\"do\"", "(", "(", "\"{\"", "operator", "*", "leave", "?", "\"}\"", ")", "|", "operator", ")"]}, {"lPart": "constnti", "rPart": ["constFloat", "|", "constChar", "|", "constString", "|", "constBin", "|", "constQuad", "|", "constInt"]}, {"lPart": "unarniy", "rPart": ["mixed", "|", "unaryOperation"]}, {"lPart": "binary", "rPart": ["binLogic", "|", "binCheck", "|", "binArif"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "constFloat", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constChar", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "constString", "rPart": ["[`]", "(", "[]", "|", "(", "[\\\\]", "[\"`\\\\]", ")", "|", "(", "[\\\\]", "[trn]", ")", "|", "(", "[\\][\\][x]", "[0-9a-fA-f]", "[0-9a-fA-F]", ")", ")", "*", "[`]"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constQuad", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "mixed", "rPart": ["[-]"]}, {"lPart": "unaryOperation", "rPart": ["[!]"]}, {"lPart": "binLogic", "rPart": ["(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")"]}, {"lPart": "binCheck", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "binArif", "rPart": ["(", "[*+/]", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[]", "*", "[\\n\\r]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Гармазов А.А.","Collection":"553421432",{"_id": {"$oid": "67c08fa7af563521c9d5a531"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67c45499af563521c9d5b1c5"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c454a4af563521c9d5b1c7"}, "rules": "noName", "data": {"rList": [{"lPart": "Id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}], "extension": ""}}{"_id": {"$oid": "67c46086af563521c9d5b29b"}, "rules": "Lab1", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimetr", "rPart": ["[;]"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[\\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67d73a7ae0b22203e7cc0745"}, "rules": "Lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]", "*"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "delimeter", "rPart": ["[;,:]"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "unary", "rPart": ["[-]", "|", "[!~]"]}, {"lPart": "binary", "rPart": ["[+-*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "|", "[=]", "?", ")"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}], "extension": ""}}{"_id": {"$oid": "67e9c4254635a960233afd2c"}, "rules": "Lab3", "data": {"rList": [{"lPart": "Prog", "rPart": ["(", "CmpOp", "|", "AssignOp", "|", "CycleOp", "|", "Operator", ")", "+"]}, {"lPart": "CmpOp", "rPart": ["\"at\"", "\"(\"", "Expr", "\")\"", "\"do\"", "OB", "(", "\"or\"", "\"do\"", "OB", ")", "?"]}, {"lPart": "AssignOp", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "Id", "\")\"", "\";\""]}, {"lPart": "CycleOp", "rPart": ["\"cycle\"", "\"(\"", "(", "AssignOp", "|", "\";\"", ")", "(", "Expr", ")", "\";\"", "(", "AssignOp", ")", "?", "\")\"", "OB"]}, {"lPart": "Operator", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "unary", "|", "minus", ")", "?", "BegExpr", "EndExpr", "?"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Prog", "\"}\"", ")", "|", "(", "AssignOp", "|", "CmpOp", "|", "CycleOp", "|", "Operator", ")"]}, {"lPart": "BegExpr", "rPart": ["Id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "Const", "rPart": ["constInt", "|", "constReal", "|", "constStr", "|", "constChar"]}, {"lPart": "EndExpr", "rPart": ["(", "binary", "Expr", ")", "|", "(", "minus", "Expr", ")", "|", "(", "logic", "Expr", ")"]}, {"lPart": "Id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[x]", "[01]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "binary", "rPart": ["[+-*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "format", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}], "extension": ""}}{"_id": {"$oid": "67ea3e044635a960233b00ab"}, "rules": "Kuch", "data": {"rList": [{"lPart": "Id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "delimeter", "rPart": ["[;,:]"]}, {"lPart": "format", "rPart": ["[\\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const2", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "const4", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "const10", "rPart": ["[0-9]", "+"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "brackets", "rPart": ["[{]", "|", "[}]", "|", "[(]", "|", "[)]"]}, {"lPart": "unary", "rPart": ["[!]"]}, {"lPart": "Const", "rPart": ["const2", "|", "const4", "|", "const10", "|", "constChar"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\""]}, {"lPart": "Prog", "rPart": ["(", "CmpOp", "|", "AssignOp", "|", "CycleOp", ")", "+"]}, {"lPart": "CmpOp", "rPart": ["\"at\"", "\"(\"", "Expr", "\")\"", "\"do\"", "\"{\"", "Prog", "\"}\"", "(", "\"or\"", "\"do\"", "\"{\"", "Prog", "\"}\"", ")", "?"]}, {"lPart": "AssignOp", "rPart": ["\"set\"", "\"(\"", "Expr", "\",\"", "id", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["unary", "*", "BegExpr", "EndExpr", "?"]}, {"lPart": "BegExpr", "rPart": ["id", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "operation", "Expr", ")", "|", "(", "compare", "Expr", ")", "|", "(", "logic", "Expr", ")"]}, {"lPart": "CycleOp", "rPart": ["\"cycle\"", "\"(\"", "(", "AssignOp", ")", "?", "\";\"", "(", "Expr", ")", "?", "\";\"", "(", "AssignOp", ")", "?", "\")\"", "\"{\"", "Prog", "\"}\"", "(", "\"quit\"", "\";\"", ")", "?"]}], "extension": ""}}{"_id": {"$oid": "67f55e7a8558742cb433404f"}, "rules": "Lab4", "data": {"rList": [{"lPart": "Prog", "rPart": ["FunDecl", "+"]}, {"lPart": "FunDecl", "rPart": ["Id", "\"=>\"", "Fun"]}, {"lPart": "Fun", "rPart": ["(", "\"(\"", "FormalArgs", "?", "\")\"", ")", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "Entering", "rPart": ["AssignOp", "|", "CmpOp", "|", "CycleOp", "|", "SwitchOp", "|", "Quit", "|", "Return"]}, {"lPart": "FormalArgs", "rPart": ["Id", "(", "\",\"", "Id", ")", "*"]}, {"lPart": "AssignOp", "rPart": ["\"set\"", "\"(\"", "\"T\"", "?", "Expr", "\",\"", "Id", "\")\"", "\";\""]}, {"lPart": "CmpOp", "rPart": ["\"at\"", "\"(\"", "Expr", "\")\"", "\"do\"", "OB", "OrPart"]}, {"lPart": "CycleOp", "rPart": ["\"cycle\"", "\"(\"", "(", "AssignOp", "|", "\";\"", ")", "(", "Expr", ")", "?", "\";\"", "(", "AssignOp", "|", "\"\"", ")", "\")\"", "OB"]}, {"lPart": "SwitchOp", "rPart": ["\"select\"", "Expr", "\"{\"", "SwitchCase", "+", "\"}\""]}, {"lPart": "Quit", "rPart": ["\"quit\"", "\";\""]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Expr", "rPart": ["Term", "EndExpr", "?"]}, {"lPart": "OB", "rPart": ["(", "Entering", ")", "|", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "OrPart", "rPart": ["\"or\"", "\"do\"", "OB"]}, {"lPart": "OrPart", "rPart": ["~", "\"or\""]}, {"lPart": "Term", "rPart": ["(", "unary", "|", "minus", ")", "?", "BegExpr"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "SwitchConst", "\")\"", "OB", "*", "Break", "?"]}, {"lPart": "BegExpr", "rPart": ["Id", "(", "\"(\"", "ActualArgs", "?", "\")\"", ")", "?", "|", "Const", "|", "\"(\"", "Expr", "\")\""]}, {"lPart": "EndExpr", "rPart": ["(", "binary", "Expr", ")", "|", "(", "minus", "Expr", ")", "|", "(", "logic", "Expr", ")"]}, {"lPart": "SwitchConst", "rPart": ["Const", "|", "false"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constReal", "|", "constStr", "|", "constChar"]}, {"lPart": "false", "rPart": ["\"false\""]}, {"lPart": "Break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "ActualArgs", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Id", "rPart": ["[A-Za-z]", "[0-9]", "{0,3}", "[A-Za-z]"]}, {"lPart": "unary", "rPart": ["[!~]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "constInt", "rPart": ["(", "[2]", "[x]", "[01]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "constReal", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "constStr", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[\"]"]}, {"lPart": "constChar", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[nrt\\\\]", "|", "[x]", "[0-9A-Fa-f]", "[0-9A-Fa-f]", ")", "*", "[']"]}, {"lPart": "binary", "rPart": ["[+-*/]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "format", "rPart": ["[\\r\\n\\t ]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comm", "rPart": ["[/]", "[/]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"void\""]}], "extension": ""}}},
{"FIO":"Миронов А.А.","Collection":"212141134",{"_id": {"$oid": "67ab5bc2ce6dd03692d07831"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67b6ee6fce6dd03692d08869"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "*", "{ignoreLastWord = true}"]}, {"lPart": "const", "rPart": ["[-+]", "?", "[0-9]", "+"]}, {"lPart": "const", "rPart": ["[-+]", "?", "[0-9]", "*", "[.]", "[0-9]", "+", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "const", "rPart": ["[']", "[\\\\]", "[0abtnvfr \"'\\\\]", "[']"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "operation", "rPart": ["[-+/*]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord = true}"]}, {"lPart": "comment", "rPart": ["[/]", "[*]", "[]", "*", "[*]", "[/]", "{ignoreLastWord = true}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67cc369baf563521c9d5c805"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "*", "{ignoreLastWord = true}"]}, {"lPart": "intConst", "rPart": ["[-+]", "?", "[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["[-+]", "?", "[0-9]", "*", "[.]", "[0-9]", "+", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "charConst", "rPart": ["[']", "[]", "[']"]}, {"lPart": "charConst", "rPart": ["[']", "[\\\\]", "[0abtnvfr \"'\\\\]", "[']"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "binaryOperation", "rPart": ["[-+/*%]"]}, {"lPart": "unaryOperation", "rPart": ["[-!]"]}, {"lPart": "logicOperation", "rPart": ["[<>]", "[=]", "?"]}, {"lPart": "logicOperation", "rPart": ["[!=]", "[=]"]}, {"lPart": "logicOperation", "rPart": ["[&]", "[&]", "|", "[|]", "[|]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord = true}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["(", "\"int\"", "|", "\"void\"", "|", "\"char\"", ")"]}, {"lPart": "const", "rPart": ["(", "intConst", "|", "floatConst", "|", "charConst", "|", "\"false\"", ")"]}, {"lPart": "operation", "rPart": ["(", "binaryOperation", "|", "logicOperation", "|", "assign", ")"]}, {"lPart": "Cast", "rPart": ["\"(\"", "type", "\")\"", "Expr"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", "|", "FuncCall", "|", "Cast", "|", "\"(\"", "Expr", "\")\"", "|", "unaryOperation", "Expr", ")", "(", "operation", "Expr", ")", "?"]}, {"lPart": "FuncDecl", "rPart": ["type", "id", "\"(\"", "ArgList", "\")\"", "Block"]}, {"lPart": "FuncCall", "rPart": ["id", "\"(\"", "ArgList", "\")\""]}, {"lPart": "Operator", "rPart": ["(", "If", "|", "For", "|", "Switch", ")"]}, {"lPart": "Block", "rPart": ["\"{\"", "(", "Stmt", ")", "*", "\"}\""]}, {"lPart": "If", "rPart": ["\"by\"", "Expr", "(", "Stmt", "|", "Block", ")", "(", "\"else\"", "(", "Stmt", "|", "Block", ")", ")", "?"]}, {"lPart": "For", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "Stmt", "|", "Block", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "(", "SwitchCase", ")", "*", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "const", "\")\"", "(", "Stmt", "|", "Block", ")", "?"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "Stmt", "rPart": ["(", "(", "(", "Expr", "|", "Return", "|", "\"stop\"", "|", "\"break\"", ")", "delimiter", ")", "|", "Operator", ")"]}, {"lPart": "Program", "rPart": ["(", "FuncDecl", "|", "Stmt", ")", "+"]}], "extension": "var ignoreLastWord;\n// if\n// switch\n// DefaultCase \"case (\" \"false\" \")\" ( Operator | Block ) ?"}}{"_id": {"$oid": "67e06a0a4635a960233ace1d"}, "rules": "lab3copy1", "data": {"rList": [{"lPart": "id", "rPart": ["[_]", "(", "[a-zA-Z0-9]", ")", "*", "[_]"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "(", "[a-zA-Z']", ")", ")", "|", "(", "[u]", "[a-fA-F0-9]", "+", ")", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[]", ")", ")", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "constDecimal", "rPart": ["(", "[0-9]", "*", ")", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[0-3]", "+", ")"]}, {"lPart": "constHex", "rPart": ["[0]", "[x]", "(", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"false\"", "|", "\"true\"", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "semicolon", "rPart": ["(", "[;]", ")"]}, {"lPart": "comma", "rPart": ["(", "[,]", ")"]}, {"lPart": "unaryOperator", "rPart": ["(", "[!~]", ")"]}, {"lPart": "binaryOperator", "rPart": ["(", "[+*/$&|%]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[<>=!]", "[=]", ")", "|", "(", "[<>]", ")"]}, {"lPart": "unaryOrBinaryOperator", "rPart": ["(", "[-]", ")"]}, {"lPart": "openingParenthesis", "rPart": ["(", "[(]", ")"]}, {"lPart": "closingParenthesis", "rPart": ["(", "[)]", ")"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "Const", "|", "FunctionCall", "|", "UnaryOperation", "|", "BinaryOperation", "|", "openingParenthesis", "Expr", "closingParenthesis", ")"]}, {"lPart": "UnaryOperation", "rPart": ["(", "unaryOperator", "|", "unaryOrBinaryOperator", ")", "Expr"]}, {"lPart": "BinaryOperation", "rPart": ["Expr", "(", "binaryOperator", "|", "unaryOrBinaryOperator", ")", "Expr"]}, {"lPart": "FunctionCall", "rPart": ["id", "openingParenthesis", "(", "(", "Expr", ")", "(", "comma", "Expr", ")", "*", ")", "?", "closingParenthesis"]}, {"lPart": "Const", "rPart": ["constChar", "|", "constString", "|", "constDecimal", "|", "constQuadro", "|", "constHex", "|", "constBool", "|", "constNull"]}, {"lPart": "Statement", "rPart": ["(", "(", "(", "Assignment", "|", "Expr", "|", "Return", "|", "Break", "|", "Exit", ")", "semicolon", ")", "|", "Conditional", "|", "Loop", "|", "Switch", "|", "FunctionDeclaration", ")"]}, {"lPart": "Assignment", "rPart": ["\"let\"", "id", "\"on\"", "Expr"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?"]}, {"lPart": "Exit", "rPart": ["\"exit\""]}, {"lPart": "Break", "rPart": ["\"break\""]}, {"lPart": "Block", "rPart": ["(", "Statement", "|", "\"begin\"", "Statement", "*", "\"end\"", ")"]}, {"lPart": "Conditional", "rPart": ["(", "\"when\"", "Expr", "Block", "(", "\"other\"", "Block", ")", "?", ")"]}, {"lPart": "Loop", "rPart": ["(", "\"exec\"", "Block", "\"with\"", "id", "\"from\"", "Expr", "\"to\"", "Expr", "(", "\"step\"", "Expr", ")", "?", ")"]}, {"lPart": "Switch", "rPart": ["SwitchHead", "(", "SwitchCase", "+", "Statement", "*", ")", "+", "\"end\""]}, {"lPart": "SwitchHead", "rPart": ["\"select\"", "Expr"]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "openingParenthesis", "Expr", "?", "closingParenthesis"]}, {"lPart": "FunctionDeclaration", "rPart": ["FunctionHead", "Block"]}, {"lPart": "FunctionHead", "rPart": ["\"fn\"", "id", "openingParenthesis", "(", "(", "id", ")", "(", "comma", "id", ")", "*", ")", "?", "closingParenthesis"]}, {"lPart": "Global", "rPart": ["Statement", "*"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e06a124635a960233ace20"}, "rules": "lab3copy2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[0-9]", "{1,4}", "[a-zA-Z]", "+"]}, {"lPart": "constBinary", "rPart": ["[0]", "[b]", "[01]", "+"]}, {"lPart": "constOctal", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "constDecimal", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", "(", "[e]", "[-+]", "?", "[0-9]", "+", ")", "?"]}, {"lPart": "constString", "rPart": ["[\"]", "(", "[]", "*", "(", "[\\\\]", "[\"]", ")", "?", ")", "*", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord = true;}"]}, {"lPart": "comment", "rPart": ["[#]", "[#]", "[]", "*", "[\\r\\n]", "{ignoreLastWord = true;}"]}, {"lPart": "constChar", "rPart": ["[']", "(", "(", "[\\\\]", "?", "[]", ")", "|", "(", "[\\\\]", "[ud]", "[0-9a-f]", "{1,4}", ")", ")", "[']"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Const", "rPart": ["constBinary", "|", "constOctal", "|", "constDecimal", "|", "constString"]}, {"lPart": "Type", "rPart": ["\"num\"", "|", "\"str\"", "|", "\"char\""]}, {"lPart": "Assignment", "rPart": ["Type", "?", "id", "\"set\"", "Expr"]}, {"lPart": "Expr", "rPart": ["id", "|", "Const", "|", "Operation", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "Statement", "rPart": ["(", "Assignment", "delimiter", ")", "|", "ExitScope", "|", "Cond", "|", "Switch", "|", "Loop"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}, {"lPart": "BinaryOperation", "rPart": ["Expr", "BinaryOperator", "Expr"]}, {"lPart": "Operation", "rPart": ["BinaryOperation", "|", "UnaryOperation"]}, {"lPart": "ExitScope", "rPart": ["\"return\"", "Expr", "?", "delimiter"]}, {"lPart": "Cond", "rPart": ["\"at\"", "Expr", "\"do\"", "Statement", "+", "\"or do\"", "Statement", "+"]}, {"lPart": "binaryOperatorResult", "rPart": ["[*/&|%]"]}, {"lPart": "binaryOperatorComp", "rPart": ["(", "[!=]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "BinaryOperator", "rPart": ["binaryOperatorResult", "|", "binaryOperatorComp", "|", "universalOperator"]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expr", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Const", "\":\"", "Statement", "*", "(", "\"gout\"", "delimiter", ")", "?"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~:\"", "Statement", "+"]}, {"lPart": "Loop", "rPart": ["\"cycle\"", "\"(\"", "Assignment", "?", "delimiter", "Expr", "?", "delimiter", "Assignment", "?", "\")\"", "LoopScope"]}, {"lPart": "LoopScope", "rPart": ["\"{\"", "LoopStatement", "+", "\"}\""]}, {"lPart": "LoopStatement", "rPart": ["Statement", "|", "(", "\"out\"", "delimiter", ")"]}, {"lPart": "universalOperator", "rPart": ["[-+]"]}, {"lPart": "unaryOperator", "rPart": ["[!~]"]}, {"lPart": "UnaryOperation", "rPart": ["(", "unaryOperator", "|", "universalOperator", ")", "Expr"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e6a49f4635a960233af0aa"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "(", "[0-9]", "[a-zA-Z]", ")", "*", "[0-9]", "?"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "*", "{ignoreLastWord = true}"]}, {"lPart": "intConst", "rPart": ["[-+]", "?", "[0-9]", "+"]}, {"lPart": "floatConst", "rPart": ["[-+]", "?", "[0-9]", "*", "[.]", "[0-9]", "+", "(", "[eE]", "[-+]", "[0-9]", "+", ")", "?"]}, {"lPart": "charConst", "rPart": ["[']", "[]", "[']"]}, {"lPart": "charConst", "rPart": ["[']", "[\\\\]", "[0abtnvfr \"'\\\\]", "[']"]}, {"lPart": "assign", "rPart": ["[<]", "[-]"]}, {"lPart": "binaryOperation", "rPart": ["[-+/*%]"]}, {"lPart": "unaryOperation", "rPart": ["[-!]"]}, {"lPart": "logicOperation", "rPart": ["[<>]", "[=]", "?"]}, {"lPart": "logicOperation", "rPart": ["[!=]", "[=]"]}, {"lPart": "logicOperation", "rPart": ["[&]", "[&]", "|", "[|]", "[|]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord = true}"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "type", "rPart": ["(", "\"int\"", "|", "\"void\"", "|", "\"char\"", ")"]}, {"lPart": "const", "rPart": ["(", "intConst", "|", "floatConst", "|", "charConst", "|", "\"false\"", ")"]}, {"lPart": "operation", "rPart": ["(", "binaryOperation", "|", "logicOperation", "|", "assign", ")"]}, {"lPart": "Cast", "rPart": ["\"(\"", "type", "\")\"", "Expr"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", "|", "FuncCall", "|", "Cast", "|", "\"(\"", "Expr", "\")\"", "|", "unaryOperation", "Expr", ")", "(", "operation", "Expr", ")", "?"]}, {"lPart": "FuncDef", "rPart": ["type", "id", "\"(\"", "ArgList", "\")\"", "Block"]}, {"lPart": "FuncCall", "rPart": ["id", "\"(\"", "ArgList", "\")\""]}, {"lPart": "Operator", "rPart": ["(", "If", "|", "For", "|", "Switch", ")"]}, {"lPart": "Block", "rPart": ["\"{\"", "(", "Stmt", ")", "*", "\"}\""]}, {"lPart": "If", "rPart": ["\"by\"", "Expr", "(", "Stmt", "|", "Block", ")", "(", "\"else\"", "(", "Stmt", "|", "Block", ")", ")", "?"]}, {"lPart": "For", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "const", "\":\"", "const", "\")\"", "(", "Stmt", "|", "Block", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "(", "SwitchCase", ")", "*", "\"end\""]}, {"lPart": "SwitchCase", "rPart": ["\"case\"", "\"(\"", "const", "\")\"", "(", "Stmt", "|", "Block", ")", "?"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr"]}, {"lPart": "ArgList", "rPart": ["(", "id", "(", "\",\"", "id", ")", "*", ")", "?"]}, {"lPart": "Stmt", "rPart": ["(", "(", "(", "Expr", "|", "Return", "|", "\"stop\"", "|", "\"break\"", ")", "delimiter", ")", "|", "Operator", ")"]}, {"lPart": "Program", "rPart": ["(", "FuncDef", "|", "id", "assign", "const", "delimiter", ")", "+"]}], "extension": "var ignoreLastWord;\n// if\n// switch\n// DefaultCase \"case (\" \"false\" \")\" ( Operator | Block ) ?"}}},
{"FIO":"Юнашев Е.С.","Collection":"441153444",{"_id": {"$oid": "67b02dddce6dd03692d07d14"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "-2", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67bb2340ce6dd03692d09509"}, "rules": "labs", "data": {"rList": [{"lPart": "prog", "rPart": ["Operators", "+"]}, {"lPart": "Operators", "rPart": ["assignOperator", "|", "loopOperator", "|", "condOperator", "|", "compOperator", "|", "retireOperator"]}, {"lPart": "assignOperator", "rPart": ["\"let\"", "id", "\"on\"", "statement", "\";\""]}, {"lPart": "loopOperator", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "statement", "\")\""]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "statement", "\")\"", "OB", "Else"]}, {"lPart": "compOperator", "rPart": ["\"switch\"", "statement", "\"{\"", "(", "\"by\"", "constState", "\"do\"", "\"{\"", "(", "Operators", ")", "*", "\"leave\"", "\";\"", "\"}\"", ")", "+", "(", "\"any do\"", "\"{\"", "(", "Operators", ")", "*", "\"}\"", ")", "?", "\"}\""]}, {"lPart": "retireOperator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "statement", "rPart": ["(", "binorUnbinSign", "|", "unarsign", ")", "?", "(", "id", "|", "constState", ")", "(", "(", "sign", "|", "binorUnbinSign", ")", "(", "id", "|", "constState", ")", ")", "*"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operators", "+", "\"}\"", ")", "|", "(", "Operators", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "constState", "rPart": ["const", "|", "constBin", "|", "constOct", "|", "constSt", "|", "constCh", "|", "constNum"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "binorUnbinSign", "rPart": ["[-]"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constSt", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "*", "[\"]"]}, {"lPart": "constCh", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><|&=]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constComline", "rPart": ["[/]", "[/]", "[]", "*", "[ \\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680a0e1f8558742cb43393f1"}, "rules": "labs5", "data": {"rList": [{"lPart": "prog", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["id", "\"=>\"", "\"as\"", "Type", "\"(\"", "ArgumentList", "\")\"", "\"{\"", "Operators", "*", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"float\"", "|", "\"void\"", "|", "\"string\""]}, {"lPart": "ArgumentList", "rPart": ["(", "Type", "id", "(", "\",\"", "Type", "id", ")", "*", ")", "?"]}, {"lPart": "Operators", "rPart": ["assignOperator", "|", "loopOperator", "|", "condOperator", "|", "compOperator", "|", "retireOperator", "|", "leaveOperator", "|", "DecOperator", "|", "returnOperator", "|", "FunctionCall"]}, {"lPart": "assignOperator", "rPart": ["\"let\"", "id", "\"on\"", "Expr", "\";\""]}, {"lPart": "loopOperator", "rPart": ["\"loop\"", "OB", "\"until\"", "\"(\"", "Expr", "\")\""]}, {"lPart": "condOperator", "rPart": ["\"by\"", "\"(\"", "Expr", "\")\"", "OB", "Else"]}, {"lPart": "compOperator", "rPart": ["\"switch\"", "Expr", "\"{\"", "(", "\"byy\"", "constState", "\"do\"", "OB", "*", ")", "+", "(", "\"any\"", "\"do\"", "OB", "*", ")", "?", "\"}\""]}, {"lPart": "retireOperator", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "leaveOperator", "rPart": ["\"leave\"", "\";\""]}, {"lPart": "DecOperator", "rPart": ["Type", "id", "(", "\",\"", "id", ")", "*", "\";\""]}, {"lPart": "returnOperator", "rPart": ["\"return\"", "(", "Expr", ")", "?", "\";\""]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", "\";\""]}, {"lPart": "Expr", "rPart": ["(", "unarsign", "|", "binorUnbinSign", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operators", "+", "\"}\"", ")", "|", "(", "Operators", ")"]}, {"lPart": "Else", "rPart": ["\"else\"", "OB"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["constState", "|", "(", "id", "(", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "constState", "rPart": ["const", "|", "constBin", "|", "constOct", "|", "constSt", "|", "constCh", "|", "constNum"]}, {"lPart": "EndExpr", "rPart": ["(", "sign", "|", "binorUnbinSign", ")", "Expr"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{0,3}"]}, {"lPart": "unarsign", "rPart": ["[!~]"]}, {"lPart": "binorUnbinSign", "rPart": ["[-]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "constBin", "rPart": ["[2]", "[x]", "[0-1]", "+"]}, {"lPart": "constOct", "rPart": ["[8]", "[x]", "[0-7]", "+"]}, {"lPart": "constSt", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "[\"]", ")", "*", "[\"]"]}, {"lPart": "constCh", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "[d]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", "[']"]}, {"lPart": "constNum", "rPart": ["[0-9]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><|&=]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constComline", "rPart": ["[/]", "[/]", "[]", "*", "[ \\n\\r]", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Михалёва А.Д.","Collection":"332151321",{"_id": {"$oid": "67c9059aaf563521c9d5c300"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "+4", "deltat": 10000, "assist": 1}}{"_id": {"$oid": "67c908ceaf563521c9d5c331"}, "rules": "Sample2", "data": {"rList": [{"lPart": "SimpleExpr", "rPart": ["(", "id", "(", "\"+\"", "|", "\"-\"", ")", "{constStack.push(this.currentLexem[1]);}", "const", ")", "+"]}, {"lPart": "id", "rPart": ["[A-Z]", "[a-z]", "{1,4}", "[0-9]"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}], "extension": "var ignoreLastWord;\nvar constStack=[]; //накопитель текстов констант"}}{"_id": {"$oid": "67c90a73af563521c9d5c33e"}, "rules": "lab1", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[v]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "Const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["[\"]", "[!-~]", "*", "[\"]"]}, {"lPart": "Operation", "rPart": ["[-+*/]"]}], "extension": ""}}{"_id": {"$oid": "67da960fe0b22203e7cc14ae"}, "rules": "lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[v]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[ \\r\\n\\t]", ")", "[']", ")"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operation", "rPart": ["[-+*/]"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Logic", "rPart": ["[|&]"]}, {"lPart": "Brackets", "rPart": ["(", "[{]", "[]", "*", "[}]", ")", "|", "(", "[(]", "[]", "*", "[)]", ")"]}, {"lPart": "Comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Assign", "rPart": ["[<]", "[–]"]}, {"lPart": "Logic", "rPart": ["[|&]"]}, {"lPart": "Keywords", "rPart": ["[A-Z]", "+"]}], "extension": ""}}{"_id": {"$oid": "67ed2e16a600182c7517ae6d"}, "rules": "lab3", "data": {"rList": [{"lPart": "Id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[v]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[ \\r\\n\\t]", ")", "[']", ")"]}, {"lPart": "Comm", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Operation", "rPart": ["[-+*/]"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Const", "rPart": ["[']", "(", "(", "[\\\\\\\"\\']", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "Expr", "rPart": ["BExpr", "EExpr"]}, {"lPart": "BExpr", "rPart": ["(", "Id", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EExpr", "rPart": ["(", "(", "Logic", "|", "Comp", "|", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "Assign", "rPart": ["Id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "Comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "Logic", "rPart": ["[|&]"]}, {"lPart": "Loop", "rPart": ["\"loop\"", "\"{\"", "prog", "\"}\"", "\"until\"", "Expr"]}, {"lPart": "Op", "rPart": ["(", "\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "prog", "\"}\"", "(", "\"else\"", "\"{\"", "prog", "\"}\"", ")", "?", ")"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "Loop", "|", "Op"]}], "extension": ""}}{"_id": {"$oid": "67ffc61a8558742cb43371cc"}, "rules": "noName", "data": {"rList": [{"lPart": "prog", "rPart": ["Operator", "+"]}, {"lPart": "Operator", "rPart": ["Assign", "|", "Loop", "|", "Op"]}, {"lPart": "Assign", "rPart": ["Id", "\"<–\"", "Expr", "\";\""]}, {"lPart": "Loop", "rPart": ["\"loop\"", "\"{\"", "prog", "\"}\"", "\"until\"", "Expr"]}, {"lPart": "Op", "rPart": ["(", "\"by\"", "\"(\"", "Expr", "\")\"", "\"{\"", "prog", "\"}\"", "(", "\"else\"", "\"{\"", "prog", "\"}\"", ")", "?", ")"]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BExpr", "EExpr"]}, {"lPart": "BExpr", "rPart": ["(", "Id", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EExpr", "rPart": ["(", "(", "Logic", "|", "Comp", "|", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "Id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[v]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["[']", "(", "(", "[\\\\]", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "Logic", "rPart": ["[|&]"]}, {"lPart": "Comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Unary", "rPart": ["\"!\""]}], "extension": ""}}{"_id": {"$oid": "67ffd3318558742cb43372bc"}, "rules": "lab4", "data": {"rList": [{"lPart": "OoB", "rPart": ["(", "Entering", ")", "|", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "Entering", "rPart": ["Assign", "|", "Loop", "|", "Op", "|", "Switch"]}, {"lPart": "Assign", "rPart": ["Id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Loop", "rPart": ["\"loop\"", "prog", "\"until\"", "OoB"]}, {"lPart": "Op", "rPart": ["(", "\"by\"", "\"(\"", "Expr", "\")\"", "prog", "(", "\"else\"", "prog", ")", "?", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "\"{\"", "Case", "+", "Default", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BExpr", "EExpr"]}, {"lPart": "prog", "rPart": ["Entering", "+"]}, {"lPart": "BExpr", "rPart": ["T", "?", "(", "Id", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EExpr", "rPart": ["(", "(", "Logic", "|", "Comp", "|", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "Case", "rPart": ["\"case\"", "Const", "\":\"", "prog", "+", "Break"]}, {"lPart": "Default", "rPart": ["\"case()\"", "\":\"", "prog", "Break"]}, {"lPart": "Unary", "rPart": ["\"!\""]}, {"lPart": "Break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[v]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["[']", "(", "(", "[\\\\]", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "Logic", "rPart": ["[|&]"]}, {"lPart": "Comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Declare", "rPart": ["T", "(", "(", "\"<-\"", "Expr", ")", "?", "\";\"", "|", "Fun", ")"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "Fun", "rPart": ["\"(\"", "Args", "?", "\")\"", "\"{\"", "Entering", "+", "Return", "\"}\""]}, {"lPart": "Args", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Else", "rPart": ["\"else\"", "OoB"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}], "extension": ""}}{"_id": {"$oid": "680069f38558742cb433747b"}, "rules": "lab42", "data": {"rList": [{"lPart": "OoB", "rPart": ["(", "Entering", ")", "|", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "Entering", "rPart": ["Assign", "|", "Loop", "|", "Op", "|", "Switch", "|", "Declare", "|", "Break"]}, {"lPart": "Assign", "rPart": ["Id", "\"<-\"", "Expr", "\";\""]}, {"lPart": "Loop", "rPart": ["\"loop\"", "OoB", "\"until\"", "Expr"]}, {"lPart": "Op", "rPart": ["(", "\"by\"", "\"(\"", "Expr", "\")\"", "OoB", "Else", ")"]}, {"lPart": "Switch", "rPart": ["\"select\"", "Expr", "\"{\"", "Case", "+", "Default", "?", "\"}\""]}, {"lPart": "Expr", "rPart": ["Unary", "?", "BExpr", "EExpr"]}, {"lPart": "BExpr", "rPart": ["T", "?", "(", "Id", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "EExpr", "rPart": ["(", "(", "Logic", "|", "Comp", "|", "\"+\"", "|", "\"-\"", "|", "\"/\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "Case", "rPart": ["\"case\"", "Const", "\":\"", "OoB", "*", "Break", "?"]}, {"lPart": "Default", "rPart": ["\"case()\"", "\":\"", "OoB", "*", "Break", "?"]}, {"lPart": "Unary", "rPart": ["\"!\"", "|", "\"-\""]}, {"lPart": "Break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "Id", "rPart": ["[a-z]", "[0-9a-zA-Z]", "*"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[q]", "[0-3]", "+", ")", "|", "(", "[0-9]", "+", ")", "|", "(", "[0]", "[v]", "[0-9a-fA-F]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["[']", "(", "(", "[\\\\]", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "[']"]}, {"lPart": "Const", "rPart": ["[\\\"]", "(", "(", "[\\\\]", "|", "(", "[d]", "[0-9]", "+", ")", "|", "(", "[u]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", "[0-9A-F]", ")", ")", "|", "[]", ")", "*", "[\\\"]"]}, {"lPart": "Logic", "rPart": ["[|&]"]}, {"lPart": "Comp", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}, {"lPart": "Space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "Declare", "rPart": ["T", "(", "(", "\"<-\"", "Expr", ")", "?", "\";\"", "|", "Fun", ")"]}, {"lPart": "T", "rPart": ["\"int\"", "|", "\"char\"", "|", "\"double\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "Fun", "rPart": ["\"(\"", "Args", "?", "\")\"", "\"{\"", "Entering", "+", "\"}\""]}, {"lPart": "Args", "rPart": ["Expr", "(", "\",\"", "Expr", ")", "*"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "\";\""]}, {"lPart": "Else", "rPart": ["\"else\"", "OoB"]}, {"lPart": "Else", "rPart": ["~", "\"else\""]}], "extension": ""}}},
{"FIO":"Лобастов Д.А.","Collection":"355253241",{"_id": {"$oid": "67d6d243e0b22203e7cc01f6"}, "rules": "лаба1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[\\\"]", "[]", "*", "[\\\"]", ")", "|", "(", "[']", "[]", "[']", ")", "|", "(", "[']", "[\\\\]", "[a-z]", "+", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "sign", "rPart": ["[-+*/]", "+"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67d6d798e0b22203e7cc02b7"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67d7cf51e0b22203e7cc0b4e"}, "rules": "лаба12", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[\\\"]", "[]", "*", "[\\\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "partExpr", "rPart": ["id", "|", "const"]}, {"lPart": "sign", "rPart": ["[-+*/]", "+"]}, {"lPart": "expr", "rPart": ["partExpr", "(", "sign", "partExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "delimiter"]}, {"lPart": "operator", "rPart": ["\"when\"", "expr", "begBlock", "(", "operator", ")", "+", "endBlock", "(", "\"other\"", "begBlock", "(", "operator", ")", "+", "endBlock", ")", "?"]}, {"lPart": "begBlock", "rPart": ["\"{\""]}, {"lPart": "endBlock", "rPart": ["\"}\""]}, {"lPart": "cycle", "rPart": ["\"loop\"", "begBlock", "body", "endBlock", "\"until (\"", "expr", "\")\"", "(", "\"retire;\"", ")", "?"]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "begBlock", "(", "\"by\"", "const", "\"do\"", "begBlock", "body", "\"leave;\"", "?", "endBlock", ")", "+", "\"any do\"", "begBlock", "body", "\"leave;\"", "?", "endBlock", "endBlock"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "id", "*", "\")\"", "\"ret\"", "type", "begBlock", "body", "endBlock"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "body", "rPart": ["(", "operator", "|", "cycle", "|", "switch", ")", "+"]}, {"lPart": "delimiter", "rPart": ["[;]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ea60994635a960233b0123"}, "rules": "лаба3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[\\\"]", "[]", "*", "[\\\"]", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "partExpr", "rPart": ["id", "|", "const"]}, {"lPart": "sign", "rPart": ["[-+*/]", "|", "[<>=]", "|", "[<]", "[=]", "|", "[>]", "[=]", "|", "[!]", "[=]", "|", "[!]", "|", "[+]", "[+]", "|", "[-]", "[-]"]}, {"lPart": "expr", "rPart": ["partExpr", "(", "sign", "partExpr", ")", "?"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "delimiter"]}, {"lPart": "operator", "rPart": ["\"when\"", "expr", "begBlock", "(", "operator", ")", "+", "endBlock", "(", "\"other\"", "begBlock", "(", "operator", ")", "+", "endBlock", ")", "?"]}, {"lPart": "begBlock", "rPart": ["\"{\""]}, {"lPart": "endBlock", "rPart": ["\"}\""]}, {"lPart": "cycle", "rPart": ["\"loop\"", "(", "operator", "|", "body", ")", "\"until (\"", "expr", "\")\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "begBlock", "(", "\"by\"", "const", "\"do\"", "(", "operator", "|", "body", ")", "*", ")", "+", "\"any do\"", "(", "operator", "|", "body", ")", "*", "endBlock"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "(", "type", "id", "(", "\", \"", ")", "?", ")", "*", "\")\"", "\"ret\"", "type", "body"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "body", "rPart": ["begBlock", "(", "operator", "|", "cycle", "|", "switch", ")", "+", "endBlock"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "operator", "rPart": ["\"leave;\""]}, {"lPart": "operator", "rPart": ["\"retire;\""]}, {"lPart": "typification", "rPart": ["type", "id", "\";\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680e617c8558742cb433a137"}, "rules": "лаба4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "const", "rPart": ["(", "[-]", "?", "[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?", ")", "|", "(", "[2]", "[x]", "[0-1]", "+", ")", "|", "(", "[4]", "[x]", "[0-3]", "+", ")", "|", "(", "[\\\"]", "[]", "*", "[\\\"]", ")", "|", "(", "[']", "[]", "[']", ")", "|", "(", "[']", "[\\\\]", "[a-z]", "+", "[']", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "partExpr", "rPart": ["id", "|", "const"]}, {"lPart": "sign", "rPart": ["[-+*/]", "|", "[<>=]", "|", "[<]", "[=]", "|", "[>]", "[=]", "|", "[!]", "[=]", "|", "[!]", "|", "[+]", "[+]", "|", "[-]", "[-]"]}, {"lPart": "expr", "rPart": ["sign", "?", "partExpr", "sign", "?", "partExpr", "?"]}, {"lPart": "operator", "rPart": ["\"put\"", "expr", "\"to\"", "id", "\";\""]}, {"lPart": "operator", "rPart": ["\"when\"", "expr", "operatorBlock", "(", "\"other\"", "operatorBlock", ")", "?"]}, {"lPart": "begBlock", "rPart": ["\"{\""]}, {"lPart": "endBlock", "rPart": ["\"}\""]}, {"lPart": "cycle", "rPart": ["\"loop\"", "ob", "\"until (\"", "expr", "\")\""]}, {"lPart": "switch", "rPart": ["\"switch\"", "expr", "begBlock", "(", "\"by\"", "const", "\"do\"", "po", ")", "+", "\"any do\"", "po", "endBlock"]}, {"lPart": "func", "rPart": ["id", "\"(\"", "arg", "?", "\")\"", "\"ret\"", "type", "body"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"str\"", "|", "\"void\""]}, {"lPart": "body", "rPart": ["begBlock", "(", "operator", "|", "cycle", "|", "switch", ")", "+", "endBlock"]}, {"lPart": "operator", "rPart": ["\"leave;\""]}, {"lPart": "operator", "rPart": ["\"retire;\""]}, {"lPart": "typification", "rPart": ["type", "id", "\";\""]}, {"lPart": "operatorBlock", "rPart": ["begBlock", "operator", "+", "endBlock"]}, {"lPart": "ob", "rPart": ["operator", "|", "body"]}, {"lPart": "po", "rPart": ["(", "operator", ")", "*", "|", "(", "body", ")", "*"]}, {"lPart": "arg", "rPart": ["type", "id", "(", "\", \"", "type", "id", ")", "*"]}, {"lPart": "operator", "rPart": ["\"return\"", "expr", "\";\""]}, {"lPart": "operator", "rPart": ["id", "\"(\"", "partExpr", "(", "\",\"", "partExpr", ")", "?", "\")\"", "\";\""]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Гросс А.А.","Collection":"554111345",{"_id": {"$oid": "65d60b644b5d9e0496a73a13"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "const2", "rPart": ["[d]", "[1]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[q]", "[1-3]", "[0-3]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "MathOperations", "rPart": ["[+/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "65d60f444b5d9e0496a73a3d"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsMultiFSM", "saving": "-4", "deltat": 5000, "assist": 1}}{"_id": {"$oid": "66f2596343e7565e8d4a2e65"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "const2", "rPart": ["[d]", "[1]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[q]", "[1-3]", "[0-3]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[\"]"]}, {"lPart": "MathOperations", "rPart": ["[+/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comms", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66f2612043e7565e8d4a2e88"}, "rules": "lab3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "const2", "rPart": ["[d]", "[1]", "[0-1]", "*"]}, {"lPart": "const4", "rPart": ["[q]", "[1-3]", "[0-3]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[\"]"]}, {"lPart": "Math", "rPart": ["[/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "plus", "rPart": ["[+]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comms", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "plus", "|", "minus", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["constants", "|", "id"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "Math", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"set\"", "Expr", "\";\""]}, {"lPart": "constants", "rPart": ["const10", "|", "const2", "|", "const4", "|", "real"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "66f2621143e7565e8d4a2e99"}, "rules": "lab4", "data": {"rList": [{"lPart": "Operseq", "rPart": ["\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "Operator", "rPart": ["id", "\"set\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operseq", "|", "Operator", ")", "else"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constants", "\":\"", "constants", "\")\"", "(", "Operseq", "|", "Operator", ")"]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "else", "rPart": ["\"other\"", "(", "Operseq", "|", "Operator", ")"]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "constants", "rPart": ["const10", "|", "const4", "|", "const2", "|", "real"]}, {"lPart": "BegExpr", "rPart": ["constants"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "AddPart", "rPart": ["(", "(", "plus", "|", "minus", "|", "logic", "|", "Math", "|", "compare", ")", "Expr", ")", "?"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "const10", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "const4", "rPart": ["[q]", "[1-3]", "[0-3]", "*"]}, {"lPart": "const2", "rPart": ["[d]", "[1]", "[0-1]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "plus", "rPart": ["[+]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "Math", "rPart": ["[/*]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ ignoreLastWord=true;}"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comms", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]"]}, {"lPart": "logicNo", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "66f263aa43e7565e8d4a2ee6"}, "rules": "Sample3", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "EndExpr"]}, {"lPart": "BegExpr", "rPart": ["id"]}, {"lPart": "EndExpr", "rPart": ["(", "(", "\"+\"", "|", "\"*\"", ")", "Expr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "66f29c8b43e7565e8d4a2f59"}, "rules": "lab5", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "?", "\")\"", "Operseq", "\"->\"", "id"]}, {"lPart": "Operseq", "rPart": ["\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "ArgList", "rPart": ["id", "(", "\",\"", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["id", "\"set\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operseq", "|", "Operator", ")", "else"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constants", "\":\"", "constants", "\")\"", "(", "Operseq", "|", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"whеn\"", "constants", "\"then\"", "(", "Operseq", "|", "Operator", ")", "+", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "oter", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "else", "rPart": ["\"other\"", "(", "Operseq", "|", "Operator", ")"]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "constants", "rPart": ["const10", "|", "const4", "|", "const2", "|", "real"]}, {"lPart": "BegExpr", "rPart": ["constants"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "AddPart", "rPart": ["(", "(", "plus", "|", "minus", "|", "logic", "|", "Math", "|", "compare", ")", "Expr", ")", "?"]}, {"lPart": "oter", "rPart": ["\"otherwise\"", "(", "Operator", "|", "Operseq", ")", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "const4", "rPart": ["[q]", "[1-3]", "[0-3]", "*"]}, {"lPart": "const2", "rPart": ["[d]", "[1]", "[0-1]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "plus", "rPart": ["[+]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Math", "rPart": ["[/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ ignoreLastWord=true;}"]}, {"lPart": "comms", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]"]}, {"lPart": "logicNo", "rPart": ["[!]"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "67bf3c47af563521c9d59e4d"}, "rules": "KR", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+"]}, {"lPart": "Function", "rPart": ["\"function\"", "\"(\"", "ArgList", "?", "\")\"", "Operseq", "\"->\"", "id"]}, {"lPart": "Operseq", "rPart": ["\"{\"", "Operator", "+", "\"}\""]}, {"lPart": "ArgList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "Operator", "rPart": ["id", "\"set\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"when\"", "Expr", "(", "Operseq", "|", "Operator", ")", "else"]}, {"lPart": "Operator", "rPart": ["\"foreach\"", "\"(\"", "id", "\"in\"", "constants", "\":\"", "constants", "\")\"", "(", "Operseq", "|", "Operator", ")"]}, {"lPart": "Operator", "rPart": ["\"case\"", "Expr", "\"{\"", "(", "\"whеn\"", "constants", "\"then\"", "(", "Operseq", "|", "Operator", ")", "+", "(", "\"exit\"", "\";\"", ")", "?", ")", "+", "(", "oter", ")", "?", "\"}\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "id", "\";\""]}, {"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "else", "rPart": ["\"other\"", "(", "Operseq", "|", "Operator", ")"]}, {"lPart": "else", "rPart": ["~", "\"other\""]}, {"lPart": "constants", "rPart": ["const10", "|", "const4", "|", "const2", "|", "real"]}, {"lPart": "BegExpr", "rPart": ["constants"]}, {"lPart": "BegExpr", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "BegExpr", "rPart": ["id", "(", "\"(\"", "(", "Expr", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\"", ")", "?"]}, {"lPart": "AddPart", "rPart": ["(", "(", "plus", "|", "minus", "|", "logic", "|", "Math", "|", "compare", ")", "Expr", ")", "?"]}, {"lPart": "oter", "rPart": ["\"otherwise\"", "(", "Operator", "|", "Operseq", ")", "+"]}, {"lPart": "id", "rPart": ["[a-zA-Z]", "[0-9]", "{0,3}", "[a-zA-Z]"]}, {"lPart": "const10", "rPart": ["[1-9]", "[0-9]", "*"]}, {"lPart": "const4", "rPart": ["[q]", "[1-3]", "[0-3]", "*"]}, {"lPart": "const2", "rPart": ["[d]", "[0-1]", "[0-1]", "*"]}, {"lPart": "real", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "plus", "rPart": ["[+]"]}, {"lPart": "minus", "rPart": ["[-]"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "Math", "rPart": ["[/*]"]}, {"lPart": "compare", "rPart": ["(", "[>]", "|", "[<]", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[>]", "[=]", ")", "|", "(", "[<]", "[=]", ")", ")"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[']"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "+", "|", "(", "[//]", "[d]", "[]", "+", ")", ")", "[\"]"]}, {"lPart": "space", "rPart": ["[ \\t\\n\\r]", "+", "{ ignoreLastWord=true;}"]}, {"lPart": "comms", "rPart": ["[/]", "[:]", "(", "(", "[]", "*", ")", "|", "(", "[:]", "*", ")", ")", "*", "[:]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "logicNo", "rPart": ["[!]"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}], "extension": "var ignoreLastWord;\n"}}},
{"FIO":"Кровин В.А.","Collection":"322554225",{"_id": {"$oid": "67c2a4d1af563521c9d5a9ef"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "+3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c334fcaf563521c9d5ac51"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[1-3]", "[0-3]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "[.]", "(", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "assignSign", "rPart": ["[=]"]}], "extension": ""}}{"_id": {"$oid": "67d6bc17e0b22203e7cbff99"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[1-3]", "[0-3]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "[.]", "(", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]"]}, {"lPart": "arithmeticOperations", "rPart": ["[-+*/%]"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "assignSign", "rPart": ["[<]", "[-]"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "logicalOperations", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "parentheses", "rPart": ["(", "[()]", ")", "|", "(", "[{}]", ")"]}, {"lPart": "conditionalOperations", "rPart": ["(", "[?]", ")", "|", "(", "[?]", "[:]", ")", "|", "(", "[:]", ")"]}, {"lPart": "switchOperations", "rPart": ["(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")"]}], "extension": ""}}{"_id": {"$oid": "67e6b72d4635a960233af0c3"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[1-3]", "[0-3]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "[.]", "(", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\n]"]}, {"lPart": "universalOperators", "rPart": ["[+-]"]}, {"lPart": "unaryOperators", "rPart": ["(", "[!~]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "binaryOperators", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[*/%&|]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "assignSign", "rPart": ["[<]", "[-]"]}, {"lPart": "comma", "rPart": ["[,]"]}, {"lPart": "conditionalOperations", "rPart": ["(", "[?]", ")", "|", "(", "[?]", "[:]", ")", "|", "(", "[:]", ")"]}, {"lPart": "switchOperations", "rPart": ["(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")"]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\"", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constOct", "|", "constQuadro", "|", "constChar", "|", "constString", "|", "constReal", "|", "constBool", "|", "constNull"]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "Const", "|", "UnaryOperation", "|", "BinaryOperation", "|", "(", "\"(\"", "Expr", "\")\"", ")", ")"]}, {"lPart": "UnaryOperation", "rPart": ["(", "universalOperators", "|", "unaryOperators", ")", "Expr"]}, {"lPart": "BinaryOperation", "rPart": ["Expr", "(", "binaryOperators", "|", "universalOperators", ")", "Expr"]}, {"lPart": "Assignment", "rPart": ["id", "assignSign", "Expr"]}, {"lPart": "Statement", "rPart": ["(", "(", "Assignment", "|", "Expr", "|", "Return", "|", "Retire", "|", "Quit", ")", "delimiter", ")", "|", "FunctionDeclaration", "|", "Conditional", "|", "Loop", "|", "Switch"]}, {"lPart": "GlobalScope", "rPart": ["Statement", "*"]}, {"lPart": "Block", "rPart": ["(", "Statement", "|", "\"{\"", "Statement", "*", "\"}\"", ")"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?"]}, {"lPart": "FunctionHead", "rPart": ["id", "\"(\"", "(", "(", "id", ")", "(", "comma", "id", ")", "*", ")", "?", "\")\"", "\"ret\"", "Type"]}, {"lPart": "FunctionDeclaration", "rPart": ["FunctionHead", "Block"]}, {"lPart": "FunctionCall", "rPart": ["id", "\"(\"", "(", "(", "Expr", ")", "(", "comma", "Expr", ")", "*", ")", "?", "\")\""]}, {"lPart": "Conditional", "rPart": ["(", "\"?\"", "Expr", "Block", "(", "\"?:\"", "Expr", "Block", ")", "*", "(", "\":\"", "Block", ")", "?", ")"]}, {"lPart": "Loop", "rPart": ["(", "\"loop\"", "Block", "\"until\"", "Expr", ")"]}, {"lPart": "Retire", "rPart": ["\"retire\""]}, {"lPart": "Quit", "rPart": ["\"quit\""]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expr", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Const", "\":\"", "Statement", "*", "(", "Quit", "delimiter", ")", "?"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~:\"", "Statement", "+", "(", "Quit", "delimiter", ")", "?"]}], "extension": ""}}{"_id": {"$oid": "67fb9ad48558742cb4336043"}, "rules": "lab4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z0-9]", "*"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "constInt", "rPart": ["[0-9]", "+"]}, {"lPart": "constOct", "rPart": ["[0]", "[o]", "(", "[1-7]", "[0-7]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constQuadro", "rPart": ["[0]", "[q]", "(", "[1-3]", "[0-3]", "*", ")", "|", "(", "[0]", ")"]}, {"lPart": "constChar", "rPart": ["[']", "[]", "?", "[']"]}, {"lPart": "constString", "rPart": ["[\"]", "[]", "*", "[\"]"]}, {"lPart": "constReal", "rPart": ["(", "(", "[0]", ")", "|", "(", "[1-9]", "[0-9]", "*", ")", ")", "[.]", "(", "[0-9]", "+", ")"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "(", "[]", "*", ")", "[\\r\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "universalOperators", "rPart": ["[+-]"]}, {"lPart": "unaryOperators", "rPart": ["(", "[!~]", ")", "|", "(", "[+]", "[+]", ")", "|", "(", "[-]", "[-]", ")"]}, {"lPart": "binaryOperators", "rPart": ["(", "[<>]", ")", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")", "|", "(", "[*/%&|]", ")"]}, {"lPart": "delimiter", "rPart": ["[;]"]}, {"lPart": "Type", "rPart": ["(", "\"int\"", "|", "\"double\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bool\"", "|", "\"void\"", ")"]}, {"lPart": "constBool", "rPart": ["(", "\"true\"", "|", "\"false\"", ")"]}, {"lPart": "constNull", "rPart": ["(", "\"null\"", ")"]}, {"lPart": "Const", "rPart": ["constInt", "|", "constOct", "|", "constQuadro", "|", "constChar", "|", "constString", "|", "constReal", "|", "constBool", "|", "constNull"]}, {"lPart": "UnaryOperator", "rPart": ["unaryOperators", "|", "universalOperators"]}, {"lPart": "BinaryOperator", "rPart": ["binaryOperators", "|", "universalOperators"]}, {"lPart": "Operator", "rPart": ["UnaryOperator", "|", "BinaryOperator"]}, {"lPart": "GlobalScope", "rPart": ["Function", "+"]}, {"lPart": "DefaultScope", "rPart": ["\"{\"", "Statement", "+", "\"}\""]}, {"lPart": "Statement", "rPart": ["Assignment", "delimiter", "|", "Return", "|", "Condition", "|", "Switch", "|", "Loop", "|", "FunctionCallStatement"]}, {"lPart": "Assignment", "rPart": ["Type", "?", "id", "\"<-\"", "Expr"]}, {"lPart": "Expr", "rPart": ["UnaryOperator", "?", "ExprVariant", "(", "Operator", "ExprVariant", ")", "?"]}, {"lPart": "ExprVariant", "rPart": ["id", "|", "Const", "|", "(", "\"(\"", "Expr", "\")\"", ")", "|", "FunctionCall"]}, {"lPart": "Return", "rPart": ["\"return\"", "Expr", "?", "delimiter"]}, {"lPart": "Condition", "rPart": ["CondIf", "CondElseIf", "CondElse"]}, {"lPart": "CondIf", "rPart": ["\"?\"", "Expr", "(", "Statement", "|", "DefaultScope", ")"]}, {"lPart": "CondElseIf", "rPart": ["\"?:\"", "Expr", "(", "Statement", "|", "DefaultScope", ")"]}, {"lPart": "CondElseIf", "rPart": ["~", "\"?:\""]}, {"lPart": "CondElse", "rPart": ["\":\"", "(", "Statement", "|", "DefaultScope", ")"]}, {"lPart": "CondElse", "rPart": ["~", "\":\""]}, {"lPart": "Switch", "rPart": ["\"??\"", "Expr", "\"{\"", "SwitchCase", "+", "SwitchDefault", "?", "\"}\""]}, {"lPart": "SwitchCase", "rPart": ["\"?=\"", "Const", "\":\"", "Statement", "*", "Quit", "?"]}, {"lPart": "SwitchDefault", "rPart": ["\"?~\"", "\":\"", "Statement", "*", "Quit", "?"]}, {"lPart": "Quit", "rPart": ["\"quit\"", "delimiter"]}, {"lPart": "Loop", "rPart": ["\"loop\"", "LoopScope", "\"until\"", "Expr"]}, {"lPart": "LoopScope", "rPart": ["\"{\"", "LoopStatement", "+", "\"}\""]}, {"lPart": "LoopStatement", "rPart": ["Statement", "|", "Retire"]}, {"lPart": "Retire", "rPart": ["\"retire\"", "delimiter"]}, {"lPart": "Function", "rPart": ["FunctionHead", "DefaultScope"]}, {"lPart": "FunctionHead", "rPart": ["id", "\"(\"", "(", "(", "Type", "id", ")", "(", "\",\"", "Type", "id", ")", "*", ")", "?", "\")\"", "\"ret\"", "Type"]}, {"lPart": "FunctionCallStatement", "rPart": ["FunctionCall", "delimiter"]}, {"lPart": "FunctionCall", "rPart": ["\"F:\"", "id", "FunctionCallArgs"]}, {"lPart": "FunctionCallArgs", "rPart": ["\"(\"", "(", "(", "Expr", ")", "(", "\",\"", "Expr", ")", "*", ")", "?", "\")\""]}, {"lPart": "FunctionCallArgs", "rPart": ["~", "\"(\""]}], "extension": ""}}},
{"FIO":"Сарыглар Ч.Ш.","Collection":"123154353",{"_id": {"$oid": "67c6e3f8af563521c9d5bb56"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsRDCode", "saving": "-3", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67c6fa74af563521c9d5bba8"}, "rules": "Пример1", "data": {"rList": [{"lPart": "id", "rPart": ["[$]", "(", "[0-9]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]", "+"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67c6fad3af563521c9d5bbaf"}, "rules": "lab1", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "(", "[0-9]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]", "+"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord\n"}}{"_id": {"$oid": "67c72731af563521c9d5bcb4"}, "rules": "l1", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "(", "[0-9]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]", "+"]}, {"lPart": "Const", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[0-9]", "+", "[.]", "[0-9]", "*", ")", "|", "(", "[0-9]", "*", "[.]", "[0-9]", "+", ")"]}, {"lPart": "Const", "rPart": ["(", "[\"]", "[ -!#-~]", "*", "[\"]", ")", "|", "(", "[']", "[ -&(-~]", "?", "[']", ")"]}, {"lPart": "Delimiter", "rPart": ["[;]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "SignOfOperation", "rPart": ["[-+*/]"]}], "extension": "var ignoreLastWord\n"}}{"_id": {"$oid": "67db257ce0b22203e7cc1a57"}, "rules": "lab2", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "[0-9]", "{1,4}", "[a-zA-Z]", "+"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "сonstChar", "rPart": [":", "(", "[\"]", "[]", "+", "[\"]", ")", "|", "(", "[']", "(", "[]", "|", "[ \\r\\n\\t]", ")", "[']", ")"]}, {"lPart": "format", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "comm", "rPart": ["[//]", "[//]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "brackets", "rPart": ["(", "[{]", "[]", "+", "[}]", ")", "|", "(", "[(]", "[]", "+", "[)]", ")"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "delimetr", "rPart": ["[;,:]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}], "extension": "var ignoreLastWord\n"}}{"_id": {"$oid": "67dbafd9e0b22203e7cc1bf6"}, "rules": "lab2T", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "(", "[0-9]", "[0-9]", "?", "[0-9]", "?", "[0-9]", "?", ")", "[a-zA-Z]", "+"]}, {"lPart": "const", "rPart": ["(", "[4]", "[x]", "[0-1]", "+", ")", "|", "(", "[8]", "[x]", "[0-3]", "+", ")", "|", "(", "[1]", "[x]", "[0-9]", "+", ")"]}, {"lPart": "const", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "+"]}, {"lPart": "const", "rPart": [":", "[0-9]", "+"]}, {"lPart": "const", "rPart": [":", "[\"]", "(", "[]", "|", "(", "[\\\\]", "['nrt\\\\]", "|", "[\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "const", "rPart": [":", "[']", "(", "[]", "|", "(", "[\\\\]", "['nrt\\\\]", "|", "[\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "[']"]}, {"lPart": "space", "rPart": ["[ \\r\\t\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "binaryop", "rPart": ["(", "[+*/]", "[=]", "?", ")", "|", "(", "[><]", "[=]", "?", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[=]", "[=]", ")"]}, {"lPart": "logic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "somebinaryop", "rPart": ["[-]"]}, {"lPart": "unaryop", "rPart": ["[!]"]}, {"lPart": "brackets", "rPart": ["[(){}]"]}, {"lPart": "keyword", "rPart": ["(", "(", "[?]", "[?]", ")", "|", "(", "[?]", "[=]", ")", "|", "(", "[?]", "[~]", ")", "|", "(", "[=]", "[>]", ")", "|", "(", "[;]", ")", "|", "(", "[:]", ")", ")", "|", "(", "[a-z]", "+", ")"]}], "extension": "var ignoreLastWord\n"}}{"_id": {"$oid": "680001088558742cb43373b9"}, "rules": "lab3", "data": {"rList": [{"lPart": "Id", "rPart": ["[$]", "[0-9]", "{1,4}", "[a-zA-Z]", "+"]}, {"lPart": "ConstInt", "rPart": ["(", "[0]", "[f]", "[0-3]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "ConstFloat", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "сonst", "rPart": ["[']", "(", "[]", "|", "[\\\\]", "['nrt\\\\]", "|", "[\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F )) [']", ")"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "operation", "rPart": ["[-+*/]"]}, {"lPart": "comment", "rPart": ["(", "[/]", "[/]", "[]", "*", "[\\n]", "?", ")", "|", "(", "[/]", "[*]", "(", "[]", "|", "[*]", ")", "*", "[*]", "[/]", "[\\n]", "?", ")", "+", "{ignoreLastWord=true;}"]}, {"lPart": "сonst", "rPart": ["[\"]", "(", "[]", "|", "[\\\\]", "['nrt\\\\]", "|", "[\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F )) [\"]", ")"]}, {"lPart": "keywords", "rPart": ["[a-z]", "+"]}, {"lPart": "logic", "rPart": ["[|]", "[|]", "|", "[&]", "[&]"]}, {"lPart": "delimetr", "rPart": ["[;,:]"]}, {"lPart": "compare", "rPart": ["(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<>]", "[=]", "?", ")"]}], "extension": "var ignoreLastWord\n"}}},
{"FIO":"Грошев Д.Д.","Collection":"355111342",{"_id": {"$oid": "67b839a7ce6dd03692d08b99"}, "tune": {"language": "js", "scanner": "lexAsTable", "parser": "SyntAsLRxTable", "saving": "-2", "deltat": 0, "assist": 1}}{"_id": {"$oid": "67b83c9ece6dd03692d08bb3"}, "rules": "Sample8", "data": {"rList": [{"lPart": "Program", "rPart": ["Function", "+", "{toPseudoCode(); run();}"]}, {"lPart": "Function", "rPart": ["{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);userSignTbl.push(this.currentLexem[1]);}", "id", "\"(\"", "(", "{typeTbl.push(this.currentLexem[1]);}", "Type", "{idTbl.push(this.currentLexem[1]);}", "id", ")", "?", "\")\"", "\"{\"", "Operator", "+", "{toPFR(\"testReturn\");}", "\"}\""]}, {"lPart": "Type", "rPart": ["\"int\"", "|", "\"real\"", "|", "\"char\""]}, {"lPart": "Operator", "rPart": ["{toPFR(this.currentLexem[1]);}", "id", "\"=\"", "Expr", "{while(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop()); toPFR(\"=\");}", "\";\""]}, {"lPart": "Operator", "rPart": ["{ctlStk.push(++operatorCnt);}", "\"if\"", "\"(\"", "Expr", "{toPFR(\"LifElse\"+peek(ctlStk));toPFR(\"jmpOnFalse\");}", "\")\"", "BlockOrOperator", "{toPFR(\"LifExit\"+peek(ctlStk));toPFR(\"jmp\"); toPFR(\"LifElse\"+peek(ctlStk)+\":\");}", "PartElse", "{toPFR(\"LifExit\"+ctlStk.pop()+\":\");}"]}, {"lPart": "Operator", "rPart": ["{curType=this.currentLexem[1];typeTbl.push(curType);}", "Type", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", "(", "\",\"", "{idTbl.push(this.currentLexem[1]);toPFR(this.currentLexem[1]);toPFR(curType);toPFR(\"defVar\")}", "id", "(", "{toPFR(peek(idTbl));}", "\"=\"", "{toPFR(this.currentLexem[1]);}", "const", "{toPFR(\"=\");}", ")", "?", ")", "*", "\";\""]}, {"lPart": "Operator", "rPart": ["\"return\"", "Expr", "\";\"", "{hasReturn=true;toPFR(\"return\");}"]}, {"lPart": "Expr", "rPart": ["(", "{toPFR(\"0\");opStk.push(this.currentLexem[1]);}", "minus", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BlockOrOperator", "rPart": ["Operator", "|", "(", "\"{\"", "Operator", "+", "\"}\"", ")"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "BlockOrOperator"]}, {"lPart": "PartElse", "rPart": ["~", "\"else\""]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(this.currentLexem[1]);}", "id", "(", "\"(\"", "Expr", "\")\"", ")", "?", "{toPFR(opStk.pop());}"]}, {"lPart": "BegExpr", "rPart": ["{toPFR(this.currentLexem[1]);}", "const"]}, {"lPart": "BegExpr", "rPart": ["{opStk.push(\"(\");}", "\"(\"", "Expr", "{if((opStk.length > 0) && (peek(opStk) == \"(\")) opStk.pop();}", "\")\""]}, {"lPart": "EndExpr", "rPart": ["{if((opStk.length > 0) && (getPriority(peek(opStk)) >= getPriority(this.currentLexem[1]))) toPFR(opStk.pop());}", "Sign", "Expr", "{if(opStk.length > 0) if(peek(opStk) == \"(\") opStk.pop(); else toPFR(opStk.pop());}"]}, {"lPart": "Sign", "rPart": ["(", "{opStk.push(this.currentLexem[1]);}", "sign", ")", "|", "(", "{opStk.push(this.currentLexem[1]);}", "minus", ")"]}, {"lPart": "space", "rPart": ["[ \\t\\r\\n]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["(", "[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?", ")", "|", "(", "[3]", "[x]", "[0-2]", "+", ")", "|", "(", "[']", "[]", "[']", ")"]}, {"lPart": "id", "rPart": ["[a-z]", "+"]}, {"lPart": "sign", "rPart": ["[+*/><]", "|", "(", "[<>!]", "[=]", ")"]}, {"lPart": "minus", "rPart": ["[-]"]}], "extension": "//Этот пример работоспособен только в нисходящем парсере, восходящий выполняет действия не так, как хотелось бы\n//пример формирования ПФЗ, преобразования ПФЗ в псевдокод, некоторых элементов семантического анализа и интерпретации псевдокода\n//вот возможный пример правильного текста для тестирования:\n//int f( real a ){ char c; if( a > 3.14 ) c=3x201; else c='%'; return c; }\n//а вот пример текста с семантическими ошибками\n//int f( real a ){ char c; if( a > 3.14) x=3x201; else c=-a; }\n\nvar ignoreLastWord;\nvar startForRun; //позиция в массиве tracer.history, с которой надо начинать интерпретацию\nvar curType=\"\"; // для временного хранения типа данных в множественных объявлениях\nvar opStk = []; //постфиксная форма записи транслируемой программы\nvar operatorCnt=0; //счетчик управляющих операторов, для которых в ПФЗ нужно формировать уникальные метки\nvar ctlStk=[]; //стек номеров управляющих операторов для формирования уникальных меток\nvar onStk=[]; //стек номеров веток переключателей для формирования уникальных меток\nvar operandStk=[]; //стек имен операндов для формирования операторов псевдокода\nvar userSignTbl=[\"return\",\"defVar\"]; //таблица имен функций как знаков операций, объявляемых пользователем\nvar idTbl = [\"return\",\"defVar\"]; //таблица идентификаторов\nvar valTbl=[0,0]; //параллельная таблица текущих значений переменных\nvar typeTbl = [\"\",\"\"]; //параллельная таблица типов переменных (тип данных \"\" будет означать \"любой\", \n //но для оператора return - тот, с которым объявлена функция, как и для defVar - тот, который является вторым ее операндом)\nvar hasReturn=false;\n\n\nfunction Tracer(){\n this.history = [];\n};\nTracer.prototype = {\nput: function(b){\n this.history.push(b);\n},\ngetAll: function(){\n var r = \"\";\n for(var i = 0; i < this.history.length; i++)\n  r += \" \" + this.history[i];\n return r;\n},\nclear: function(){\nthis.history = [];\n}\n};\nvar tracer = new Tracer();\n\nfunction clear(){\n tracer.history = [];\n opStk = [];\n ctlStk=[];\n onStk=[];\n userSignStk=[];\n operandStk=[];\n idTbl=[];\n typeTbl=[];\n operatorCnt=0;\n}\n\nfunction toPFR(x) {\n tracer.put(x);\n}\n\nfunction peek(o) {\n return o[o.length - 1];\n}\n\nfunction getPriority(s) {\n if(s == \"(\") return 0;\n if(s == \">\") return 3;\n if(s == \"+\") return 5;\n if(s == \"-\") return 5;\n if(s == \"*\") return 10;\n if(s == \"/\") return 10;\n return 0;\n}\n\nfunction toPseudoCode(){\n toPFR(\"\\n\\n\");\n toPFR(\"Псевдокод:\\n\");\n var label=false;\n var expr=false;\n var lim=tracer.history.length;\n startForRun=lim+1;\n for(var i=0;i<lim;i++){\n  var word=tracer.history[i];\n  var type=getType(word);\n  if((type==0)&&(userSignTbl.indexOf(word)>=0))\n   type=5;\n  if(type===0) //имя переменной или метка\n   if(word.indexOf(\":\")>0){\n    label=true;\n    toPFR(\"\\n\");\n    toPFR(word);\n   }else{\n    if(word.search(/[a-zA-Z]/)==0){\n     if((idTbl.indexOf(word)<0)&&([\"char\",\"int\",\"real\"].indexOf(word)<0)&&(word.search(/[A-Z]/)<0)){\n      startForRun=-1;\n      toPFR(\"\\nНеобъявленная переменная: '\"+word+\"'\\n\");\n     }\n     if(word===\"testReturn\"){\n      if(!hasReturn){\n       toPFR(\"\\nВ теле функции нет оператора возврата значения\")\n       startForRun=-1;\n      }else\n       hasReturn=false;\n     }else\n      operandStk.push(word);\n    }else\n     operandStk.push(constToInt(word));\n   }\n  if(type===5){ //имя функции\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   operandStk.push(\"STACK\");\n  }\n  if((type===10)||(type===11)){\n   expr=true;\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(\"move\");\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n   toPFR(\"\\n\");\n   toPFR(\"_\");\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(\"STACK\");\n  }\n  if(type==20){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(\"move\");\n   toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type==30){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   toPFR(operandStk.pop());\n   toPFR(operandStk.pop());\n  }\n  if((type==40)||(type==41)){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   toPFR(word);\n   if(type===40)\n    toPFR(\"---\");\n   else\n    toPFR(\"STACK\");\n   toPFR(operandStk.pop());\n   expr=false;\n  }\n  if(type===50){\n   if(label===false){\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }else\n    label=false;\n   if(!expr){\n    toPFR(\"move\");\n    toPFR(operandStk.pop());\n    toPFR(\"STACK\");\n    toPFR(\"\\n\");\n    toPFR(\"_\");\n   }\n   toPFR(word);\n   toPFR(\"STACK\");\n   toPFR(\"---\");\n   expr=false;\n  }\n }\n}\n\nfunction getType(w){\n  switch (w) {\n   case \"+\":\n   case \"-\":\n   case \">\":\n    return 10; //знак арифметической операции\n   case \"==\":\n    return 11; //знак операции сравнения\n   case \"=\":\n    return 20; //знак операции присваивания\n   case \"defVar\":\n    return 30; //знак операции объявления переменной\n   case \"jmp\":\n    return 40; //знак операции безусловной передачи управления\n   case \"jmpOnFalse\":\n    return 41; //знак операции передачи управления по условию\n   case \"return\":\n    return 50; //знак операции значения управления из функции\n// ...\n  }\n  return 0;\n}\n\nfunction constToInt(w){\n if(w.substring(0,2)===\"3x\"){\n  var val=0, base=1;\n  for(var i=w.length-1;i>1;i-=1){\n   val+=base*(w.charAt(i)-'0');\n   base*=3;\n  }\n  if(val===0)\n   return \"0\";\n  var rez=\"\";\n  while(val>0){\n   rez=(\"\"+val%10)+rez;\n   val=(val-val%10)/10;\n  }\n  return rez;\n }else\n  return w;\n}\nfunction run(){\n if(startForRun<0){\n  toPFR(\"\\n\\nТестируемая программа содержит ошибки, интерпретация ее невозможна.\");\n  return;\n }\n toPFR(\"\\n\\nРезультаты выполнения операторов псевдокода\");\n toPFR(\"\\n(только в примере, в курсовой работе это формировать не нужно)\\n\");\n var pCode=tracer.history;\n var lim=pCode.length;\n var stack=[];\n var ind,rez;\n for(var i=startForRun;i<lim;i+=5){\n  var codeOp=pCode[i+1];\n  var jmpCondition=true;\n  switch (codeOp){\n   case \">\":\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     rez=valTbl[ind]>stack.pop()?true:false;\n    else\n     rez=pCode[i+2]>stack.pop()?true:false;\n    stack.push(rez);\n    toPFR(rez);\n    toPFR(\"\\n\");\n    break;\n   case \"move\":\n    if(pCode[i+3]===\"STACK\")\n     stack.push(pCode[i+2]);\n    else{\n     var j=idTbl.indexOf(pCode[i+3]);\n     if(j<0){\n      toPFR(\"\\nПопытка записи в несуществующую переменную \"+pCode[i+3]);\n      return;\n     }\n     valTbl[j]=pCode[i+2];\n    }\n    ind=idTbl.indexOf(pCode[i+2]);\n    if(ind>=0)\n     toPFR(valTbl[ind]);\n    else if(pCode[i+2]===\"STACK\")\n     toPFR(peek(stack));\n    else\n     toPFR(pCode[i+2]);\n    toPFR(\"\\n\");\n    break;\n   case \"jmpOnFalse\":\n    jmpCondition=!stack.pop();\n   case \"jmp\":\n    if(jmpCondition){\n     i=pCode.lastIndexOf(pCode[i+3]+\":\")-5;\n     if(i<0){\n      toPFR(\"\\nПередача управления на несуществующую метку.\")\n      return;\n     }\n    }\n    break;\n  }\n }\n}\n"}}{"_id": {"$oid": "67b83cb2ce6dd03692d08bb6"}, "rules": "noName", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]"]}], "extension": ""}}{"_id": {"$oid": "67b841f5ce6dd03692d08bf4"}, "rules": "lab1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "realint", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "tetr", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "operation", "rPart": ["[-+*/!]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67ce93faaf563521c9d5d040"}, "rules": "lab2", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "realint", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "+", ")", "?"]}, {"lPart": "char", "rPart": ["[']", "[]", "[']"]}, {"lPart": "string", "rPart": ["[\\\"]", "[]", "*", "[\\\"]"]}, {"lPart": "tetr", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "operation", "rPart": ["[-+*/!]"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "type", "rPart": ["\"realint\"", "|", "\"char\"", "|", "\"string\"", "|", "\"bin\"", "|", "\"tetr\""]}, {"lPart": "Expr", "rPart": ["(", "id", "|", "const", ")", "(", "operation", "Expr", ")", "?"]}, {"lPart": "logicExp", "rPart": ["(", "id", "|", "const", ")", "LogicOp", "(", "id", "|", "const", ")"]}, {"lPart": "assign", "rPart": ["\"Put\"", "Expr", "\"To\"", "(", "id", "|", "function", ")", "delimeter"]}, {"lPart": "cond", "rPart": ["\"By\"", "\"(\"", "logicExp", "\")\"", "\"{\"", "block", "\"}\"", "(", "condElse", ")", "?"]}, {"lPart": "const", "rPart": ["realint", "|", "char", "|", "string", "|", "tetr", "|", "bin"]}, {"lPart": "loop", "rPart": ["\"Exec\"", "\"{\"", "loopBlock", "\"}\"", "\"With\"", "id", "\"From\"", "const", "\"To\"", "const", "(", "\"Step\"", "const", ")", "?"]}, {"lPart": "block", "rPart": ["(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "cond", "|", "exit", ")", "(", "block", ")", "?"]}, {"lPart": "condElse", "rPart": ["\"Else\"", "\"{\"", "block", "\"}\""]}, {"lPart": "function", "rPart": ["(", "type", ")", "?", "\"(\"", "(", "argList", ")", "?", "\")\"", "\"{\"", "block", "\"Return\"", "Expr", "delimeter", "\"}\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "Operator", "rPart": ["assign", "|", "cond", "|", "switch", "|", "function", "|", "loop"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}, {"lPart": "exit", "rPart": ["\"Exit\"", "delimeter"]}, {"lPart": "loopBlock", "rPart": ["(", "assign", "|", "Expr", "|", "loop", "|", "switch", "|", "exit", "|", "cond", ")", "(", "loopBlock", ")", "?"]}, {"lPart": "switch", "rPart": ["\"Select\"", "Expr", "switchBody", "(", "\"Case(False)\"", "block", ")", "?", "\"End\""]}, {"lPart": "switchBody", "rPart": ["\"Case\"", "const", "block", "(", "break", ")", "?", "(", "switchBody", ")", "?"]}, {"lPart": "break", "rPart": ["\"Break\"", "delimeter"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "680cf1aa8558742cb4339c6a"}, "rules": "lab3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-z]", "(", "[0-9a-zA-Z]", ")", "*"]}, {"lPart": "delimeter", "rPart": ["[;]"]}, {"lPart": "UnaryOp", "rPart": ["[!]"]}, {"lPart": "UnaryBinOp", "rPart": ["[-]"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "*"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "(", "[\"]", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "(", "[']", "|", "[d]", "[0-9]", "[0-9]", "?", "[0-9]", "?", ")", ")", ")", "*", "[']"]}, {"lPart": "bin", "rPart": ["[2]", "[x]", "[01]", "+"]}, {"lPart": "tetr", "rPart": ["[4]", "[x]", "[0-3]", "+"]}, {"lPart": "LogicOp", "rPart": ["[<>]", "|", "(", "[<>!=]", "[=]", ")", "|", "(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "operation", "rPart": ["[-+*/%]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "comment", "rPart": ["[/]", "[/]", "[]", "*", "[\\n]", "{ignoreLastWord=true;}"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\"", "|", "\"void\""]}, {"lPart": "function", "rPart": ["type", "?", "\"(\"", "(", "argList", ")", "?", "\")\"", "OB"]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "argList", ")", "?"]}, {"lPart": "assign", "rPart": ["\"Put\"", "Expr", "\"To\"", "(", "id", "|", "function", ")", "delimeter"]}, {"lPart": "breakOp", "rPart": ["(", "\"break\"", "|", "\"exit\"", ")", "delimeter"]}, {"lPart": "Operator", "rPart": ["assign", "|", "cond", "|", "switch", "|", "function", "|", "loop", "|", "return", "|", "FuncCall", "|", "declaration"]}, {"lPart": "OB", "rPart": ["(", "\"{\"", "Operator", "\"}\"", ")", "|", "Operator"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "char", "|", "string", "|", "bin", "|", "tetr"]}, {"lPart": "declaration", "rPart": ["type", "id", "(", "\",\"", "id", ")", "*", "delimeter"]}, {"lPart": "cond", "rPart": ["\"by\"", "Expr", "\"{\"", "OB", "\"}\"", "condElse", "?"]}, {"lPart": "condElse", "rPart": ["\"else\"", "\"{\"", "OB", "\"}\""]}, {"lPart": "Expr", "rPart": ["(", "UnaryBinOp", "|", "UnaryOp", ")", "?", "BegExpr", "(", "EndExpr", ")", "?"]}, {"lPart": "BegExpr", "rPart": ["const", "|", "function", "|", "id", "(", "(", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", ")", "?", ")", "|", "(", "\"(\"", "Expr", "\")\"", ")"]}, {"lPart": "EndExpr", "rPart": ["(", "UnaryBinOp", "|", "operation", "|", "LogicOp", ")", "Expr"]}, {"lPart": "return", "rPart": ["\"return\"", "Expr", "?", "delimeter"]}, {"lPart": "switch", "rPart": ["\"select\"", "Expr", "(", "\"case\"", "\"(\"", "(", "const", "|", "\"false\"", ")", "\")\"", "OB", "*", ")", "*", "\"end\""]}, {"lPart": "FuncCall", "rPart": ["id", "\"(\"", "Expr", "?", "(", "\",\"", "Expr", ")", "*", "\")\"", "delimeter"]}, {"lPart": "loop", "rPart": ["\"exec\"", "OB", "\"with\"", "id", "\"from\"", "const", "\"to\"", "const", "(", "\"step\"", "const", ")", "?"]}, {"lPart": "Program", "rPart": ["Operator", "+"]}], "extension": "var ignoreLastWord;"}}},
{"FIO":"Юркевич М.Н.","Collection":"443151535",{"_id": {"$oid": "67b3e7a7ce6dd03692d081c8"}, "tune": {"language": "js", "scanner": "lexAsGraph", "parser": "SyntAsLRxTable", "saving": "+4", "deltat": 3000, "assist": 1}}{"_id": {"$oid": "67bd5574af563521c9d5912e"}, "rules": "Правила", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]", "[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "+", "[.]"]}, {"lPart": "float", "rPart": ["[.]", "[0-9]", "+"]}, {"lPart": "strconst", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "charconst", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "signOfOperation", "rPart": ["[-+*/]"]}, {"lPart": "space", "rPart": ["[ \\r\\n\\t]", "+", "{ignoreLastWord=true;}"]}], "extension": "var ignoreLastWord"}}{"_id": {"$oid": "67bd5d46af563521c9d59157"}, "rules": "Правила1", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "const", "rPart": ["(", "[0]", "[b]", "[0-1]", "+", ")", "|", "(", "[0]", "[o]", "[0-7]", "+", ")", "|", "(", "[0-9]", "+", ")"]}, {"lPart": "float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "str", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "mathOperator", "rPart": ["[-+*/]"]}, {"lPart": "comments", "rPart": ["[#]", "[]", "*", "[\\n]"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "statement", "rPart": ["\"set(\"", "(", "id", "|", "const", "|", "char", "|", "str", "|", "float", ")", "\",\"", "id", "\");\""]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e238414635a960233ad66f"}, "rules": "Лаб3", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "int2", "rPart": ["[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int8", "rPart": ["[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int10", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["[!]"]}, {"lPart": "binLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comments", "rPart": ["[#]", "[]", "*"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["int2", "|", "int8", "|", "int10", "|", "float", "|", "string", "|", "char"]}, {"lPart": "un", "rPart": ["unLogic", "|", "unMath"]}, {"lPart": "bin", "rPart": ["binMath", "|", "compare", "|", "binLogic"]}, {"lPart": "expression", "rPart": ["beginExpr", "endExpr"]}, {"lPart": "beginExpr", "rPart": ["un", "?", "(", "id", "|", "const", "|", "\"(\"", "expression", "\")\"", ")"]}, {"lPart": "endExpr", "rPart": ["(", "(", "bin", "|", "un", ")", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["(", "\"set\"", "\"(\"", "expression", "\",\"", "id", "\")\"", "\";\"", ")", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67e351de4635a960233add67"}, "rules": "Лаб4", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "int", "rPart": ["[0]", "[b]", "[0-1]", "+", "|", "[0]", "[o]", "[0-7]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["[!]"]}, {"lPart": "binLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "string", "|", "char"]}, {"lPart": "bin", "rPart": ["binMath", "|", "compare", "|", "binLogic"]}, {"lPart": "expression", "rPart": ["beginExpr", "endExpr"]}, {"lPart": "beginExpr", "rPart": ["(", "(", "unLogic", "+", ")", "|", "(", "unMath", "+", ")", ")", "?", "(", "id", "|", "const", ")"]}, {"lPart": "endExpr", "rPart": ["(", "(", "bin", "|", "unMath", ")", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "int", "\",\"", "id", "\")\""]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "switch", "|", "loop", "|", "condition", ")", "\";\""]}, {"lPart": "operators", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "operators", "\"until\"", "\"(\"", "expression", "\")\""]}, {"lPart": "condition", "rPart": ["\"by\"", "\"(\"", "expression", "\")\"", "(", "operator", "|", "operators", ")", "(", "\"else\"", "(", "operator", "|", "operators", ")", ")", "?"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "switchCase", "+", "\"end\""]}, {"lPart": "switchCase", "rPart": ["\"case\"", "\"(\"", "const", "|", "false", "\")\"", "operator", "*", "\"break\"", "\";\""]}, {"lPart": "false", "rPart": ["\"false\""]}, {"lPart": "program", "rPart": ["operator", "+"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "67f4ef798558742cb4333801"}, "rules": "Sample4", "data": {"rList": [{"lPart": "Expr", "rPart": ["BegExpr", "AddPart"]}, {"lPart": "id", "rPart": ["[a-z]", "[a-zA-Z]", "*", "[0-9]", "*"]}, {"lPart": "const", "rPart": ["[0-9]", "+", "(", "[.]", "[0-9]", "*", ")", "?"]}, {"lPart": "space", "rPart": ["[ \\t]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["[']", "[]", "[']"]}, {"lPart": "BegExpr", "rPart": ["Term", "MultPart"]}, {"lPart": "AddPart", "rPart": ["(", "(", "\"+\"", "|", "\"-\"", ")", "Expr", ")", "?"]}, {"lPart": "Term", "rPart": ["id", "|", "const"]}, {"lPart": "Term", "rPart": ["\"(\"", "Expr", "\")\""]}, {"lPart": "MultPart", "rPart": ["(", "(", "\"*\"", "|", "\"/\"", ")", "BegExpr", ")", "?"]}, {"lPart": "Operator", "rPart": ["id", "\"=\"", "Expr", "\";\""]}, {"lPart": "Operator", "rPart": ["\"if\"", "\"(\"", "Expr", "\")\"", "Operator", "PartElse"]}, {"lPart": "PartElse", "rPart": ["\"else\"", "Operator"]}], "extension": "var ignoreLastWord;\n"}}{"_id": {"$oid": "68077e8b8558742cb433826a"}, "rules": "Лаб5", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "int", "rPart": ["[0]", "[o]", "[0-7]", "+", "|", "[0]", "[b]", "[0-1]", "+"]}, {"lPart": "int", "rPart": ["[0-9]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["[!]"]}, {"lPart": "binLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "string", "|", "char"]}, {"lPart": "bin", "rPart": ["binMath", "|", "compare", "|", "binLogic"]}, {"lPart": "un", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "expression", "rPart": ["beginExpr", "endExpr"]}, {"lPart": "beginExpr", "rPart": ["un", "?", "(", "const", "|", "id", ")"]}, {"lPart": "endExpr", "rPart": ["(", "(", "bin", "|", "unMath", ")", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "expression", "\",\"", "id", "\")\""]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "switch", "|", "loop", "|", "condition", "|", "return", ")"]}, {"lPart": "operator", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "switchCase", "+", "\"end\""]}, {"lPart": "switchCase", "rPart": ["\"case\"", "\"(\"", "(", "expression", "|", "\"false\"", ")", "\")\"", "operator", "break"]}, {"lPart": "break", "rPart": ["\"break\"", "\";\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "operator", "+", "retire", "?", "\"until\"", "\"(\"", "expression", "\")\""]}, {"lPart": "condition", "rPart": ["\"by\"", "\"(\"", "expression", "\")\"", "operator", "+", "else"]}, {"lPart": "else", "rPart": ["\"else\"", "operator"]}, {"lPart": "retire", "rPart": ["\"retire\"", "\";\""]}, {"lPart": "argList", "rPart": ["type", "id", "(", "\",\"", "type", "id", ")", "*"]}, {"lPart": "paramsList", "rPart": ["id", "|", "const", "(", "\",\"", "id", "|", "const", ")", "*"]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"char\"", "|", "\"string\""]}, {"lPart": "function", "rPart": ["\"function\"", "\"(\"", "argList", "?", "\")\"", "\"{\"", "operator", "*", "\"}\"", "\"-\"", "\">\"", "id"]}, {"lPart": "program", "rPart": ["function", "+"]}, {"lPart": "return", "rPart": ["\"return\"", "id", "|", "const"]}], "extension": "var ignoreLastWord;"}}{"_id": {"$oid": "6819a0d58558742cb433be10"}, "rules": "Лаб5Рез", "data": {"rList": [{"lPart": "id", "rPart": ["[a-zA-Z]", "+", "[0-9]", "{,3}"]}, {"lPart": "int", "rPart": ["[0]", "[o]", "[0-7]", "+", "|", "[0-9]", "+", "|", "[0]", "[b]", "[0-1]", "+"]}, {"lPart": "float", "rPart": ["[0-9]", "*", "[.]", "[0-9]", "*"]}, {"lPart": "string", "rPart": ["[\"]", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "*", "[\"]"]}, {"lPart": "char", "rPart": ["[']", "(", "[]", "|", "(", "[\\\\]", "[\"'\\\\]", ")", "|", "(", "[\\\\]", "[x]", "[0-9a-fA-F]", "[0-9a-fA-F]", ")", ")", "?", "[']"]}, {"lPart": "unMath", "rPart": ["[-+]"]}, {"lPart": "binMath", "rPart": ["[*/]"]}, {"lPart": "compare", "rPart": ["(", "[<>]", ")", "|", "(", "[=]", "[=]", ")", "|", "(", "[!]", "[=]", ")", "|", "(", "[<]", "[=]", ")", "|", "(", "[>]", "[=]", ")"]}, {"lPart": "unLogic", "rPart": ["[!]"]}, {"lPart": "binLogic", "rPart": ["(", "[&]", "[&]", ")", "|", "(", "[|]", "[|]", ")"]}, {"lPart": "comments", "rPart": ["[/]", "[*]", "(", "[]", "|", "(", "[*]", "[]", ")", ")", "*", "[*]", "[/]", "{ignoreLastWord=true;}"]}, {"lPart": "space", "rPart": ["[ \\n\\t\\r]", "+", "{ignoreLastWord=true;}"]}, {"lPart": "const", "rPart": ["int", "|", "float", "|", "string", "|", "char"]}, {"lPart": "bin", "rPart": ["binMath", "|", "compare", "|", "binLogic"]}, {"lPart": "un", "rPart": ["unMath", "|", "unLogic"]}, {"lPart": "expression", "rPart": ["beginExpr", "endExpr"]}, {"lPart": "beginExpr", "rPart": ["un", "?", "(", "const", "|", "\"(\"", "expression", "\")\"", ")"]}, {"lPart": "endExpr", "rPart": ["(", "(", "bin", "|", "unMath", ")", "expression", ")", "?"]}, {"lPart": "assign", "rPart": ["\"set\"", "\"(\"", "expression", "\",\"", "id", "\")\""]}, {"lPart": "operator", "rPart": ["(", "assign", "|", "loop", "|", "switch", "|", "condition", ")"]}, {"lPart": "operator", "rPart": ["\"{\"", "operator", "*", "\"}\""]}, {"lPart": "type", "rPart": ["\"int\"", "|", "\"float\"", "|", "\"string\"", "|", "\"char\""]}, {"lPart": "loop", "rPart": ["\"loop\"", "operator", "\"until\"", "\"(\"", "expression", "\")\""]}, {"lPart": "condition", "rPart": ["\"by\"", "\"(\"", "expression", "\")\"", "operator", "(", "\"else\"", "operator", ")", "?"]}, {"lPart": "program", "rPart": ["operator", "+"]}, {"lPart": "switch", "rPart": ["\"select\"", "expression", "switchCase", "+", "\"end\""]}, {"lPart": "switchCase", "rPart": ["\"case\"", "\"(\"", "const", "|", "\"false\"", "\")\"", "operator", "*", "break"]}, {"lPart": "break", "rPart": ["\"break\"", "\";\""]}], "extension": "var ignoreLastWord;"}}}